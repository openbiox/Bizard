[
  {
    "objectID": "Template/contribution_0323.html",
    "href": "Template/contribution_0323.html",
    "title": "中文",
    "section": "",
    "text": "先建图表征集issue，进行审核确定：\n\n根据目标任务确定执行的可视化图表类型。\n\n分别按图表建issue让成员列资料\n\n确定创建可视化教程所需的生物医学数据类型；\n根据可视化应用场景优化教程撰写的侧重点（eg. 需要着重介绍的函数/参数、是否要加入常用统计学分析）。\n\n分配成员申领完成\n完成图文撰写需要遵循项目文档规范\n\n参考根据现有可视化教程制作的qmd文档撰写；\n主要模块：可视化图表及其应用场景介绍、环境配置、基础绘图代码、进阶绘图代码、生物医学领域应用（及复现）……\n\n翻译任务的申领和处理"
  },
  {
    "objectID": "Ranking/VennPlot.html",
    "href": "Ranking/VennPlot.html",
    "title": "韦恩图",
    "section": "",
    "text": "对于Venn图的可视化，常用的R包有ggVennDiagram和VennDiagram包，相比于VennDiagram包而言ggVennDiagram具有适用于更多分组、可以适配ggplot2语法和可以灵活设置的输出格式等优点，学习和后期处理更简单。然而ggVennDiagram的集合颜色只能设置为与元素个数相关的连续型渐变色，不能设置为每个集合一种颜色的离散型色彩，VennDiagram则恰好相反，因此可以根据具体需求选择需要使用哪个R包进行绘图。",
    "crumbs": [
      "Ranking",
      "VeenPlot"
    ]
  },
  {
    "objectID": "Ranking/VennPlot.html#示例",
    "href": "Ranking/VennPlot.html#示例",
    "title": "韦恩图",
    "section": "示例",
    "text": "示例",
    "crumbs": [
      "Ranking",
      "VeenPlot"
    ]
  },
  {
    "objectID": "Ranking/VennPlot.html#环境配置",
    "href": "Ranking/VennPlot.html#环境配置",
    "title": "韦恩图",
    "section": "环境配置",
    "text": "环境配置\n\n系统要求： 跨平台（Linux/MacOS/Windows）\n编程语言：R\n依赖包：ggplot2; ggVennDiagram; VennDiagram\n\n\n# 安装包\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"ggVennDiagram\", quietly = TRUE)) {\n  install.packages(\"ggVennDiagram\")\n}\nif (!requireNamespace(\"VennDiagram\", quietly = TRUE)) {\n  install.packages(\"VennDiagram\")\n}\n\n# 加载包\nlibrary(ggplot2)\nlibrary(ggVennDiagram)\nlibrary(VennDiagram)",
    "crumbs": [
      "Ranking",
      "VeenPlot"
    ]
  },
  {
    "objectID": "Ranking/VennPlot.html#数据准备",
    "href": "Ranking/VennPlot.html#数据准备",
    "title": "韦恩图",
    "section": "数据准备",
    "text": "数据准备\n数据使用模拟基因集，假设我们有多组不同的处理A~D，在不同处理下各自产生了一定数量的差异表达基因。 ggVennDiagram要求的输入格式为一个list，list中的每个元素都需要有对应的名称以及包含的子元素。\n\ngenes &lt;- paste(\"gene\",1:1000,sep=\"\")\nset.seed(123)\nx &lt;- list(A=sample(genes,300),\n          B=sample(genes,525),\n          C=sample(genes,440),\n          D=sample(genes,350))",
    "crumbs": [
      "Ranking",
      "VeenPlot"
    ]
  },
  {
    "objectID": "Ranking/VennPlot.html#可视化",
    "href": "Ranking/VennPlot.html#可视化",
    "title": "韦恩图",
    "section": "可视化",
    "text": "可视化\n\n\n\n\n\n\n提示\n\n\n\nggVennDiagram基本参数:\n\nx: 需要输入的list集合数据\ncategory.names: 集合名称，默认为list中定义的名称\nshow_intersect: 设置为TRUE时，输出可交互式图像\nset_color: 集合的描边颜色，可输入一个或数量与集合一致的颜色\nset_size: 集合标签的大小\nlabel: 集合中数字标签的类型，可从”both”, “count”, “percent”, “none”中选择一个输入，默认为”both”\nlabel_alpha: 数字标签的背景透明度\nlabel_geom: 数字标签的图层位置，可从”label”, “text”中选择一个，默认为”label”，当输入”text“时标签将位于集合色块的下方\nlabel_color: 数字标签的颜色\nlabel_size: 数字标签的大小\nlabel_percent_digit: 数字标签的小数保留位数\nlabel_txtWidth: 在交互模式时，显示交集元素的文本框宽度\nedge_lty: 集合描边的线条类型，默认为”solid“实线，其他可以设置的线条类型有：“blank”, “solid”, “dashed”, “dotted”, “dotdash”, “longdash”, “twodash”\nedge_size: 集合描边的线条宽度\nforce_upset: 是否使用upset图展示交集情况\nnintersects: 绘图采用的集合数量，如果为NULL则使用所有的集合\norder.intersect.by: 绘制upset图时交集的排列方式\norder.set.by: 绘制upset图时集合的排列方式\nrelative_height: 绘制upset图时上方柱状图的相对高度\nrelative_width: 绘制upset图时左侧柱状图的相对宽度\n\n\n\n\n1. 基础韦恩图\n\n# 基础韦恩图\nggVennDiagram(x)\n\n\n\n\n\n\n\n图 1: 基础韦恩图\n\n\n\n\n\n此图展示了在不同处理下差异基因的交集情况。\n\n\n2. 美化韦恩图\nggVennDiagram中集合的颜色是根据集合中包含的元素数量设置的连续型变量。可以通过ggplot2中的scale_fill_gradient或scale_fill_gradient2等函数修改集合颜色，例如使用以下代码实现连续色彩设置：\n\n# 颜色设置\nggVennDiagram(x) + scale_fill_gradient(low=\"grey90\",high = \"red\")\n\n\n\n\n\n\n\n图 2: 颜色设置\n\n\n\n\n\n也可以使用scale_fill_gradient2来更自由地定义颜色：\n\n# 颜色设置\nggVennDiagram(x) + scale_fill_gradient2(low=\"grey90\",mid = \"yellow\",midpoint = 100,high = \"red\")\n\n\n\n\n\n\n\n图 3: 颜色设置\n\n\n\n\n\n更复杂的色彩设置可以通过调用调色板完成：\n\n# 颜色设置\nggVennDiagram(x) + scale_fill_distiller(palette = \"Set1\") \n\n\n\n\n\n\n\n图 4: 颜色设置\n\n\n\n\n\n需要自定义调色板也非常简单：\n\n# 颜色设置\ncols &lt;- c('#E64E00','#65B48E','#E6EB00','#E64E00')\npal &lt;- colorRampPalette(cols)\nggVennDiagram(x) + scale_fill_gradientn(colors = pal(10)) # 数字为色阶数量\n\n\n\n\n\n\n\n图 5: 颜色设置\n\n\n\n\n\nggVennDiagram同样可以通过edge_lty、edge_size、set_color自定义集合的边框。\n\n# 边框设置\nggVennDiagram(x, set_color=c(\"blue\",\"red\",\"green\",\"purple\"), edge_lty=\"dashed\", edge_size=2)\n\n\n\n\n\n\n\n图 6: 边框设置\n\n\n\n\n\n字体设置可以通过以下参数修改：\n\n# 字体设置\n# 下列参数中较为特殊的是label，label的四个可选输入中\"percent\"为仅显示百分比， \"count\"为仅显示数量，“none”为不显示。\nggVennDiagram(x, set_size = 5, label = \"percent\", label_alpha = 0, \n              label_color = \"red\", label_size = 5, label_percent_digit = 2)\n\n\n\n\n\n\n\n图 7: 字体设置\n\n\n\n\n\n\n\n3. VennDiagram\n我们还可以通过VennDiagram包来绘制韦恩图。\n\n\n\n\n\n\n提示\n\n\n\nvenn.diagram基本参数:\n\nx: 需要输入的list集合数据\nfilename: 输出文件名\nimagetype: 输出文件类型可从”tiff”,“png”,“svg”中选择\nunits: 图片尺寸单位可从”cm”,“px”,“unit”中选择\nheight: 图片高度\nwidth: 图片宽度\nresolution: 图片分辨率\ncompression: 图片压缩算法\nscaled: 根据比例显示集合大小\nalpha: 集合透明度\nfill: 集合颜色\ncol: 线条颜色\nlwd: 线条粗细\nlty: 线条形状，1为实线, 2为虚线, blank为无线条\nlabel.col: 数字颜色\ncex: 数字大小\ncat.dist: 标签距离集合的远近\ncat.pos: 标签相对于集合的角度\ncat.cex: 标签字体大小\ncat.col: 标签颜色\n\n\n\nVennDiagram包的核心函数为venn.diagram，该函数不能直接将图像绘制到画板上，可以通过与grid::grid.draw()函数配合将图像绘制到画板。\n\np &lt;- venn.diagram(x,filename = NULL);grid::grid.draw(p)\n\n\n\n\n\n\n\n图 8: venn.diagram\n\n\n\n\n\nVennDiagram集合颜色设置于ggVennDiagram最大的区别在于颜色是根据不同集合设置的离散型颜色，设置方法如下：\n\n# 仅输入一个颜色时，所有集合显示同一个颜色，当输入颜色数量与集合数量一致时每个集合各自一个颜色，也可以使用指定命名的方式精确设置集合的颜色\np &lt;- venn.diagram(\n  x, filename = NULL,\n  fill = c(\"A\"=\"#2E75A2\",\"B\"=\"#FBD75F\",\"C\"=\"#379337\",\"D\"=\"#C13A3C\"),\n  alpha= 0.3);grid::grid.draw(p)\n\n\n\n\n\n\n\n图 9: 颜色设置\n\n\n\n\n\n线条设置：\n\np &lt;- venn.diagram(\n  x, filename = NULL,\n  col = c(\"A\"=\"#2E75A2\",\"B\"=\"#FBD75F\",\"C\"=\"#379337\",\"D\"=\"#C13A3C\"),\n  lwd = 0.3, lty = 2);grid::grid.draw(p)\n\n\n\n\n\n\n\n图 10: 线条设置\n\n\n\n\n\n字体设置，如果需要调整位置请使用 cat.dist、cat.pos 参数：\n\np &lt;- venn.diagram(\n  x, filename = NULL, \n  cat.col =c(\"A\"=\"#2E75A2\",\"B\"=\"#FBD75F\",\"C\"=\"#379337\",\"D\"=\"#C13A3C\"),\n  label.col = \"red\");grid::grid.draw(p)\n\n\n\n\n\n\n\n图 11: 字体设置\n\n\n\n\n\n按照比例展示集合大小，该模式仅适用于两个集合使用：\n\np &lt;- venn.diagram(\n  x[c(\"A\",\"B\")], filename = NULL, fill= c(\"A\"=\"#2E75A2\",\"B\"=\"#FBD75F\"),\n  scaled = T\n);grid::grid.draw(p)\n\n\n\n\n\n\n\n图 12: scaled",
    "crumbs": [
      "Ranking",
      "VeenPlot"
    ]
  },
  {
    "objectID": "Ranking/VennPlot.html#应用场景",
    "href": "Ranking/VennPlot.html#应用场景",
    "title": "韦恩图",
    "section": "应用场景",
    "text": "应用场景\n\n\n\n\n\n\n图 13: 韦恩图应用\n\n\n\n此图中R1-R4为四种不同的基因型，由于R2 R4在目的基因处基因型完全相同，因此R2R4共有的差异表达基因可能就是目的基因的下游 [4]。",
    "crumbs": [
      "Ranking",
      "VeenPlot"
    ]
  },
  {
    "objectID": "Ranking/VennPlot.html#参考文献",
    "href": "Ranking/VennPlot.html#参考文献",
    "title": "韦恩图",
    "section": "参考文献",
    "text": "参考文献\n[1] Yu Y, Li W, Liu Y, Liu Y, Zhang Q, Ouyang Y, Ding W, Xue Y, Zou Y, Yan J, Jia A, Yan J, Hao X, Gou Y, Zhai Z, Liu L, Zheng Y, Zhang B, Xu J, Yang N, Xiao Y, Zhuo L, Lai Z, Yin P, Liu HJ, Fernie AR, Jackson D, Yan J. A Zea genus-specific micropeptide controls kernel dehydration in maize. Cell. 2025 Jan 9;188(1):44-59.e21. doi: 10.1016/j.cell.2024.10.030. Epub 2024 Nov 12. PMID: 39536747.",
    "crumbs": [
      "Ranking",
      "VeenPlot"
    ]
  },
  {
    "objectID": "Omics/SankeyBubblePlot.html#环境配置",
    "href": "Omics/SankeyBubblePlot.html#环境配置",
    "title": "组合桑基气泡图",
    "section": "环境配置",
    "text": "环境配置\n\n系统: 跨平台（Linux/MacOS/Windows）\n编程语言: R\n依赖包: tidyverse; readr; ggalluvial; patchwork\n\n\n# 安装包\nif (!requireNamespace(\"tidyverse\", quietly = TRUE)) {\n  install.packages(\"tidyverse\")\n}\nif (!requireNamespace(\"readr\", quietly = TRUE)) {\n  install.packages(\"readr\")\n}\nif (!requireNamespace(\"ggalluvial\", quietly = TRUE)) {\n  install.packages(\"ggalluvial\")\n}\nif (!requireNamespace(\"patchwork\", quietly = TRUE)) {\n  install.packages(\"patchwork\")\n}\n\n# 加载包\nlibrary(tidyverse)\nlibrary(readr)\nlibrary(ggalluvial)\nlibrary(patchwork)",
    "crumbs": [
      "𝐎𝐌𝐈𝐂𝐒",
      "SankeyBubblePlot"
    ]
  },
  {
    "objectID": "Omics/SankeyBubblePlot.html#数据准备",
    "href": "Omics/SankeyBubblePlot.html#数据准备",
    "title": "组合桑基气泡图",
    "section": "数据准备",
    "text": "数据准备\n我们导入来自 DAVID 的网络药理学注释分析通路富集数据。\n\n# 读取数据\ndata &lt;- read_tsv(\"files/DAVID.txt\")\n\n# 添加新分类列\nget_category &lt;- function(cat) {\n  if (grepl(\"BP\", cat)) return(\"BP\")\n  if (grepl(\"MF\", cat)) return(\"MF\")\n  if (grepl(\"CC\", cat)) return(\"CC\")\n  if (grepl(\"KEGG\", cat)) return(\"KEGG\")\n  return(NA)\n}\ndata$MainCategory &lt;- sapply(data$Category, get_category)\n\n# 剔除 SMART 和 NA\ndata2 &lt;- data %&gt;%\n  filter(!grepl(\"SMART\", Category)) %&gt;%\n  filter(!is.na(MainCategory))\n\n# 每类排序并取前10\ntopN &lt;- function(data, n=10) {\n  data %&gt;%\n  arrange(desc(Count), PValue) %&gt;%\n  head(n)\n}\nresult &lt;- data2 %&gt;%\n  group_by(MainCategory) %&gt;%\n  group_modify(~topN(.x, 10)) %&gt;%\n  ungroup()\n\n# KEGG 通路注释\nresult &lt;- result %&gt;%\n  mutate(\n    Source = ifelse(MainCategory == \"KEGG\", \"KEGG\", \"GO\"),\n    KEGG_Group = case_when(\n      MainCategory == \"KEGG\" & str_detect(Term,\"Neuro|synapse|neurodegeneration|Alzheimer|Parkinson|Prion\") ~ \"Nervous system\",\n      MainCategory == \"KEGG\" & str_detect(Term, \"Cytokine|inflammatory\") ~ \"Immune system\",\n      MainCategory == \"KEGG\" & str_detect(Term, \"Lipid|atherosclerosis\") ~ \"Lipid metabolism\",\n      MainCategory == \"KEGG\" ~ \"Other KEGG\",\n      TRUE ~ NA_character_\n      ),\n    GO_Group = ifelse(MainCategory != \"KEGG\", MainCategory, NA)\n    )\nalluvial_data &lt;- result %&gt;%\n  mutate(\n    Term = str_replace(Term, \"^GO:\\\\d+~\", \"\"), # 去除 GO 编号\n    Term = str_replace(Term, \"^hsa\\\\d+:?\", \"\") # 去除 KEGG 编号\n    )\n\n# GO 部分\ngo_links &lt;- result %&gt;%\n  filter(Source == \"GO\") %&gt;%\n  transmute(\n    Source = Source,\n    Group = GO_Group,\n    Term = Term,\n    Count = Count\n    )\n\n# KEGG 部分\nkegg_links &lt;- result %&gt;%\n  filter(Source == \"KEGG\") %&gt;%\n  transmute(\n    Source = Source,\n    Group = KEGG_Group,\n    Term = Term,\n    Count = Count\n    )\n\n# 生成桑基图数据\nalluvial_data &lt;- result %&gt;%\n  mutate(Group = ifelse(Source == \"KEGG\", KEGG_Group, GO_Group)) %&gt;%\n  select(Source, Group, Term, Count, FDR, FoldEnrichment, MainCategory)\n\n# 确保字符型\nalluvial_data$Source &lt;- as.character(alluvial_data$Source)\nalluvial_data$Group &lt;- as.character(alluvial_data$Group)\nalluvial_data$Term &lt;- as.character(alluvial_data$Term)\n\n# 合并\nalluvial_data &lt;- bind_rows(go_links, kegg_links)\n\n# 将 term 列按照 count 值从小到大排列，并且保证气泡图和桑基图的顺序一致\nterm_levels &lt;- alluvial_data %&gt;%\n  arrange(Source, Group, desc(Count)) %&gt;%\n  pull(Term) %&gt;%\n  unique()\nalluvial_data$Term &lt;- factor(alluvial_data$Term, levels = term_levels)\n\n# 查看数据结构\nhead(alluvial_data, 5)\n\n# A tibble: 5 × 4\n  Source Group Term                                                        Count\n  &lt;chr&gt;  &lt;chr&gt; &lt;fct&gt;                                                       &lt;dbl&gt;\n1 GO     BP    GO:0010628~positive regulation of gene expression              12\n2 GO     BP    GO:0045944~positive regulation of transcription by RNA pol…    11\n3 GO     BP    GO:0007187~G protein-coupled receptor signaling pathway, c…    10\n4 GO     BP    GO:0007268~chemical synaptic transmission                      10\n5 GO     BP    GO:0006954~inflammatory response                               10",
    "crumbs": [
      "𝐎𝐌𝐈𝐂𝐒",
      "SankeyBubblePlot"
    ]
  },
  {
    "objectID": "Omics/SankeyBubblePlot.html#可视化",
    "href": "Omics/SankeyBubblePlot.html#可视化",
    "title": "组合桑基气泡图",
    "section": "可视化",
    "text": "可视化\n\n1. 桑基图\n\n# 桑基图（Term列不显示标签）\n\n# 确保 Group 为字符型且无 NA\nalluvial_data$Group &lt;- as.character(alluvial_data$Group)\nalluvial_data$Group[is.na(alluvial_data$Group)] &lt;- \"Other\"\n# 计算每个 Group 的总 Count\ngroup_order &lt;- alluvial_data %&gt;%\n  group_by(Group) %&gt;%\n  summarise(group_count = sum(Count, na.rm = TRUE)) %&gt;%\n  arrange(desc(group_count)) %&gt;%\n  pull(Group)\n# 设置 group 为有序因子\nalluvial_data$Group &lt;- factor(alluvial_data$Group, levels = group_order)\n# 对 Term 列进行排序，设置 term 为有序因子\nterm_order &lt;- alluvial_data %&gt;%\n  group_by(Term) %&gt;%\n  summarise(total_count = sum(Count, na.rm = TRUE)) %&gt;%\n  arrange(desc(total_count)) %&gt;%\n  pull(Term)\nalluvial_data$Term &lt;- factor(alluvial_data$Term, levels = term_order)\n# 重新获取 group 的有序标签\ngroup_labels &lt;- levels(alluvial_data$Group)\ngroup_labels &lt;- c(\"BP\", \"MF\", \"CC\", \"Nervous system\", \"Immune system\", \"Lipid metabolism\", \"Other KEGG\")\nterm_labels &lt;- levels(alluvial_data$Term)\n\np1 &lt;- ggplot(\n  alluvial_data,\n  aes(axis1 = Source, axis2 = Group, axis3 = Term, y = 1)) +\n  geom_alluvium(aes(fill = Group), width = 1/12, alpha = 0.8) +\n  geom_stratum(width = 1/12, fill = \"grey\", color = \"black\") +\n  scale_fill_manual(values = c(\n    \"BP\" = \"#33ad37\",\"MF\" = \"#f2c867\",\"CC\" = \"#d45327\", \n    \"Nervous system\" = \"#2eb6aa\", \"Immune system\" = \"#3e4999\", \n    \"Lipid metabolism\" = \"#4fc1e4\", \"Other KEGG\" = \"#e0c4ce\")) +\n  geom_text(stat = \"stratum\", aes(label = ifelse(\n    after_stat(stratum) %in% group_labels, after_stat(stratum),\n    ifelse(after_stat(stratum) %in% term_labels, after_stat(stratum), \"\")\n    )), size = 3) +\n  scale_x_discrete(\n    limits = c(\"Source\", \"Group\", \"Term\"),\n    labels = c(\"Source\", \"Group\", \"term\"), expand = c(.05, .05)) +\n  labs(title = NULL, y = NULL, x = NULL) +\n  theme_minimal(base_size = 12) +\n  theme(\n    axis.title.x = element_blank(),\n    axis.text.x = element_text(size = 10),\n    axis.text.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    plot.margin = margin(5, 5, 5, 5), # 这里和 p2 保持一致\n    panel.grid = element_blank()\n    ) +\n  guides(fill = \"none\")\n\np1\n\n\n\n\n\n\n\n图 1: 桑基图\n\n\n\n\n\n\n\n2. 气泡图\n\n# 气泡图（Term标签只在右侧）\n# 先准备 term_levels，确保顺序和 y 轴一致\nterm_levels &lt;- levels(alluvial_data$Term)\n# 生成气泡图数据\nalluvial_data &lt;- result %&gt;%\n  mutate(Group = ifelse(Source == \"KEGG\", KEGG_Group, GO_Group)) %&gt;%\n  select(Source, Group, Term, Count, FDR, FoldEnrichment, MainCategory)\n\np2 &lt;- ggplot(alluvial_data, aes(x = log2(FoldEnrichment), y = Term)) +\n  # 虚线棒：从 x = min_x - offset 到 x = log2(FoldEnrichment)\n  geom_segment(aes(\n    x = min(log2(FoldEnrichment), na.rm = TRUE) - 0.5,\n    xend = log2(FoldEnrichment),\n    y = Term, yend = Term),\n    linetype = \"dashed\", color = \"grey50\") +\n  # 左侧标签\n  geom_text(aes(\n    x = min(log2(FoldEnrichment), na.rm = TRUE) - 0.2,\n    label = Term\n    ), hjust = 1, size = 3) +\n  # 气泡\n  geom_point(aes(size = Count, color = -log10(FDR))) +\n  scale_y_discrete(limits = rev(term_levels), position = \"right\") +\n  scale_color_gradient(low = \"#4659a7\", high = \"#de4f30\") +\n  labs(title = NULL, x = \"log2(FoldEnrichment)\", y = NULL, color = \"-log10(FDR)\") +\n  theme_minimal() +\n  theme(\n    axis.text.y.left = element_blank(),\n    axis.text.y.right = element_blank(), # 右侧不显示标签\n    axis.title.y = element_blank(),\n    plot.margin = margin(5, 5, 5, 0),\n    panel.grid.major.y = element_blank()\n    )\n\np2\n\n\n\n\n\n\n\n图 2: 气泡图\n\n\n\n\n\n\n\n3. 拼接\n\ncombined_plot &lt;- p1 + p2 + plot_layout(widths = c(1.5, 2), guides = \"collect\")\nprint(combined_plot)\n\n\n\n\n\n\n\n图 3: 拼接",
    "crumbs": [
      "𝐎𝐌𝐈𝐂𝐒",
      "SankeyBubblePlot"
    ]
  },
  {
    "objectID": "Omics/GeneStructurePlot.html",
    "href": "Omics/GeneStructurePlot.html",
    "title": "基因结构图",
    "section": "",
    "text": "在生物学，尤其是分子生物学研究中解析基因的表达调控模式一直以来都是研究的重点内容，而在此过程中难免会有绘制一个基因的结构或者上下游关系的需求，因此本教程将基于R包gggenes对常见的一些基因结构画法进行总结。",
    "crumbs": [
      "𝐎𝐌𝐈𝐂𝐒",
      "GeneStructurePlot"
    ]
  },
  {
    "objectID": "Omics/GeneStructurePlot.html#示例",
    "href": "Omics/GeneStructurePlot.html#示例",
    "title": "基因结构图",
    "section": "示例",
    "text": "示例",
    "crumbs": [
      "𝐎𝐌𝐈𝐂𝐒",
      "GeneStructurePlot"
    ]
  },
  {
    "objectID": "Omics/GeneStructurePlot.html#环境配置",
    "href": "Omics/GeneStructurePlot.html#环境配置",
    "title": "基因结构图",
    "section": "环境配置",
    "text": "环境配置\n\n系统要求： 跨平台（Linux/MacOS/Windows）\n编程语言：R\n依赖包：tidyverse; gggenes; ggtree\n\n\n# 安装包\nif (!requireNamespace(\"tidyverse\", quietly = TRUE)) {\n  install.packages(\"tidyverse\")\n}\nif (!requireNamespace(\"gggenes\", quietly = TRUE)) {\n  install.packages(\"gggenes\")\n}\nif (!requireNamespace(\"ggtree\", quietly = TRUE)) {\n  install.packages(\"ggtree\")\n}\n\n# 加载包\nlibrary(tidyverse)\nlibrary(gggenes)\nlibrary(ggtree)",
    "crumbs": [
      "𝐎𝐌𝐈𝐂𝐒",
      "GeneStructurePlot"
    ]
  },
  {
    "objectID": "Omics/GeneStructurePlot.html#数据准备",
    "href": "Omics/GeneStructurePlot.html#数据准备",
    "title": "基因结构图",
    "section": "数据准备",
    "text": "数据准备\n数据使用gggenes中自带的example_genes数据集、example_subgenes数据集以及example_features数据集，分别记录了基因的位置信息、基因子结构的位置信息、基因上标记点的位置信息。\nexample_genes为一个数据框（dataframe），包含一个记录染色体或链信息的列作为纵坐标，一个记录基因或序列ID的列作为染色的映射索引，两个记录基因起始和终止位置的列，一个记录基因方向的列，每一行为一个基因，下表为example_genes的数据示例：\n\nhead(example_genes)\n\n  molecule gene start   end  strand orientation\n1  Genome1 genA 15389 17299 reverse           1\n2  Genome1 genB 17301 18161 forward           0\n3  Genome1 genC 18176 18640 reverse           1\n4  Genome1 genD 18641 18985 forward           0\n5  Genome1 genE 18999 20078 reverse           1\n6  Genome1 genF 20086 20451 forward           1\n\n\nexample_subgenes需要包含example_genes的所有列，并且需要额外包含一个记录基因子结构ID的列，两个记录基因子结构起始和终止位置的列，每一行为一个基因子结构，下表为example_subgenes的数据示例：\n\nhead(example_subgenes)\n\n  molecule gene  start    end  strand subgene   from     to orientation\n1  Genome5 genA 405113 407035 forward  genA-1 405774 406538           0\n2  Genome5 genB 407035 407916 forward  genB-1 407458 407897           0\n3  Genome5 genC 407927 408394 forward  genC-1 407942 408158           0\n4  Genome5 genC 407927 408394 forward  genC-2 408186 408209           0\n5  Genome5 genC 407927 408394 forward  genC-3 408233 408257           0\n6  Genome5 genF 409836 410315 forward  genF-1 409938 410016           0\n\n\nexample_features需要包含一个记录染色体或链信息的列，一个记录标记点名称的列，一个记录标记点类型的列，一个记录标记点位置的列，一个记录标记点方向的列，每一行为一个标记，下表为example_features的数据示例：\n\nhead(example_features)\n\n  molecule name             type position forward\n1  Genome1 tss9              tss    22988      NA\n2  Genome1  rs4 restriction site    18641      NA\n3  Genome1 ori5              ori    18174      NA\n4  Genome2  rs0 restriction site    12256      NA\n5  Genome2  rs1 restriction site    14076      NA\n6  Genome2 ori1              ori    13355   FALSE",
    "crumbs": [
      "𝐎𝐌𝐈𝐂𝐒",
      "GeneStructurePlot"
    ]
  },
  {
    "objectID": "Omics/GeneStructurePlot.html#可视化",
    "href": "Omics/GeneStructurePlot.html#可视化",
    "title": "基因结构图",
    "section": "可视化",
    "text": "可视化\n\n1. 基因结构图基础\ngggenes作为ggplot2的扩展，其功能由一个主要函数geom_gene_arrow以及若干次要函数完成，首先介绍gggenes的基础用法：\n\n1.1 绘制一连串的基因相对位置\n\n# 绘制一连串的基因相对位置\nggplot(example_genes, aes(xmin = start, xmax = end, y = molecule)) +\n    geom_gene_arrow() +\n    facet_wrap(~ molecule, scales = \"free\", ncol = 1)  # gggenes通常配合facet_wrap函数进行分面使用。需要注意的是，画图界面过小的话会提示报错：“Viewport has zero dimension(s)”，只需将画图窗口拉大或者设置更大的界面即可。\n\n\n\n\n\n\n\n图 1: 绘制一连串的基因相对位置\n\n\n\n\n\n\n\n1.2 绘制一组基因\n如果关注的是基因本身的结构而不是基因的位置可以将基因ID作为纵轴：\n\n# 绘制一组基因\ndf &lt;- subset(example_genes, molecule == \"Genome4\")\ndf$end &lt;- df$end-df$start\ndf$start &lt;- 1\nggplot(df, aes(xmin = start, xmax = end, y = gene)) +\n    geom_gene_arrow()\n\n\n\n\n\n\n\n图 2: 绘制一组基因\n\n\n\n\n\n\n\n1.3 绘制基因子结构\n有时我们会关注于基因上更精细的结构，比如CDS位置或者特殊的motif位置等，此时则需要gggenes中提供的另一个扩展函数geom_subgene_arrow来完成，需要注意的是虽然example_subgenes也可以作为geom_gene_arrow的输入但是由于数据中的每一行都会创建一个基因的轮廓图像，因此在一个基因含有多个子结构的时候不建议这么做，建议的使用方法还是将基因信息以及子结构信息单独分为俩个数据框处理。使用方法如下：\n\n# 绘制基因子结构\nggplot(example_genes, aes(xmin = start, xmax = end, y = molecule)) +\n    facet_wrap(~ molecule, scales = \"free\", ncol = 1) +\n    geom_gene_arrow(fill = \"white\") +\n    geom_subgene_arrow(data = example_subgenes,\n                       aes(fill = gene, xsubmin = from, xsubmax = to),\n                       color=\"black\", alpha=.7)\n\n\n\n\n\n\n\n图 3: 绘制基因子结构\n\n\n\n\n\n\n\n1.4 绘制基因标记点\n有时我们会关注基因或序列上的某个特殊点位，例如酶切位点或者启动子位点等，与基因或者其子结构不同的是标记常常为一个或有限的几个碱基，此时不适合使用箭头的画图方法，而geom_feature和geom_feature_label拓展函数则可以很好的完成这种标记任务：\n\n# 绘制基因标记点\nggplot(example_genes, aes(xmin = start, xmax = end, y = molecule)) +\n    facet_wrap(~ molecule, scales = \"free\", ncol = 1) +\n    geom_gene_arrow(fill = \"white\")+\n    geom_feature(\n        data = example_features,\n        aes(x = position, y = molecule, forward = forward)\n    ) +\n    geom_feature_label(\n        data = example_features,\n        aes(x = position, y = molecule, label = name, forward = forward),\n        feature_height = unit(4, \"mm\"), #当标记点无法正常显示时，可以设置该参数调整标记的标签高度\n        label_height = unit(3, \"mm\") #当标记点标签大小不合适时，可以设置该参数调整标记的标签大小\n    ) +\n    theme_genes() #这个主题下面会提到\n\n\n\n\n\n\n\n图 4: 绘制基因标记点\n\n\n\n\n\n\n\n1.5 与进化树和作图\n我们可能会关注不同物种或品种在某个染色体区域的基因差异，此时我们可以将进化树与基因结构图联用，除了使用拼图的方法以外，R包ggtree也提供了一个接口用于二者联用： 首先我们需要获取一个树结构，这里直接用gggenes的数据集构造一个tree，实际使用时读取一个树文件即可。 根据基因结构生成一个进化树，实际使用不需要生成：\n\nget_genes &lt;- function(data, genome) {\n    filter(data, molecule == genome) %&gt;% pull(gene)\n}\n\ng &lt;- unique(example_genes[,1])\nn &lt;- length(g)\nd &lt;- matrix(nrow = n, ncol = n)\nrownames(d) &lt;- colnames(d) &lt;- g\ngenes &lt;- lapply(g, get_genes, data = example_genes)\n\nfor (i in 1:n) {\n    for (j in 1:i) {\n        jaccard_sim &lt;- length(intersect(genes[[i]], genes[[j]])) / \n            length(union(genes[[i]], genes[[j]]))\n        d[j, i] &lt;- d[i, j] &lt;- 1 - jaccard_sim\n    }\n}\ntree &lt;- ape::bionj(d) \n\n画图时使用ggtree函数，并在geom_facet中指定基因结构数据，并指定geom = geom_motif panel = 'Alignment'，on 参数用于指定需要对齐的基因名称（必须是所有物种共有的，如果没有的话暂时不知道怎么设置）。坐标映射参数为xmin和xmax。需要注意的是在上方被作为纵轴的染色体ID（这里可以是不同物种的名称）必须位于数据框的第一列，ggtree会通过比较树的枝标签以及基因结构的第一列来决定基因结构的纵轴位置。 画图代码如下：\n\n# 与进化树和作图\nggtree(tree, branch.length='none') + \n    geom_tiplab() + xlim_tree(5.5) + \n    geom_facet(data = example_genes,\n               geom = geom_motif,\n               mapping = aes(xmin = start, xmax = end, fill = gene), \n               panel = 'Alignment',on = 'genE', \n               label = 'gene', align = 'left') +\n    scale_fill_brewer(palette = \"Set3\") +  #修改配色的方法下面会提到\n    scale_x_continuous(expand=c(0,0)) +\n    theme(strip.text=element_blank())\n\n\n\n\n\n\n\n图 5: 与进化树和作图\n\n\n\n\n\n\n\n\n2. 图像美化\n\n2.1 theme_genes 主题\n在gggenes中，有一个名为theme_genes的图像主题，非常适合用于绘制基因结构：\n\n# theme_genes主题\nggplot(example_genes, aes(xmin = start, xmax = end, y = molecule)) +\n    geom_gene_arrow() +\n    facet_wrap(~ molecule, scales = \"free\", ncol = 1) +\n    theme_genes() \n\n\n\n\n\n\n\n图 6: theme_genes主题\n\n\n\n\n\n\n\n2.2 修改颜色\n对不同的基因添加颜色(子结构同理，不再赘述)：\n\n# 修改颜色\nggplot(example_genes, aes(xmin = start, xmax = end, y = molecule, fill=gene)) +\n    geom_gene_arrow() +\n    facet_wrap(~ molecule, scales = \"free\", ncol = 1) +\n    theme_genes()\n\n\n\n\n\n\n\n图 7: 修改颜色\n\n\n\n\n\n更换配色方案可以使用调色板或者手动设置：\n\n# 修改颜色\nggplot(example_genes, aes(xmin = start, xmax = end, y = molecule, fill = gene)) +\n    geom_gene_arrow() +\n    facet_wrap(~ molecule, scales = \"free\", ncol = 1) +\n    scale_fill_brewer(palette = \"Set3\") +\n    theme_genes()\n\n\n\n\n\n\n\n图 8: 修改颜色\n\n\n\n\n\n自定义配色：\n\n# 修改颜色\nggplot(example_genes, aes(xmin = start, xmax = end, y = molecule, fill = gene)) +\n    geom_gene_arrow() +\n    facet_wrap(~ molecule, scales = \"free\", ncol = 1) +\n    scale_fill_manual(values=c(\"genA\"=\"#266CAF\",\n                               \"genB\"=\"#BF3237\",\n                               \"genC\"=\"#54AC78\",\n                               \"genD\"=\"#FBD75F\")) +\n    theme_genes()\n\n\n\n\n\n\n\n图 9: 修改颜色\n\n\n\n\n\n\n\n2.3 为基因添加标签\n添加基因标签需要使用geom_gene_label扩展函数，该函数只需要额外定义一个label映射即可\n\n# 为基因添加标签\nggplot(example_genes, aes(xmin = start, xmax = end, y = molecule, fill = gene)) +\n    geom_gene_arrow() +\n    geom_gene_label(aes(label = gene),align = \"left\") +\n    facet_wrap(~ molecule, scales = \"free\", ncol = 1) +\n    scale_fill_brewer(palette = \"Set3\") +\n    theme_genes()\n\n\n\n\n\n\n\n图 10: 为基因添加标签\n\n\n\n\n\n\n\n2.4 修改基因箭头形状\n想要修改箭头性状需要用到geom_gene_arrow中的两个参数：arrowhead_height arrowhead_width，分别定义箭头的高度与宽度\n\n# 修改基因箭头形状\nggplot(example_genes, aes(xmin = start, xmax = end, y = molecule, fill = gene)) +\n    geom_gene_arrow(arrowhead_height = unit(3, \"mm\"), arrowhead_width = unit(1, \"mm\")) +\n    facet_wrap(~ molecule, scales = \"free\", ncol = 1) +\n    scale_fill_brewer(palette = \"Set3\") +\n    theme_genes()\n\n\n\n\n\n\n\n图 11: 修改基因箭头形状\n\n\n\n\n\n\n\n2.5 修改基因的方向\n修改基因方向一般需要设置forward映射，映射列的内容必须是可以转化为布尔值的值，例如：0/1，T/F，TRUE/FALSE，”True“/“False”等，可以使用as.logical函数自行判断。 在没有设置的情况下，基因的箭头默认指向xmax的方向，当设置forward的映射后，布尔值为TRUE的基因指向xmax的方向，布尔值为FALSE的基因指向xmin的方向。因此如果在你的数据中xmin和xmax本身就带有方向性，也可以不进行forward映射。\n\n# 修改基因的方向\nggplot(example_genes, aes(xmin = start, xmax = end, y = molecule, fill = gene, forward = orientation)) +\n    geom_gene_arrow() +\n    facet_wrap(~ molecule, scales = \"free\", ncol = 1) +\n    scale_fill_brewer(palette = \"Set3\") +\n    theme_genes()\n\n\n\n\n\n\n\n图 12: 修改基因的方向",
    "crumbs": [
      "𝐎𝐌𝐈𝐂𝐒",
      "GeneStructurePlot"
    ]
  },
  {
    "objectID": "Omics/GeneStructurePlot.html#应用场景",
    "href": "Omics/GeneStructurePlot.html#应用场景",
    "title": "基因结构图",
    "section": "应用场景",
    "text": "应用场景\n\n\n\n\n\n\n图 13: 基因结构图应用\n\n\n\n图中展示了植物在进化过程中，NLR基因的丢失分化模型 [1]。",
    "crumbs": [
      "𝐎𝐌𝐈𝐂𝐒",
      "GeneStructurePlot"
    ]
  },
  {
    "objectID": "Omics/GeneStructurePlot.html#参考文献",
    "href": "Omics/GeneStructurePlot.html#参考文献",
    "title": "基因结构图",
    "section": "参考文献",
    "text": "参考文献\n[1] Guo BC, Zhang YR, Liu ZG, Li XC, Yu Z, Ping BY, Sun YQ, van den Burg H, Ma FW, Zhao T. Deciphering Plant NLR Genomic Evolution: Synteny-Informed Classification Unveils Insights into TNL Gene Loss. Mol Biol Evol. 2025 Feb 3;42(2):msaf015. doi: 10.1093/molbev/msaf015. PMID: 39835721; PMCID: PMC11789945.",
    "crumbs": [
      "𝐎𝐌𝐈𝐂𝐒",
      "GeneStructurePlot"
    ]
  },
  {
    "objectID": "Omics/NetworkPlot.html",
    "href": "Omics/NetworkPlot.html",
    "title": "网络图",
    "section": "",
    "text": "在微生物组学研究中，理解微生物之间的相互作用至关重要。而网络分析作为一种强大的方法，能够帮助我们可视化和量化这些复杂关系。接下来向大家介绍 MetaNet 包的网络操作与注释功能，它能让我们的网络分析更加深入和直观。",
    "crumbs": [
      "𝐎𝐌𝐈𝐂𝐒",
      "NetworkPlot"
    ]
  },
  {
    "objectID": "Omics/NetworkPlot.html#示例",
    "href": "Omics/NetworkPlot.html#示例",
    "title": "网络图",
    "section": "示例",
    "text": "示例",
    "crumbs": [
      "𝐎𝐌𝐈𝐂𝐒",
      "NetworkPlot"
    ]
  },
  {
    "objectID": "Omics/NetworkPlot.html#环境配置",
    "href": "Omics/NetworkPlot.html#环境配置",
    "title": "网络图",
    "section": "环境配置",
    "text": "环境配置\n\n系统要求： 跨平台（Linux/MacOS/Windows）\n编程语言：R\n依赖包：MetaNet; pcutils; igraph; dplyr\n\n\n# 安装包\nif (!requireNamespace(\"MetaNet\", quietly = TRUE)) {\n  install.packages(\"MetaNet\")\n}\nif (!requireNamespace(\"pcutils\", quietly = TRUE)) {\n  install.packages(\"pcutils\")\n}\nif (!requireNamespace(\"igraph\", quietly = TRUE)) {\n  install.packages(\"igraph\")\n}\nif (!requireNamespace(\"dplyr\", quietly = TRUE)) {\n  install.packages(\"dplyr\")\n}\n\n# 加载包\nlibrary(MetaNet)\nlibrary(pcutils)\nlibrary(igraph)\nlibrary(dplyr)",
    "crumbs": [
      "𝐎𝐌𝐈𝐂𝐒",
      "NetworkPlot"
    ]
  },
  {
    "objectID": "Omics/NetworkPlot.html#数据准备",
    "href": "Omics/NetworkPlot.html#数据准备",
    "title": "网络图",
    "section": "数据准备",
    "text": "数据准备\n\n1. 导入数据\n\n数据使用 pcutils 中的 otutab 数据集\nMetaNet 是一个针对组学数据的综合网络分析 R 包\nc_net_calculate() 函数用于快速计算变量间的相关性\nc_net_build() 函数用于构建网络\n\n\ndata(otutab, package = \"pcutils\")\nt(otutab) -&gt; totu\nc_net_calculate(totu, method = \"spearman\") -&gt; corr\nc_net_build(corr, r_threshold = 0.6, p_threshold = 0.05, delete_single = T) -&gt; co_net\nclass(co_net) \n\n[1] \"metanet\" \"igraph\" \n\n\n\n\n2. 获取网络属性\n用 MetaNet 构建网络后，得到的是一个分类对象，它来自 igraph。意味着可以同时使用 MetaNet 的专有功能和 igraph 的通用功能。接下来了解如何获取网络的基本信息：\n\n# 获取整体网络属性\nget_n(co_net)\n\n  n_type\n1 single\n\n# 查看节点(顶点)属性\nget_v(co_net) %&gt;% head(5)\n\n                          name  v_group  v_class size\n1 s__un_f__Thermomonosporaceae v_group1 v_class1    4\n2        s__Pelomonas_puraquae v_group1 v_class1    4\n3     s__Rhizobacter_bergeniae v_group1 v_class1    4\n4     s__Flavobacterium_terrae v_group1 v_class1    4\n5         s__un_g__Rhizobacter v_group1 v_class1    4\n                         label  shape   color\n1 s__un_f__Thermomonosporaceae circle #a6bce3\n2        s__Pelomonas_puraquae circle #a6bce3\n3     s__Rhizobacter_bergeniae circle #a6bce3\n4     s__Flavobacterium_terrae circle #a6bce3\n5         s__un_g__Rhizobacter circle #a6bce3\n\n### 查看边属性\nget_e(co_net) %&gt;% head(5)\n\n  id                         from                            to    weight\n1  1 s__un_f__Thermomonosporaceae     s__Actinocorallia_herbida 0.6759546\n2  2 s__un_f__Thermomonosporaceae       s__Kribbella_catacumbae 0.6742386\n3  3 s__un_f__Thermomonosporaceae       s__Kineosporia_rhamnosa 0.7378741\n4  4 s__un_f__Thermomonosporaceae   s__un_f__Micromonosporaceae 0.6236449\n5  5 s__un_f__Thermomonosporaceae s__Flavobacterium_saliperosum 0.6045747\n        cor      p.value   e_type     width   color  e_class lty\n1 0.6759546 0.0020739524 positive 0.6759546 #48A4F0 e_class1   1\n2 0.6742386 0.0021502138 positive 0.6742386 #48A4F0 e_class1   1\n3 0.7378741 0.0004730567 positive 0.7378741 #48A4F0 e_class1   1\n4 0.6236449 0.0056818984 positive 0.6236449 #48A4F0 e_class1   1\n5 0.6045747 0.0078660171 positive 0.6045747 #48A4F0 e_class1   1\n\n\n这些函数返回的数据框包含了最基本的多组学生物网络的关键信息，如节点名称、分组、大小、边的权重等。 MetaNet 在构建网络时已经设置了一些内部属性（如v_group、v_class、e_type等），这些属性将影响后续的分析和可视化。\n\n\n3. 为网络添加生物学意义\n在微生物组研究中，仅有网络结构是不够的，我们需要整合分类学、丰度等生物学信息。MetaNet 提供了灵活的注释功能：\n\n# 向节点添加分类信息\nc_net_annotate(co_net, taxonomy[\"Phylum\"], mode = \"v\") -&gt; co_net1\nanno &lt;- data.frame(\"from\" = \"s__un_f__Thermomonosporaceae\", \n                   \"to\" = \"s__Actinocorallia_herbida\", new_atr = \"new\")\nc_net_annotate(co_net, anno, mode = \"e\") -&gt; co_net1\n\n在 MetaNet 中提供 c_net_set() 函数，它可以同时添加多个注释表并指定哪些列用于设置节点大小、颜色等属性：\n\nAbundance_df &lt;- data.frame(\"Abundance\" = colSums(totu))\nco_net1 &lt;- c_net_set(co_net, taxonomy[\"Phylum\"], Abundance_df)\nco_net1 &lt;- co_net\nV(co_net1)$new_attri &lt;- seq_len(length(co_net1))\nE(co_net1)$new_attri &lt;- \"new attribute\"\nget_e(co_net1) %&gt;% head(5)\n\n  id                         from                            to    weight\n1  1 s__un_f__Thermomonosporaceae     s__Actinocorallia_herbida 0.6759546\n2  2 s__un_f__Thermomonosporaceae       s__Kribbella_catacumbae 0.6742386\n3  3 s__un_f__Thermomonosporaceae       s__Kineosporia_rhamnosa 0.7378741\n4  4 s__un_f__Thermomonosporaceae   s__un_f__Micromonosporaceae 0.6236449\n5  5 s__un_f__Thermomonosporaceae s__Flavobacterium_saliperosum 0.6045747\n        cor      p.value   e_type     width   color  e_class lty     new_attri\n1 0.6759546 0.0020739524 positive 0.6759546 #48A4F0 e_class1   1 new attribute\n2 0.6742386 0.0021502138 positive 0.6742386 #48A4F0 e_class1   1 new attribute\n3 0.7378741 0.0004730567 positive 0.7378741 #48A4F0 e_class1   1 new attribute\n4 0.6236449 0.0056818984 positive 0.6236449 #48A4F0 e_class1   1 new attribute\n5 0.6045747 0.0078660171 positive 0.6045747 #48A4F0 e_class1   1 new attribute\n\n\n这样，就能获得一个既有统计意义又有生物学背景的网络信息。",
    "crumbs": [
      "𝐎𝐌𝐈𝐂𝐒",
      "NetworkPlot"
    ]
  },
  {
    "objectID": "Omics/NetworkPlot.html#可视化",
    "href": "Omics/NetworkPlot.html#可视化",
    "title": "网络图",
    "section": "可视化",
    "text": "可视化\n\n1. 构建网络\n简单多组学网络：包含微生物组，代谢组，转录组等信息。\n\n# 基础网络图\ndata(\"multi_test\", package = \"MetaNet\")\ndata(\"c_net\", package = \"MetaNet\")\nmulti1 &lt;- multi_net_build(list(Microbiome = micro, Metabolome = metab, Transcriptome = transc))\nplot(multi1)\n\n\n\n\n基础网络图\n\n\n\n\n\n\n2. 添加 annotation\n\n# 设置顶点类别\nmulti1_with_anno &lt;- c_net_set(multi1, \n                              micro_g, metab_g, \n                              transc_g, \n                              vertex_class = c(\"Phylum\", \"kingdom\", \"type\"))\n\n# 设置顶点大小\nmulti1_with_anno &lt;- c_net_set(multi1_with_anno,\n                              data.frame(\"Abundance1\" = colSums(micro)),\n                              data.frame(\"Abundance2\" = colSums(metab)),\n                              data.frame(\"Abundance3\" = colSums(transc)),\n                              vertex_size = paste0(\"Abundance\", 1:3))\n\nplot(multi1_with_anno)\n\n\n\n\n添加 annotation\n\n\n\n\n\n\n3. 筛选子网络\n\n# 筛选子网络\ndata(\"multi_net\", package = \"MetaNet\")\nmulti2 &lt;- c_net_filter(multi1_with_anno, v_group %in% \n                         c(\"Microbiome\", \"Metabolome\")) %&gt;%\n  c_net_filter(., e_class == \"intra\", mode = \"e\")\n\nplot(multi2, lty_legend = T, main = \"Sub-network\") \n\n\n\n\n筛选子网络\n\n\n\n\n\n\n4. 合并网络\n\n# 网络1\ndata(\"c_net\")\nplot(co_net)\n\n\n\n\n网络1\n\n\n\n\n\n# 网络2\ndata(\"c_net\")\nplot(co_net2)\n\n\n\n\n网络2\n\n\n\n\n\n# 合并网络\nco_net_union &lt;- c_net_union(co_net, co_net2)\nplot(co_net_union)\n\n\n\n\n合并网络\n\n\n\n\nMetaNet 包为微生物网络分析提供了全面的工具集，从基础的网络构建到高级的注释与可视化。通过灵活使用这些功能，我们能够从复杂的微生物组数据中提取有意义的生物学模式，为理解微生物群落结构与功能提供新视角。",
    "crumbs": [
      "𝐎𝐌𝐈𝐂𝐒",
      "NetworkPlot"
    ]
  },
  {
    "objectID": "Omics/NetworkPlot.html#参考文献",
    "href": "Omics/NetworkPlot.html#参考文献",
    "title": "网络图",
    "section": "参考文献",
    "text": "参考文献\n[1] K. Contrepois, S. Wu, K. J. Moneghetti, D. Hornburg, et al., [Molecular Choreography of Acute Exercise (https://doi.org/10.1016/j.cell.2020.04.043). Cell. 181, 1112–1130.e16 (2020).\n[2] Y. Deng, Y. Jiang, Y. Yang, Z. He, et al., Molecular ecological network analyses. BMC bioinformatics (2012), doi:10.1186/1471-2105-13-113.\n[3] K. Faust, J. Raes, Microbial interactions: From networks to models. Nature Reviews Microbiology (2012), doi:10.1038/nrmicro2832.\n[4] Chen Peng (2025). MetaNet: Network Analysis for Omics Data. R package",
    "crumbs": [
      "𝐎𝐌𝐈𝐂𝐒",
      "NetworkPlot"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Bizard",
    "section": "",
    "text": "在生物医学研究中，数据可视化是解读复杂数据集、推动科学发现和指导临床决策的关键工具。R语言凭借其强大的统计功能和丰富的扩展包生态系统，已成为创建高质量可视化的基石。然而，R语言绘图工具包数量庞大且持续更新，研究人员常面临方法选择与图表定制的双重挑战——他们需要根据特定研究需求筛选合适方案并进行个性化调整。这一过程不仅需要高超的编程技能、跨学科协作能力，还需投入大量时间，这些因素都可能延缓研究进度，甚至影响实验结果的准确性。\n为应对这些挑战，我们开发了 Bizard。这个社区驱动的综合性平台整合了精选可视化代码库、进阶教程和协作论坛，通过优化资源获取路径与促进知识共享，致力于提升生物医学研究者的数据分析能力，加速科研成果向临床实践的转化。",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "Bizard",
    "section": "",
    "text": "在生物医学研究中，数据可视化是解读复杂数据集、推动科学发现和指导临床决策的关键工具。R语言凭借其强大的统计功能和丰富的扩展包生态系统，已成为创建高质量可视化的基石。然而，R语言绘图工具包数量庞大且持续更新，研究人员常面临方法选择与图表定制的双重挑战——他们需要根据特定研究需求筛选合适方案并进行个性化调整。这一过程不仅需要高超的编程技能、跨学科协作能力，还需投入大量时间，这些因素都可能延缓研究进度，甚至影响实验结果的准确性。\n为应对这些挑战，我们开发了 Bizard。这个社区驱动的综合性平台整合了精选可视化代码库、进阶教程和协作论坛，通过优化资源获取路径与促进知识共享，致力于提升生物医学研究者的数据分析能力，加速科研成果向临床实践的转化。",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#什么是-bizard",
    "href": "index.html#什么是-bizard",
    "title": "Bizard",
    "section": "什么是 Bizard?",
    "text": "什么是 Bizard?\nBizard 汇聚了强大的可视化工具、精选代码和协作功能，助力研究人员高效完成数据分析，并以清晰有力的方式呈现研究成果。\n\n全面可视化资源库: 整合来自多方的可视化代码，既有经典图表库（graphgallery）资源，也有全球专家的创新贡献，为生物医学研究提供前沿工具集。\n多样化图表支持: 提供涵盖变量分布、相关性分析、排序图表及交互式可视化等场景的R代码实现，满足多元数据分析需求。\n真实场景应用: 基于R原生数据集与真实生物医学数据案例，让可视化技术的学习和应用更贴近实际研究场景，加速临床转化进程。\n生物医学数据适配: 包含预处理算法、带注释的绘图代码和专用方法，适配生物医学数据的复杂性，即使编程基础有限也能实现高级可视化。\n统计分析一体化: 将统计分析与可视化模块无缝结合，确保结果兼具严谨性与表现力，提升研究可信度，推动循证医学发展。\n开放协作生态: 积极吸纳生物医学领域专家的贡献，通过集体智慧优化功能，应对数据可视化领域的动态挑战。\n多平台便捷访问: 通过开源GitHub仓库、互动论坛及微信公众号教程等多渠道提供资源，促进知识共享与协作创新。\n推动研究卓越: 赋能研究人员提升可视化技能，完善方法学标准，助力精准医疗与个性化治疗发展。\n未来愿景: 致力于拓展国际协作，持续提供创新解决方案，以应对生物医学数据可视化与分析日益增长的复杂性。\n\n\n\n\n\n\n\n注记\n\n\n\n如果您觉得这有用或有改进的建议，请在任何页面底部的GitHub讨论中留下您的评论，让我们知道。",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "Omics/ManhattanPlot.html",
    "href": "Omics/ManhattanPlot.html",
    "title": "曼哈顿图",
    "section": "",
    "text": "Manhattan plot，即曼哈顿图，是一种用于描述染色体上的突变与性状之间关联强弱的图，由于图形形似美国曼哈顿区的城市景观因此得名曼哈顿图。绘制曼哈顿图一般使用散点图的形式，但是也可以使用柱状图或折线图展示，常用R包qqman或者直接使用ggplot2绘制。",
    "crumbs": [
      "𝐎𝐌𝐈𝐂𝐒",
      "ManhattanPlot"
    ]
  },
  {
    "objectID": "Omics/ManhattanPlot.html#示例",
    "href": "Omics/ManhattanPlot.html#示例",
    "title": "曼哈顿图",
    "section": "示例",
    "text": "示例\n\n\n\n\n\n曼哈顿图的横坐标为染色体位置，纵坐标为Pvalue或者诸如ΔSNP、ED等一切可以表示突变位点与性状之间关联强弱的值。下面将使用Pvalue作为示例。",
    "crumbs": [
      "𝐎𝐌𝐈𝐂𝐒",
      "ManhattanPlot"
    ]
  },
  {
    "objectID": "Omics/ManhattanPlot.html#环境配置",
    "href": "Omics/ManhattanPlot.html#环境配置",
    "title": "曼哈顿图",
    "section": "环境配置",
    "text": "环境配置\n\n系统要求： 跨平台（Linux/MacOS/Windows）\n编程语言：R\n依赖包：qqman; tidyverse; aplot\n\n\n# 安装包\nif (!requireNamespace(\"qqman\", quietly = TRUE)) {\n  install.packages(\"qqman\")\n}\nif (!requireNamespace(\"tidyverse\", quietly = TRUE)) {\n  install.packages(\"tidyverse\")\n}\nif (!requireNamespace(\"aplot\", quietly = TRUE)) {\n  install.packages(\"aplot\")\n}\n\n# 加载包\nlibrary(qqman)\nlibrary(tidyverse)\nlibrary(aplot)",
    "crumbs": [
      "𝐎𝐌𝐈𝐂𝐒",
      "ManhattanPlot"
    ]
  },
  {
    "objectID": "Omics/ManhattanPlot.html#数据准备",
    "href": "Omics/ManhattanPlot.html#数据准备",
    "title": "曼哈顿图",
    "section": "数据准备",
    "text": "数据准备\n数据使用qqman中自带的gwasResults数据集。\n\n# 查看数据集\nhead(gwasResults)\n\n  SNP CHR BP         P\n1 rs1   1  1 0.9148060\n2 rs2   1  2 0.9370754\n3 rs3   1  3 0.2861395\n4 rs4   1  4 0.8304476\n5 rs5   1  5 0.6417455\n6 rs6   1  6 0.5190959",
    "crumbs": [
      "𝐎𝐌𝐈𝐂𝐒",
      "ManhattanPlot"
    ]
  },
  {
    "objectID": "Omics/ManhattanPlot.html#可视化",
    "href": "Omics/ManhattanPlot.html#可视化",
    "title": "曼哈顿图",
    "section": "可视化",
    "text": "可视化\n\n1. qqman绘制曼哈顿图\nmanhattan和qq是qqman中最重要的两个函数，分别负责绘制曼哈顿图和QQ图：\n\n\n\n\n\n\n提示\n\n\n\nmanhattan 参数:\n\nx：输入数据，要求格式为dataframe数据框\nchr：记录染色体信息的列名，必须是数字\nbp：记录碱基坐标位置信息的列名，必须是数字\np：记录P值或其他值信息的列名，必须是数字\nsnp：记录SNP名称的列名\ncol：交替的颜色设置\nchrlabs：X轴上染色体的名称，默认与数据框中的名称一致\nsuggestiveline：蓝色阈值线，设置为FALSE时不绘制\ngenomewideline：红色阈值线，设置为FALSE时不绘制\nhighlight：高亮的SNP名称\nlogp：设置为TRUE时，纵轴为-log10(P)，设置为FALSE时纵轴为P\nannotatePval：设置阈值，标注图中高于该阈值的SNP\nannotateTop：每条染色体仅标注一个最高的SNP\n\n\n\n\n# 基础曼哈顿图\nmanhattan(gwasResults)\n\n\n\n\n\n\n\n图 1: 基础曼哈顿图\n\n\n\n\n\n此图展示了基因组上所有SNP与性状的关联情况，其中三号染色体上存在一个明显的峰，表明三号染色体上存在一个可能是与性状强相关的区域。\nmanhattan中染色体的颜色可以通过col参数修改：\n\n# 颜色设置\nmanhattan(gwasResults, col = c(\"#3E7B92\",\"#F0E442\",\"#BF242A\"))\n\n\n\n\n\n\n\n图 2: 颜色设置\n\n\n\n\n\n对特定SNP进行高亮显示：\n\n# 高亮设置\nmanhattan(gwasResults, highlight =\"rs3057\")\n\n\n\n\n\n\n\n图 3: 高亮设置\n\n\n\n\n\n标注高于阈值的SNP(每条染色体一个)：\n\n# 注释设置\nmanhattan(gwasResults, highlight =\"rs3057\", annotatePval=1e-5)\n\n\n\n\n\n\n\n图 4: 注释设置\n\n\n\n\n\n\n\n2. ggplot2绘制曼哈顿图\n使用qqman绘制曼哈顿图能满足大部分需求，然而仍有部分需求不能满足，例如设置阈值线的样式和颜色，此时可以用ggplot2绘图。\n\n# ggplot2绘制曼哈顿图\ndf &lt;- gwasResults\ndf$CHR &lt;- factor(as.character(df$CHR),levels=unique(df$CHR))\nlen &lt;- \n    df %&gt;% \n    group_by(CHR) %&gt;%  # CHR为染色体信息的列名\n    summarise(len=max(BP))  # BP为位置信息的列名\nlen &lt;-  # 计算snp在图中的位置\n    len %&gt;% summarise(pos=cumsum(len)-len)\nrownames(len) &lt;- unique(df$CHR)\ndf$BP &lt;- df$BP+len$pos[match(df$CHR,rownames(len))]\nX_axis &lt;-  df %&gt;% group_by(CHR) %&gt;% summarize(center=( max(BP) + min(BP) ) / 2 ) # 计算染色体的位置\n\n# 下面对P值进行多重矫正，qqman中对P取固定的阈值其实是不可取的。\nbf &lt;- max(df$P[p.adjust(df$P, method = \"bonferroni\")&lt;0.05])  # 使用bonferroni法\nfdr&lt;- max(df$P[p.adjust(df$P, method = \"fdr\")&lt;0.05])  # 使用fdr法\n\ncol &lt;- c(\"gray10\", \"gray60\") # 此处设置染色体颜色\ncols &lt;- rep(col ,nrow(X_axis))\nline_col1 &lt;- \"red\" # 此处阈值线颜色\nline_col2 &lt;- \"blue\"\nline_type1 &lt;- \"dashed\" # 此处阈值线类型\nline_type2 &lt;- \"dashed\" \nggplot()+\n    geom_point(df,mapping=aes(x=BP,y=-log10(P),color=CHR),alpha=0.7,size=1,shape=16)+\n    geom_hline(yintercept = -log10(bf),lty=line_type1 ,color= line_col1 )+\n    geom_hline(yintercept = -log10(fdr),lty=line_type2 ,color= line_col2)+\n    scale_color_manual(values = cols ) +\n    theme_bw()+\n    theme(panel.grid.major = element_blank(),panel.grid.minor=element_blank(),\n          legend.position = 'none')+\n    xlab(\"CHR\")+ylab(\"-log10(P)\")+ #横轴纵轴标题\n    scale_x_continuous( limits = c(0, max(df$BP)),label = X_axis$CHR, breaks= X_axis$center ) +\n    scale_y_continuous(expand = c(0,0)) \n\n\n\n\n\n\n\n图 5: ggplot2绘制曼哈顿图\n\n\n\n\n\n使用ggplot2绘制曼哈顿图的好处在于可以高度自定义图像的风格，可以注意到在上面我已经设置好了几个变量，只需要对这些变量进行修改即可自定义颜色以及阈值线样式。\n\ncol &lt;- c(\"#3E7B92\",\"#F0E442\",\"#BF242A\") #此处设置染色体颜色\ncols &lt;- rep(col ,nrow(X_axis))\nline_col1 &lt;- \"#DB5A6A\" #此处阈值线颜色\nline_col2 &lt;- \"#0050B7\"\nline_type1 &lt;- \"solid\" #此处阈值线类型，可以设置的线条类型有：”solid“,“blank”, “solid”, “dashed”, “dotted”, “dotdash”, “longdash”, “twodash”\nline_type2 &lt;- \"dotdash\" \nggplot()+\n    geom_point(df,mapping=aes(x=BP,y=-log10(P),color=CHR),alpha=0.7,size=1,shape=16)+\n    geom_hline(yintercept = -log10(bf),lty=line_type1 ,color= line_col1 )+\n    geom_hline(yintercept = -log10(fdr),lty=line_type2 ,color= line_col2)+\n    scale_color_manual(values = cols ) +\n    theme_bw()+\n    theme(panel.grid.major = element_blank(),panel.grid.minor=element_blank(),\n          legend.position = 'none')+\n    xlab(\"CHR\")+ylab(\"-log10(P)\")+\n    scale_x_continuous( limits = c(0, max(df$BP)),label = X_axis$CHR, breaks= X_axis$center ) +\n    scale_y_continuous(expand = c(0,0)) \n\n\n\n\n\n\n\n图 6: ggplot2修改颜色\n\n\n\n\n\n由于ggplot2绘图是将一张张图叠加起来，因此可以将筛选后的SNP用geom_point叠加到原图上：\n\ndf2 &lt;- df[df$P&lt;bf,]\ndf3 &lt;- df[df$SNP==\"rs3057\",]\ncol &lt;- c(\"gray10\", \"gray60\") #此处设置染色体颜色\ncols &lt;- rep(col ,nrow(X_axis))\nline_col1 &lt;- \"red\" #此处阈值线颜色\nline_col2 &lt;- \"blue\"\nline_type1 &lt;- \"dashed\" #此处阈值线类型\nline_type2 &lt;- \"dashed\" \nggplot()+\n    geom_point(df,mapping=aes(x=BP,y=-log10(P),color=CHR),alpha=0.7,size=1,shape=16)+\n    geom_point(df2,mapping=aes(x=BP,y=-log10(P)),color=\"blue\",size=1,shape=16)+\n    geom_point(df3,mapping=aes(x=BP,y=-log10(P)),color=\"red\",size=3,shape=18)+\n    geom_hline(yintercept = -log10(bf),lty=line_type1 ,color= line_col1 )+\n    geom_hline(yintercept = -log10(fdr),lty=line_type2 ,color= line_col2)+\n    scale_color_manual(values = cols ) +\n    theme_bw()+\n    theme(panel.grid.major = element_blank(),panel.grid.minor=element_blank(),\n          legend.position = 'none')+\n    xlab(\"CHR\")+ylab(\"-log10(P)\")+\n    scale_x_continuous( limits = c(0, max(df$BP)),label = X_axis$CHR, breaks= X_axis$center ) +\n    scale_y_continuous(limits = c(0, max(-log10(df$P))+1),expand = c(0,0)) \n\n\n\n\n\n\n\n图 7: 高亮或标记snp\n\n\n\n\n\n当你有两个性状时可能需要将两个性状的GWAS结果同时展现在结果上，可以使用下列方法绘制双向曼哈顿图。这里只用一组数据作为示例。\n\ncol &lt;- c(\"gray10\", \"gray60\") #此处设置染色体颜色\ncols &lt;- rep(col ,nrow(X_axis))\nline_col1 &lt;- \"red\" #此处阈值线颜色\nline_col2 &lt;- \"blue\"\nline_type1 &lt;- \"dashed\" #此处阈值线类型\nline_type2 &lt;- \"dashed\" \np1 &lt;- \n    ggplot()+\n    geom_point(df,mapping=aes(x=BP,y=-log10(P),color=CHR),alpha=0.7,size=1,shape=16)+\n    geom_hline(yintercept = -log10(bf),lty=line_type1 ,color= line_col1 )+\n    geom_hline(yintercept = -log10(fdr),lty=line_type2 ,color= line_col2)+\n    scale_color_manual(values = cols ) +\n    theme_bw()+\n    theme(panel.grid.major = element_blank(),panel.grid.minor=element_blank(),\n          axis.text.x = element_text(vjust = -2),\n          axis.title.x = element_blank(),\n          legend.position = 'none')+\n    ylab(\"-log10(P)\")+ #横轴纵轴标题\n    scale_x_continuous( limits = c(0, max(df$BP)),label = X_axis$CHR, breaks= X_axis$center ) +\n    scale_y_continuous(expand = c(0,0)) \np2 &lt;- \n    ggplot()+\n    geom_point(df,mapping=aes(x=BP,y=-log10(P),color=CHR),alpha=0.7,size=1,shape=16)+\n    geom_hline(yintercept = -log10(bf),lty=line_type1 ,color= line_col1 )+\n    geom_hline(yintercept = -log10(fdr),lty=line_type2 ,color= line_col2)+\n    scale_color_manual(values = cols ) +\n    theme_bw()+\n    theme(panel.grid.major = element_blank(),panel.grid.minor=element_blank(),\n          axis.text.x = element_blank(),axis.title.x = element_blank(),\n          legend.position = 'none')+\n    ylab(\"-log10(P)\")+\n    scale_x_continuous( limits = c(0, max(df$BP)),label = X_axis$CHR, breaks= X_axis$center ,position = 'top') +\n    scale_y_reverse(expand = c(0,0))\np1/p2\n\n\n\n\n\n\n\n图 8: 双向曼哈顿图",
    "crumbs": [
      "𝐎𝐌𝐈𝐂𝐒",
      "ManhattanPlot"
    ]
  },
  {
    "objectID": "Omics/ManhattanPlot.html#应用场景",
    "href": "Omics/ManhattanPlot.html#应用场景",
    "title": "曼哈顿图",
    "section": "应用场景",
    "text": "应用场景\nfig-HistApplications} \n曼哈顿图应用 :::\n此图展示了杨树上的SNP位点与温度（上图）/降雨（下图）之间的关联 [1]。",
    "crumbs": [
      "𝐎𝐌𝐈𝐂𝐒",
      "ManhattanPlot"
    ]
  },
  {
    "objectID": "Omics/ManhattanPlot.html#参考文献",
    "href": "Omics/ManhattanPlot.html#参考文献",
    "title": "曼哈顿图",
    "section": "参考文献",
    "text": "参考文献\n[1] Sang Y, Long Z, Dan X, Feng J, Shi T, Jia C, Zhang X, Lai Q, Yang G, Zhang H, Xu X, Liu H, Jiang Y, Ingvarsson PK, Liu J, Mao K, Wang J. Genomic insights into local adaptation and future climate-induced vulnerability of a keystone forest tree in East Asia. Nat Commun. 2022 Nov 1;13(1):6541. doi: 10.1038/s41467-022-34206-8. PMID: 36319648; PMCID: PMC9626627.",
    "crumbs": [
      "𝐎𝐌𝐈𝐂𝐒",
      "ManhattanPlot"
    ]
  },
  {
    "objectID": "Omics/VolcanoPlot.html",
    "href": "Omics/VolcanoPlot.html",
    "title": "火山图",
    "section": "",
    "text": "火山图用于两组之间的比较，得到两组之间的上调/下调，筛选依据为 p 值和 FC 值，转换为 -logP 值和 log2(FC) 值。导入数据可以是微生物组的 OTU 表格或 ASV 表格，或者转录组基因表达的表格，或者是代谢组学的 features 表格等多组学数据。",
    "crumbs": [
      "𝐎𝐌𝐈𝐂𝐒",
      "VolcanoPlot"
    ]
  },
  {
    "objectID": "Omics/VolcanoPlot.html#示例",
    "href": "Omics/VolcanoPlot.html#示例",
    "title": "火山图",
    "section": "示例",
    "text": "示例",
    "crumbs": [
      "𝐎𝐌𝐈𝐂𝐒",
      "VolcanoPlot"
    ]
  },
  {
    "objectID": "Omics/VolcanoPlot.html#环境配置",
    "href": "Omics/VolcanoPlot.html#环境配置",
    "title": "火山图",
    "section": "环境配置",
    "text": "环境配置\n\n系统要求： 跨平台（Linux/MacOS/Windows）\n编程语言：R\n依赖包：tidyverse; readxl; ggrepel\n\n\n# 安装包\nif (!requireNamespace(\"tidyverse\", quietly = TRUE)) {\n  install.packages(\"tidyverse\")\n}\nif (!requireNamespace(\"readxl\", quietly = TRUE)) {\n  install.packages(\"readxl\")\n}\nif (!requireNamespace(\"ggrepel\", quietly = TRUE)) {\n  install.packages(\"ggrepel\")\n}\n\n# 加载包\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(ggrepel)",
    "crumbs": [
      "𝐎𝐌𝐈𝐂𝐒",
      "VolcanoPlot"
    ]
  },
  {
    "objectID": "Omics/VolcanoPlot.html#数据准备",
    "href": "Omics/VolcanoPlot.html#数据准备",
    "title": "火山图",
    "section": "数据准备",
    "text": "数据准备\n我们导入来自 omicshare 的火山图示例数据。\n\n# 读取Excel数据\ndata &lt;- read_excel(\"files/volcano.eg.xlsx\")\n\n# 重命名列名（处理特殊字符）\ndata &lt;- data %&gt;%\n  rename(log2FC = \"log2 Ratio(WT0/LOG)\", Pvalue = \"Pvalue\")\n# 处理 p-value 为 0 的情况（避免计算-Inf）\ndata &lt;- data %&gt;%\n  mutate(log10P = -log10(Pvalue + 1e-300)) # 确保处理了 P=0 的情况\n# 转为数值型，并处理转换失败的值（如无效字符）\ndata &lt;- data %&gt;%\n  mutate(\n    log2FC = as.numeric(log2FC) # 转换失败的值会变为 NA\n  )\n\n# 查找导致转换失败的原始值\ndata %&gt;%\n  filter(is.na(log2FC)) %&gt;%\n  select(log2FC) # 查看这些行的 log2FC 原始值\n\n# A tibble: 0 × 1\n# ℹ 1 variable: log2FC &lt;dbl&gt;\n\n# 根据实际情况修复数据（例如替换或删除异常值）\n# 示例：将\"Inf\"替换为实际数值或过滤掉\ndata &lt;- data %&gt;%\n  mutate(\n    log2FC = ifelse(log2FC == \"Inf\", 100, log2FC), # 根据需求调整\n    log2FC = as.numeric(log2FC)\n    ) %&gt;%\n  filter(!is.na(log2FC)) # 删除无法修复的行\n\n# 定义显著性（同时满足P值&lt;0.05且|log2FC|&gt;1）\n# 定义显著性分类（上调、下调、无显著）\ndata &lt;- data %&gt;%\n  mutate(\n    significant = case_when(\n      Pvalue &lt; 0.05 & log2FC &gt; 2 ~ \"Upregulated\", # 上调（红色）\n      Pvalue &lt; 0.05 & log2FC &lt; -2 ~ \"Downregulated\", # 下调（绿色）\n      TRUE ~ \"Not significant\" # 无显著（灰色）\n    )\n  )\n\n# 查看数据结构\nhead(data, 5)\n\n# A tibble: 5 × 10\n  GeneID         LOG_count WT0_count LOG_rpkm WT0_rpkm  log2FC    Pvalue     FDR\n  &lt;chr&gt;              &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n1 Unigene0000003     17243     17525   932.     942.    0.0168   5.15e-1 6.73e-1\n2 Unigene0000004        65       101     4.12     6.37  0.629    6.64e-3 1.79e-2\n3 Unigene0000005       909       984    36.9     39.7   0.108    1.26e-1 2.25e-1\n4 Unigene0000006      1376      1082    74.7     58.5  -0.353    1.17e-8 6.86e-8\n5 Unigene0000007       121        73    15.7      9.42 -0.736    7.42e-4 2.45e-3\n# ℹ 2 more variables: significant &lt;chr&gt;, log10P &lt;dbl&gt;",
    "crumbs": [
      "𝐎𝐌𝐈𝐂𝐒",
      "VolcanoPlot"
    ]
  },
  {
    "objectID": "Omics/VolcanoPlot.html#可视化",
    "href": "Omics/VolcanoPlot.html#可视化",
    "title": "火山图",
    "section": "可视化",
    "text": "可视化\n\n1. 基础火山图\n\n# 基础火山图\np &lt;- \n  ggplot(data, aes(x = log2FC, y = -log10(Pvalue))) + # 初步绘制火山图\n  # 绘制散点，按显著分类着色\n  geom_point(aes(color = significant), alpha = 0.6, size = 1.5) + \n  # 设置颜色映射（上调红，下调绿，无显著灰）\n  scale_color_manual(\n    values = c(\"Upregulated\" = \"red\", \"Downregulated\" = \"green\", \"Not significant\" = \"gray\"),\n    name = \"Significance\" # 图例标题\n    ) +\n  # 添加筛选阈值线\n  geom_vline(xintercept = c(-2, 2), linetype = \"dashed\", color = \"green\", linewidth = 0.5) + # log2FC阈值线\n  geom_hline(yintercept = -log10(0.05), linetype = \"dashed\", color = \"blue\", linewidth = 0.5) + # p值阈值线\n  # 调整坐标轴和标题\n  labs(x = \"log2(Fold Change)\", y = \"-log10(P-value)\",\n       title = \"Volcano Plot with Thresholds\") +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5, face = \"bold\"), # 标题居中加粗\n        legend.position = \"right\") # 图例位置\n\np\n\n\n\n\n\n\n\n图 1: 基础火山图\n\n\n\n\n\n\n\n2. 带标签火山图\n\n# 添加标签\n# 步骤1：筛选需标注的基因\nlabel_data &lt;- data %&gt;%\n  filter(Pvalue &lt; 0.05) %&gt;% # 筛选显著基因\n  group_by(significant) %&gt;% # 按上下调控分组\n  top_n(10, abs(log2FC)) %&gt;% # 取 log2FC 绝对值最大的 10 个\n  ungroup()\n# 步骤2：定义标签颜色（浅红和浅绿）\nlabel_colors &lt;- c(\n  \"Upregulated\" = \"#FF9999\", # 浅红色\n  \"Downregulated\" = \"#99FF99\" # 浅绿色\n  )\n# 步骤3：绘制带标签的火山图\np &lt;- \n  ggplot(data, aes(x = log2FC, y = -log10(Pvalue))) +\n  geom_point(aes(color = significant), alpha = 0.6, size = 1.5) +\n  # 添加基因标签（仅标注目标基因）\n  geom_text_repel(\n    data = label_data,\n    aes(label = GeneID, color = significant), # 假设基因名列名为 OTU ID\n    size = 3,\n    box.padding = 0.5, # 标签间距\n    max.overlaps = 50, # 允许最大重叠\n    segment.color = \"grey50\", # 连接线颜色\n    show.legend = FALSE\n    ) +\n  # 设置颜色映射（原颜色+标签颜色）\n  scale_color_manual(\n    values = c(\"Upregulated\" = \"red\", \"Downregulated\" = \"green\", \"Not significant\" = \"gray\"),\n    guide = guide_legend(override.aes = list(\n      color = c(\"red\", \"green\", \"gray\"), # 图例颜色保持原色\n      label = \"\" # 图例中不显示文字\n      ))) +\n  # 控制标签颜色（浅红和浅绿）\n  scale_color_manual(\n    values = label_colors,\n    guide = \"none\" # 隐藏额外图例\n    ) +\n  # 保留原有阈值线和标题\n  geom_vline(xintercept = c(-2, 2), linetype = \"dashed\", color = \"black\") +\n  geom_hline(yintercept = -log10(0.05), linetype = \"dashed\", color = \"black\") +\n  labs(title = \"Volcano Plot with Top 20 Labels\") +\n  theme_minimal()\n\np\n\n\n\n\n\n\n\n图 2: 带标签火山图",
    "crumbs": [
      "𝐎𝐌𝐈𝐂𝐒",
      "VolcanoPlot"
    ]
  },
  {
    "objectID": "GraphGallery.html",
    "href": "GraphGallery.html",
    "title": "Graph Gallery",
    "section": "",
    "text": "👋 Bizard 是一个为生物医学研究量身定制的高级可视化代码综合存储库。\n该工具包包括各种各样的图表选项，从变化分布到交互式可视化，系统组织以满足生物医学数据分析的独特需求。建立在强大的基础上，每个示例都包含可重复的 R 代码，详细注释和现实世界数据集，以确保可访问性和实际应用。\n借助初学者和经验丰富的研究人员的资源，Bizard 使用户能够创建直观，科学严格且视觉上令人信服的输出，从而在生物医学领域中推进数据可视化标准。",
    "crumbs": [
      "Graph Gallery"
    ]
  },
  {
    "objectID": "GraphGallery.html#under-construction-demo-only",
    "href": "GraphGallery.html#under-construction-demo-only",
    "title": "Graph Gallery",
    "section": "UNDER CONSTRUCTION [DEMO ONLY]",
    "text": "UNDER CONSTRUCTION [DEMO ONLY]",
    "crumbs": [
      "Graph Gallery"
    ]
  },
  {
    "objectID": "GraphGallery.html#distribution-gallery",
    "href": "GraphGallery.html#distribution-gallery",
    "title": "Graph Gallery",
    "section": "Distribution Gallery",
    "text": "Distribution Gallery",
    "crumbs": [
      "Graph Gallery"
    ]
  },
  {
    "objectID": "GraphGallery.html#correlation-gallery",
    "href": "GraphGallery.html#correlation-gallery",
    "title": "Graph Gallery",
    "section": "Correlation Gallery",
    "text": "Correlation Gallery\n\n\n\nCorrelation DEMO",
    "crumbs": [
      "Graph Gallery"
    ]
  },
  {
    "objectID": "GraphGallery.html#ranking-gallery",
    "href": "GraphGallery.html#ranking-gallery",
    "title": "Graph Gallery",
    "section": "Ranking Gallery",
    "text": "Ranking Gallery\n\n\n\nRanking DEMO",
    "crumbs": [
      "Graph Gallery"
    ]
  },
  {
    "objectID": "GraphGallery.html#others",
    "href": "GraphGallery.html#others",
    "title": "Graph Gallery",
    "section": "Others",
    "text": "Others",
    "crumbs": [
      "Graph Gallery"
    ]
  },
  {
    "objectID": "Ranking/UpsetPlot.html",
    "href": "Ranking/UpsetPlot.html",
    "title": "Upset图",
    "section": "",
    "text": "Upset 图与 Venn 图类似，主要展示不同集合交叉点中的元素数量，然而当 Venn 图中集合达到 5 个时可读性开始急剧下降，Upset 图则可以很好的解决 Venn 图可读性差的问题，并且还能提供元素属性的附加统计信息。",
    "crumbs": [
      "Ranking",
      "UpsetPlot"
    ]
  },
  {
    "objectID": "Ranking/UpsetPlot.html#示例",
    "href": "Ranking/UpsetPlot.html#示例",
    "title": "Upset图",
    "section": "示例",
    "text": "示例\n\n\n\n\n\n此图为 Upset 图的基本样式，图像分为三部分，分别是上方的不同集合之间交集的元素数量发直方图，左侧为不同集合包含元素数量的直方图。中间的矩阵部分则是集合之间的交集情况，如下图所示：\n\n\n\n\n\n当一个交集的元素存在于某集合时使用黑点标记，否则使用白点标记，例如绿色部分仅在 B 集合处标记为黑色则表明该列为仅在 B 中存在的元素，以此类推。",
    "crumbs": [
      "Ranking",
      "UpsetPlot"
    ]
  },
  {
    "objectID": "Ranking/UpsetPlot.html#环境配置",
    "href": "Ranking/UpsetPlot.html#环境配置",
    "title": "Upset图",
    "section": "环境配置",
    "text": "环境配置\n\n系统要求： 跨平台（Linux/MacOS/Windows）\n编程语言：R\n依赖包：UpSetR; ggupset\n\n\n# 安装包\nif (!requireNamespace(\"UpSetR\", quietly = TRUE)) {\n  install.packages(\"UpSetR\")\n}\nif (!requireNamespace(\"ggupset\", quietly = TRUE)) {\n  install.packages(\"ggupset\")\n}\n\n# 加载包\nlibrary(UpSetR)\nlibrary(ggupset)",
    "crumbs": [
      "Ranking",
      "UpsetPlot"
    ]
  },
  {
    "objectID": "Ranking/UpsetPlot.html#数据准备",
    "href": "Ranking/UpsetPlot.html#数据准备",
    "title": "Upset图",
    "section": "数据准备",
    "text": "数据准备\n\nmovies 数据集由 GroupLens 实验室和 Bilal Alsallakh 创建；mutations 数据集最初由 TCGA 联盟创建，表示 284 个多形性胶质母细胞瘤中 100 个常见基因突变的突变情况。\n两个数据集均被包含至 UpSetR 包中\n\n\n# UpSetR 可以接受三种格式的数据，第一种是具有命名向量的list(见listInput变量)，第二种是表达式向量(见expressionInput变量)，第三种是0,1构成的数据框(见movies和mutations变量)\n# 读取 CSV 数据\n# list格式需要对list中的每个向量为一个集合，UpSetR要求对每个集合进行命名，向量中的元素为对应集合的成员。使用upset函数绘图时需要使用fromList函数对list数据进行格式转化。\nlistInput &lt;- list(one = c(1, 2, 3, 5, 7, 8, 11, 12, 13), two = c(1, 2, 4, 5, 10), three = c(1, 5, 6, 7, 8, 9, 10, 12, 13))\n#expression格式则接受一个类表达式的向量。表达式向量的元素是一个交集中集合的名称（以&分隔），以及该交集中的数字元素。使用upset函数绘图时需要使用fromExpression函数对list数据进行格式转化。\nexpressionInput &lt;- c(one = 2, two = 1, three = 2, `one&two` = 1, `one&three` = 4, `two&three` = 1, `one&two&three` = 2)\n\n# 数据框格式每列为一个集合，每行为一个元素。要求数据框由0 1组成，分别表示元素是否存在于集合，当列存在非01的值时，该列被认为是元素的属性。\nmovies &lt;- read.csv( system.file(\"extdata\", \"movies.csv\", package = \"UpSetR\"), header=T, sep=\";\" )\nmutations &lt;- read.csv( system.file(\"extdata\", \"mutations.csv\", package = \"UpSetR\"), header=T, sep = \",\")",
    "crumbs": [
      "Ranking",
      "UpsetPlot"
    ]
  },
  {
    "objectID": "Ranking/UpsetPlot.html#可视化",
    "href": "Ranking/UpsetPlot.html#可视化",
    "title": "Upset图",
    "section": "可视化",
    "text": "可视化\n\n1. 基础 Upset 图\n此基础 Upset 图展示了包含不同元素的电影数量。\n\n# 使用上面三种数据类型绘制 Upset 图\nupset(fromList(listInput))\nupset(fromExpression(expressionInput))\nupset(movies)\n\n\n\n\n\n\n\n图 1: 基础 Upset 图\n\n\n\n\n\n\n\n\n\n\n\n图 2: 基础 Upset 图\n\n\n\n\n\n\n\n\n\n\n\n图 3: 基础 Upset 图\n\n\n\n\n\n\n\n\n\n\n\n提示\n\n\n\n关键参数: nsets\nnsets 参数决定了使用多少个集合绘制 UpSet 图，未设置时默认为 5。\n\n\n\n# 设置 nset 为 6，使用 mutations 数据集\nupset(mutations, nsets = 6)\n\n\n\n\n\n\n\n图 4: 关键参数: nsets\n\n\n\n\n\n此图使用了突变次数最多的 6 个基因，展示了包含不同突变的多形性胶质母细胞瘤数量。\n\n\n\n\n\n\n提示\n\n\n\n关键参数: order.by\norder.by 参数决定了 UpSet 图中交集的排列顺序，未设置时根据取交集的集合数量从小到大排列，设置为 “degree” 时根据交集的元素数量从大到小排列，设置为 “freq” 时根据交集的大小从大到小排列。\n\n\n\n# order.by不同的三种设置方式，使用mutations数据集\nupset(mutations)\nupset(mutations, order.by = \"degree\")\nupset(mutations, order.by = \"freq\")\n\n\n\n\n\n\n\n图 5: 关键参数: order.by\n\n\n\n\n\n\n\n\n\n\n\n图 6: 关键参数: order.by\n\n\n\n\n\n\n\n\n\n\n\n图 7: 关键参数: order.by\n\n\n\n\n\n\n\n\n\n\n\n提示\n\n\n\n关键参数: sets\nsets 参数可以指定需要绘制的集合，未设置时取元素最多的 nsets 个集合，另外 keep.order 参数可以使集合柱状图的顺序与 sets 输入的顺序保持一致。\n\n\n\n# 指定\"TTN\",\"NF1\",\"FLG\",\"KEL\"四个基因为目标集合，并使集合柱状图顺序与sets参数一致保持\nupset(mutations, sets = c(\"TTN\",\"NF1\",\"FLG\",\"KEL\"), keep.order = T)\n\n\n\n\n\n\n\n图 8: 关键参数: sets\n\n\n\n\n\n\n\n\n\n\n\n提示\n\n\n\n关键参数: empty.intersections\nempty.intersections 参数默认设置为 “NULL”，此时不显示空交集，当设置为任意参数时会显示空交集。\n\n\n\n#显示空交集\nupset(mutations, sets = c(\"TTN\",\"NF1\",\"FLG\",\"KEL\"), keep.order = T, empty.intersections=T)\n\n\n\n\n\n\n\n图 9: 关键参数: empty.intersections\n\n\n\n\n\n\n\n\n\n\n\n提示\n\n\n\n关键参数: decreasing\ndecreasing 参数设置则可以调转 order.by 或 keep.order 的方向，有多个排序方向需要控制时，输入含有多个元素的向量，如”c(T,F)”\n\n\n\n# 调换排序方向\nupset(mutations, sets = c(\"TTN\",\"NF1\",\"FLG\",\"KEL\"), keep.order = T, decreasing = c(T, T))\n\n\n\n\n\n\n\n图 10: 关键参数: decreasing\n\n\n\n\n\n\n\n2. 个性化 Upset 图\n图像比例方面，mb.ratio 参数默认为 “c(0.7, 0.3)”，可以指定交集柱状图与交集矩阵点图之间的比例大小，需要输入一个含有两个元素的向量，分别表示柱状图与矩阵点图的高度占全图的高度比例。\n\nupset(mutations, mb.ratio=c(0.5,0.5))\n\n\n\n\n\n\n\n图 11: 关键参数: mb.ratio\n\n\n\n\n\n图像颜色方面，UpSetR 包提供了多个参数可以设置 Upset 图中不同部分的颜色：\n\nupset(mutations,\n      shade.color = \"#4C4C4C\", # 交集矩阵点图阴影的颜色\n      matrix.color = \"#067522\", # 矩阵中点和线的颜色\n      main.bar.color = \"#3E7B92\", # 交集元素数量柱状图的颜色\n      sets.bar.color = \"#C9AE42\" # 集合数量柱状图的颜色\n)\n\n\n\n\n\n\n\n图 12: Upset图颜色设置\n\n\n\n\n\n如果想要突出某些交集，则需要使用到 UpSetR 包提供的 queries 参数，queries 参数需要输入一个列表 list，这个 list 中至少包含一个子 list，每个子 list 中需要包含以下字段：query、params、color、active 和 query.name。\n\nquery 可输入 intersects 或 elements，效果都一样\nparams 指定一个子集，输入同样为一个 list，list 中的元素可为集合的名称，多个元素表示取这些元素的交集。\ncolor 是将在 plot 上表示的颜色。如果没有提供颜色，将从 UpSetR 默认调色板中选择一种颜色。\nactive 决定查询将如何在图上表示。如果 active 为 TRUE，则交叉大小条将被表示查询的条覆盖。如果 active 为 FALSE，一个抖动点将被放置在相交的大小条上。\nquery.name 为当前突出集合的名称，需要用 query.legend 参数指定图例位置，query.legend 可以输入”top”或”bottom”\n\n\nupset(mutations, sets = c(\"TTN\",\"NF1\",\"FLG\",\"KEL\"), keep.order = T,\n      query.legend = \"top\", \n      queries = list(list(query = intersects, params = list(\"TTN\"), active = T, query.name = \"NAME\"),\n                     list(query = elements, params = list(\"TTN\",\"NF1\"))))\n\n\n\n\n\n\n\n图 13: 关键参数: queries\n\n\n\n\n\n图像标签与字体方面，同样有多个参数可以调整：\n\nupset(mutations,\n      number.angles = 30, # 交集柱状图上方的数字倾斜角度\n      point.size = 2, # 矩阵中点的大小\n      line.size = 1, # 矩阵中线的大小\n      sets.x.label = \"NAME1\", # 集合柱状图的轴标签\n      mainbar.y.label = \"NAME2\", # 交集柱状图的轴标签\n      text.scale = c(1.3, 1.3, 1, 1, 1.2,1)) # 文本大小设置，分别对应交集柱状图的轴标签，分别对应交集柱状图的数字，集合柱状图的轴标签，集合柱状图的数字，集合的名字，交集柱状图上方的数字\n\n\n\n\n\n\n\n图 14: Upset图像标签与字体\n\n\n\n\n\n\n\n3. 进阶 Upset 图\n有时候还需要展示集合中元素的某些属性，如展示 1995 年上市的电影在不同交集中的分布。同样需要用到 queries 参数，在 params 字段中输入一个记录不同电影上市年份信息的列名 与 1995，即可高亮显示对应 1995 年上市电影的分布情况。\n\nupset(movies, sets = c(\"Action\", \"Adventure\", \"Children\", \"War\", \"Noir\"),\n      queries = list(list(query = elements, params = list(\"ReleaseDate\",1995), active = T)))\n\n\n\n\n\n\n\n图 15: params 字段\n\n\n\n\n\n如果是复合条件，例如仅高亮 1995 年上市的动作电影，可以额外引入 expression 参数用于对查询条件进行进一步限制。\n\nupset(movies, sets = c(\"Action\", \"Adventure\", \"Children\", \"War\", \"Noir\"),\n      queries = list(list(query = intersects, params = list(\"Action\"), active = T)),\n      expression = \"ReleaseDate == 1995\")\n\n\n\n\n\n\n\n图 16: 关键参数: expression\n\n\n\n\n\n上述方法仅限于离散型变量，然而元素的属性还可能包括连续性变量，对于连续性变量推荐自定义函数进行查询，以下代码可以用于高亮 Watches 属性大于 100 的元素：\n\nMyfunc &lt;- function(row, num) {\n  data &lt;- row[\"Watches\"] &gt; num\n}\nupset(movies, sets = c(\"Action\", \"Adventure\", \"Children\", \"War\", \"Noir\"),\n      queries = list(list(query = Myfunc, params = list(100), active = T)))\n\n\n\n\n\n\n\n图 17: Upset图连续变量\n\n\n\n\n\nUpsetR 还支持同时绘制其他类型的图像包括直方图、散点图、密度图。前二者需要使用 attribute.plots 参数绘制，箱线图需要使用 boxplot.summary 参数绘制，箱线图与其他三种图像不能兼容。 attribute.plots 包含以下子参数：\n\ngridrows：指定扩展绘图窗口的范围以留出属性图（attribute plots）的空间。UpSetR 绘图基于 100x100 的网格布局。例如，若将 gridrows 设为 50，新的网格布局将变为 150x100，其中 1/3 的区域用于放置属性图。\nplots：接收一个参数 list，包括 plot、x、y（若适用）和 queries。\n\nplot：是一个返回 ggplot 对象的函数，可输入histogram或scatter_plot。\nx：定义 ggplot 中使用的 x 轴美学映射（以字符串形式输入）。\ny：定义 ggplot 中使用的 y 轴美学映射（以字符串形式输入）。\nqueries：控制是否在属性图上叠加查询结果。若为 TRUE，属性图会叠加查询数据；若为 FALSE，则不在属性图中显示查询结果。\n\nncols：指定属性图在 gridrows 预留空间中的排列方式。例如：\n\n若输入两个属性图且 ncols=1，则两图上下排列。\n若输入两个属性图且 ncols=2，则两图并排显示。\n\n\n\nupset(movies, sets = c(\"Action\", \"Adventure\", \"Children\", \"War\", \"Noir\"),\n      queries = list(list(query = intersects, params = list(\"War\"), active = T),\n                     list(query = elements, params = list(\"Noir\"))),\n      attribute.plots=list(gridrows = 100, \n                           ncols = 1,\n                           plots = list(list(plot=histogram, \n                                             x=\"AvgRating\",\n                                             queries=T),\n                                        list(plot = scatter_plot, \n                                             y = \"AvgRating\", \n                                             x = \"Watches\",\n                                             queries = T)\n                                        )\n                           )\n      )\n\n\n\n\n\n\n\n图 18: 关键参数: attribute.plots\n\n\n\n\n\nboxplot.summary 相对简单，只需要指定元素属于对应的列名即可：\n\nupset(movies, sets = c(\"Action\", \"Adventure\", \"Children\", \"War\", \"Noir\"),\n      queries = list(list(query = intersects, params = list(\"War\"), active = T),\n                     list(query = elements, params = list(\"Noir\"))),\n      boxplot.summary = c(\"AvgRating\", \"ReleaseDate\"))\n\n\n\n\n\n\n\n图 19: 关键参数: boxplot.summary\n\n\n\n\n\n\n\n4. 生物数据示例\n数据集采用 ggupset 包中的 df_complex_conditions 数据集\n\n# 整理格式\ndf &lt;- df_complex_conditions\ndf$\"T8\" &lt;- ifelse(df$Timepoint==8,1,0)\ndf$\"T24\" &lt;- ifelse(df$Timepoint==24,1,0)\ndf$\"T48\" &lt;- ifelse(df$Timepoint==48,1,0)\ndf$KO &lt;- ifelse(df$KO==\"TRUE\",1,0)\ndf$DrugA &lt;- ifelse(df$DrugA==\"Yes\",1,0)\n# 需要注意的是UpSetR包不支持tibble数据框，需要转化为传统的dataframe\ndf &lt;- data.frame(df[sample(360,180),c(3,4,1,2,5:7)])  # 这里为了美观随机挑选一半的数据\n\n# upset绘图\nupset(df,\n      queries = list(list(query = intersects, params = list(\"DrugA\",\"T48\"), active = T)),\n      boxplot.summary = c(\"response\"))\n\n\n\n\n\n\n\n图 20: 关键参数: boxplot.summary\n\n\n\n\n\n此图展示了敲除体 KO 与 WT(KO行为白点) 在施加或不施加药物(DrugA)处理在不同时间后生物体的响应情况。",
    "crumbs": [
      "Ranking",
      "UpsetPlot"
    ]
  },
  {
    "objectID": "Ranking/UpsetPlot.html#应用场景",
    "href": "Ranking/UpsetPlot.html#应用场景",
    "title": "Upset图",
    "section": "应用场景",
    "text": "应用场景\n\n\n\n\n\n\n图 21: Upset 图应用\n\n\n\n该图展示了人群中患不同疾病的统计情况以及他们的生存时间。 [1]",
    "crumbs": [
      "Ranking",
      "UpsetPlot"
    ]
  },
  {
    "objectID": "Ranking/UpsetPlot.html#参考文献",
    "href": "Ranking/UpsetPlot.html#参考文献",
    "title": "Upset图",
    "section": "参考文献",
    "text": "参考文献\n[1] Peng X, Hu Y, Cai W. Association between urinary incontinence and mortality risk among US adults: a prospective cohort study. BMC Public Health. 2024 Oct 9;24(1):2753. doi: 10.1186/s12889-024-20091-x. PMID: 39385206; PMCID: PMC11463129.",
    "crumbs": [
      "Ranking",
      "UpsetPlot"
    ]
  }
]