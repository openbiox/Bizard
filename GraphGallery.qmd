---
title: Graph Gallery
comments: false
title-block-style: none
listing:
  - id: distribution
    type: grid
    image-height: 100%
    contents: Distribution/*!(.zh).qmd
    sort-ui: true
    filter-ui: true
    categories: true
    fields: [title, date, image, categories]
  - id: correlation
    type: grid
    image-height: 100%
    contents: Correlation/*!(.zh).qmd
    sort-ui: true
    filter-ui: true
    categories: true
    fields: [title, date, image, categories]
---

👋 **Bizard** is a comprehensive repository of advanced visualization codes tailored for biomedical research.

The toolkit includes a diverse array of charting options, from variable distributions to interactive visualizations, systematically organized to meet the unique needs of biomedical data analysis. Built on a robust foundation, each example is paired with reproducible R code, detailed annotations, and real-world datasets to ensure accessibility and practical application.

With resources for both beginners and seasoned researchers, Bizard empowers users to create intuitive, scientifically rigorous, and visually compelling outputs, advancing data visualization standards in the biomedical field.



```{r}
#| echo: false
#| message: false
#| warning: false

library(reactable)
library(jsonlite)
library(dplyr)
library(crosstalk)
library(htmltools)

data <- read.csv("files/gallery_data.csv")
```

## 𝐁𝐀𝐒𝐈𝐂𝐒

### Distribution Gallery

:::{#distribution}
:::

### Correlation Gallery

:::{#correlation}
:::

### Ranking Gallery

```{r}
#| echo: false
data_Ranking <- data[data$Level2=="Ranking",]

tbl <- reactable(
  data_Ranking,
  defaultColDef = colDef(vAlign = "center", headerClass = "header"),
  columns = list(
    Id = colDef(
      name = "Id", align = "center", minWidth = 70, maxWidth = 90
    ),
    Name = colDef(
      name = "Graph", cell = JS("renderGraph"), html = TRUE, minWidth = 250
    ),
    Image_url = colDef(show = FALSE),
    Tutorial_url = colDef(show = FALSE),
    Description =colDef(show = FALSE),
    Type = colDef(name = "Type"),
    Level1 =colDef(show = FALSE),
    Level2 =colDef(show = FALSE)
  ), 
  searchable = TRUE
)

div(
  class = "movies",
  tbl,
  div(id = "modal",  class="modal", onclick="hideModal()",
      img(
        id="modal-image", class="modal-image"
      ))
)
```


## 𝐎𝐌𝐈𝐂𝐒

```{r}
#| echo: false
data_OMICS <- data[data$Level1=="OMICS",]

tbl <- reactable(
  data_OMICS,
  defaultColDef = colDef(vAlign = "center", headerClass = "header"),
  columns = list(
    Id = colDef(
      name = "Id", align = "center", minWidth = 70, maxWidth = 90
    ),
    Name = colDef(
      name = "Graph", cell = JS("renderGraph"), html = TRUE, minWidth = 250
    ),
    Image_url = colDef(show = FALSE),
    Tutorial_url = colDef(show = FALSE),
    Description =colDef(show = FALSE),
    Type = colDef(name = "Type"),
    Level1 =colDef(show = FALSE),
    Level2 =colDef(show = FALSE)
  ), 
  searchable = TRUE
)

div(
  class = "movies",
  tbl,
  div(id = "modal",  class="modal", onclick="hideModal()",
      img(
        id="modal-image", class="modal-image"
      ))
)
```


## 𝐂𝐋𝐈𝐍𝐈𝐂𝐒


## 𝐇𝐈𝐏𝐋𝐎𝐓

### BASICS

```{r}
#| echo: false
data_HIPLOT_BASICS <- data[data$Level1=="HIPLOT" & data$Level2=="BASICS",]

tbl <- reactable(
  data_HIPLOT_BASICS,
  defaultColDef = colDef(vAlign = "center", headerClass = "header"),
  columns = list(
    Id = colDef(
      name = "Id", align = "center", minWidth = 70, maxWidth = 90
    ),
    Name = colDef(
      name = "Graph", cell = JS("renderGraph"), html = TRUE, minWidth = 250
    ),
    Image_url = colDef(show = FALSE),
    Tutorial_url = colDef(show = FALSE),
    Description =colDef(show = FALSE),
    Type = colDef(name = "Type"),
    Level1 =colDef(show = FALSE),
    Level2 =colDef(show = FALSE)
  ), 
  searchable = TRUE
)

div(
  class = "movies",
  tbl,
  div(id = "modal",  class="modal", onclick="hideModal()",
      img(
        id="modal-image", class="modal-image"
      ))
)
```

### OMICS

```{r}
#| echo: false
data_HIPLOT_OMICS <- data[data$Level1=="HIPLOT" & data$Level2=="OMICS",]

tbl <- reactable(
  data_HIPLOT_OMICS,
  defaultColDef = colDef(vAlign = "center", headerClass = "header"),
  columns = list(
    Id = colDef(
      name = "Id", align = "center", minWidth = 70, maxWidth = 90
    ),
    Name = colDef(
      name = "Graph", cell = JS("renderGraph"), html = TRUE, minWidth = 250
    ),
    Image_url = colDef(show = FALSE),
    Tutorial_url = colDef(show = FALSE),
    Description =colDef(show = FALSE),
    Type = colDef(name = "Type"),
    Level1 =colDef(show = FALSE),
    Level2 =colDef(show = FALSE)
  ), 
  searchable = TRUE
)

div(
  class = "movies",
  tbl,
  div(id = "modal",  class="modal", onclick="hideModal()",
      img(
        id="modal-image", class="modal-image"
      ))
)
```

### CLINICS

```{r}
#| echo: false
data_HIPLOT_CLINICS <- data[data$Level1=="HIPLOT" & data$Level2=="CLINICS",]

tbl <- reactable(
  data_HIPLOT_CLINICS,
  defaultColDef = colDef(vAlign = "center", headerClass = "header"),
  columns = list(
    Id = colDef(
      name = "Id", align = "center", minWidth = 70, maxWidth = 90
    ),
    Name = colDef(
      name = "Graph", cell = JS("renderGraph"), html = TRUE, minWidth = 250
    ),
    Image_url = colDef(show = FALSE),
    Tutorial_url = colDef(show = FALSE),
    Description =colDef(show = FALSE),
    Type = colDef(name = "Type"),
    Level1 =colDef(show = FALSE),
    Level2 =colDef(show = FALSE)
  ), 
  searchable = TRUE
)

div(
  class = "movies",
  tbl,
  div(id = "modal",  class="modal", onclick="hideModal()",
      img(
        id="modal-image", class="modal-image"
      ))
)
```

### MAP

```{r}
#| echo: false
data_HIPLOT_MAP <- data[data$Level1=="HIPLOT" & data$Level2=="MAP",]

tbl <- reactable(
  data_HIPLOT_MAP,
  defaultColDef = colDef(vAlign = "center", headerClass = "header"),
  columns = list(
    Id = colDef(
      name = "Id", align = "center", minWidth = 70, maxWidth = 90
    ),
    Name = colDef(
      name = "Graph", cell = JS("renderGraph"), html = TRUE, minWidth = 250
    ),
    Image_url = colDef(show = FALSE),
    Tutorial_url = colDef(show = FALSE),
    Description =colDef(show = FALSE),
    Type = colDef(name = "Type"),
    Level1 =colDef(show = FALSE),
    Level2 =colDef(show = FALSE)
  ), 
  searchable = TRUE
)

div(
  class = "movies",
  tbl,
  div(id = "modal",  class="modal", onclick="hideModal()",
      img(
        id="modal-image", class="modal-image"
      ))
)
```






```{js}
#| echo: false

function renderGraph(cellInfo) {
  const url = cellInfo.row['Tutorial_url']
  const imageSrc = cellInfo.row['Image_url']
  const altText = cellInfo.value
  const description = cellInfo.row['Description']
  const poster = `<img src="${imageSrc}" class="movie-poster" alt="${altText}" onclick="showModal(this)">`

  const title = `<a href="${url}" target="_blank">${cellInfo.value}</a>`

  const details = `<div class="movie-info-details">${description}</div>`
  const text = `<div class="movie-info-text">${title}${details}</div>`
  return `<div class="movie-info">${poster}${text}</div>`
}

function showModal(image) {
  var modal = document.getElementById("modal");
  var modalImage = document.getElementById("modal-image");
  modal.style.display = "block";
  modalImage.src = image.src;
}

function hideModal() {
  var modal = document.getElementById("modal");
  modal.style.display = "none";
}
```

```{css}
#| echo: false

/* Font from https://fontsarena.com/hanken-grotesk-by-hanken-design-co/ */
@font-face {
  font-family: 'Hanken Grotesk';
  font-style: normal;
  font-weight: 400;
  src: url("fonts/HKGrotesk-Regular.woff2") format("woff2"),
       url("fonts/HKGrotesk-Regular.woff") format("woff");
}

@font-face {
  font-family: 'Hanken Grotesk';
  font-style: normal;
  font-weight: 600;
  src: url("fonts/HKGrotesk-SemiBold.woff2") format("woff2"),
       url("fonts/HKGrotesk-SemiBold.woff") format("woff");
}

@font-face {
  font-family: 'Hanken Grotesk';
  font-style: normal;
  font-weight: 700;
  src: url("fonts/HKGrotesk-Bold.woff2") format("woff2"),
       url("fonts/HKGrotesk-Bold.woff") format("woff");
}

.movies {
  font-family: 'Hanken Grotesk', Helvetica, Arial, sans-serif;
}

.movies h2 {
  font-weight: 600;
}

.movies a {
  color: #007899;
  text-decoration: none;
}

.movies a:hover,
.movies a:focus {
  text-decoration: underline;
  text-decoration-thickness: max(1px, 0.0625rem);
}

.movies-tbl {
  margin-top: 1rem;
  font-size: 1rem;
}

.header {
  color: hsl(0, 0%, 45%);
  font-weight: 700;
  font-size: 0.8125rem;
  letter-spacing: 0.4px;
  text-transform: uppercase;
}

.header:hover[aria-sort],
.header[aria-sort='ascending'],
.header[aria-sort='descending'] {
  color: hsl(0, 0%, 5%);
}

.movie-info {
  display: flex;
  align-items: center;
}

.movie-info-text {
  margin-left: 0.75rem;
  font-weight: 600;
  overflow: hidden;
  text-overflow: ellipsis;
}

.movie-info-details {
  margin-top: 0.125rem;
  font-size: 0.875rem;
  font-weight: 400;
  color: hsl(0, 0%, 40%);
  overflow: hidden;
  text-overflow: ellipsis;
}

.movie-poster {
  width: 100px;
  height: 100px;
  box-shadow: 0 0 0 1px hsl(0, 0%, 95%);
  cursor: zoom-in;
}

.movie-runtime {
  display: inline-block;
}

.movie-rating {
  margin-right: 0.25rem;
  padding: 0 0.25rem;
  border: 1px solid hsl(0, 0%, 75%);
  border-radius: 2px;
}

.user-score {
  font-weight: 600;
}

.filters {
  display: flex;
  flex-wrap: wrap;
  margin-top: 1rem;
  margin-left: -32px;
}

.filter-input {
  margin-top: 0.5rem;
  margin-left: 32px;
  flex: 1;
  min-width: 250px;
}

.filter-input label {
  color: hsl(0, 0%, 45%);
  font-weight: 700;
  font-size: 0.8125rem;
  letter-spacing: 0.4px;
  text-transform: uppercase;
}

.filter-input select,
.filter-input input[type="search"] {
  padding: 0 0.375rem;
  height: 2rem;
}

.filter-input input[type="search"] {
  /* Revert Bootstrap 5's Reboot styles, which change native search input styling */
  -webkit-appearance: searchfield;
  outline-offset: revert;
  border-color: revert;
}


.modal {
  display: none;
  position: fixed;
  z-index: 9999;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.8);
  cursor: zoom-out;
}

.modal-image {
  display: block;
  max-width: 90%;
  max-height: 90%;
  margin: auto;
  margin-top: 5%;
}
```
