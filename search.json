[
  {
    "objectID": "Hiplot/151-rcs-cox.html",
    "href": "Hiplot/151-rcs-cox.html",
    "title": "RCS-COX",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot RCS-COX plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/rcs-cox?lang=en\nNonlinear regression analysis.",
    "crumbs": [
      "HIPLOT",
      "RCS-COX"
    ]
  },
  {
    "objectID": "Hiplot/151-rcs-cox.html#setup",
    "href": "Hiplot/151-rcs-cox.html#setup",
    "title": "RCS-COX",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; rms; survival; ggplot2; stringr\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"rms\", quietly = TRUE)) {\n  install.packages(\"rms\")\n}\nif (!requireNamespace(\"survival\", quietly = TRUE)) {\n  install.packages(\"survival\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"stringr\", quietly = TRUE)) {\n  install.packages(\"stringr\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(rms)\nlibrary(survival)\nlibrary(ggplot2)\nlibrary(stringr)",
    "crumbs": [
      "HIPLOT",
      "RCS-COX"
    ]
  },
  {
    "objectID": "Hiplot/151-rcs-cox.html#data-preparation",
    "href": "Hiplot/151-rcs-cox.html#data-preparation",
    "title": "RCS-COX",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/rcs-cox/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\ndata &lt;- na.omit(data)\nex &lt;- set::not(colnames(data), c(\"main\", \"time\", \"event\"))\nex &lt;- str_c(ex, collapse = \"+\")\ndd &lt;&lt;- datadist(data)\noptions(datadist = \"dd\")\nfor (i in 3:5) {\n  fit &lt;- coxph(as.formula(paste0(\"Surv(time, event) ~ rcs(main, nk = i, inclx = T)+\", ex, collapse = \"+\")), data = data, x = TRUE)\n  tmp &lt;- extractAIC(fit)\n  if (i == 3) {\n    AIC &lt;- tmp[2]\n    nk &lt;&lt;- 3\n  }\n  if (tmp[2] &lt; AIC) {\n    AIC &lt;- tmp[2]\n    nk &lt;&lt;- i\n  }\n}\nfit &lt;- cph(as.formula(paste0(\"Surv(time, event) ~ rcs(main, nk = nk, inclx = T)+\", ex, collapse = \"+\")), data = data, x = TRUE)\ndd$limits$main[2] &lt;- median(data$main)\nfit &lt;- update(fit)\norr &lt;- Predict(fit, main, fun = exp, ref.zero = TRUE)\n\n# View data\nhead(data)\n\n      main x1 x2 time event\n1 25.54051  1  1 2178     0\n2 24.02398  1  2 2172     0\n3 22.14290  1  3 2190     0\n4 26.63187  1  4  297     1\n5 24.41255  1  5 2131     0\n6 23.24236  1  6    1     1",
    "crumbs": [
      "HIPLOT",
      "RCS-COX"
    ]
  },
  {
    "objectID": "Hiplot/151-rcs-cox.html#visualization",
    "href": "Hiplot/151-rcs-cox.html#visualization",
    "title": "RCS-COX",
    "section": "Visualization",
    "text": "Visualization\n\n# RCS-COX\np &lt;- ggplot() +\n  geom_line(data = orr, aes(main, yhat), linetype = \"solid\", size = 1, alpha = 1,\n            colour = \"#FF0000\") +\n  geom_ribbon(data = orr, aes(main, ymin = lower, ymax = upper), alpha = 0.6, \n              fill = \"#FFC0CB\") +\n  geom_hline(yintercept = 1, linetype = 2, size = 0.5) +\n  geom_vline(xintercept = dd$limits$main[2], linetype = 2, size = 0.5) +\n  labs(x = \" \", y = \"Hazard Ratio(95%CI)\") +\n  theme_bw() +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n \np\n\n\n\n\n\n\n\nFigure 1: RCS-COX",
    "crumbs": [
      "HIPLOT",
      "RCS-COX"
    ]
  },
  {
    "objectID": "Hiplot/066-ggdist.html",
    "href": "Hiplot/066-ggdist.html",
    "title": "Dist Plot",
    "section": "",
    "text": "The dist plot is a visual diagram using a confidence distribution.",
    "crumbs": [
      "HIPLOT",
      "Dist Plot"
    ]
  },
  {
    "objectID": "Hiplot/066-ggdist.html#setup",
    "href": "Hiplot/066-ggdist.html#setup",
    "title": "Dist Plot",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggdist; tidyr; broom; modelr; ggplot2\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggdist\", quietly = TRUE)) {\n  install.packages(\"ggdist\")\n}\nif (!requireNamespace(\"tidyr\", quietly = TRUE)) {\n  install.packages(\"tidyr\")\n}\nif (!requireNamespace(\"broom\", quietly = TRUE)) {\n  install.packages(\"broom\")\n}\nif (!requireNamespace(\"modelr\", quietly = TRUE)) {\n  install.packages(\"modelr\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggdist)\nlibrary(tidyr)\nlibrary(broom)\nlibrary(modelr)\nlibrary(ggplot2)",
    "crumbs": [
      "HIPLOT",
      "Dist Plot"
    ]
  },
  {
    "objectID": "Hiplot/066-ggdist.html#data-preparation",
    "href": "Hiplot/066-ggdist.html#data-preparation",
    "title": "Dist Plot",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data are five conditions and their corresponding values.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/ggdist/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\ndata[, 1] &lt;- factor(data[, 1], levels = rev(unique(data[, 1])))\ndata &lt;- tibble(data)\ndata2 = lm(response ~ condition, data = data)\ndata3 &lt;- data_grid(data, condition) %&gt;%\n  augment(data2, newdata = ., se_fit = TRUE)\n\n# View data\nhead(data)\n\n# A tibble: 6 × 2\n  condition response\n  &lt;fct&gt;        &lt;dbl&gt;\n1 A           -0.420\n2 B            1.69 \n3 C            1.37 \n4 D            1.04 \n5 E           -0.144\n6 A           -0.301",
    "crumbs": [
      "HIPLOT",
      "Dist Plot"
    ]
  },
  {
    "objectID": "Hiplot/066-ggdist.html#visualization",
    "href": "Hiplot/066-ggdist.html#visualization",
    "title": "Dist Plot",
    "section": "Visualization",
    "text": "Visualization\n\n# Dist Plot\np &lt;- ggplot(data3, aes_(y = as.name(colnames(data[1])))) +\n  stat_dist_halfeye(aes(dist = \"student_t\", arg1 = df.residual(data2),\n                        arg2 = .fitted, arg3 = .se.fit),\n                    scale = .5) +\n  geom_point(aes_(x = as.name(colnames(data[2]))),\n             data = data, pch = \"|\", size = 2,\n             position = position_nudge(y = -.15)) +\n  ggtitle(\"ggdist Plot\") + \n  xlab(\"response\") + ylab(\"condition\") +\n  theme_ggdist() +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n\np\n\n\n\n\n\n\n\nFigure 1: Dist Plot\n\n\n\n\n\nThe diagram shows the confidence distribution of the mean under the conditions, and the approximate distribution of the corresponding values under the five conditions can be seen.",
    "crumbs": [
      "HIPLOT",
      "Dist Plot"
    ]
  },
  {
    "objectID": "Hiplot/035-custom-icon-scatter.html",
    "href": "Hiplot/035-custom-icon-scatter.html",
    "title": "Custom Icon Scatter",
    "section": "",
    "text": "A scatter plot with customizable icons.",
    "crumbs": [
      "HIPLOT",
      "Custom Icon Scatter"
    ]
  },
  {
    "objectID": "Hiplot/035-custom-icon-scatter.html#setup",
    "href": "Hiplot/035-custom-icon-scatter.html#setup",
    "title": "Custom Icon Scatter",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; echarts4r; echarts4r.assets\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"echarts4r\", quietly = TRUE)) {\n  install.packages(\"echarts4r\")\n}\nif (!requireNamespace(\"echarts4r.assets\", quietly = TRUE)) {\n  install_github(\"JohnCoene/echarts4r.assets\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(echarts4r)\nlibrary(echarts4r.assets)",
    "crumbs": [
      "HIPLOT",
      "Custom Icon Scatter"
    ]
  },
  {
    "objectID": "Hiplot/035-custom-icon-scatter.html#data-preparation",
    "href": "Hiplot/035-custom-icon-scatter.html#data-preparation",
    "title": "Custom Icon Scatter",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/custom-icon-scatter/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# convert data structure\ndraw_data &lt;- data.frame(\n  x = data[[\"mpg\"]],\n  y = data[[\"wt\"]],\n  size = data[[\"qsec\"]]\n  )\nrm(data)\n\n# View data\nhead(draw_data)\n\n     x     y  size\n1 21.0 2.620 16.46\n2 21.0 2.875 17.02\n3 22.8 2.320 18.61\n4 21.4 3.215 19.44\n5 18.7 3.440 17.02\n6 18.1 3.460 20.22",
    "crumbs": [
      "HIPLOT",
      "Custom Icon Scatter"
    ]
  },
  {
    "objectID": "Hiplot/035-custom-icon-scatter.html#visualization",
    "href": "Hiplot/035-custom-icon-scatter.html#visualization",
    "title": "Custom Icon Scatter",
    "section": "Visualization",
    "text": "Visualization\n\n# Custom Icon Scatter\np &lt;- draw_data |&gt;\n  e_charts(x) |&gt;\n  e_scatter(\n    y,\n    size,\n    symbol = ea_icons(\"warning\"),\n    name = \"warning\"\n    )\n\np\n\n\n\n\n\n\n\nFigure 1: Custom Icon Scatter",
    "crumbs": [
      "HIPLOT",
      "Custom Icon Scatter"
    ]
  },
  {
    "objectID": "Hiplot/168-streamgraph.html",
    "href": "Hiplot/168-streamgraph.html",
    "title": "Streamgraph",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Streamgraph plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/streamgraph?lang=en",
    "crumbs": [
      "HIPLOT",
      "Streamgraph"
    ]
  },
  {
    "objectID": "Hiplot/168-streamgraph.html#setup",
    "href": "Hiplot/168-streamgraph.html#setup",
    "title": "Streamgraph",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; streamgraph\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"streamgraph\", quietly = TRUE)) {\n  install_github(\"hrbrmstr/streamgraph\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(streamgraph)",
    "crumbs": [
      "HIPLOT",
      "Streamgraph"
    ]
  },
  {
    "objectID": "Hiplot/168-streamgraph.html#data-preparation",
    "href": "Hiplot/168-streamgraph.html#data-preparation",
    "title": "Streamgraph",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/streamgraph/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# convert data structure\ncolnames(data) &lt;- c(\"date\",\"key\",\"value\")\n\n# View data\nhead(data)\n\n  date key  value\n1 1990   a 0.7688\n2 1990   b 0.5782\n3 1990   c 0.8164\n4 1990   d 0.4791\n5 1990   e 0.8793\n6 1990   f 0.4640",
    "crumbs": [
      "HIPLOT",
      "Streamgraph"
    ]
  },
  {
    "objectID": "Hiplot/168-streamgraph.html#visualization",
    "href": "Hiplot/168-streamgraph.html#visualization",
    "title": "Streamgraph",
    "section": "Visualization",
    "text": "Visualization\n\n# Streamgraph\np &lt;- streamgraph(data, key = \"key\", value = \"value\", date = \"date\",\n                 offset = \"silhouette\", interpolate = \"cardinal\",\n                 interactive = F, scale = \"date\") %&gt;% \n  sg_fill_brewer(palette = \"Spectral\")\n\np\n\n\n\n\n\n\n\n\nFigure 1: Streamgraph",
    "crumbs": [
      "HIPLOT",
      "Streamgraph"
    ]
  },
  {
    "objectID": "Hiplot/129-neural-network.html",
    "href": "Hiplot/129-neural-network.html",
    "title": "Neural Network",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Neural Network plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/neural-network?lang=en",
    "crumbs": [
      "HIPLOT",
      "Neural Network"
    ]
  },
  {
    "objectID": "Hiplot/129-neural-network.html#setup",
    "href": "Hiplot/129-neural-network.html#setup",
    "title": "Neural Network",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; NeuralNetTools; nnet\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"NeuralNetTools\", quietly = TRUE)) {\n  install.packages(\"NeuralNetTools\")\n}\nif (!requireNamespace(\"nnet\", quietly = TRUE)) {\n  install.packages(\"nnet\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(NeuralNetTools)\nlibrary(nnet)",
    "crumbs": [
      "HIPLOT",
      "Neural Network"
    ]
  },
  {
    "objectID": "Hiplot/129-neural-network.html#data-preparation",
    "href": "Hiplot/129-neural-network.html#data-preparation",
    "title": "Neural Network",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/neural-network/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# View data\nhead(data)\n\n         Y1        Y2          X1         X2         X3\n1 0.7646258 0.5494452 -0.89691455 -1.8923489  0.6408445\n2 0.2383994 0.4605024  0.18484918  1.2928042 -1.6013778\n3 0.3800247 0.2527468  1.58784533 -0.6182543 -0.7778154\n4 0.3545279 0.6319730 -1.13037567  1.0409383 -1.6473925\n5 0.3667356 0.4684437 -0.08025176  1.1758795  0.1542662\n6 0.5509560 0.4439474  0.13242028 -1.5018321 -1.1756313",
    "crumbs": [
      "HIPLOT",
      "Neural Network"
    ]
  },
  {
    "objectID": "Hiplot/129-neural-network.html#visualization",
    "href": "Hiplot/129-neural-network.html#visualization",
    "title": "Neural Network",
    "section": "Visualization",
    "text": "Visualization\n\n# Neural Network\nmod &lt;- nnet(Y1 ~ X1 + X2 + X3, data = neuraldat, size = 10,\n            maxint = 100, decay = 0)\n\n# weights:  51\ninitial  value 172.701547 \niter  10 value 0.502929\niter  20 value 0.169001\niter  30 value 0.048866\niter  40 value 0.032340\niter  50 value 0.020952\niter  60 value 0.016914\niter  70 value 0.012702\niter  80 value 0.009391\niter  90 value 0.007237\niter 100 value 0.005075\nfinal  value 0.005075 \nstopped after 100 iterations\n\n# plot\npar(mar = numeric(4))\nplotnet(mod)\n\n\n\n\n\n\n\nFigure 1: Neural Network",
    "crumbs": [
      "HIPLOT",
      "Neural Network"
    ]
  },
  {
    "objectID": "Hiplot/174-tricolor-histogram.html",
    "href": "Hiplot/174-tricolor-histogram.html",
    "title": "Tricolor Histogram",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Tricolor Histogram plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/tricolor-histogram?lang=en\nThe tricolored histogram divides the histogram into three regions: low-value zone, middle-value zone, and high-value zone, using three different colors.",
    "crumbs": [
      "HIPLOT",
      "Tricolor Histogram"
    ]
  },
  {
    "objectID": "Hiplot/174-tricolor-histogram.html#setup",
    "href": "Hiplot/174-tricolor-histogram.html#setup",
    "title": "Tricolor Histogram",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)",
    "crumbs": [
      "HIPLOT",
      "Tricolor Histogram"
    ]
  },
  {
    "objectID": "Hiplot/174-tricolor-histogram.html#data-preparation",
    "href": "Hiplot/174-tricolor-histogram.html#data-preparation",
    "title": "Tricolor Histogram",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/tricolor-histogram/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# convert data structure\ndata$draw_color &lt;- ifelse(data$value &lt; 5, \"#F44336\",\n                          ifelse(data$value &gt; 7, \"#006064\", \"#3F51B5\")\n)\n\n# View data\nhead(data)\n\n    values draw_color\n1 6.063364    #3F51B5\n2 4.354496    #F44336\n3 5.569931    #3F51B5\n4 5.602465    #3F51B5\n5 6.831472    #3F51B5\n6 6.055604    #3F51B5",
    "crumbs": [
      "HIPLOT",
      "Tricolor Histogram"
    ]
  },
  {
    "objectID": "Hiplot/174-tricolor-histogram.html#visualization",
    "href": "Hiplot/174-tricolor-histogram.html#visualization",
    "title": "Tricolor Histogram",
    "section": "Visualization",
    "text": "Visualization\n\n# Tricolor Histogram\np &lt;- ggplot(data, aes(x = values, fill = draw_color)) +\n  geom_histogram(alpha = 0.5, binwidth = 0.05, position = \"identity\") +\n    scale_fill_manual(values = c(\"#3F51B5\", \"#006064\", \"#F44336\")) +\n  theme_bw()\n\np\n\n\n\n\n\n\n\nFigure 1: Tricolor Histogram",
    "crumbs": [
      "HIPLOT",
      "Tricolor Histogram"
    ]
  },
  {
    "objectID": "Hiplot/185-waterfalls-plot.html",
    "href": "Hiplot/185-waterfalls-plot.html",
    "title": "Waterfalls Plot2",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Waterfalls Plot2 plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/waterfalls-plot?lang=en\nUsed to visualize changes in data, with the difference from version 1 being the ability to customize the colors for upward and downward values.",
    "crumbs": [
      "HIPLOT",
      "Waterfalls Plot2"
    ]
  },
  {
    "objectID": "Hiplot/185-waterfalls-plot.html#setup",
    "href": "Hiplot/185-waterfalls-plot.html#setup",
    "title": "Waterfalls Plot2",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; waterfalls; ggplot2\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"waterfalls\", quietly = TRUE)) {\n  install.packages(\"waterfalls\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(waterfalls)\nlibrary(ggplot2)",
    "crumbs": [
      "HIPLOT",
      "Waterfalls Plot2"
    ]
  },
  {
    "objectID": "Hiplot/185-waterfalls-plot.html#data-preparation",
    "href": "Hiplot/185-waterfalls-plot.html#data-preparation",
    "title": "Waterfalls Plot2",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/waterfalls-plot/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# convert data structure\ndata[[\"name\"]] &lt;- factor(data[[\"name\"]], levels = data[[\"name\"]])\ndata$fill &lt;- ifelse(data$value &gt; 0, \"#B71C1C\", \"#1B5E20\")\n\n# View data\nhead(data)\n\n  name value    fill\n1    A   100 #B71C1C\n2    B   -20 #1B5E20\n3    C   120 #B71C1C\n4    D   -40 #1B5E20\n5    E  -100 #1B5E20\n6    F    80 #B71C1C",
    "crumbs": [
      "HIPLOT",
      "Waterfalls Plot2"
    ]
  },
  {
    "objectID": "Hiplot/185-waterfalls-plot.html#visualization",
    "href": "Hiplot/185-waterfalls-plot.html#visualization",
    "title": "Waterfalls Plot2",
    "section": "Visualization",
    "text": "Visualization\n\n# Waterfalls Plot2\np &lt;- waterfall(data, calc_total = T, rect_width = 0.7, fill_by_sign = F,\n               fill_colours = data$fill, total_rect_color = \"#1E065D\") +\n  theme_bw()\n\np\n\n\n\n\n\n\n\nFigure 1: Waterfalls Plot2",
    "crumbs": [
      "HIPLOT",
      "Waterfalls Plot2"
    ]
  },
  {
    "objectID": "Hiplot/125-multiple-histograms.html",
    "href": "Hiplot/125-multiple-histograms.html",
    "title": "Multiple Histograms",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Multiple Histograms plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/multiple-histograms?lang=en\nMultiple histograms are plotted on the same graph to compare differences between multiple sets of data.",
    "crumbs": [
      "HIPLOT",
      "Multiple Histograms"
    ]
  },
  {
    "objectID": "Hiplot/125-multiple-histograms.html#setup",
    "href": "Hiplot/125-multiple-histograms.html#setup",
    "title": "Multiple Histograms",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)",
    "crumbs": [
      "HIPLOT",
      "Multiple Histograms"
    ]
  },
  {
    "objectID": "Hiplot/125-multiple-histograms.html#data-preparation",
    "href": "Hiplot/125-multiple-histograms.html#data-preparation",
    "title": "Multiple Histograms",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/multiple-histograms/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# View data\nhead(data)\n\n  type    value\n1   v1 3.059937\n2   v1 1.907186\n3   v1 4.278629\n4   v1 3.834794\n5   v1 5.493830\n6   v1 1.380032",
    "crumbs": [
      "HIPLOT",
      "Multiple Histograms"
    ]
  },
  {
    "objectID": "Hiplot/125-multiple-histograms.html#visualization",
    "href": "Hiplot/125-multiple-histograms.html#visualization",
    "title": "Multiple Histograms",
    "section": "Visualization",
    "text": "Visualization\n\n# Multiple Histograms\np &lt;- ggplot(data, aes(x = value, fill = type)) +\n  geom_histogram(color = \"black\", alpha = 0.5, \n                 position = \"identity\", binwidth = 0.3) +\n  scale_fill_manual(values = c(\"#BC3C29FF\",\"#0072B5FF\")) +\n  theme_bw()\n\np\n\n\n\n\n\n\n\nFigure 1: Multiple Histograms",
    "crumbs": [
      "HIPLOT",
      "Multiple Histograms"
    ]
  },
  {
    "objectID": "Hiplot/082-group-comparison.html",
    "href": "Hiplot/082-group-comparison.html",
    "title": "Group-comparison Heatmap",
    "section": "",
    "text": "Group-comparison Heatmap provides a way to compare multiple variables across multiple (&gt;2) groups and visualize the result with heatmap.",
    "crumbs": [
      "HIPLOT",
      "Group-comparison Heatmap"
    ]
  },
  {
    "objectID": "Hiplot/082-group-comparison.html#setup",
    "href": "Hiplot/082-group-comparison.html#setup",
    "title": "Group-comparison Heatmap",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; sigminer\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"sigminer\", quietly = TRUE)) {\n  install_github(\"ShixiangWang/sigminer\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(sigminer)",
    "crumbs": [
      "HIPLOT",
      "Group-comparison Heatmap"
    ]
  },
  {
    "objectID": "Hiplot/082-group-comparison.html#data-preparation",
    "href": "Hiplot/082-group-comparison.html#data-preparation",
    "title": "Group-comparison Heatmap",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/group-comparison/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# View data\nhead(data)\n\n  g1 g2 e1         e2\n1  A AA  N -1.8060313\n2  A AA  N -0.5820759\n3  A AA  N -1.1088896\n4  A AA  N -1.0149620\n5  A AA  P -0.1623095\n6  A AA  N  0.5630558",
    "crumbs": [
      "HIPLOT",
      "Group-comparison Heatmap"
    ]
  },
  {
    "objectID": "Hiplot/082-group-comparison.html#visualization",
    "href": "Hiplot/082-group-comparison.html#visualization",
    "title": "Group-comparison Heatmap",
    "section": "Visualization",
    "text": "Visualization\n\n# Define plot functions\nunlist_and_covert &lt;- function(x, recursive = FALSE) {\n  if (!is.null(x)) {\n    x &lt;- unlist(x, recursive = recursive)\n    if (!is.null(x)) {\n      y &lt;- sapply(x, function(x) {\n        if (identical(x, \"NA\")) NA else x\n      })\n      names(y) &lt;- names(x)\n      x &lt;- y\n    }\n  }\n  x\n}\n\nplotentry &lt;- function(data,\n                      grp_vars = NULL, enrich_vars = NULL, cross = TRUE,\n                      co_method = c(\"t.test\", \"wilcox.test\"), ref_group = NA,\n                      scales = \"free\", add_text_annotation = TRUE,\n                      fill_by_p_value = TRUE, use_fdr = TRUE, cut_p_value = FALSE,\n                      cluster_row = FALSE) {\n  ref_group &lt;- unlist_and_covert(ref_group)\n  if (is.null(ref_group)) ref_group &lt;- NA\n  rv &lt;- group_enrichment(data, grp_vars, enrich_vars, cross, co_method, ref_group)\n  if (length(unique(rv$grp_var)) == 1) {\n    p &lt;- show_group_enrichment(rv,\n      return_list = TRUE,\n      scales = scales, add_text_annotation = add_text_annotation,\n      fill_by_p_value = fill_by_p_value, use_fdr = use_fdr, cut_p_value = cut_p_value,\n      cluster_row = cluster_row\n    )\n    p &lt;- p[[1]]\n  } else {\n    p &lt;- show_group_enrichment(rv,\n      scales = scales, add_text_annotation = add_text_annotation,\n      fill_by_p_value = fill_by_p_value, use_fdr = use_fdr, cut_p_value = cut_p_value,\n      cluster_row = cluster_row\n    )\n  }\n  return(p)\n}\n\n# plot\np &lt;- plotentry(\n  data = data,\n  grp_vars = \"g1\",\n  enrich_vars = c(\"e1\", \"e2\"),\n  cross = T,\n  add_text_annotation = T,\n  fill_by_p_value = T,\n  use_fdr = T,\n  cut_p_value = F,\n  cluster_row = F,\n  co_method = \"t.test\",\n  scales = \"free\"\n)\n\np\n\n\n\n\n\n\n\nFigure 1: Group-comparison Heatmap",
    "crumbs": [
      "HIPLOT",
      "Group-comparison Heatmap"
    ]
  },
  {
    "objectID": "Hiplot/074-ggseqlogo.html",
    "href": "Hiplot/074-ggseqlogo.html",
    "title": "Seqlogo",
    "section": "",
    "text": "The sequence LOGO is a graphic that describes a sequence pattern of binding sites.",
    "crumbs": [
      "HIPLOT",
      "Seqlogo"
    ]
  },
  {
    "objectID": "Hiplot/074-ggseqlogo.html#setup",
    "href": "Hiplot/074-ggseqlogo.html#setup",
    "title": "Seqlogo",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggseqlogo; ggplot2\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggseqlogo\", quietly = TRUE)) {\n  install.packages(\"ggseqlogo\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggseqlogo)\nlibrary(ggplot2)",
    "crumbs": [
      "HIPLOT",
      "Seqlogo"
    ]
  },
  {
    "objectID": "Hiplot/074-ggseqlogo.html#data-preparation",
    "href": "Hiplot/074-ggseqlogo.html#data-preparation",
    "title": "Seqlogo",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data is the Sequence of binding sites for multiple transcription factors on multiple genes.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/ggseqlogo/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\ndata &lt;- data[, !sapply(data, function(x) {all(is.na(x))})]\ndata &lt;- as.list(data)\ndata &lt;- lapply(data, function(x) {return(x[!is.na(x)])})\n\n# View data\nstr(data[1:5])\n\nList of 5\n $ MA0001.1: chr [1:97] \"CCATATATAG\" \"CCATATATAG\" \"CCATAAATAG\" \"CCATAAATAG\" ...\n $ MA0002.1: chr [1:26] \"AATTGTGGTTA\" \"ATCTGTGGTTA\" \"AATTGTGGTAA\" \"TTCTGCGGTTA\" ...\n $ MA0004.1: chr [1:20] \"CACGTG\" \"CACGTG\" \"CACGTG\" \"CACGTG\" ...\n $ MA0005.1: chr [1:90] \"CCTAATTGGGC\" \"CCTAATTTGGC\" \"CCTAATCGGGC\" \"CCTAATCGGGC\" ...\n $ MA0006.1: chr [1:24] \"CGCGTG\" \"CGCGTG\" \"CGCGTG\" \"CGCGTG\" ...",
    "crumbs": [
      "HIPLOT",
      "Seqlogo"
    ]
  },
  {
    "objectID": "Hiplot/074-ggseqlogo.html#visualization",
    "href": "Hiplot/074-ggseqlogo.html#visualization",
    "title": "Seqlogo",
    "section": "Visualization",
    "text": "Visualization\n\n# Seqlogo\np &lt;- ggseqlogo(\n  data,\n  ncol = 4,\n  col_scheme = \"nucleotide\",\n  seq_type = \"dna\",\n  method = \"bits\") + \n  theme(plot.title = element_text(hjust = 0.5))\n\np\n\n\n\n\n\n\n\nFigure 1: Seqlogo\n\n\n\n\n\nA sequence of binding sites was displayed in a column of the chart by means of BITS calculation, which could clearly observe the large proportion of bases of different sequences.",
    "crumbs": [
      "HIPLOT",
      "Seqlogo"
    ]
  },
  {
    "objectID": "Hiplot/053-ezcox.html",
    "href": "Hiplot/053-ezcox.html",
    "title": "Cox Models Forest",
    "section": "",
    "text": "Cox model forest is a visual representation of a COX model that constructs a risk forest map to facilitate variable screening.",
    "crumbs": [
      "HIPLOT",
      "Cox Models Forest"
    ]
  },
  {
    "objectID": "Hiplot/053-ezcox.html#setup",
    "href": "Hiplot/053-ezcox.html#setup",
    "title": "Cox Models Forest",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ezcox\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ezcox\", quietly = TRUE)) {\n  install.packages(\"ezcox\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ezcox)",
    "crumbs": [
      "HIPLOT",
      "Cox Models Forest"
    ]
  },
  {
    "objectID": "Hiplot/053-ezcox.html#data-preparation",
    "href": "Hiplot/053-ezcox.html#data-preparation",
    "title": "Cox Models Forest",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data are time,status and multiple variable factor.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/ezcox/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# View data\nhead(data)\n\n  time status sex ph.ecog age\n1  306      2   1       1  74\n2  455      2   1       0  68\n3 1010      1   1       0  56\n4  210      2   1       1  57\n5  883      2   1       0  60\n6 1022      1   1       1  74",
    "crumbs": [
      "HIPLOT",
      "Cox Models Forest"
    ]
  },
  {
    "objectID": "Hiplot/053-ezcox.html#visualization",
    "href": "Hiplot/053-ezcox.html#visualization",
    "title": "Cox Models Forest",
    "section": "Visualization",
    "text": "Visualization\n\n# Cox Models Forest\np &lt;- show_forest(\n  data = data,\n  covariates = c(\"sex\", \"ph.ecog\"),\n  controls = \"age\",\n  merge_models = F,\n  drop_controls = F,\n  add_caption = T\n)\n\np\n\n\n\n\n\n\n\nFigure 1: Cox Models Forest\n\n\n\n\n\nThe first column of the table shows the variables and sample numbers, the second column shows the forest plot, and the third column shows the CI 95% confidence interval range, its mean and P values.\nForest map interpretation.\nThe middle vertical line represents the invalid line, the horizontal line represents the 95% confidence interval of the variable factor, and the length represents the magnitude of the confidence interval. If the confidence interval of a variable factor intersects the invalid line, the variable factor is considered to have no statistical significance, and the position of the square is the point estimation of HR.\nAge is the control variable.\nThe incidence of the ph.ecog factor is greater than that of the age factor, and the ph.ecog factor increases the occurrence of survival (P&lt;0.001, statistically significant).\nThe incidence of sex is less than that of age, and sex reduces the incidence of survival (P =0.002&lt;0.05, statistically significant).",
    "crumbs": [
      "HIPLOT",
      "Cox Models Forest"
    ]
  },
  {
    "objectID": "Hiplot/055-fishplot.html",
    "href": "Hiplot/055-fishplot.html",
    "title": "Fishplot",
    "section": "",
    "text": "Clone evolution analysis",
    "crumbs": [
      "HIPLOT",
      "Fishplot"
    ]
  },
  {
    "objectID": "Hiplot/055-fishplot.html#setup",
    "href": "Hiplot/055-fishplot.html#setup",
    "title": "Fishplot",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; fishplot\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"fishplot\", quietly = TRUE)) {\n  install_github(\"chrisamiller/fishplot\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(fishplot)",
    "crumbs": [
      "HIPLOT",
      "Fishplot"
    ]
  },
  {
    "objectID": "Hiplot/055-fishplot.html#data-preparation",
    "href": "Hiplot/055-fishplot.html#data-preparation",
    "title": "Fishplot",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/fishplot/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# View data\nhead(data)\n\n  timepoints parents sample.name event1 event2 event3 event4\n1          0       0     Sample1    100      2      2     98\n2         30       1     Sample1     45      0      0      0\n3         75       1     Sample1      0      0      2     95\n4        150       3     Sample1      0      0      1     40\n\n\n\ntimepoints: specifying the timepoints for each column of the matrix\nparents: specifying parental relationships between clones\nsamplename: samplename (support multiple samples)\nother: a numeric matrix containing tumor fraction estimates for all clones at all timepoints",
    "crumbs": [
      "HIPLOT",
      "Fishplot"
    ]
  },
  {
    "objectID": "Hiplot/055-fishplot.html#visualization",
    "href": "Hiplot/055-fishplot.html#visualization",
    "title": "Fishplot",
    "section": "Visualization",
    "text": "Visualization\n\n## Create a fish object\nfish = createFishObject(as.matrix(data[,4:7]), parents=data$parents, \n                        timepoints=data$timepoints, \n                        col = c(\"#888888\",\"#e8130c\",\"#f8150d\",\"#55158f\"))\n## Calculate the layout of the drawing\nfish = layoutClones(fish)\n## Draw the plot, using the splining method (recommended), and providing both timepoints to label and a plot title\nfishPlot(fish,shape=\"spline\", title.btm=\"Sample1\", title = \"Fishplot\",\n         cex.title=1, vlines=c(0,30,75,150), \n         vlab=c(\"Day 0\",\"Day 30\",\"Day 75\",\"Day 150\"))\n\n\n\n\n\n\n\nFigure 1: Fishplot",
    "crumbs": [
      "HIPLOT",
      "Fishplot"
    ]
  },
  {
    "objectID": "Hiplot/052-extended-scatter.html",
    "href": "Hiplot/052-extended-scatter.html",
    "title": "Extended Scatter",
    "section": "",
    "text": "An extended scatter plot adds marginal plots to the basic scatter plot to provide a more comprehensive view of the data distribution.",
    "crumbs": [
      "HIPLOT",
      "Extended Scatter"
    ]
  },
  {
    "objectID": "Hiplot/052-extended-scatter.html#setup",
    "href": "Hiplot/052-extended-scatter.html#setup",
    "title": "Extended Scatter",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2; ggExtra\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"ggExtra\", quietly = TRUE)) {\n  install.packages(\"ggExtra\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(ggExtra)",
    "crumbs": [
      "HIPLOT",
      "Extended Scatter"
    ]
  },
  {
    "objectID": "Hiplot/052-extended-scatter.html#data-preparation",
    "href": "Hiplot/052-extended-scatter.html#data-preparation",
    "title": "Extended Scatter",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/extended-scatter/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# View data\nhead(data)\n\n   mpg cyl disp  hp drat    wt  qsec vs am gear carb\n1 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\n2 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\n3 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n4 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\n5 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\n6 18.1   6  225 105 2.76 3.460 20.22  1  0    3    1",
    "crumbs": [
      "HIPLOT",
      "Extended Scatter"
    ]
  },
  {
    "objectID": "Hiplot/052-extended-scatter.html#visualization",
    "href": "Hiplot/052-extended-scatter.html#visualization",
    "title": "Extended Scatter",
    "section": "Visualization",
    "text": "Visualization\n\n# Extended Scatter\np &lt;- ggplot(data, aes(x = wt, y = mpg, color = cyl, size = cyl)) +\n  geom_point() +\n  geom_rug(alpha = 0.2, size = 1.5, col = \"#4f80b3\") +\n  theme(legend.position = \"none\")\n\np &lt;- ggMarginal(\n  p, type = \"densigram\", fill = \"#7054cc\", color = \"#7f0080\",\n  size = 4, bins = 30)\n\np\n\n\n\n\n\n\n\nFigure 1: Extended Scatter",
    "crumbs": [
      "HIPLOT",
      "Extended Scatter"
    ]
  },
  {
    "objectID": "Hiplot/131-nomogram.html",
    "href": "Hiplot/131-nomogram.html",
    "title": "Nomogram",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Nomogram plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/nomogram?lang=en\nNomogram is often used to evaluate the prognosis of oncology and medicine, and can visualize the results of logistic regression or Cox regression.",
    "crumbs": [
      "HIPLOT",
      "Nomogram"
    ]
  },
  {
    "objectID": "Hiplot/131-nomogram.html#setup",
    "href": "Hiplot/131-nomogram.html#setup",
    "title": "Nomogram",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; survival; rms; ggplotify\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"survival\", quietly = TRUE)) {\n  install.packages(\"survival\")\n}\nif (!requireNamespace(\"rms\", quietly = TRUE)) {\n  install.packages(\"rms\")\n}\nif (!requireNamespace(\"ggplotify\", quietly = TRUE)) {\n  install.packages(\"ggplotify\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(survival)\nlibrary(rms)\nlibrary(ggplotify)",
    "crumbs": [
      "HIPLOT",
      "Nomogram"
    ]
  },
  {
    "objectID": "Hiplot/131-nomogram.html#data-preparation",
    "href": "Hiplot/131-nomogram.html#data-preparation",
    "title": "Nomogram",
    "section": "Data Preparation",
    "text": "Data Preparation\nSurvival data frame with time, which sex and status are presented by number such as 0,1 according to example data.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/nomogram/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\ndd &lt;- datadist(data)\noptions(datadist = \"dd\")\n## Build COX model and run nomogram\ncox_res &lt;- psm(\n  data = data,\n  as.formula(paste(\n    sprintf(\"Surv(%s, %s) ~ \", colnames(data)[1], colnames(data)[2]),\n    paste(colnames(data)[3:length(colnames(data))],\n      collapse = \"+\"\n    )\n  )),\n  # Surv(time, status) ~ age + sex + ph.ecog + ph.karno + pat.karno,\n  dist = \"lognormal\"\n)\n## Build survival probability function\nsurv &lt;- Survival(cox_res)\n## Build quantile survival time function\nmed &lt;- Quantile(cox_res)\n\ncox_nomo &lt;- nomogram(\n  cox_res,\n  fun = list(function(x) surv(365, x), function(x) surv(1095, x),\n             function(x) surv(1825, x), function(x) med(lp = x)),\n  funlabel = c(\"1-year Survival Probability\",\n               \"3-year Survival Probability\",\n               \"5-year Survival Probability\",\n               \"Median Survival Time\"),\n  maxscale = 100\n)\n\n# View data\nhead(data)\n\n  time status age sex ph.ecog ph.karno pat.karno meal.cal wt.loss\n1  306      2  74   1       1       90       100     1175      NA\n2  455      2  68   1       0       90        90     1225      15\n3 1010      1  56   1       0       90        90       NA      15\n4  210      2  57   1       1       90        60     1150      11\n5  883      2  60   1       0      100        90       NA       0\n6 1022      1  74   1       1       50        80      513       0",
    "crumbs": [
      "HIPLOT",
      "Nomogram"
    ]
  },
  {
    "objectID": "Hiplot/131-nomogram.html#visualization",
    "href": "Hiplot/131-nomogram.html#visualization",
    "title": "Nomogram",
    "section": "Visualization",
    "text": "Visualization\n\n# Nomogram\np &lt;- as.ggplot(function() {\n  plot(cox_nomo, scale = 1)\n  title(main = \"Nomogram (COX)\")\n})\n\np\n\n\n\n\n\n\n\nFigure 1: Nomogram",
    "crumbs": [
      "HIPLOT",
      "Nomogram"
    ]
  },
  {
    "objectID": "Hiplot/183-volcano.html",
    "href": "Hiplot/183-volcano.html",
    "title": "Volcano",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Volcano plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/volcano?lang=en\nThe volcanogram is a visual representation of the difference in gene expression between two samples.",
    "crumbs": [
      "HIPLOT",
      "Volcano"
    ]
  },
  {
    "objectID": "Hiplot/183-volcano.html#setup",
    "href": "Hiplot/183-volcano.html#setup",
    "title": "Volcano",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggpubr\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggpubr\", quietly = TRUE)) {\n  install.packages(\"ggpubr\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggpubr)",
    "crumbs": [
      "HIPLOT",
      "Volcano"
    ]
  },
  {
    "objectID": "Hiplot/183-volcano.html#data-preparation",
    "href": "Hiplot/183-volcano.html#data-preparation",
    "title": "Volcano",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data is the gene name and its corresponding logFC and p.value.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/volcano/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# convert data structure\n## Perform log10 transformation on the difference p (adj.P.Val column)\ndata[, \"logP\"] &lt;- -log10(as.numeric(data[, \"P.Value\"]))\ndata[, \"logFC\"] &lt;- as.numeric(data[, \"logFC\"])\n## Add a new column Group\ndata[, \"Group\"] &lt;- \"not-significant\"\n## Up and down\ndata$Group[which((data[, \"P.Value\"] &lt; 0.05) & (data$logFC &gt;= 2))] &lt;- \"Up-regulated\"\ndata$Group[which((data[, \"P.Value\"] &lt; 0.05) & (data$logFC &lt;= 2 * -1))] &lt;- \"Down-regulated\"\n## Add a new column Label\ndata[[\"Label\"]] &lt;- \"\"\n## Sort the p-values of differentially expressed genes from small to large\ndata &lt;- data[order(data[, \"P.Value\"]), ]\n## Among the highly expressed genes, select the 10 with the smallest adj.P.Val\nup_genes &lt;- head(data[, \"Symbol\"][which(data$Group == \"Up-regulated\")], 10)\ndown_genes &lt;- head(data[, \"Symbol\"][which(data$Group == \"Down-regulated\")], 10)\nnot_sig_genes &lt;- NA\n## Merge up_genes and down_genes and add them to Label\ndeg_top_genes &lt;- c(as.character(up_genes), as.character(not_sig_genes),\nas.character(down_genes))\ndeg_top_genes &lt;- deg_top_genes[!is.na(deg_top_genes)]\ndata$Label[match(deg_top_genes, data[, \"Symbol\"])] &lt;- deg_top_genes\n\n# View data\nhead(data)\n\n    Symbol     logFC  P.Value     logP           Group    Label\n1      LTB  2.580831 1.17e-14 13.93181    Up-regulated      LTB\n2    CDCA5 -2.326302 2.46e-13 12.60906  Down-regulated    CDCA5\n3 C10orf54  3.307901 3.53e-13 12.45223    Up-regulated C10orf54\n4    CAPN7  2.514235 1.04e-12 11.98297    Up-regulated    CAPN7\n5     OIP5 -2.166620 1.43e-12 11.84466  Down-regulated     OIP5\n7     PKIG -1.560504 1.58e-12 11.80134 not-significant",
    "crumbs": [
      "HIPLOT",
      "Volcano"
    ]
  },
  {
    "objectID": "Hiplot/183-volcano.html#visualization",
    "href": "Hiplot/183-volcano.html#visualization",
    "title": "Volcano",
    "section": "Visualization",
    "text": "Visualization\n\n# Volcano\noptions(ggrepel.max.overlaps = 100)\np &lt;- ggscatter(data, x = \"logFC\", y = \"logP\", color = \"Group\", \n               palette = c(\"#2f5688\", \"#BBBBBB\", \"#CC0000\"), size = 1, \n               alpha = 0.5, font.label = 8, repel = TRUE, label=data$Label,\n               xlab = \"log2(Fold Change)\", ylab = \"-log10(P Value)\",\n               show.legend.text = FALSE) +\n  ggtitle(\"Volcano Plot\") +\n  geom_hline(yintercept = -log(0.05, 10), linetype = \"dashed\") +\n  geom_vline(xintercept = c(2, -2), linetype = \"dashed\") +\n  theme_bw() +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n\np\n\n\n\n\n\n\n\nFigure 1: Volcano\n\n\n\n\n\nThe horizontal axis is denoted by log2 (fold change), and the more different genes are distributed at both ends of the picture.The ordinate is denoted by -log10 (p.value) and is the negative log of the P value of T test significance.Blue dots represent down-regulated genes, red dots represent up-regulated genes, and gray dots represent genes that are not significantly different.",
    "crumbs": [
      "HIPLOT",
      "Volcano"
    ]
  },
  {
    "objectID": "Hiplot/132-parallel-coordinate.html",
    "href": "Hiplot/132-parallel-coordinate.html",
    "title": "Parallel Coordinate",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Parallel Coordinate plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/parallel-coordinate?lang=en",
    "crumbs": [
      "HIPLOT",
      "Parallel Coordinate"
    ]
  },
  {
    "objectID": "Hiplot/132-parallel-coordinate.html#setup",
    "href": "Hiplot/132-parallel-coordinate.html#setup",
    "title": "Parallel Coordinate",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; GGally; hrbrthemes; viridis; ggthemes\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"GGally\", quietly = TRUE)) {\n  install.packages(\"GGally\")\n}\nif (!requireNamespace(\"hrbrthemes\", quietly = TRUE)) {\n  install.packages(\"hrbrthemes\")\n}\nif (!requireNamespace(\"viridis\", quietly = TRUE)) {\n  install.packages(\"viridis\")\n}\nif (!requireNamespace(\"ggthemes\", quietly = TRUE)) {\n  install.packages(\"ggthemes\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(GGally)\nlibrary(hrbrthemes)\nlibrary(viridis)\nlibrary(ggthemes)",
    "crumbs": [
      "HIPLOT",
      "Parallel Coordinate"
    ]
  },
  {
    "objectID": "Hiplot/132-parallel-coordinate.html#data-preparation",
    "href": "Hiplot/132-parallel-coordinate.html#data-preparation",
    "title": "Parallel Coordinate",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/parallel-coordinate/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\ndata[, 6] &lt;- factor(data[, 6], levels = unique(data[, 6]))\n\n# View data\nhead(data)\n\n    Name Value1 Value2 Value3 Value4       Group\n1    ATR    5.1    3.5    1.4    0.2 p53 pathway\n2  CHEK1    4.9    3.0    1.4    0.2 p53 pathway\n3  GORAB    4.7    3.2    1.3    0.2 p53 pathway\n4 CDKN2A    4.6    3.1    1.5    0.2 p53 pathway\n5   MDM2    5.0    3.6    1.4    0.2 p53 pathway\n6   MDM4    5.4    3.9    1.7    0.4 p53 pathway",
    "crumbs": [
      "HIPLOT",
      "Parallel Coordinate"
    ]
  },
  {
    "objectID": "Hiplot/132-parallel-coordinate.html#visualization",
    "href": "Hiplot/132-parallel-coordinate.html#visualization",
    "title": "Parallel Coordinate",
    "section": "Visualization",
    "text": "Visualization\n\n# Parallel Coordinate\np &lt;- ggparcoord(data, columns = 2:(ncol(data) - 1), groupColumn = ncol(data),\n                title = \"Parallel Coordinate Plot for cancer Data\",\n                alphaLines = 0.3, scale = \"globalminmax\",\n                showPoints = T, boxplot = F) +\n  theme_base() +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12, hjust = 0.5),\n        axis.title = element_text(size = 10),\n        axis.text = element_text(size = 12),\n        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10)) +\n  scale_color_viridis(discrete = TRUE) +\n  facet_grid(formula(paste(\"~\", (colnames(data)[ncol(data)]))))\n\np\n\n\n\n\n\n\n\nFigure 1: Parallel Coordinate",
    "crumbs": [
      "HIPLOT",
      "Parallel Coordinate"
    ]
  },
  {
    "objectID": "Hiplot/141-pie.html",
    "href": "Hiplot/141-pie.html",
    "title": "Pie",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Pie plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/pie?lang=en\nThe pie chart is a statistical chart that shows the proportion of each part by dividing a circle into sections.",
    "crumbs": [
      "HIPLOT",
      "Pie"
    ]
  },
  {
    "objectID": "Hiplot/141-pie.html#setup",
    "href": "Hiplot/141-pie.html#setup",
    "title": "Pie",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2; dplyr\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"dplyr\", quietly = TRUE)) {\n  install.packages(\"dplyr\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(dplyr)",
    "crumbs": [
      "HIPLOT",
      "Pie"
    ]
  },
  {
    "objectID": "Hiplot/141-pie.html#data-preparation",
    "href": "Hiplot/141-pie.html#data-preparation",
    "title": "Pie",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data are different groups and their data.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/pie/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n\n# Convert data structure\ncolnames(data) &lt;- c(\"Group\", \"Value\")\ndata &lt;- data %&gt;%\n  arrange(desc(Group)) %&gt;%\n  mutate(prop = Value / sum(data$Value) * 100) %&gt;%\n  mutate(ypos = Value / length(unique(Group)) +\n           c(0, cumsum(Value)[-length(Value)]) + 5)\n\n# View data\nhead(data)\n\n   Group Value     prop   ypos\n1 Group4    43 38.73874  15.75\n2 Group3    21 18.91892  53.25\n3 Group2    34 30.63063  77.50\n4 Group1    13 11.71171 106.25",
    "crumbs": [
      "HIPLOT",
      "Pie"
    ]
  },
  {
    "objectID": "Hiplot/141-pie.html#visualization",
    "href": "Hiplot/141-pie.html#visualization",
    "title": "Pie",
    "section": "Visualization",
    "text": "Visualization\n\n# Pie\np &lt;- ggplot(data, aes(x = \"\", y = Value, fill = Group)) +\n  geom_col(width = 1) +\n  geom_bar(stat = \"identity\", width = 1, color = \"white\") +\n  geom_text(aes(y = ypos, \n                label = sprintf(\"%s\\n(n=%s, %s%%)\", Group, Value,\n                                round(Value / sum(data$Value) * 100, 2))), \n            color = \"white\", fontface = \"bold\") +\n  coord_polar(theta = \"y\", start = 0, direction = -1) +\n  guides(fill = guide_legend(title = \"Group\")) +\n  scale_fill_discrete(\n    breaks = data$Group,\n    labels = paste(data$Group,\" (\", round(data$Value / sum(data$Value) * 100, 2),\n                   \"%)\", sep = \"\")) +\n  scale_fill_manual(values = c(\"#00468BFF\",\"#ED0000FF\",\"#42B540FF\",\"#0099B4FF\")) +\n  ggtitle(\"Pie Plot\") + \n  theme_minimal() +\n  theme(\n    axis.title.x = element_blank(),\n    axis.title.y = element_blank(),\n    axis.text.x = element_blank(),\n    axis.text.y = element_blank(),\n    panel.border = element_blank(),\n    panel.grid = element_blank(),\n    axis.ticks = element_blank(),\n    plot.title = element_text(size = 14, face = \"bold\",\n                              hjust = 0.5, vjust = -1),\n    legend.position = \"none\"\n  )\n    \n  \np\n\n\n\n\n\n\n\nFigure 1: Pie\n\n\n\n\n\nIn a circle graph, the arc length of each slice (the arc length of its center Angle and the region corresponding to its center Angle) is proportional to the number represented. The pie chart shows the number of samples for the 1 to 4 components and the corresponding proportions. The number of samples in one group is 13, accounting for 11.71%; the number of samples in two groups is 34, accounting for 30.63%; the number of samples in three groups is 21, accounting for 18.92%; and the number of samples in four groups is 43, accounting for 38.74%.",
    "crumbs": [
      "HIPLOT",
      "Pie"
    ]
  },
  {
    "objectID": "Hiplot/102-map-europe.html",
    "href": "Hiplot/102-map-europe.html",
    "title": "Europe Map",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Europe Map plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/map-europe?lang=en",
    "crumbs": [
      "HIPLOT",
      "Europe Map"
    ]
  },
  {
    "objectID": "Hiplot/102-map-europe.html#setup",
    "href": "Hiplot/102-map-europe.html#setup",
    "title": "Europe Map",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2; RColorBrewer\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"RColorBrewer\", quietly = TRUE)) {\n  install.packages(\"RColorBrewer\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(RColorBrewer)",
    "crumbs": [
      "HIPLOT",
      "Europe Map"
    ]
  },
  {
    "objectID": "Hiplot/102-map-europe.html#data-preparation",
    "href": "Hiplot/102-map-europe.html#data-preparation",
    "title": "Europe Map",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/map-europe/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\ndt_map &lt;- readRDS(url(\"https://download.hiplot.cn/ui/basic/map-europe/eu.rds\"))\n\n# Convert data structure\ndt_map$Value &lt;- data$value[match(dt_map$ENG_NAME, data$region)]\n\n# View data\nhead(data)\n\n              region value\n1            Albania   758\n2            Andorra   139\n3            Austria   256\n4            Belgium   959\n5 Bosnia Herzegovina   422\n6            Croatia   791",
    "crumbs": [
      "HIPLOT",
      "Europe Map"
    ]
  },
  {
    "objectID": "Hiplot/102-map-europe.html#visualization",
    "href": "Hiplot/102-map-europe.html#visualization",
    "title": "Europe Map",
    "section": "Visualization",
    "text": "Visualization\n\n# Europe Map\np &lt;- ggplot(dt_map) +\n  geom_polygon(aes(x = long, y = lat, group = group, fill = Value),\n               alpha = 0.9, size = 0.5) +\n  geom_path(aes(x = long, y = lat, group = group), color = \"black\", size = 0.2) +\n  coord_fixed() +\n  scale_fill_gradientn(\n    colours = colorRampPalette(rev(brewer.pal(11,\"RdYlBu\")))(500),\n    breaks = seq(min(data$value), max(data$value), \n                 round((max(data$value)-min(data$value))/7)),\n    name = \"Color Key\",\n    guide = guide_legend(\n      direction = \"vertical\", keyheight = unit(1, units = \"mm\"),\n      keywidth = unit(8, units = \"mm\"),\n      title.position = \"top\", title.hjust = 0.5, label.hjust = 0.5,\n      nrow = 1, byrow = T, reverse = F, label.position = \"bottom\")) +\n  theme(text = element_text(color = \"#3A3F4A\"),\n        axis.text = element_blank(),\n        axis.ticks = element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        legend.position = \"top\",\n        legend.text = element_text(size = 4 * 1.5, color = \"black\"),\n        legend.title = element_text(size = 5 * 1.5, color = \"black\"),\n        plot.title = element_text(\n          face = \"bold\", size = 5 * 1.5, hjust = 0.5, \n          margin = margin(t = 4, b = 5), color = \"black\"),\n        plot.background = element_rect(fill = \"#FFFFFF\", color = \"#FFFFFF\"),\n        panel.background = element_rect(fill = \"#FFFFFF\", color = NA),\n        legend.background = element_rect(fill = \"#FFFFFF\", color = NA),\n        plot.margin = unit(c(1.5, 1.5, 1.5, 1.5), \"cm\")) +\n  labs(x = NULL, y = NULL, title = \"Europe Map\")\n\np\n\n\n\n\n\n\n\nFigure 1: Europe Map",
    "crumbs": [
      "HIPLOT",
      "Europe Map"
    ]
  },
  {
    "objectID": "Hiplot/096-map-africa.html",
    "href": "Hiplot/096-map-africa.html",
    "title": "Africa Map",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Africa Map plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/map-africa?lang=en",
    "crumbs": [
      "HIPLOT",
      "Africa Map"
    ]
  },
  {
    "objectID": "Hiplot/096-map-africa.html#setup",
    "href": "Hiplot/096-map-africa.html#setup",
    "title": "Africa Map",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2; RColorBrewer\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"RColorBrewer\", quietly = TRUE)) {\n  install.packages(\"RColorBrewer\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(RColorBrewer)",
    "crumbs": [
      "HIPLOT",
      "Africa Map"
    ]
  },
  {
    "objectID": "Hiplot/096-map-africa.html#data-preparation",
    "href": "Hiplot/096-map-africa.html#data-preparation",
    "title": "Africa Map",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/map-africa/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\ndt_map &lt;- readRDS(url(\"https://download.hiplot.cn/ui/basic/map-africa/afr.rds\"))\n\n# Convert data structure\ndt_map$Value &lt;- data$value[match(dt_map$ADM0_NAME, data$region)]\n\n# View data\nhead(data)\n\n        region value\n1        Sudan   258\n2       Angola   911\n3        Benin   318\n4     Botswana   759\n5 Burkina Faso   983\n6     Cameroon   618",
    "crumbs": [
      "HIPLOT",
      "Africa Map"
    ]
  },
  {
    "objectID": "Hiplot/096-map-africa.html#visualization",
    "href": "Hiplot/096-map-africa.html#visualization",
    "title": "Africa Map",
    "section": "Visualization",
    "text": "Visualization\n\n# Africa Map\np &lt;- ggplot(dt_map) +\n  geom_polygon(aes(x = long, y = lat, group = group, fill = Value),\n               alpha = 0.9, size = 0.5) +\n  geom_path(aes(x = long, y = lat, group = group), color = \"black\", size = 0.2) +\n  coord_fixed() +\n  scale_fill_gradientn(\n    colours = colorRampPalette(rev(brewer.pal(11,\"RdYlBu\")))(500),\n    breaks = seq(9, 985, 139),\n    name = \"Color Key\",\n    guide = guide_legend(\n      direction = \"vertical\", keyheight = unit(1, units = \"mm\"),\n      keywidth = unit(8, units = \"mm\"),\n      title.position = \"top\", title.hjust = 0.5, label.hjust = 0.5,\n      nrow = 1, byrow = T, reverse = F, label.position = \"bottom\")) +\n  theme(text = element_text(color = \"#3A3F4A\"),\n        axis.text = element_blank(),\n        axis.ticks = element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        legend.position = \"top\",\n        legend.text = element_text(size = 4 * 1.5, color = \"black\"),\n        legend.title = element_text(size = 5 * 1.5, color = \"black\"),\n        plot.title = element_text(\n          face = \"bold\", size = 5 * 1.5, hjust = 0.5, \n          margin = margin(t = 4, b = 5), color = \"black\"),\n        plot.background = element_rect(fill = \"#FFFFFF\", color = \"#FFFFFF\"),\n        panel.background = element_rect(fill = \"#FFFFFF\", color = NA),\n        legend.background = element_rect(fill = \"#FFFFFF\", color = NA),\n        plot.margin = unit(c(1.5, 1.5, 1.5, 1.5), \"cm\")) +\n  labs(x = NULL, y = NULL, title = \"Africa Map\")\n\np\n\n\n\n\n\n\n\nFigure 1: Africa Map",
    "crumbs": [
      "HIPLOT",
      "Africa Map"
    ]
  },
  {
    "objectID": "Hiplot/097-map-americas.html",
    "href": "Hiplot/097-map-americas.html",
    "title": "Americas Map",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Americas Map plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/map-americas?lang=en",
    "crumbs": [
      "HIPLOT",
      "Americas Map"
    ]
  },
  {
    "objectID": "Hiplot/097-map-americas.html#setup",
    "href": "Hiplot/097-map-americas.html#setup",
    "title": "Americas Map",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2; RColorBrewer\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"RColorBrewer\", quietly = TRUE)) {\n  install.packages(\"RColorBrewer\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(RColorBrewer)",
    "crumbs": [
      "HIPLOT",
      "Americas Map"
    ]
  },
  {
    "objectID": "Hiplot/097-map-americas.html#data-preparation",
    "href": "Hiplot/097-map-americas.html#data-preparation",
    "title": "Americas Map",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/map-americas/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\ndt_map &lt;- readRDS(url(\"https://download.hiplot.cn/ui/basic/map-americas/amr.rds\"))\n\n# Convert data structure\ndt_map$Value &lt;- data$value[match(dt_map$ENG_NAME, data$region)]\n\n# View data\nhead(data)\n\n               region value\n1 Aruba (Netherlands)    48\n2 Antigua and Barbuda   749\n3           Argentina   667\n4       Anguilla (UK)    14\n5            Barbados    83\n6        Bermuda (UK)   109",
    "crumbs": [
      "HIPLOT",
      "Americas Map"
    ]
  },
  {
    "objectID": "Hiplot/097-map-americas.html#visualization",
    "href": "Hiplot/097-map-americas.html#visualization",
    "title": "Americas Map",
    "section": "Visualization",
    "text": "Visualization\n\n# Americas Map\np &lt;- ggplot(dt_map) +\n  geom_polygon(aes(x = long, y = lat, group = group, fill = Value),\n               alpha = 0.9, size = 0.5) +\n  geom_path(aes(x = long, y = lat, group = group), color = \"black\", size = 0.2) +\n  coord_fixed() +\n  scale_fill_gradientn(\n    colours = colorRampPalette(rev(brewer.pal(11,\"RdYlBu\")))(500),\n    breaks = seq(min(data$value), max(data$value), \n                 round((max(data$value)-min(data$value))/7)),\n    name = \"Color Key\",\n    guide = guide_legend(\n      direction = \"vertical\", keyheight = unit(1, units = \"mm\"),\n      keywidth = unit(8, units = \"mm\"),\n      title.position = \"top\", title.hjust = 0.5, label.hjust = 0.5,\n      nrow = 1, byrow = T, reverse = F, label.position = \"bottom\")) +\n  theme(text = element_text(color = \"#3A3F4A\"),\n        axis.text = element_blank(),\n        axis.ticks = element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        legend.position = \"top\",\n        legend.text = element_text(size = 4 * 1.5, color = \"black\"),\n        legend.title = element_text(size = 5 * 1.5, color = \"black\"),\n        plot.title = element_text(\n          face = \"bold\", size = 5 * 1.5, hjust = 0.5, \n          margin = margin(t = 4, b = 5), color = \"black\"),\n        plot.background = element_rect(fill = \"#FFFFFF\", color = \"#FFFFFF\"),\n        panel.background = element_rect(fill = \"#FFFFFF\", color = NA),\n        legend.background = element_rect(fill = \"#FFFFFF\", color = NA),\n        plot.margin = unit(c(1.5, 1.5, 1.5, 1.5), \"cm\")) +\n  labs(x = NULL, y = NULL, title = \"Americas Map\")\n\np\n\n\n\n\n\n\n\nFigure 1: Americas Map",
    "crumbs": [
      "HIPLOT",
      "Americas Map"
    ]
  },
  {
    "objectID": "Hiplot/108-map-north-america.html",
    "href": "Hiplot/108-map-north-america.html",
    "title": "North America Map",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot North America Map plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/map-north-america?lang=en",
    "crumbs": [
      "HIPLOT",
      "North America Map"
    ]
  },
  {
    "objectID": "Hiplot/108-map-north-america.html#setup",
    "href": "Hiplot/108-map-north-america.html#setup",
    "title": "North America Map",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2; RColorBrewer\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"RColorBrewer\", quietly = TRUE)) {\n  install.packages(\"RColorBrewer\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(RColorBrewer)",
    "crumbs": [
      "HIPLOT",
      "North America Map"
    ]
  },
  {
    "objectID": "Hiplot/108-map-north-america.html#data-preparation",
    "href": "Hiplot/108-map-north-america.html#data-preparation",
    "title": "North America Map",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/map-north-america/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\ndt_map &lt;- readRDS(url(\"https://download.hiplot.cn/ui/basic/map-north-america/na.rds\"))\n\n# Convert data structure\ndt_map$Value &lt;- data$value[match(dt_map$ENG_NAME, data$region)]\n\n# View data\nhead(data)\n\n             region value\n1 ANTIGUA & BARBUDA   918\n2     Anguilla (UK)    95\n3          BARBADOS   878\n4            BELIZE   874\n5      Bermuda (UK)   159\n6            CANADA   118",
    "crumbs": [
      "HIPLOT",
      "North America Map"
    ]
  },
  {
    "objectID": "Hiplot/108-map-north-america.html#visualization",
    "href": "Hiplot/108-map-north-america.html#visualization",
    "title": "North America Map",
    "section": "Visualization",
    "text": "Visualization\n\n# North America Map\np &lt;- ggplot(dt_map) +\n  geom_polygon(aes(x = long, y = lat, group = group, fill = Value),\n               alpha = 0.9, size = 0.5) +\n  geom_path(aes(x = long, y = lat, group = group), color = \"black\", size = 0.2) +\n  coord_fixed() +\n  scale_fill_gradientn(\n    colours = colorRampPalette(rev(brewer.pal(11,\"RdYlBu\")))(500),\n    breaks = seq(min(data$value), max(data$value), \n                 round((max(data$value)-min(data$value))/7)),\n    name = \"Color Key\",\n    guide = guide_legend(\n      direction = \"vertical\", keyheight = unit(1, units = \"mm\"),\n      keywidth = unit(8, units = \"mm\"),\n      title.position = \"top\", title.hjust = 0.5, label.hjust = 0.5,\n      nrow = 1, byrow = T, reverse = F, label.position = \"bottom\")) +\n  theme(text = element_text(color = \"#3A3F4A\"),\n        axis.text = element_blank(),\n        axis.ticks = element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        legend.position = \"top\",\n        legend.text = element_text(size = 4 * 1.5, color = \"black\"),\n        legend.title = element_text(size = 5 * 1.5, color = \"black\"),\n        plot.title = element_text(\n          face = \"bold\", size = 5 * 1.5, hjust = 0.5, \n          margin = margin(t = 4, b = 5), color = \"black\"),\n        plot.background = element_rect(fill = \"#FFFFFF\", color = \"#FFFFFF\"),\n        panel.background = element_rect(fill = \"#FFFFFF\", color = NA),\n        legend.background = element_rect(fill = \"#FFFFFF\", color = NA),\n        plot.margin = unit(c(1.5, 1.5, 1.5, 1.5), \"cm\")) +\n  labs(x = NULL, y = NULL, title = \"North America Map\")\n\np\n\n\n\n\n\n\n\nFigure 1: North America Map",
    "crumbs": [
      "HIPLOT",
      "North America Map"
    ]
  },
  {
    "objectID": "Hiplot/075-ggwithinstats.html",
    "href": "Hiplot/075-ggwithinstats.html",
    "title": "Complex-Violin",
    "section": "",
    "text": "System Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggstatsplot; ggplot2; cowplot\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggstatsplot\", quietly = TRUE)) {\n  install.packages(\"ggstatsplot\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"cowplot\", quietly = TRUE)) {\n  install.packages(\"cowplot\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggstatsplot)\nlibrary(ggplot2)\nlibrary(cowplot)",
    "crumbs": [
      "HIPLOT",
      "Complex-Violin"
    ]
  },
  {
    "objectID": "Hiplot/075-ggwithinstats.html#setup",
    "href": "Hiplot/075-ggwithinstats.html#setup",
    "title": "Complex-Violin",
    "section": "",
    "text": "System Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggstatsplot; ggplot2; cowplot\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggstatsplot\", quietly = TRUE)) {\n  install.packages(\"ggstatsplot\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"cowplot\", quietly = TRUE)) {\n  install.packages(\"cowplot\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggstatsplot)\nlibrary(ggplot2)\nlibrary(cowplot)",
    "crumbs": [
      "HIPLOT",
      "Complex-Violin"
    ]
  },
  {
    "objectID": "Hiplot/075-ggwithinstats.html#data-preparation",
    "href": "Hiplot/075-ggwithinstats.html#data-preparation",
    "title": "Complex-Violin",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/ggwithinstats/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\naxis &lt;- c(\"condition\", \"desire\", \"region\")\ndata[, axis[1]] &lt;- factor(data[, axis[1]], levels = unique(data[, axis[1]]))\ndata[, axis[3]] &lt;- factor(data[, axis[3]], levels = unique(data[, axis[3]]))\n\n# View data\nstr(data)\n\n'data.frame':   172 obs. of  6 variables:\n $ subject  : int  1 2 3 4 5 6 7 8 9 11 ...\n $ gender   : chr  \"Female\" \"Female\" \"Female\" \"Female\" ...\n $ region   : Factor w/ 2 levels \"North America\",..: 1 1 2 1 1 2 1 1 1 1 ...\n $ education: chr  \"some\" \"advance\" \"college\" \"college\" ...\n $ condition: Factor w/ 2 levels \"LDLF\",\"LDHF\": 1 1 1 1 1 1 1 1 1 1 ...\n $ desire   : num  6 10 5 6 3 2 10 10 9.5 0 ...",
    "crumbs": [
      "HIPLOT",
      "Complex-Violin"
    ]
  },
  {
    "objectID": "Hiplot/075-ggwithinstats.html#visualization",
    "href": "Hiplot/075-ggwithinstats.html#visualization",
    "title": "Complex-Violin",
    "section": "Visualization",
    "text": "Visualization\n\n# Complex-Violin\ng &lt;- unique(data[,axis[3]])\nplist &lt;- list()\nfor (i in 1:length(g)) {\n  fil &lt;- data[,axis[3]] == g[i]\n  plist[[i]] &lt;- ggwithinstats(\n    data = data[fil,], x = condition, y = desire,\n    title= paste('', axis[3], g[i], sep = ':'),\n    p.adjust.method = \"holm\",\n    plot.type = \"boxviolin\",\n    pairwise.comparisons = T,\n    pairwise.display = \"significant\",\n    effsize.type = \"unbiased\",\n    notch = T,\n    type = \"parametric\",\n    k = 2,\n    plotgrid.args = list(ncol = 2)\n  ) +\n    scale_color_manual(values = c(\"#3B4992FF\",\"#EE0000FF\"))\n}\n\nplot_grid(plotlist = plist, ncol = 2)\n\n\n\n\n\n\n\nFigure 1: Complex-Violin",
    "crumbs": [
      "HIPLOT",
      "Complex-Violin"
    ]
  },
  {
    "objectID": "Hiplot/071-ggpiestats.html",
    "href": "Hiplot/071-ggpiestats.html",
    "title": "Piestats",
    "section": "",
    "text": "System Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggstatsplot; ggplot2\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggstatsplot\", quietly = TRUE)) {\n  install.packages(\"ggstatsplot\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggstatsplot)\nlibrary(ggplot2)",
    "crumbs": [
      "HIPLOT",
      "Piestats"
    ]
  },
  {
    "objectID": "Hiplot/071-ggpiestats.html#setup",
    "href": "Hiplot/071-ggpiestats.html#setup",
    "title": "Piestats",
    "section": "",
    "text": "System Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggstatsplot; ggplot2\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggstatsplot\", quietly = TRUE)) {\n  install.packages(\"ggstatsplot\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggstatsplot)\nlibrary(ggplot2)",
    "crumbs": [
      "HIPLOT",
      "Piestats"
    ]
  },
  {
    "objectID": "Hiplot/071-ggpiestats.html#data-preparation",
    "href": "Hiplot/071-ggpiestats.html#data-preparation",
    "title": "Piestats",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/ggpiestats/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\naxis &lt;- c(\"am\", \"cyl\")\ndata[, axis[1]] &lt;- factor(data[, axis[1]], levels = unique(data[, axis[1]]))\ndata[, axis[2]] &lt;- factor(data[, axis[2]], levels = unique(data[, axis[2]]))\n\n# View data\nhead(data)\n\n   mpg cyl disp  hp drat    wt  qsec vs am gear carb\n1 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\n2 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\n3 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n4 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\n5 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\n6 18.1   6  225 105 2.76 3.460 20.22  1  0    3    1",
    "crumbs": [
      "HIPLOT",
      "Piestats"
    ]
  },
  {
    "objectID": "Hiplot/071-ggpiestats.html#visualization",
    "href": "Hiplot/071-ggpiestats.html#visualization",
    "title": "Piestats",
    "section": "Visualization",
    "text": "Visualization\n\n# Piestats\np &lt;- ggpiestats(data = data, x = am, y = cyl,\n                paired = F) +\n  scale_fill_manual(values = c(\"#3B4992FF\",\"#EE0000FF\"))\n\np\n\n\n\n\n\n\n\nFigure 1: Piestats",
    "crumbs": [
      "HIPLOT",
      "Piestats"
    ]
  },
  {
    "objectID": "Hiplot/083-group-dumbbell.html",
    "href": "Hiplot/083-group-dumbbell.html",
    "title": "Group Dumbbell",
    "section": "",
    "text": "System Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2; ggalt\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"ggalt\", quietly = TRUE)) {\n  install.packages(\"ggalt\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(ggalt)",
    "crumbs": [
      "HIPLOT",
      "Group Dumbbell"
    ]
  },
  {
    "objectID": "Hiplot/083-group-dumbbell.html#setup",
    "href": "Hiplot/083-group-dumbbell.html#setup",
    "title": "Group Dumbbell",
    "section": "",
    "text": "System Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2; ggalt\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"ggalt\", quietly = TRUE)) {\n  install.packages(\"ggalt\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(ggalt)",
    "crumbs": [
      "HIPLOT",
      "Group Dumbbell"
    ]
  },
  {
    "objectID": "Hiplot/083-group-dumbbell.html#data-preparation",
    "href": "Hiplot/083-group-dumbbell.html#data-preparation",
    "title": "Group Dumbbell",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/group-dumbbell/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\ndata &lt;- data[order(data[[\"group\"]], data[[\"y1952\"]]),]\ndata[[\"country\"]] &lt;- factor(data[[\"country\"]], levels = data[[\"country\"]])\n\n# View data\nhead(data)\n\n              country  y1952  y2007 group\n13              Haiti 37.579 60.916     A\n2             Bolivia 40.414 65.554     A\n12          Guatemala 42.023 70.259     A\n11        El Salvador 45.262 71.878     A\n9  Dominican Republic 45.928 72.235     A\n10            Ecuador 48.357 74.994     A",
    "crumbs": [
      "HIPLOT",
      "Group Dumbbell"
    ]
  },
  {
    "objectID": "Hiplot/083-group-dumbbell.html#visualization",
    "href": "Hiplot/083-group-dumbbell.html#visualization",
    "title": "Group Dumbbell",
    "section": "Visualization",
    "text": "Visualization\n\n# Group Dumbbell\np &lt;- ggplot(data = data, aes(x = y1952, xend = y2007, y = country, color = group)) +\n  geom_dumbbell(size = 1, size_xend = 2, size_x = 2) +\n  theme_bw()\n\np\n\n\n\n\n\n\n\nFigure 1: Group Dumbbell",
    "crumbs": [
      "HIPLOT",
      "Group Dumbbell"
    ]
  },
  {
    "objectID": "Hiplot/015-boxplot.html",
    "href": "Hiplot/015-boxplot.html",
    "title": "Boxplot",
    "section": "",
    "text": "The box plot is a method of visualizing the distribution characteristics of a set of data by means of a quartile graph.",
    "crumbs": [
      "HIPLOT",
      "Boxplot"
    ]
  },
  {
    "objectID": "Hiplot/015-boxplot.html#setup",
    "href": "Hiplot/015-boxplot.html#setup",
    "title": "Boxplot",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggpubr; ggthemes\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggpubr\", quietly = TRUE)) {\n  install.packages(\"ggpubr\")\n}\nif (!requireNamespace(\"ggthemes\", quietly = TRUE)) {\n  install.packages(\"ggthemes\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggpubr)\nlibrary(ggthemes)",
    "crumbs": [
      "HIPLOT",
      "Boxplot"
    ]
  },
  {
    "objectID": "Hiplot/015-boxplot.html#data-preparation",
    "href": "Hiplot/015-boxplot.html#data-preparation",
    "title": "Boxplot",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data is data set (data on treatment outcomes of different treatment regimens).\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/boxplot/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# convert data structure\ngroups &lt;- unique(data[, 2])\nmy_comparisons &lt;- combn(groups, 2, simplify = FALSE)\nmy_comparisons &lt;- lapply(my_comparisons, as.character)\n\n# View data\nhead(data)\n\n  Value Group1 Group2\n1   4.2    low treat1\n2  11.5    low treat1\n3   7.3    low treat1\n4   5.8    low treat1\n5   6.4    low treat1\n6  10.0    low treat1",
    "crumbs": [
      "HIPLOT",
      "Boxplot"
    ]
  },
  {
    "objectID": "Hiplot/015-boxplot.html#visualization",
    "href": "Hiplot/015-boxplot.html#visualization",
    "title": "Boxplot",
    "section": "Visualization",
    "text": "Visualization\n\n# Boxplot\np &lt;- ggboxplot(data, x = \"Group1\", y = \"Value\", notch = F, facet.by = \"Group2\",\n               add = \"point\", color = \"Group1\", xlab = \"Group2\", ylab = \"Value\",\n               palette = c(\"#e04d39\",\"#5bbad6\",\"#1e9f86\"),\n               title = \"Box Plot\") +\n  stat_compare_means(comparisons = my_comparisons, label = \"p.format\", \n                     method = \"t.test\") +\n  scale_y_continuous(expand = expansion(mult = c(0.1, 0.1))) +\n  theme_stata() +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n\np\n\n\n\n\n\n\n\nFigure 1: Boxplot\n\n\n\n\n\nThe abscissa represents several different sets of data, and the ordinate represents the quartile of each set of data respectively. The upper, middle and lower horizontal lines of the box represent the upper, median and lower quartile respectively; The values represented by the upper and lower line segments respectively exponential the maximum and minimum values of the data, and the points outside the box represent outliers. The above figure indicates the P value between two variables. It can be considered that in treatment plan 1, there is a significant difference in efficacy between the middle-dose group and the low-dose group, and so on.",
    "crumbs": [
      "HIPLOT",
      "Boxplot"
    ]
  },
  {
    "objectID": "Hiplot/095-line.html",
    "href": "Hiplot/095-line.html",
    "title": "Line",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Line plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/line?lang=en\nThe line chart is a statistical chart that USES a linear or logarithmic scale to draw data in a two - or three-dimensional view to show the data set or track the characteristics of the data over time.",
    "crumbs": [
      "HIPLOT",
      "Line"
    ]
  },
  {
    "objectID": "Hiplot/095-line.html#setup",
    "href": "Hiplot/095-line.html#setup",
    "title": "Line",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2; ggthemes\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"ggthemes\", quietly = TRUE)) {\n  install.packages(\"ggthemes\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(ggthemes)",
    "crumbs": [
      "HIPLOT",
      "Line"
    ]
  },
  {
    "objectID": "Hiplot/095-line.html#data-preparation",
    "href": "Hiplot/095-line.html#data-preparation",
    "title": "Line",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data are the horizontal axis values and their corresponding vertical axis values and groups.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/line/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\ndata[,3] &lt;- factor(data[,3], levels = unique(data[,3]))\n\n# View data\nhead(data)\n\n  Value1 Value2  Group\n1      1      1 treat1\n2      2      4 treat1\n3      3      9 treat1\n4      4     16 treat1\n5      5     25 treat1\n6      6     36 treat1",
    "crumbs": [
      "HIPLOT",
      "Line"
    ]
  },
  {
    "objectID": "Hiplot/095-line.html#visualization",
    "href": "Hiplot/095-line.html#visualization",
    "title": "Line",
    "section": "Visualization",
    "text": "Visualization\n\n# Line\np &lt;- ggplot(data, aes(x = Value1, y = Value2)) +\n  geom_line(alpha = 1, aes(color = Group, linetype = Group)) +\n  geom_point(aes(color = Group, shape = Group)) +\n  ggtitle(\"Line Regression Plot\") +\n  scale_fill_manual(values = c(\"#e04d39\",\"#5bbad6\")) +\n  theme_stata() +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n\np\n\n\n\n\n\n\n\nFigure 1: Line\n\n\n\n\n\nThe diagram shows that value1 is positively correlated with Value2 in treatment plan 1, while Value1 is negatively correlated with Value2 in treatment plan 2.",
    "crumbs": [
      "HIPLOT",
      "Line"
    ]
  },
  {
    "objectID": "Hiplot/155-risk-plot.html",
    "href": "Hiplot/155-risk-plot.html",
    "title": "Risk Factor Analysis",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Risk Factor Analysis plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/risk-plot?lang=en",
    "crumbs": [
      "HIPLOT",
      "Risk Factor Analysis"
    ]
  },
  {
    "objectID": "Hiplot/155-risk-plot.html#setup",
    "href": "Hiplot/155-risk-plot.html#setup",
    "title": "Risk Factor Analysis",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; survminer; fastStat; cutoff; ggplot2; cowplot\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"survminer\", quietly = TRUE)) {\n  install.packages(\"survminer\")\n}\nif (!requireNamespace(\"fastStat\", quietly = TRUE)) {\n  install_github(\"yikeshu0611/fastStat\")\n}\nif (!requireNamespace(\"cutoff\", quietly = TRUE)) {\n  install.packages(\"cutoff\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"cowplot\", quietly = TRUE)) {\n  install.packages(\"cowplot\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(survminer)\nlibrary(fastStat)\nlibrary(cutoff)\nlibrary(ggplot2)\nlibrary(cowplot)",
    "crumbs": [
      "HIPLOT",
      "Risk Factor Analysis"
    ]
  },
  {
    "objectID": "Hiplot/155-risk-plot.html#data-preparation",
    "href": "Hiplot/155-risk-plot.html#data-preparation",
    "title": "Risk Factor Analysis",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/risk-plot/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\ndata &lt;- data[order(data[, \"riskscore\"], decreasing = F), ]\ncutoff_point &lt;- median(x = data$riskscore, na.rm = TRUE)\ndata$Group &lt;- ifelse(data$riskscore &gt; cutoff_point, \"High\", \"Low\")\ncut.position &lt;- (1:nrow(data))[data$riskscore == cutoff_point]\nif (length(cut.position) == 0) {\n  cut.position &lt;- which.min(abs(data$riskscore - cutoff_point))\n} else if (length(cut.position) &gt; 1) {\n  cut.position &lt;- cut.position[length(cut.position)]\n}\n## Generate the data.frame required to draw A B graph\ndata2 &lt;- data[, c(\"time\", \"event\", \"riskscore\", \"Group\")]\n\n# View data\nhead(data)\n\n  time event riskscore    TAGLN2       PDPN     TIMP1      EMP3 Group\n1 1014     0 0.8206424 1.0612565 0.04879016 0.1484200 0.1906204   Low\n2  246     1 1.0582599 1.2584610 0.20701417 0.3506569 0.2546422   Low\n3 2283     0 1.1693457 1.2697605 0.00000000 0.2231436 0.3364722   Low\n4 1757     0 1.2274565 1.7209793 0.00000000 0.5822156 0.2231436   Low\n5 3107     1 1.2806984 0.5933268 0.37156356 0.1043600 0.5709795   Low\n6  332     1 1.2891095 1.2892326 0.09531018 0.2070142 0.3987761   Low",
    "crumbs": [
      "HIPLOT",
      "Risk Factor Analysis"
    ]
  },
  {
    "objectID": "Hiplot/155-risk-plot.html#visualization",
    "href": "Hiplot/155-risk-plot.html#visualization",
    "title": "Risk Factor Analysis",
    "section": "Visualization",
    "text": "Visualization\n\n# Risk Factor Analysis\n## Figure A\nfA &lt;- ggplot(data = data2, aes(x = 1:nrow(data2), y = data2$riskscore, \n                               color = Group)) +\n  geom_point(size = 2) +\n  scale_color_manual(name = \"Risk Group\", \n                     values = c(\"Low\" = \"#0B45A5\", \"High\" = \"#E20B0B\")) +\n  geom_vline(xintercept = cut.position, linetype = \"dotted\", size = 1) +\n  theme(panel.grid = element_blank(), panel.background = element_blank(),\n        axis.ticks.x = element_blank(), axis.line.x = element_blank(),\n        axis.text.x = element_blank(), axis.title.x = element_blank(),\n        axis.title.y = element_text(size = 14, vjust = 1, angle = 90),\n        axis.text.y = element_text(size = 11),\n        axis.line.y = element_line(size = 0.5, colour = \"black\"),\n        axis.ticks.y = element_line(size = 0.5, colour = \"black\"),\n        legend.title = element_text(size = 13), \n        legend.text = element_text(size = 12)) +\n  coord_trans() +\n  ylab(\"Risk Score\") +\n  scale_x_continuous(expand = c(0, 3))\n## Figure B\nfB &lt;- ggplot(data = data2, aes(x = 1:nrow(data2), y = data2[, \"time\"],\n             color = factor(ifelse(data2[, \"event\"] == 1, \"Dead\", \"Alive\")))) +\n  geom_point(size = 2) +\n  scale_color_manual(name = \"Status\", values = c(\"Alive\" = \"#0B45A5\", \"Dead\" = \"#E20B0B\")) +\n  geom_vline(xintercept = cut.position, linetype = \"dotted\", size = 1) +\n  theme(panel.grid = element_blank(), panel.background = element_blank(),\n        axis.ticks.x = element_blank(), axis.line.x = element_blank(),\n        axis.text.x = element_blank(), axis.title.x = element_blank(),\n        axis.title.y = element_text(size = 14, vjust = 2, angle = 90),\n        axis.text.y = element_text(size = 11),\n        axis.ticks.y = element_line(size = 0.5),\n        axis.line.y = element_line(size = 0.5, colour = \"black\"),\n        legend.title = element_text(size = 13),\n        legend.text = element_text(size = 12)) +\n  ylab(\"Survival Time\") +\n  coord_trans() +\n  scale_x_continuous(expand = c(0, 3))\n## middle\nmiddle &lt;- ggplot(data2, aes(x = 1:nrow(data2), y = 1)) +\n  geom_tile(aes(fill = data2$Group)) +\n  scale_fill_manual(name = \"Risk Group\", values = c(\"Low\" = \"#0B45A5\", \"High\" = \"#E20B0B\")) +\n  theme(panel.grid = element_blank(), panel.background = element_blank(),\n        axis.line = element_blank(), axis.ticks = element_blank(),\n        axis.text = element_blank(), axis.title = element_blank(),\n        plot.margin = unit(c(0.15, 0, -0.3, 0), \"cm\"),\n        legend.title = element_text(size = 13),\n        legend.text = element_text(size = 12)) +\n  scale_x_continuous(expand = c(0, 3)) +\n  xlab(\"\")\n## Figure C\nheatmap_genes &lt;- c(\"TAGLN2\", \"PDPN\", \"TIMP1\", \"EMP3\")\ndata3 &lt;- data[, heatmap_genes]\nif (length(heatmap_genes) == 1) {\n  data3 &lt;- data.frame(data3)\n  colnames(data3) &lt;- heatmap_genes\n}\n# Normalization\nfor (i in 1:ncol(data3)) {\n  data3[, i] &lt;- (data3[, i] - mean(data3[, i], na.rm = TRUE)) /\n  sd(data3[, i], na.rm = TRUE)\n}\ndata4 &lt;- cbind(id = 1:nrow(data3), data3)\ndata5 &lt;- reshape2::melt(data4, id.vars = \"id\")\nfC &lt;- ggplot(data5, aes(x = id, y = variable, fill = value)) +\n  geom_raster() +\n  theme(panel.grid = element_blank(), panel.background = element_blank(),\n        axis.line = element_blank(), axis.ticks = element_blank(),\n        axis.text.x = element_blank(), axis.title = element_blank(),\n        plot.background = element_blank()) +\n  scale_fill_gradient2(name = \"Expression\", low = \"#0B45A5\", mid = \"#FFFFFF\",\n                       high = \"#E20B0B\") +\n  theme(axis.text = element_text(size = 11)) +\n  theme(legend.title = element_text(size = 13), \n        legend.text = element_text(size = 12)) +\n  scale_x_continuous(expand = c(0, 3))\n\np &lt;- plot_grid(fA, fB, middle, fC, ncol = 1, rel_heights = c(0.1, 0.1, 0.01, 0.15))\n\np\n\n\n\n\n\n\n\nFigure 1: Risk Factor Analysis",
    "crumbs": [
      "HIPLOT",
      "Risk Factor Analysis"
    ]
  },
  {
    "objectID": "Hiplot/000-test-demo.html",
    "href": "Hiplot/000-test-demo.html",
    "title": "ggplot2 demo",
    "section": "",
    "text": "Code\n# Installing necessary packages\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}"
  },
  {
    "objectID": "Hiplot/000-test-demo.html#air-quality",
    "href": "Hiplot/000-test-demo.html#air-quality",
    "title": "ggplot2 demo",
    "section": "Air Quality",
    "text": "Air Quality\nFigure 1 further explores the impact of temperature on ozone level.\n\n\nCode\nlibrary(ggplot2)\n\nggplot(airquality, aes(Temp, Ozone)) + \n  geom_point() + \n  geom_smooth(method = \"loess\")\n\n\n\n\n\n\n\n\nFigure 1: Temperature and ozone level."
  },
  {
    "objectID": "Hiplot/002-barcode-plot.html",
    "href": "Hiplot/002-barcode-plot.html",
    "title": "Barcode Plot",
    "section": "",
    "text": "Barcode Plot is Suitable for displaying the distribution of large amounts of data.",
    "crumbs": [
      "HIPLOT",
      "Barcode Plot"
    ]
  },
  {
    "objectID": "Hiplot/002-barcode-plot.html#setup",
    "href": "Hiplot/002-barcode-plot.html#setup",
    "title": "Barcode Plot",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)",
    "crumbs": [
      "HIPLOT",
      "Barcode Plot"
    ]
  },
  {
    "objectID": "Hiplot/002-barcode-plot.html#data-preparation",
    "href": "Hiplot/002-barcode-plot.html#data-preparation",
    "title": "Barcode Plot",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe case data represents the sales revenue of a certain product in 500 stores in three regions.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/barcode-plot/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# View data\nhead(data)\n\n     region    sales\n1 GuangDong 42.54612\n2 GuangDong 46.26102\n3 GuangDong 46.00448\n4 GuangDong 45.05684\n5 GuangDong 48.67611\n6 GuangDong 56.95071",
    "crumbs": [
      "HIPLOT",
      "Barcode Plot"
    ]
  },
  {
    "objectID": "Hiplot/002-barcode-plot.html#visualization",
    "href": "Hiplot/002-barcode-plot.html#visualization",
    "title": "Barcode Plot",
    "section": "Visualization",
    "text": "Visualization\n\n# Barcode Plot\np &lt;- ggplot(data, aes(x = sales, y = region)) +\n  geom_tile(width = 0.01, height = 0.9, fill = \"#606fcc\") + # Control the width and height of the Barcode\n  theme_bw() +\n  labs(title = \"Sales report\", x = \"Sales\", y = \"Region\") +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n\np\n\n\n\n\n\n\n\nFigure 1: Barcode Plot\n\n\n\n\n\nThrough the barcode plot, we can observe that the number of stores with sales revenue around 50 is relatively high in Guangdong and Fujian regions. Additionally, the sales revenue among stores in Guangdong shows less variation, indicating a more concentrated distribution.\n\n\n\n\n\n\nTip\n\n\n\nSpecial Parameters: \n\nwidth: Width of the bars\nheight: Height of the bars\nfill: Color of the bars",
    "crumbs": [
      "HIPLOT",
      "Barcode Plot"
    ]
  },
  {
    "objectID": "Hiplot/158-sankey.html",
    "href": "Hiplot/158-sankey.html",
    "title": "Sankey",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Sankey plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/sankey?lang=en\nSankey diagrams are a type of flow diagramin which the width of the arrows is proportional to the flow rate.",
    "crumbs": [
      "HIPLOT",
      "Sankey"
    ]
  },
  {
    "objectID": "Hiplot/158-sankey.html#setup",
    "href": "Hiplot/158-sankey.html#setup",
    "title": "Sankey",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggalluvial; ggplot2\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggalluvial\", quietly = TRUE)) {\n  install.packages(\"ggalluvial\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggalluvial)\nlibrary(ggplot2)",
    "crumbs": [
      "HIPLOT",
      "Sankey"
    ]
  },
  {
    "objectID": "Hiplot/158-sankey.html#data-preparation",
    "href": "Hiplot/158-sankey.html#data-preparation",
    "title": "Sankey",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data are the four variables and the frequency of combination of four variables.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/sankey/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\nvalue &lt;- \"Freq\"\naxis &lt;- c(\"Class\", \"Sex\")\nusr_axis &lt;- c()\nfor (i in seq_len(length(axis))) {\n  usr_axis &lt;- c(usr_axis, axis[i])\n  assign(paste0(\"axis\", i), axis[i])\n}\nindex_axis &lt;- match(usr_axis, colnames(data))\nindex_value &lt;- match(value, colnames(data))\ndata1 &lt;- data[, c(index_value, index_axis)]\n## define band color\nnlevels &lt;- as.numeric(apply(data1[, -1], 2, function(data) {\n  return(length(unique(data)))\n}))\nband_color &lt;- c(\"#8DD3C7\", \"#FFFFB3\", \"#BEBADA\", \"#FB8072\", \"#8DD3C7\", \"#FFFFB3\")\n## rename data\ndata_rename &lt;- data1\ncolnames(data_rename) &lt;- c(\n  \"value\",\n  paste(\"axis\", seq_len(length(usr_axis)), sep = \"\")\n)\n\n# View data\nhead(data)\n\n  Class    Sex   Age Survived Freq\n1   1st   Male Child       No    0\n2   2nd   Male Child       No    0\n3   3rd   Male Child       No   35\n4  Crew   Male Child       No    0\n5   1st Female Child       No    0\n6   2nd Female Child       No    0",
    "crumbs": [
      "HIPLOT",
      "Sankey"
    ]
  },
  {
    "objectID": "Hiplot/158-sankey.html#visualization",
    "href": "Hiplot/158-sankey.html#visualization",
    "title": "Sankey",
    "section": "Visualization",
    "text": "Visualization\n\n# Sankey\np &lt;- ggplot(data_rename, aes(y = value, axis1 = axis1, axis2 = axis2)) +\n  geom_alluvium(alpha = 1, aes(fill = data1[, colnames(data1) == \"Sex\"]),\n                width = 0, reverse = FALSE) +\n  scale_x_discrete(limits = usr_axis, expand = c(0.02, 0.1)) +\n  ylab(\"\") +\n  scale_fill_discrete(name = \"Sex\") +\n  coord_flip() +\n  geom_stratum(alpha = 1, width = 1 / 8, reverse = FALSE, fill = band_color,\n               color = \"white\") +\n  geom_text(stat = \"stratum\", infer.label = TRUE, reverse = FALSE) +\n  ggtitle(\"Sankey plot\") +\n  guides(fill = guide_legend(title = \"Sex\")) +\n  scale_fill_manual(values = c(\"#00468BFF\", \"#ED0000FF\")) +\n  theme_bw() +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n\np\n\n\n\n\n\n\n\nFigure 1: Sankey\n\n\n\n\n\nThe color of female shunting is blue, the color of male shunting is red, and the width of blue shunting is equal to the total width of female.",
    "crumbs": [
      "HIPLOT",
      "Sankey"
    ]
  },
  {
    "objectID": "Hiplot/164-simple-funnel-diagram.html",
    "href": "Hiplot/164-simple-funnel-diagram.html",
    "title": "Simple Funnel Diagram",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Simple Funnel Diagram plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/simple-funnel-diagram?lang=en",
    "crumbs": [
      "HIPLOT",
      "Simple Funnel Diagram"
    ]
  },
  {
    "objectID": "Hiplot/164-simple-funnel-diagram.html#setup",
    "href": "Hiplot/164-simple-funnel-diagram.html#setup",
    "title": "Simple Funnel Diagram",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; magrittr; echarts4r\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"magrittr\", quietly = TRUE)) {\n  install.packages(\"magrittr\")\n}\nif (!requireNamespace(\"echarts4r\", quietly = TRUE)) {\n  install.packages(\"echarts4r\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(magrittr)\nlibrary(echarts4r)",
    "crumbs": [
      "HIPLOT",
      "Simple Funnel Diagram"
    ]
  },
  {
    "objectID": "Hiplot/164-simple-funnel-diagram.html#data-preparation",
    "href": "Hiplot/164-simple-funnel-diagram.html#data-preparation",
    "title": "Simple Funnel Diagram",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/simple-funnel-diagram/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# View data\nhead(data)\n\n       key value\n1     view    60\n2    click    30\n3 purchase    20",
    "crumbs": [
      "HIPLOT",
      "Simple Funnel Diagram"
    ]
  },
  {
    "objectID": "Hiplot/164-simple-funnel-diagram.html#visualization",
    "href": "Hiplot/164-simple-funnel-diagram.html#visualization",
    "title": "Simple Funnel Diagram",
    "section": "Visualization",
    "text": "Visualization\n\n# Simple Funnel Diagram\np &lt;- data %&gt;%\n  e_charts() %&gt;%\n  e_funnel(value, key) %&gt;%\n  e_title(\"Funnel\") %&gt;%\n  e_theme(\"macarons\")\n\np\n\n\n\n\n\n\n\nFigure 1: Simple Funnel Diagram",
    "crumbs": [
      "HIPLOT",
      "Simple Funnel Diagram"
    ]
  },
  {
    "objectID": "Hiplot/171-time-roc.html",
    "href": "Hiplot/171-time-roc.html",
    "title": "Time ROC",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Time ROC plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/time-roc?lang=en\nReceiver Operating Characteristic (ROC) analysis with time records in survival analysis.",
    "crumbs": [
      "HIPLOT",
      "Time ROC"
    ]
  },
  {
    "objectID": "Hiplot/171-time-roc.html#setup",
    "href": "Hiplot/171-time-roc.html#setup",
    "title": "Time ROC",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; plotROC; survivalROC; ggplot2; grid\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"plotROC\", quietly = TRUE)) {\n  install.packages(\"plotROC\")\n}\nif (!requireNamespace(\"survivalROC\", quietly = TRUE)) {\n  install.packages(\"survivalROC\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"grid\", quietly = TRUE)) {\n  install.packages(\"grid\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(plotROC)\nlibrary(survivalROC)\nlibrary(ggplot2)\nlibrary(grid)",
    "crumbs": [
      "HIPLOT",
      "Time ROC"
    ]
  },
  {
    "objectID": "Hiplot/171-time-roc.html#data-preparation",
    "href": "Hiplot/171-time-roc.html#data-preparation",
    "title": "Time ROC",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n: (Numeric) survival data (i.e survive, risk).\n: (Numeric) time data.\n\n\n# Load data\ndata1 &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/time-roc/data.json\")$exampleData$textarea[[1]])\ndata1 &lt;- as.data.frame(data1)\ndata2 &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/time-roc/data.json\")$exampleData$textarea[[2]])\ndata2 &lt;- as.data.frame(data2)\n\n# convert data structure\nsurv_table &lt;- data1\ncolnames(surv_table) &lt;- c(\"surv\", \"cens\", \"risk\")\nmtime &lt;- as.data.frame(data2)[, 1]\nsroc &lt;- lapply(mtime, function(t) {\n  stroc &lt;- survivalROC(\n    Stime = surv_table$surv,\n    status = surv_table$cens,\n    marker = surv_table$risk,\n    predict.time = t,\n    method = \"KM\"\n  )\n  data.frame(\n    TPF = stroc[[\"TP\"]],\n    FPF = stroc[[\"FP\"]],\n    cut = stroc[[\"cut.values\"]],\n    time = rep(\n      stroc[[\"predict.time\"]],\n      length(stroc[[\"TP\"]])\n    ),\n    AUC = rep(\n      stroc$AUC,\n      length(stroc$FP)\n    )\n  )\n})\nmroc &lt;- do.call(rbind, sroc)\nmroc$time &lt;- factor(mroc$time)\n\n# View data\nhead(data1)\n\n       surv cens       risk\n1 11.126027    0 0.19205450\n2  9.794521    0 0.47734974\n3 13.690411    0 0.04605343\n4 10.068493    0 0.29717146\n5  3.317808    0 0.18144610\n6 12.312329    0 0.62681895\n\nhead(data2)\n\n  times\n1     2\n2     4\n3     6\n4     8\n5    10",
    "crumbs": [
      "HIPLOT",
      "Time ROC"
    ]
  },
  {
    "objectID": "Hiplot/171-time-roc.html#visualization",
    "href": "Hiplot/171-time-roc.html#visualization",
    "title": "Time ROC",
    "section": "Visualization",
    "text": "Visualization\n\n# Time ROC\ncol &lt;- c(\"#E64B35FF\",\"#4DBBD5FF\",\"#00A087FF\",\"#3C5488FF\",\"#F39B7FFF\")\np &lt;- ggplot(mroc, aes(x = FPF, y = TPF, label = cut, color = time)) +\n  plotROC::geom_roc(labels = FALSE, stat = \"identity\", n.cuts = 0) +\n  geom_abline(slope = 1, intercept = 0, color = \"red\", linetype = 2) +\n  labs(title = \"ROC Dependence Time\", x = \"False positive rate\",\n       y = \"True positive rate\", \n       color = paste(\"Time\", \"(\", \"Year\", \")\")) +\n  theme_bw() +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12, hjust = 0.5),\n        axis.title = element_text(size = 10),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10)) +\n  scale_color_manual(values = col)\n\nauc &lt;- levels(factor(mroc$AUC))\nfor (i in 1:length(auc)) {\n  p &lt;- p + annotate(\"text\",\n    x = 0.75,\n    y = 0.05 + 0.05 * i, ## 注释text的位置\n    col = col[i],\n    label = paste(\n      paste(paste(mtime[i], \"Year\", sep = \" \"), \" = \"),\n      round(as.numeric(auc[i]), 2)\n    )\n  )\n}\n\np\n\n\n\n\n\n\n\nFigure 1: Time ROC",
    "crumbs": [
      "HIPLOT",
      "Time ROC"
    ]
  },
  {
    "objectID": "Hiplot/175-tsne.html",
    "href": "Hiplot/175-tsne.html",
    "title": "tSNE",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot tSNE plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/tsne?lang=en\nT-sne is a nonlinear dimensionality reduction algorithm suitable for high-dimensional data reduction to two or three dimensions and visualization. The algorithm can make the t distribution of points with greater similarity closer in the lower dimensional space. For low similarity points, the t distribution is farther away in the low dimensional space.",
    "crumbs": [
      "HIPLOT",
      "tSNE"
    ]
  },
  {
    "objectID": "Hiplot/175-tsne.html#setup",
    "href": "Hiplot/175-tsne.html#setup",
    "title": "tSNE",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; Rtsne; ggpubr\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"Rtsne\", quietly = TRUE)) {\n  install.packages(\"Rtsne\")\n}\nif (!requireNamespace(\"ggpubr\", quietly = TRUE)) {\n  install.packages(\"ggpubr\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(Rtsne)\nlibrary(ggpubr)",
    "crumbs": [
      "HIPLOT",
      "tSNE"
    ]
  },
  {
    "objectID": "Hiplot/175-tsne.html#data-preparation",
    "href": "Hiplot/175-tsne.html#data-preparation",
    "title": "tSNE",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data are the data set (gene name and corresponding gene expression value) and sample information (sample name and grouping).\n\n# Load data\ndata1 &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/tsne/data.json\")$exampleData[[1]]$textarea[[1]])\ndata1 &lt;- as.data.frame(data1)\ndata2 &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/tsne/data.json\")$exampleData[[1]]$textarea[[2]])\ndata2 &lt;- as.data.frame(data2)\n\n# convert data structure\nsample.info &lt;- data2\nrownames(data1) &lt;- data1[, 1]\ndata1 &lt;- as.matrix(data1[, -1])\n## tsne\nset.seed(123)\ntsne_info &lt;- Rtsne(t(data1), perplexity = 1, theta = 0.1, check_duplicates = FALSE)\ncolnames(tsne_info$Y) &lt;- c(\"tSNE_1\", \"tSNE_2\")\n# handle data\ntsne_data &lt;- data.frame(\n  sample = colnames(data1),\n  tsne_info$Y\n)\ncolorBy &lt;- sample.info[match(colnames(data1), sample.info[, 1]), \"group\"]\ncolorBy &lt;- factor(colorBy, level = colorBy[!duplicated(colorBy)])\ntsne_data$colorBy = colorBy\nshapeBy &lt;- NULL\n\n# View data\nhead(data1)\n\n              M1       M2        M3       M8       M9      M10\nGBP4    6.599344 5.226266  3.693288 7.658312 8.666038 7.419708\nBCAT1   5.760380 4.892783  5.448924 8.765915 8.097206 8.262942\nCMPK2   9.561905 4.549168  3.998655 7.379591 7.938063 6.154118\nSTOX2   8.396409 8.717055  8.039064 3.542217 4.305187 6.964710\nPADI2   8.419766 8.268430  8.451181 4.136667 4.910986 4.080363\nSCARNA5 7.653074 5.780393 10.633550 3.822596 4.041078 7.956589\n\nhead(data2)\n\n  sample group\n1     M1    G1\n2     M2    G1\n3     M3    G1\n4     M8    G2\n5     M9    G2\n6    M10    G2",
    "crumbs": [
      "HIPLOT",
      "tSNE"
    ]
  },
  {
    "objectID": "Hiplot/175-tsne.html#visualization",
    "href": "Hiplot/175-tsne.html#visualization",
    "title": "tSNE",
    "section": "Visualization",
    "text": "Visualization\n\n# tsne\np &lt;- ggscatter(data = tsne_data, x = \"tSNE_1\", y = \"tSNE_2\", size = 2, \n               palette = \"lancet\", color = \"colorBy\") +\n  labs(color = \"group\") +\n  ggtitle(\"tSNE Plot1\") +\n  theme_bw() +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n\np\n\n\n\n\n\n\n\nFigure 1: tsne\n\n\n\n\n\nDifferent colors represent different samples, which is the same as PCA (principal component analysis) graphic interpretation. The difference lies in the visualization effect. For dissimilar points in T-SNE, a small distance will generate a large gradient to repel them.",
    "crumbs": [
      "HIPLOT",
      "tSNE"
    ]
  },
  {
    "objectID": "Hiplot/057-funnel-plot-metafor.html",
    "href": "Hiplot/057-funnel-plot-metafor.html",
    "title": "Funnel Plot (metafor)",
    "section": "",
    "text": "Can be used to show potential bias factors in Meta-analysis.",
    "crumbs": [
      "HIPLOT",
      "Funnel Plot (metafor)"
    ]
  },
  {
    "objectID": "Hiplot/057-funnel-plot-metafor.html#setup",
    "href": "Hiplot/057-funnel-plot-metafor.html#setup",
    "title": "Funnel Plot (metafor)",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; metafor; ggplotify\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"metafor\", quietly = TRUE)) {\n  install.packages(\"metafor\")\n}\nif (!requireNamespace(\"ggplotify\", quietly = TRUE)) {\n  install.packages(\"ggplotify\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(metafor)\nlibrary(ggplotify)",
    "crumbs": [
      "HIPLOT",
      "Funnel Plot (metafor)"
    ]
  },
  {
    "objectID": "Hiplot/057-funnel-plot-metafor.html#data-preparation",
    "href": "Hiplot/057-funnel-plot-metafor.html#data-preparation",
    "title": "Funnel Plot (metafor)",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/funnel-plot-metafor/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\ndata2 &lt;- escalc(ri=ri, ni=ni, data = data, measure=\"ZCOR\")\nres &lt;- rma(yi, vi, data = data2)\n\n# View data\nhead(data)\n\n              authors year  ni    ri controls          design   a_measure\n1     Axelsson et al. 2009 109 0.187     none cross-sectional self-report\n2     Axelsson et al. 2011 749 0.162     none cross-sectional self-report\n3        Bruce et al. 2010  55 0.340     none     prospective       other\n4  Christensen et al. 1999 107 0.320     none cross-sectional self-report\n5 Christensen & Smith 1995  72 0.270     none     prospective       other\n6        Cohen et al. 2004  65 0.000     none     prospective       other\n  c_measure meanage quality\n1     other   22.00       1\n2       NEO   53.59       1\n3       NEO   43.36       2\n4     other   41.70       1\n5       NEO   46.39       2\n6       NEO   41.20       2",
    "crumbs": [
      "HIPLOT",
      "Funnel Plot (metafor)"
    ]
  },
  {
    "objectID": "Hiplot/057-funnel-plot-metafor.html#visualization",
    "href": "Hiplot/057-funnel-plot-metafor.html#visualization",
    "title": "Funnel Plot (metafor)",
    "section": "Visualization",
    "text": "Visualization\n\n# Funnel Plot\np &lt;- as.ggplot(function(){\n  funnel(x = res, main = \"Funnel Plot (metafor)\",\n         level = c(90, 95, 99), shade = c(\"white\",\"#a90e07\",\"#d23e0b\"), refline = 0)\n  })\n\np\n\n\n\n\n\n\n\nFigure 1: Funnel Plot",
    "crumbs": [
      "HIPLOT",
      "Funnel Plot (metafor)"
    ]
  },
  {
    "objectID": "Hiplot/159-scatter-3d.html",
    "href": "Hiplot/159-scatter-3d.html",
    "title": "3D-Scatter",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot 3D-Scatter plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/scatter-3d?lang=en\n3D scatter plot is to apply a number of quantitative variables to different coaxes in space and combine different variables into coordinates in space, so as to clearly explain the interaction between the three quantitative variables.",
    "crumbs": [
      "HIPLOT",
      "3D-Scatter"
    ]
  },
  {
    "objectID": "Hiplot/159-scatter-3d.html#setup",
    "href": "Hiplot/159-scatter-3d.html#setup",
    "title": "3D-Scatter",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; plot3D; ggplotify\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"plot3D\", quietly = TRUE)) {\n  install.packages(\"plot3D\")\n}\nif (!requireNamespace(\"ggplotify\", quietly = TRUE)) {\n  install.packages(\"ggplotify\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(plot3D)\nlibrary(ggplotify)",
    "crumbs": [
      "HIPLOT",
      "3D-Scatter"
    ]
  },
  {
    "objectID": "Hiplot/159-scatter-3d.html#data-preparation",
    "href": "Hiplot/159-scatter-3d.html#data-preparation",
    "title": "3D-Scatter",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data are three variables and grouping.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/scatter-3d/data.json\")$exampleData[[1]]$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\ncol_idx &lt;- which(colnames(data) == \"group\")\ndata[, col_idx] &lt;- as.factor(data[, col_idx])\nshapes &lt;- 19\nshape_idx &lt;- \"\"\n\n# View data\nhead(data)\n\n      temp    pressure dtime group\n1 41.11057  0.49351190     1    G1\n2 35.23429  0.76636476     2    G1\n3 26.58407  0.63885937     3    G1\n4 34.76097 -0.08106332     4    G1\n5 25.76521 -0.31731579     5    G1\n6 20.30115 -1.91132873     6    G1",
    "crumbs": [
      "HIPLOT",
      "3D-Scatter"
    ]
  },
  {
    "objectID": "Hiplot/159-scatter-3d.html#visualization",
    "href": "Hiplot/159-scatter-3d.html#visualization",
    "title": "3D-Scatter",
    "section": "Visualization",
    "text": "Visualization\n\n# 3D-Scatter\np &lt;- as.ggplot(function() {\n  plot3d &lt;- scatter3D(data[, 1], data[, 2], data[, 3],\n    pch = shapes, cex = 1,\n    phi = 0, theta = 45, ticktype = \"detailed\",\n    bty = \"b2\", colkey = FALSE, alpha = 1,\n    xlab = colnames(data)[1], ylab = colnames(data)[2],\n    zlab = colnames(data)[3],\n    main = \"3D-Scatter Plot\",\n    colvar = as.numeric(as.factor(data[, 4])),\n    col = c(\"#e04d39\",\"#5bbad6\",\"#1e9f86\")\n  )\n  \n  legend(\"right\", pch=19, legend = levels(data[, col_idx]),\n         cex = 1.1, bty = 'n', xjust = 0.5, horiz = F,\n         title = colnames(data)[col_idx],\n         col = c(\"#e04d39\",\"#5bbad6\",\"#1e9f86\"))\n})\n\np\n\n\n\n\n\n\n\nFigure 1: 3D-Scatter\n\n\n\n\n\nIn the figure, temperature, pressure and time are respectively placed on x (horizontal axis), Y (vertical axis) and Z (perspective axis) to generate a THREE-DIMENSIONAL scatter plot, and the correlation between variables and their correlation degree can be intuitively found.",
    "crumbs": [
      "HIPLOT",
      "3D-Scatter"
    ]
  },
  {
    "objectID": "Hiplot/165-slopegraph.html",
    "href": "Hiplot/165-slopegraph.html",
    "title": "Slopegraph",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Slopegraph plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/slopegraph?lang=en\nSopegraph can be used to display the change of values.",
    "crumbs": [
      "HIPLOT",
      "Slopegraph"
    ]
  },
  {
    "objectID": "Hiplot/165-slopegraph.html#setup",
    "href": "Hiplot/165-slopegraph.html#setup",
    "title": "Slopegraph",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; CGPfunctions; ggplot2\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"CGPfunctions\", quietly = TRUE)) {\n  install.packages(\"CGPfunctions\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(CGPfunctions)\nlibrary(ggplot2)",
    "crumbs": [
      "HIPLOT",
      "Slopegraph"
    ]
  },
  {
    "objectID": "Hiplot/165-slopegraph.html#data-preparation",
    "href": "Hiplot/165-slopegraph.html#data-preparation",
    "title": "Slopegraph",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/slopegraph/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# convert data structure\ndata[, \"country\"] &lt;- factor(data[ ,\"country\"], levels = unique(data[ ,\"country\"]))\ndata[, \"year\"] &lt;- factor(data[ ,\"year\"], levels = unique(data[ ,\"year\"]))\n\n# View data\nhead(data)\n\n      country continent year lifeExp     pop gdpPercap\n1  Costa Rica  Americas 1992      76 3173216  6160.416\n2  Costa Rica  Americas 1997      77 3518107  6677.045\n3  Costa Rica  Americas 2002      78 3834934  7723.447\n4  Costa Rica  Americas 2007      79 4133884  9645.061\n5 El Salvador  Americas 1992      67 5274649  4444.232\n6 El Salvador  Americas 1997      70 5783439  5154.825",
    "crumbs": [
      "HIPLOT",
      "Slopegraph"
    ]
  },
  {
    "objectID": "Hiplot/165-slopegraph.html#visualization",
    "href": "Hiplot/165-slopegraph.html#visualization",
    "title": "Slopegraph",
    "section": "Visualization",
    "text": "Visualization\n\n# Slopegraph\np &lt;- newggslopegraph(data, year, lifeExp, country) +\n  labs(subtitle = \"\", title = \"Slope Graph\", x = \"Life Expectancy (years)\",\n       y = \"country\", caption = \"\") +\n  scale_color_manual(values = c(\"#3B4992FF\", \"#EE0000FF\", \"#008B45FF\",\n                               \"#631879FF\", \"#008280FF\", \"#BB0021FF\")) +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n\np\n\n\n\n\n\n\n\nFigure 1: Slopegraph",
    "crumbs": [
      "HIPLOT",
      "Slopegraph"
    ]
  },
  {
    "objectID": "Hiplot/067-gghistostats.html",
    "href": "Hiplot/067-gghistostats.html",
    "title": "Histostats",
    "section": "",
    "text": "Display data distribution and inference.",
    "crumbs": [
      "HIPLOT",
      "Histostats"
    ]
  },
  {
    "objectID": "Hiplot/067-gghistostats.html#setup",
    "href": "Hiplot/067-gghistostats.html#setup",
    "title": "Histostats",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggstatsplot\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggstatsplot\", quietly = TRUE)) {\n  install.packages(\"ggstatsplot\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggstatsplot)",
    "crumbs": [
      "HIPLOT",
      "Histostats"
    ]
  },
  {
    "objectID": "Hiplot/067-gghistostats.html#data-preparation",
    "href": "Hiplot/067-gghistostats.html#data-preparation",
    "title": "Histostats",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/gghistostats/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\naxis &lt;- c(\"budget\", \"genre\")\ndata[, axis[2]] &lt;- factor(data[, axis[2]], levels = unique(data[, axis[2]]))\n\n# View data\nhead(data)\n\n                                                                 title year\n1                       Lord of the Rings: The Return of the King, The 2003\n2                   Lord of the Rings: The Fellowship of the Ring, The 2001\n3                               Lord of the Rings: The Two Towers, The 2002\n4                                                            Star Wars 1977\n5                       Star Wars: Episode V - The Empire Strikes Back 1980\n6 Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb 1964\n  length budget rating  votes  mpaa  genre\n1    251   94.0    9.0 103631 PG-13 Action\n2    208   93.0    8.8 157608 PG-13 Action\n3    223   94.0    8.8 114797 PG-13 Action\n4    125   11.0    8.8 134640    PG Action\n5    129   18.0    8.8 103706    PG Action\n6     93    1.8    8.7  63471    PG Comedy",
    "crumbs": [
      "HIPLOT",
      "Histostats"
    ]
  },
  {
    "objectID": "Hiplot/067-gghistostats.html#visualization",
    "href": "Hiplot/067-gghistostats.html#visualization",
    "title": "Histostats",
    "section": "Visualization",
    "text": "Visualization\n\n# Histostats\np &lt;- grouped_gghistostats(\n  data = data, x = budget, grouping.var = genre,\n  effsize.type = \"unbiased\",\n  type = \"parametric\",\n  centrality.k = 2,\n  plotgrid.args = list(ncol = 2),\n  centrality.parameter = \"solid\",\n  centrality.line.args = list(size = 1, color = \"black\"),\n  bar.fill = \"#0D47A1\", \n  centrality.label.args = list(color = \"#0D47A1\", size = 3),\n  test.value = as.numeric(0),\n  normal.curve = F,\n  normal.curve.args = list(size = 1)\n)\n\np\n\n\n\n\n\n\n\nFigure 1: Histostats",
    "crumbs": [
      "HIPLOT",
      "Histostats"
    ]
  },
  {
    "objectID": "Hiplot/029-cor-heatmap-simple.html",
    "href": "Hiplot/029-cor-heatmap-simple.html",
    "title": "Simplified Correlation Heatmap",
    "section": "",
    "text": "Simplified variables correlation heatmap",
    "crumbs": [
      "HIPLOT",
      "Simplified Correlation Heatmap"
    ]
  },
  {
    "objectID": "Hiplot/029-cor-heatmap-simple.html#setup",
    "href": "Hiplot/029-cor-heatmap-simple.html#setup",
    "title": "Simplified Correlation Heatmap",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2; ggisoband\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"sigminer\", quietly = TRUE)) {\n  install.packages(\"sigminer\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(sigminer)",
    "crumbs": [
      "HIPLOT",
      "Simplified Correlation Heatmap"
    ]
  },
  {
    "objectID": "Hiplot/029-cor-heatmap-simple.html#data-preparation",
    "href": "Hiplot/029-cor-heatmap-simple.html#data-preparation",
    "title": "Simplified Correlation Heatmap",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/cor-heatmap-simple/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# View data\nhead(data)\n\n   mpg cyl disp  hp drat    wt  qsec vs am gear carb\n1 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\n2 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\n3 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n4 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\n5 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\n6 18.1   6  225 105 2.76 3.460 20.22  1  0    3    1",
    "crumbs": [
      "HIPLOT",
      "Simplified Correlation Heatmap"
    ]
  },
  {
    "objectID": "Hiplot/029-cor-heatmap-simple.html#visualization",
    "href": "Hiplot/029-cor-heatmap-simple.html#visualization",
    "title": "Simplified Correlation Heatmap",
    "section": "Visualization",
    "text": "Visualization\n\n# Simplified Correlation Heatmap\np &lt;- show_cor(\n  data = data,\n  x_vars = c(\"mpg\",\"cyl\",\"disp\"),\n  y_vars = c(\"wt\",\"hp\",\"drat\"),\n  cor_method = \"pearson\",\n  vis_method = \"square\",\n  lab = T,\n  test = T,\n  hc_order = F,\n  legend.title = \"Corr\"\n  ) +\n  ggtitle(\"\") +\n  labs(x=\"\", y=\"\") +\n  theme_bw() +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n\np\n\n\n\n\n\n\n\nFigure 1: Simplified Correlation Heatmap",
    "crumbs": [
      "HIPLOT",
      "Simplified Correlation Heatmap"
    ]
  },
  {
    "objectID": "Hiplot/042-diffusion-map.html",
    "href": "Hiplot/042-diffusion-map.html",
    "title": "Diffusion Map",
    "section": "",
    "text": "Diffusion Map is a nonlinear dimensionality reduction algorithm that can be used to visualize developmental trajectories.",
    "crumbs": [
      "HIPLOT",
      "Diffusion Map"
    ]
  },
  {
    "objectID": "Hiplot/042-diffusion-map.html#setup",
    "href": "Hiplot/042-diffusion-map.html#setup",
    "title": "Diffusion Map",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; destiny; ggplotify; scatterplot3d; ggpubr\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"destiny\", quietly = TRUE)) {\n  install_github(\"theislab/destiny\")\n}\nif (!requireNamespace(\"ggplotify\", quietly = TRUE)) {\n  install.packages(\"ggplotify\")\n}\nif (!requireNamespace(\"scatterplot3d\", quietly = TRUE)) {\n  install.packages(\"scatterplot3d\")\n}\nif (!requireNamespace(\"ggpubr\", quietly = TRUE)) {\n  install.packages(\"ggpubr\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(destiny)\nlibrary(ggplotify)\nlibrary(scatterplot3d)\nlibrary(ggpubr)",
    "crumbs": [
      "HIPLOT",
      "Diffusion Map"
    ]
  },
  {
    "objectID": "Hiplot/042-diffusion-map.html#data-preparation",
    "href": "Hiplot/042-diffusion-map.html#data-preparation",
    "title": "Diffusion Map",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata1 &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/diffusion-map/data.json\")$exampleData[[1]]$textarea[[1]])\ndata1 &lt;- as.data.frame(data1)\ndata2 &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/diffusion-map/data.json\")$exampleData[[1]]$textarea[[2]])\ndata2 &lt;- as.data.frame(data2)\n\n# convert data structure\nsample.info &lt;- data2\nrownames(data1) &lt;- data1[, 1]\ndata1 &lt;- as.matrix(data1[, -1])\n## tsne\nset.seed(123)\ndm_info &lt;- DiffusionMap(t(data1))\ndm_info &lt;- cbind(DC1 = dm_info$DC1, DC2 = dm_info$DC2, DC3 = dm_info$DC3)\ndm_data &lt;- data.frame(\n  sample = colnames(data1),\n  dm_info\n)\n\ncolorBy &lt;- sample.info[match(colnames(data1), sample.info[, 1]), \"Group\"]\ncolorBy &lt;- factor(colorBy, level = colorBy[!duplicated(colorBy)])\ndm_data$colorBy = colorBy\n\n# View data\nhead(dm_data)\n\n   sample        DC1        DC2         DC3 colorBy\nM1     M1 0.05059918 0.15203860 -0.06533168      G1\nM2     M2 0.05030863 0.14435034 -0.06044277      G1\nM3     M3 0.04271398 0.09273382 -0.02730427      G1\nM4     M4 0.04680742 0.10425273 -0.03789962      G1\nM5     M5 0.04971521 0.12786900 -0.05608321      G1\nM6     M6 0.04840072 0.12728303 -0.05256815      G1",
    "crumbs": [
      "HIPLOT",
      "Diffusion Map"
    ]
  },
  {
    "objectID": "Hiplot/042-diffusion-map.html#visualization",
    "href": "Hiplot/042-diffusion-map.html#visualization",
    "title": "Diffusion Map",
    "section": "Visualization",
    "text": "Visualization\n\n1. 2D\n\n# 2D Diffusion Map\np &lt;- ggscatter(data = dm_data,  x = \"DC1\", y = \"DC2\", color = \"colorBy\",\n               size = 2, palette = \"lancet\", alpha = 1) +\n  labs(color = \"Group\") +\n  ggtitle(\"Diffusion Map\") +\n  scale_color_manual(values = c(\"#3B4992FF\",\"#EE0000FF\",\"#008B45FF\")) +\n  theme_classic() +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n\np\n\n\n\n\n\n\n\nFigure 1: 2D Diffusion Map\n\n\n\n\n\n\n\n2. 3D\n\n# 3D Diffusion Map\ngroup.color &lt;- c(\"#3B4992FF\",\"#EE0000FF\",\"#008B45FF\")\nnames(group.color) &lt;- unique(dm_data$colorBy)\ngroup.color &lt;- group.color[!is.na(names(group.color))]\nif (length(group.color) == 0) {\n  group.color &lt;- c(Default=\"black\")\n  dm_data$colorBy &lt;- \"Default\"\n}\np &lt;- as.ggplot(function(){\n  scatterplot3d(x = dm_data$DC1, y = dm_data$DC2, z = dm_data$DC3,\n                color =  alpha(group.color[dm_data$colorBy], 1),\n                xlim=c(min(dm_data$DC1), max(dm_data$DC1)),\n                ylim=c(min(dm_data$DC2), max(dm_data$DC2)),\n                zlim=c(min(dm_data$DC3), max(dm_data$DC3)),\n                pch = 16, cex.symbols  = 0.6,\n                scale.y = 0.8,\n                xlab = \"DC1\", ylab = \"DC2\", zlab = \"DC3\",\n                angle = 40,\n                main = \"Diffusion Map\",\n                col.axis = \"#444444\", col.grid = \"#CCCCCC\")\n  legend(\"right\", legend = names(group.color),\n         col = alpha(group.color, 0.8), pch = 16)\n    })\np &lt;- p + theme_classic()\n\np\n\n\n\n\n\n\n\nFigure 2: 3D Diffusion Map",
    "crumbs": [
      "HIPLOT",
      "Diffusion Map"
    ]
  },
  {
    "objectID": "Hiplot/072-ggpubr-boxplot.html",
    "href": "Hiplot/072-ggpubr-boxplot.html",
    "title": "GGPubr Boxplot",
    "section": "",
    "text": "Feature-rich boxplot (GGPubr interface).",
    "crumbs": [
      "HIPLOT",
      "GGPubr Boxplot"
    ]
  },
  {
    "objectID": "Hiplot/072-ggpubr-boxplot.html#setup",
    "href": "Hiplot/072-ggpubr-boxplot.html#setup",
    "title": "GGPubr Boxplot",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggpubr; ggthemes\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggpubr\", quietly = TRUE)) {\n  install.packages(\"ggpubr\")\n}\nif (!requireNamespace(\"ggthemes\", quietly = TRUE)) {\n  install.packages(\"ggthemes\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggpubr)\nlibrary(ggthemes)",
    "crumbs": [
      "HIPLOT",
      "GGPubr Boxplot"
    ]
  },
  {
    "objectID": "Hiplot/072-ggpubr-boxplot.html#data-preparation",
    "href": "Hiplot/072-ggpubr-boxplot.html#data-preparation",
    "title": "GGPubr Boxplot",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/ggpubr-boxplot/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# View data\nhead(data)\n\n   len supp dose\n1  4.2   VC  0.5\n2 11.5   VC  0.5\n3  7.3   VC  0.5\n4  5.8   VC  0.5\n5  6.4   VC  0.5\n6 10.0   VC  0.5",
    "crumbs": [
      "HIPLOT",
      "GGPubr Boxplot"
    ]
  },
  {
    "objectID": "Hiplot/072-ggpubr-boxplot.html#visualization",
    "href": "Hiplot/072-ggpubr-boxplot.html#visualization",
    "title": "GGPubr Boxplot",
    "section": "Visualization",
    "text": "Visualization\n\n# GGPubr Boxplot\np &lt;- ggboxplot(\n  data = data, x = \"supp\", y = \"len\", facet.by = \"dose\",\n  merge = T,\n  color = \"supp\",\n  fill = \"white\") + \n  stat_compare_means(\n    label = \"p.signif\",\n    label.x.npc = \"center\",\n    method = \"wilcox\") + \n  scale_y_continuous(expand = expansion(mult = c(0.2, 0.2))) +\n  scale_fill_manual(values = c(\"#e04d39\",\"#5bbad6\")) +\n  ggtitle(\"Complex Boxplot\") + \n  theme_stata() +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n\np\n\n\n\n\n\n\n\nFigure 1: GGPubr Boxplot",
    "crumbs": [
      "HIPLOT",
      "GGPubr Boxplot"
    ]
  },
  {
    "objectID": "Hiplot/140-pie-matrix.html",
    "href": "Hiplot/140-pie-matrix.html",
    "title": "Pie Matrix",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Pie Matrix plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/pie-matrix?lang=en",
    "crumbs": [
      "HIPLOT",
      "Pie Matrix"
    ]
  },
  {
    "objectID": "Hiplot/140-pie-matrix.html#setup",
    "href": "Hiplot/140-pie-matrix.html#setup",
    "title": "Pie Matrix",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2; dplyr; tidyr; stringr\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"dplyr\", quietly = TRUE)) {\n  install.packages(\"dplyr\")\n}\nif (!requireNamespace(\"tidyr\", quietly = TRUE)) {\n  install.packages(\"tidyr\")\n}\nif (!requireNamespace(\"stringr\", quietly = TRUE)) {\n  install.packages(\"stringr\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(stringr)",
    "crumbs": [
      "HIPLOT",
      "Pie Matrix"
    ]
  },
  {
    "objectID": "Hiplot/140-pie-matrix.html#data-preparation",
    "href": "Hiplot/140-pie-matrix.html#data-preparation",
    "title": "Pie Matrix",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/pie-matrix/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\ndata[,\"genre\"] &lt;- factor(data[,\"genre\"], levels = unique(data[,\"genre\"]))\ndata[,\"mpaa\"] &lt;- factor(data[,\"mpaa\"], levels = unique(data[,\"mpaa\"]))\ndata[,\"status\"] &lt;- factor(data[,\"status\"], levels = unique(data[,\"status\"]))\ncol &lt;- c(\"#E64B35FF\",\"#4DBBD5FF\")\ndf &lt;- matrix(NA, nrow = length(unique(data[,\"mpaa\"])),\n             ncol = length(unique(data[,\"genre\"])))\nrow.names(df) &lt;- unique(data[,\"mpaa\"])\ncolnames(df) &lt;- unique(data[,\"genre\"])\nfor (i in 1:nrow(df)) {\n    for (j in 1:ncol(df)) {\n      for (k in unique(data[,\"status\"])) {\n        if (is.na(df[i, j])) {\n          df[i, j] &lt;- sum(data[,\"genre\"] == unique(data[,\"genre\"])[j] &\n            data[,\"mpaa\"] == unique(data[,\"mpaa\"])[i] &\n            data[,\"status\"] == k)\n        } else {\n          df[i, j] &lt;- paste0(df[i, j], \",\", \n            sum(data[,\"genre\"] == unique(data[,\"genre\"])[j] &\n              data[,\"mpaa\"] == unique(data[,\"mpaa\"])[i] &\n              data[,\"status\"] == k))\n        }\n      }\n    }\n}\ndf &lt;- as.matrix(df)\n\n# View data\nhead(data[,1:5])\n\n                                               title year length budget rating\n1                          Shawshank Redemption, The 1994    142     25    9.1\n2     Lord of the Rings: The Return of the King, The 2003    251     94    9.0\n3 Lord of the Rings: The Fellowship of the Ring, The 2001    208     93    8.8\n4             Lord of the Rings: The Two Towers, The 2002    223     94    8.8\n5                                       Pulp Fiction 1994    168      8    8.8\n6                                   Schindler's List 1993    195     25    8.8",
    "crumbs": [
      "HIPLOT",
      "Pie Matrix"
    ]
  },
  {
    "objectID": "Hiplot/140-pie-matrix.html#visualization",
    "href": "Hiplot/140-pie-matrix.html#visualization",
    "title": "Pie Matrix",
    "section": "Visualization",
    "text": "Visualization\n\n# Pie Matrix\np &lt;- df %&gt;% as.table() %&gt;%\n  as.data.frame() %&gt;%\n  mutate(Freq = str_split(Freq,\",\")) %&gt;%\n  unnest(Freq) %&gt;%\n  mutate(Freq = as.integer(Freq)) %&gt;%\n  # Convert the values to a percentage (which adds up to 1 for each graph)\n  group_by(Var1, Var2) %&gt;%\n  mutate(Freq = ifelse(is.na(Freq), NA, Freq / sum(Freq)),\n         color = row_number()) %&gt;%\n  ungroup() %&gt;%\n  # Plot\n  ggplot(aes(\"\", Freq, fill=factor(color, labels = unique(data[,\"status\"])))) + \n  geom_bar(width = 2, stat = \"identity\") +\n  coord_polar(\"y\") +\n  facet_wrap(~Var1+Var2, ncol = ncol(df)) +\n  scale_fill_manual(values = col) +\n  theme_void() +\n  theme(axis.text = element_blank(), axis.ticks = element_blank(),\n        panel.grid = element_blank(), axis.title = element_blank(),\n        legend.position = \"bottom\", legend.direction = \"horizontal\") +\n  guides(fill = guide_legend(nrow = 1, title = \"status\"))\n  \np\n\n\n\n\n\n\n\nFigure 1: Pie Matrix",
    "crumbs": [
      "HIPLOT",
      "Pie Matrix"
    ]
  },
  {
    "objectID": "Hiplot/034-custom-heat-map.html",
    "href": "Hiplot/034-custom-heat-map.html",
    "title": "Custom Heatmap",
    "section": "",
    "text": "Custom Heatmap, directly plot a heatmap based on the given data.",
    "crumbs": [
      "HIPLOT",
      "Custom Heatmap"
    ]
  },
  {
    "objectID": "Hiplot/034-custom-heat-map.html#setup",
    "href": "Hiplot/034-custom-heat-map.html#setup",
    "title": "Custom Heatmap",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)",
    "crumbs": [
      "HIPLOT",
      "Custom Heatmap"
    ]
  },
  {
    "objectID": "Hiplot/034-custom-heat-map.html#data-preparation",
    "href": "Hiplot/034-custom-heat-map.html#data-preparation",
    "title": "Custom Heatmap",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe case data is a grayscale image of the official logo of hiplot.org.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/custom-heat-map/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# convert data structure\ndraw_data &lt;- as.matrix(data[, 2:ncol(data)])\nrow_num &lt;- nrow(draw_data)\ncol_num &lt;- ncol(draw_data)\ncol_labels &lt;- colnames(data)\ncol_labels &lt;- col_labels[2:ncol(data)]\nrow_labels &lt;- data$name\nrm(data)\ndf &lt;- expand.grid(row = 1:row_num, col = 1:col_num)\ndf$value &lt;- c(draw_data)\n\n# View data\nhead(df)\n\n  row col value\n1   1   1   236\n2   2   1   236\n3   3   1   236\n4   4   1   236\n5   5   1   236\n6   6   1   236",
    "crumbs": [
      "HIPLOT",
      "Custom Heatmap"
    ]
  },
  {
    "objectID": "Hiplot/034-custom-heat-map.html#visualization",
    "href": "Hiplot/034-custom-heat-map.html#visualization",
    "title": "Custom Heatmap",
    "section": "Visualization",
    "text": "Visualization\n\n# Custom Heatmap\np &lt;- ggplot(df, aes(x = col, y = row, fill = value)) +\n  geom_point(shape = 21, size = 8, aes(fill = value), color = \"white\") +\n  scale_fill_gradient(low = \"#DDDDDD\", high = \"#0000F5\") +\n  guides(fill = guide_colorbar(title = \"Value\")) +\n  theme(\n    panel.background = element_rect(fill = \"white\"),\n    panel.grid = element_blank(),\n    axis.text = element_text(size = 10),\n    axis.ticks = element_blank(),\n    axis.title = element_blank()\n    ) +\n  scale_x_continuous(breaks = 1:col_num, labels = col_labels, position = \"top\") +\n  scale_y_reverse(breaks = 1:row_num, labels = row_labels, position = \"left\")\n\np\n\n\n\n\n\n\n\nFigure 1: Custom Heatmap",
    "crumbs": [
      "HIPLOT",
      "Custom Heatmap"
    ]
  },
  {
    "objectID": "Hiplot/039-density-histogram.html",
    "href": "Hiplot/039-density-histogram.html",
    "title": "Density-Histogram",
    "section": "",
    "text": "Use density plots or histograms to show data distribution.",
    "crumbs": [
      "HIPLOT",
      "Density-Histogram"
    ]
  },
  {
    "objectID": "Hiplot/039-density-histogram.html#setup",
    "href": "Hiplot/039-density-histogram.html#setup",
    "title": "Density-Histogram",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; grafify; dplyr\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"grafify\", quietly = TRUE)) {\n  install.packages(\"grafify\")\n}\nif (!requireNamespace(\"dplyr\", quietly = TRUE)) {\n  install.packages(\"dplyr\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(grafify)\nlibrary(dplyr)",
    "crumbs": [
      "HIPLOT",
      "Density-Histogram"
    ]
  },
  {
    "objectID": "Hiplot/039-density-histogram.html#data-preparation",
    "href": "Hiplot/039-density-histogram.html#data-preparation",
    "title": "Density-Histogram",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/density-histogram/data.json\")$exampleData[[1]]$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# convert data structure\ny &lt;- \"Doubling_time\"\ngroup &lt;- \"Student\"\ndata[, group] &lt;- factor(data[, group], levels = unique(data[, group]))\ndata &lt;- data %&gt;% \n  mutate(median = median(get(y), na.rm = TRUE),\n         mean = mean(get(y), na.rm = TRUE))\n\n# View data\nhead(data)\n\n  Experiment Student Doubling_time facet   median     mean\n1       Exp1       A      17.36765    F1 20.18114 19.91642\n2       Exp1       B      18.04119    F1 20.18114 19.91642\n3       Exp1       C      18.70120    F1 20.18114 19.91642\n4       Exp1       D      20.06762    F1 20.18114 19.91642\n5       Exp1       E      20.19807    F2 20.18114 19.91642\n6       Exp1       F      22.11908    F2 20.18114 19.91642",
    "crumbs": [
      "HIPLOT",
      "Density-Histogram"
    ]
  },
  {
    "objectID": "Hiplot/039-density-histogram.html#visualization",
    "href": "Hiplot/039-density-histogram.html#visualization",
    "title": "Density-Histogram",
    "section": "Visualization",
    "text": "Visualization\n\n1. Density Plot\n\n# Density Plot\np &lt;- plot_density(\n  data = data, \n  ycol = get(y), \n  group = get(group),\n  linethick = 0.5,\n  c_alpha = 0.6) + \n  ggtitle(\"Density Plot\") + \n  geom_vline(aes_string(xintercept = \"median\"),\n        colour = 'black', linetype = 2, size = 0.5) + \n  xlab(y) + \n  ylab(\"density\") + \n  guides(fill = guide_legend(title = group), color = FALSE) +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n        legend.position = \"bottom\",\n        legend.direction = \"horizontal\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n\np\n\n\n\n\n\n\n\nFigure 1: Density Plot\n\n\n\n\n\n\n\n2. Histogram Plot\n\n# Histogram Plot\np &lt;- plot_histogram(\n  data = data, \n  ycol = get(y), \n  group = get(group),\n  linethick = 0.5,\n  BinSize = 30)  + \n  ggtitle(\"Histogram Plot\") + \n  geom_vline(aes_string(xintercept = \"median\"),\n        colour = 'black', linetype = 2, size = 0.5) + \n  xlab(y) + \n  ylab(\"density\") + \n  guides(fill = guide_legend(title = group), color = FALSE) +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n        legend.position = \"bottom\",\n        legend.direction = \"horizontal\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n\np\n\n\n\n\n\n\n\nFigure 2: Histogram Plot",
    "crumbs": [
      "HIPLOT",
      "Density-Histogram"
    ]
  },
  {
    "objectID": "Hiplot/112-map-uk-city.html",
    "href": "Hiplot/112-map-uk-city.html",
    "title": "UK Map (City)",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot UK Map (City) plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/map-uk-city?lang=en",
    "crumbs": [
      "HIPLOT",
      "Oceania/Antarc Map"
    ]
  },
  {
    "objectID": "Hiplot/112-map-uk-city.html#setup",
    "href": "Hiplot/112-map-uk-city.html#setup",
    "title": "UK Map (City)",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2; RColorBrewer\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"RColorBrewer\", quietly = TRUE)) {\n  install.packages(\"RColorBrewer\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(RColorBrewer)",
    "crumbs": [
      "HIPLOT",
      "Oceania/Antarc Map"
    ]
  },
  {
    "objectID": "Hiplot/112-map-uk-city.html#data-preparation",
    "href": "Hiplot/112-map-uk-city.html#data-preparation",
    "title": "UK Map (City)",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/map-uk-city/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\ndt_map &lt;- readRDS(url(\"https://download.hiplot.cn/ui/basic/map-uk-city/uk_city.rds\"))\n\n# Convert data structure\ndt_map$Value &lt;- data$value[match(dt_map$ENG_NAME, data$name)]\n\n# View data\nhead(data)\n\n               name value\n1 Rhondda Cynon Taf   503\n2       Eilean Siar   221\n3          Bridgend   993\n4           Lincoln   798\n5     Richmondshire   169\n6           Ashford   653",
    "crumbs": [
      "HIPLOT",
      "Oceania/Antarc Map"
    ]
  },
  {
    "objectID": "Hiplot/112-map-uk-city.html#visualization",
    "href": "Hiplot/112-map-uk-city.html#visualization",
    "title": "UK Map (City)",
    "section": "Visualization",
    "text": "Visualization\n\n# UK Map (City)\np &lt;- ggplot(dt_map) +\n  geom_polygon(aes(x = long, y = lat, group = group, fill = Value),\n               alpha = 0.9, size = 0.5) +\n  geom_path(aes(x = long, y = lat, group = group), color = \"black\", size = 0.2) +\n  coord_fixed() +\n  scale_fill_gradientn(\n    colours = colorRampPalette(rev(brewer.pal(11,\"RdYlBu\")))(500),\n    breaks = seq(min(data$value), max(data$value), \n                 round((max(data$value)-min(data$value))/7)),\n    name = \"Color Key\",\n    guide = guide_legend(\n      direction = \"vertical\", keyheight = unit(1, units = \"mm\"),\n      keywidth = unit(8, units = \"mm\"),\n      title.position = \"top\", title.hjust = 0.5, label.hjust = 0.5,\n      nrow = 1, byrow = T, reverse = F, label.position = \"bottom\")) +\n  theme(text = element_text(color = \"#3A3F4A\"),\n        axis.text = element_blank(),\n        axis.ticks = element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        legend.position = \"top\",\n        legend.text = element_text(size = 4 * 1.5, color = \"black\"),\n        legend.title = element_text(size = 5 * 1.5, color = \"black\"),\n        plot.title = element_text(\n          face = \"bold\", size = 5 * 1.5, hjust = 0.5, \n          margin = margin(t = 4, b = 5), color = \"black\"),\n        plot.background = element_rect(fill = \"#FFFFFF\", color = \"#FFFFFF\"),\n        panel.background = element_rect(fill = \"#FFFFFF\", color = NA),\n        legend.background = element_rect(fill = \"#FFFFFF\", color = NA),\n        plot.margin = unit(c(1.5, 1.5, 1.5, 1.5), \"cm\")) +\n  labs(x = NULL, y = NULL, title = \"UK Map\")\n\np\n\n\n\n\n\n\n\nFigure 1: UK Map (City)",
    "crumbs": [
      "HIPLOT",
      "Oceania/Antarc Map"
    ]
  },
  {
    "objectID": "Hiplot/123-mosaic.html",
    "href": "Hiplot/123-mosaic.html",
    "title": "Mosaic Ratio Plot",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Mosaic Ratio Plot plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/mosaic?lang=en\nUse mosaic blocks to show data proportions.",
    "crumbs": [
      "HIPLOT",
      "Mosaic Ratio Plot"
    ]
  },
  {
    "objectID": "Hiplot/123-mosaic.html#setup",
    "href": "Hiplot/123-mosaic.html#setup",
    "title": "Mosaic Ratio Plot",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; vcd; DescTools; ggplotify\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"vcd\", quietly = TRUE)) {\n  install.packages(\"vcd\")\n}\nif (!requireNamespace(\"DescTools\", quietly = TRUE)) {\n  install.packages(\"DescTools\")\n}\nif (!requireNamespace(\"ggplotify\", quietly = TRUE)) {\n  install.packages(\"ggplotify\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(vcd)\nlibrary(DescTools)\nlibrary(ggplotify)",
    "crumbs": [
      "HIPLOT",
      "Mosaic Ratio Plot"
    ]
  },
  {
    "objectID": "Hiplot/123-mosaic.html#data-preparation",
    "href": "Hiplot/123-mosaic.html#data-preparation",
    "title": "Mosaic Ratio Plot",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/mosaic/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\ntbl &lt;- xtabs(~ Survived + PassengerClass + Gender, data)\n\n# View data\nhead(data)\n\n  PassengerId Survived PassengerClass\n1           1        0              3\n2           2        1              1\n3           3        1              3\n4           4        1              1\n5           5        0              3\n6           6        0              3\n                                                 Name Gender Age SibSp Parch\n1                             Braund, Mr. Owen Harris   Male  22     1     0\n2 Cumings, Mrs. John Bradley (Florence Briggs Thayer) Female  38     1     0\n3                              Heikkinen, Miss. Laina Female  26     0     0\n4        Futrelle, Mrs. Jacques Heath (Lily May Peel) Female  35     1     0\n5                            Allen, Mr. William Henry   Male  35     0     0\n6                                    Moran, Mr. James   Male  NA     0     0\n            Ticket    Fare Cabin Embarked\n1        A/5 21171  7.2500  &lt;NA&gt;        S\n2         PC 17599 71.2833   C85        C\n3 STON/O2. 3101282  7.9250  &lt;NA&gt;        S\n4           113803 53.1000  C123        S\n5           373450  8.0500  &lt;NA&gt;        S\n6           330877  8.4583  &lt;NA&gt;        Q",
    "crumbs": [
      "HIPLOT",
      "Mosaic Ratio Plot"
    ]
  },
  {
    "objectID": "Hiplot/123-mosaic.html#visualization",
    "href": "Hiplot/123-mosaic.html#visualization",
    "title": "Mosaic Ratio Plot",
    "section": "Visualization",
    "text": "Visualization\n\n# Mosaic Ratio Plot\np &lt;- as.ggplot(function() {\n  mosaic(tbl, shade = TRUE, legend = TRUE, main = \"Mosaic Ratio Plot\",\n         gp = shading_binary(tbl, col = c(\"#3B4992FF\",\"#EE0000FF\")))\n})\n\np\n\n\n\n\n\n\n\nFigure 1: Mosaic Ratio Plot",
    "crumbs": [
      "HIPLOT",
      "Mosaic Ratio Plot"
    ]
  },
  {
    "objectID": "Hiplot/154-ridge.html",
    "href": "Hiplot/154-ridge.html",
    "title": "Ridge",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Ridge plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/ridge?lang=en\nThe ridge map is a graph that connects points and forms a ridge.",
    "crumbs": [
      "HIPLOT",
      "Ridge"
    ]
  },
  {
    "objectID": "Hiplot/154-ridge.html#setup",
    "href": "Hiplot/154-ridge.html#setup",
    "title": "Ridge",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggridges; ggplot2; ggthemes\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggridges\", quietly = TRUE)) {\n  install.packages(\"ggridges\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"ggthemes\", quietly = TRUE)) {\n  install.packages(\"ggthemes\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggridges)\nlibrary(ggplot2)\nlibrary(ggthemes)",
    "crumbs": [
      "HIPLOT",
      "Ridge"
    ]
  },
  {
    "objectID": "Hiplot/154-ridge.html#data-preparation",
    "href": "Hiplot/154-ridge.html#data-preparation",
    "title": "Ridge",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data are three groups and their corresponding values.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/ridge/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\ndata$group &lt;- factor(data$group, levels = unique(data$group)[length(unique(data$group)):1])\n\n# View data\nhead(data)\n\n  value group\n1   5.1    G1\n2   4.9    G1\n3   4.7    G1\n4   4.6    G1\n5   5.0    G1\n6   5.4    G1",
    "crumbs": [
      "HIPLOT",
      "Ridge"
    ]
  },
  {
    "objectID": "Hiplot/154-ridge.html#visualization",
    "href": "Hiplot/154-ridge.html#visualization",
    "title": "Ridge",
    "section": "Visualization",
    "text": "Visualization\n\n# Ridge\np &lt;- ggplot(data, aes(x = value, y = group, fill = group, col = group)) +\n  geom_density_ridges(scale = 5, alpha = 0.8) +\n  labs(x = \"value\", y = \"group\") +\n  theme(plot.title = element_text(hjust = 0.5),\n        legend.position = \"none\") +\n  ggtitle(\"Ridge Plot\") +\n  guides(color = guide_legend(reverse = TRUE),\n         fill = guide_legend(reverse = TRUE)) +\n  scale_fill_manual(values = c(\"#e04d39\",\"#5bbad6\",\"#1e9f86\")) +\n  scale_color_manual(values = c(\"#e04d39\",\"#5bbad6\",\"#1e9f86\")) +\n  theme_stata() +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n\np\n\n\n\n\n\n\n\nFigure 1: Ridge\n\n\n\n\n\nDifferent colors represent different groups, and the approximate degree of data can be observed.",
    "crumbs": [
      "HIPLOT",
      "Ridge"
    ]
  },
  {
    "objectID": "Hiplot/020-chord.html",
    "href": "Hiplot/020-chord.html",
    "title": "Chord Plot",
    "section": "",
    "text": "The complex interaction is visualized in the form of chord graph.",
    "crumbs": [
      "HIPLOT",
      "Chord Plot"
    ]
  },
  {
    "objectID": "Hiplot/020-chord.html#setup",
    "href": "Hiplot/020-chord.html#setup",
    "title": "Chord Plot",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; circlize; ggplotify\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"circlize\", quietly = TRUE)) {\n  install.packages(\"circlize\")\n}\nif (!requireNamespace(\"ggplotify\", quietly = TRUE)) {\n  install.packages(\"ggplotify\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(circlize)\nlibrary(ggplotify)",
    "crumbs": [
      "HIPLOT",
      "Chord Plot"
    ]
  },
  {
    "objectID": "Hiplot/020-chord.html#data-preparation",
    "href": "Hiplot/020-chord.html#data-preparation",
    "title": "Chord Plot",
    "section": "Data Preparation",
    "text": "Data Preparation\nData frame or matrix of interaction of genes with pathways or gene ontologys.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/chord/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# convert data structure\nrow.names(data) &lt;- data[, 1]\ndata &lt;- data[, -1]\ndata &lt;- as.matrix(data)\n\n# View data\nhead(data)\n\n   E1 E2 E3 E4 E5\nS1  4 16 12 18 11\nS2  7 11  2 15 10\nS3  9  2 17 16 11\nS4 14  9 12  3 17\nS5  1  1  7  1 12\nS6 10 18  9 13  9",
    "crumbs": [
      "HIPLOT",
      "Chord Plot"
    ]
  },
  {
    "objectID": "Hiplot/020-chord.html#visualization",
    "href": "Hiplot/020-chord.html#visualization",
    "title": "Chord Plot",
    "section": "Visualization",
    "text": "Visualization\n\n# Chord Plot\nPalette &lt;- c(\"#E64B35FF\",\"#4DBBD5FF\",\"#00A087FF\",\"#3C5488FF\",\"#F39B7FFF\",\n             \"#8491B4FF\",\"#91D1C2FF\",\"#DC0000FF\",\"#7E6148FF\",\"#B09C85FF\")\ngrid.col &lt;- c(Palette, Palette, Palette[1:5])\np &lt;- as.ggplot(function() {\n  chordDiagram(\n    data, grid.col = grid.col, grid.border = NULL, transparency = 0.5,\n    row.col = NULL, column.col = NULL,  order = NULL,\n    directional = 0, # 1, -1, 0, 2\n    direction.type = \"diffHeight\", # diffHeight and arrows\n    diffHeight = convert_height(2, \"mm\"), reduce = 1e-5, xmax = NULL, \n    self.link = 2, symmetric = FALSE, keep.diagonal = FALSE, \n    preAllocateTracks = NULL,\n    annotationTrack = c(\"name\", \"grid\", \"axis\"),\n    annotationTrackHeight = convert_height(c(3, 3), \"mm\"),\n    link.border = NA, link.lwd = par(\"lwd\"), link.lty = par(\"lty\"), \n    link.sort = FALSE, link.decreasing = TRUE, link.largest.ontop = FALSE,\n    link.visible = T, link.rank = NULL, link.overlap = FALSE,\n    scale = F, group = NULL, big.gap = 10, small.gap = 1\n    )\n  })\n\np\n\n\n\n\n\n\n\nFigure 1: Chord Plot",
    "crumbs": [
      "HIPLOT",
      "Chord Plot"
    ]
  },
  {
    "objectID": "Hiplot/008-barplot-gradient.html",
    "href": "Hiplot/008-barplot-gradient.html",
    "title": "Barplot Gradient",
    "section": "",
    "text": "It is similar to the bubble chart, but on the basis of the histogram, a color gradient rectangle is used to simultaneously display the visualization of two variables.",
    "crumbs": [
      "HIPLOT",
      "Barplot Gradient"
    ]
  },
  {
    "objectID": "Hiplot/008-barplot-gradient.html#setup",
    "href": "Hiplot/008-barplot-gradient.html#setup",
    "title": "Barplot Gradient",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2; stringr\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"stringr\", quietly = TRUE)) {\n  install.packages(\"stringr\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(stringr)",
    "crumbs": [
      "HIPLOT",
      "Barplot Gradient"
    ]
  },
  {
    "objectID": "Hiplot/008-barplot-gradient.html#data-preparation",
    "href": "Hiplot/008-barplot-gradient.html#data-preparation",
    "title": "Barplot Gradient",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe first column is Go Term (Go language code), the second column is the number of genes, and the third column is pvalue.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/barplot-gradient/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# convert data structure\ndata[, 1] &lt;- str_to_sentence(str_remove(data[, 1], pattern = \"\\\\w+:\\\\d+\\\\W\"))\ntopnum &lt;- 7\ndata &lt;- data[1:topnum, ]\ndata[, 1] &lt;- factor(data[, 1], level = rev(unique(data[, 1])))\n\n# View data\nhead(data)\n\n                               Term Count   PValue\n1                   Immune response    20 9.61e-08\n2     Defense response to bacterium    11 3.02e-06\n3                   Cell chemotaxis     8 5.14e-06\n4                     Cell adhesion    17 2.73e-05\n5             Complement activation     8 3.56e-05\n6 Extracellular matrix organization    11 4.23e-05",
    "crumbs": [
      "HIPLOT",
      "Barplot Gradient"
    ]
  },
  {
    "objectID": "Hiplot/008-barplot-gradient.html#visualization",
    "href": "Hiplot/008-barplot-gradient.html#visualization",
    "title": "Barplot Gradient",
    "section": "Visualization",
    "text": "Visualization\n\n# Barplot Gradient\np &lt;- ggplot(data, aes(x = Term, y = Count, fill = -log10(PValue))) +\n  geom_bar(stat = \"identity\") +\n  ggtitle(\"GO BarPlot\") +\n  scale_fill_continuous(low = \"#00438E\", high = \"#E43535\") +\n  scale_x_discrete(labels = function(x) {str_wrap(x, width = 65)}) +\n  labs(fill = \"-log10 (PValue)\", y = \"Term\", x = \"Count\") +\n  coord_flip() +\n  theme_bw() +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n\np\n\n\n\n\n\n\n\nFigure 1: Barplot Gradient\n\n\n\n\n\nAs shown in the figure, blue is a low pvalue color, and red is a high pvalue color. As the pvalue increases, the color changes from blue to red. The abscissa indicates the number of genes.",
    "crumbs": [
      "HIPLOT",
      "Barplot Gradient"
    ]
  },
  {
    "objectID": "Hiplot/103-map-france-town.html",
    "href": "Hiplot/103-map-france-town.html",
    "title": "France Map (Town)",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot France Map (Town) plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/map-france-town?lang=en",
    "crumbs": [
      "HIPLOT",
      "France Map (Town)"
    ]
  },
  {
    "objectID": "Hiplot/103-map-france-town.html#setup",
    "href": "Hiplot/103-map-france-town.html#setup",
    "title": "France Map (Town)",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2; RColorBrewer\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"RColorBrewer\", quietly = TRUE)) {\n  install.packages(\"RColorBrewer\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(RColorBrewer)",
    "crumbs": [
      "HIPLOT",
      "France Map (Town)"
    ]
  },
  {
    "objectID": "Hiplot/103-map-france-town.html#data-preparation",
    "href": "Hiplot/103-map-france-town.html#data-preparation",
    "title": "France Map (Town)",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/map-france-town/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\ndt_map &lt;- readRDS(url(\"https://download.hiplot.cn/ui/basic/map-france-town/france_town.rds\"))\n\n# Convert data structure\ndt_map$Value &lt;- data$value[match(dt_map$ENG_NAME, data$name)]\n\n# View data\nhead(data)\n\n                   name value\n1           Bischwiller   669\n2              Haguenau   935\n3 Niederbronn-les-Bains   356\n4              Molsheim   199\n5               Rosheim   971\n6                Saales   532",
    "crumbs": [
      "HIPLOT",
      "France Map (Town)"
    ]
  },
  {
    "objectID": "Hiplot/103-map-france-town.html#visualization",
    "href": "Hiplot/103-map-france-town.html#visualization",
    "title": "France Map (Town)",
    "section": "Visualization",
    "text": "Visualization\n\n# France Map (Town)\np &lt;- ggplot(dt_map) +\n  geom_polygon(aes(x = long, y = lat, group = group, fill = Value),\n               alpha = 0.9, size = 0.5) +\n  geom_path(aes(x = long, y = lat, group = group), color = \"black\", size = 0.2) +\n  coord_fixed() +\n  scale_fill_gradientn(\n    colours = colorRampPalette(rev(brewer.pal(11,\"RdYlBu\")))(500),\n    breaks = seq(min(data$value), max(data$value), \n                 round((max(data$value)-min(data$value))/7)),\n    name = \"Color Key\",\n    guide = guide_legend(\n      direction = \"vertical\", keyheight = unit(1, units = \"mm\"),\n      keywidth = unit(8, units = \"mm\"),\n      title.position = \"top\", title.hjust = 0.5, label.hjust = 0.5,\n      nrow = 1, byrow = T, reverse = F, label.position = \"bottom\")) +\n  theme(text = element_text(color = \"#3A3F4A\"),\n        axis.text = element_blank(),\n        axis.ticks = element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        legend.position = \"top\",\n        legend.text = element_text(size = 4 * 1.5, color = \"black\"),\n        legend.title = element_text(size = 5 * 1.5, color = \"black\"),\n        plot.title = element_text(\n          face = \"bold\", size = 5 * 1.5, hjust = 0.5, \n          margin = margin(t = 4, b = 5), color = \"black\"),\n        plot.background = element_rect(fill = \"#FFFFFF\", color = \"#FFFFFF\"),\n        panel.background = element_rect(fill = \"#FFFFFF\", color = NA),\n        legend.background = element_rect(fill = \"#FFFFFF\", color = NA),\n        plot.margin = unit(c(1.5, 1.5, 1.5, 1.5), \"cm\")) +\n  labs(x = NULL, y = NULL, title = \"France Map\")\n\np\n\n\n\n\n\n\n\nFigure 1: France Map (Town)",
    "crumbs": [
      "HIPLOT",
      "France Map (Town)"
    ]
  },
  {
    "objectID": "Hiplot/146-pyramid-stack.html",
    "href": "Hiplot/146-pyramid-stack.html",
    "title": "Pyramid Stack",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Pyramid Stack plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/pyramid-stack?lang=en\nThe pyramid stack is a pyramid-like figure that distributes data on both sides of a central axis.",
    "crumbs": [
      "HIPLOT",
      "Pyramid Stack"
    ]
  },
  {
    "objectID": "Hiplot/146-pyramid-stack.html#setup",
    "href": "Hiplot/146-pyramid-stack.html#setup",
    "title": "Pyramid Stack",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2; ggthemes; dplyr\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"ggthemes\", quietly = TRUE)) {\n  install.packages(\"ggthemes\")\n}\nif (!requireNamespace(\"dplyr\", quietly = TRUE)) {\n  install.packages(\"dplyr\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(ggthemes)\nlibrary(dplyr)",
    "crumbs": [
      "HIPLOT",
      "Pyramid Stack"
    ]
  },
  {
    "objectID": "Hiplot/146-pyramid-stack.html#data-preparation",
    "href": "Hiplot/146-pyramid-stack.html#data-preparation",
    "title": "Pyramid Stack",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/pyramid-stack/data.json\")$exampleData[[1]]$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\ndata[,3] &lt;- factor(data[,3], levels = unique(data[,3]))\ndata[,1] &lt;- factor(data[,1], levels = unique(data[,1]))\n\n# View data\nhead(data)\n\n    age gender year       pop\n1   0-4   male 1950 171.85124\n2   5-9   male 1950 137.99242\n3 10-14   male 1950 133.27428\n4 15-19   male 1950 121.69274\n5 20-24   male 1950 112.39438\n6 25-29   male 1950  96.59408",
    "crumbs": [
      "HIPLOT",
      "Pyramid Stack"
    ]
  },
  {
    "objectID": "Hiplot/146-pyramid-stack.html#visualization",
    "href": "Hiplot/146-pyramid-stack.html#visualization",
    "title": "Pyramid Stack",
    "section": "Visualization",
    "text": "Visualization\n\n# Pyramid Stack\np &lt;- ggplot(data = data, aes(x = age, y = pop, fill = year)) +\n  geom_bar(data = data %&gt;% filter(gender == \"female\") %&gt;% arrange(rev(year)),\n           stat = \"identity\", position = \"identity\") +\n  geom_bar(data = data %&gt;% filter(gender == \"male\") %&gt;% arrange(rev(year)),\n           stat = \"identity\", position = \"identity\", mapping = aes(y = -pop)) +\n  coord_flip() +\n  geom_hline(yintercept = 0) +\n  scale_fill_economist() +\n  scale_fill_manual(values = c(\"#e04d39\",\"#5bbad6\",\"#1e9f86\")) +\n  labs(y = \"pop | male (left) - female (right)\", x= \"\") +\n  theme_economist(horizontal = FALSE) +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n        legend.position = \"top\",\n        legend.direction = \"horizontal\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank())\n\np\n\n\n\n\n\n\n\nFigure 1: Pyramid Stack",
    "crumbs": [
      "HIPLOT",
      "Pyramid Stack"
    ]
  },
  {
    "objectID": "Hiplot/143-pseudo-enhanced-ma.html",
    "href": "Hiplot/143-pseudo-enhanced-ma.html",
    "title": "EnhancedMA",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot EnhancedMA plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/pseudo-enhanced-ma?lang=en\nVisualization of differentially expressed genes.",
    "crumbs": [
      "HIPLOT",
      "EnhancedMA"
    ]
  },
  {
    "objectID": "Hiplot/143-pseudo-enhanced-ma.html#setup",
    "href": "Hiplot/143-pseudo-enhanced-ma.html#setup",
    "title": "EnhancedMA",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; EnhancedVolcano\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"EnhancedVolcano\", quietly = TRUE)) {\n  install_github('kevinblighe/EnhancedVolcano')\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(EnhancedVolcano)",
    "crumbs": [
      "HIPLOT",
      "EnhancedMA"
    ]
  },
  {
    "objectID": "Hiplot/143-pseudo-enhanced-ma.html#data-preparation",
    "href": "Hiplot/143-pseudo-enhanced-ma.html#data-preparation",
    "title": "EnhancedMA",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/pseudo-enhanced-ma/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\nrow.names(data) &lt;- data[,1]\ndata &lt;- data[,-1]\ndata$baseMeanNew &lt;- 1 / (10^log(data$baseMean + 1))\n\n# View data\nhead(data)\n\n              baseMean log2FoldChange      lfcSE       stat       pvalue\nCOL6A3    8.494143e+04    -0.34453583 0.07607842 -4.5305972 5.881720e-06\nZNF157    2.456747e+00    -0.42976616 0.33693867 -1.2957785 1.950518e-01\nRPL23P11  0.000000e+00             NA         NA         NA           NA\nSCARNA10  4.406548e-01    -0.05657159 0.15265730 -0.2329492 8.158009e-01\nRNU6-857P 0.000000e+00             NA         NA         NA           NA\nTOPORS    5.331777e+02     0.10709656 0.12572643  0.8549637 3.925712e-01\n                  padj  baseMeanNew\nCOL6A3    6.207728e-05 4.469624e-12\nZNF157              NA 5.750056e-02\nRPL23P11            NA 1.000000e+00\nSCARNA10            NA 4.314220e-01\nRNU6-857P           NA 1.000000e+00\nTOPORS    6.148749e-01 5.239278e-07",
    "crumbs": [
      "HIPLOT",
      "EnhancedMA"
    ]
  },
  {
    "objectID": "Hiplot/143-pseudo-enhanced-ma.html#visualization",
    "href": "Hiplot/143-pseudo-enhanced-ma.html#visualization",
    "title": "EnhancedMA",
    "section": "Visualization",
    "text": "Visualization\n\n# EnhancedMA\np &lt;- EnhancedVolcano(\n  data, lab = rownames(data), title = \"MA plot\", subtitle = \"EnhancedMA\",\n  x = 'log2FoldChange', y = 'baseMeanNew', xlab = bquote(~Log[2]~ 'fold change'),\n  ylab = bquote(~Log[e]~ 'base mean + 1'), ylim = c(0,12),\n  pCutoff = as.numeric(1e-05), FCcutoff = 1, pointSize = 3.5,\n  labSize = 4, boxedLabels = T, colAlpha = 1,\n  legendLabels = c('NS', expression(Log[2]~FC),\n                   'Mean expression', \n                   expression(Mean-expression~and~log[2]~FC)),\n  legendPosition = \"bottom\", legendLabSize = 16, legendIconSize = 4.0,\n  encircleCol = 'black', encircleSize = 2.5, encircleFill = 'pink',\n  encircleAlpha = 1/2) + \n  coord_flip() +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n\np\n\n\n\n\n\n\n\nFigure 1: EnhancedMA",
    "crumbs": [
      "HIPLOT",
      "EnhancedMA"
    ]
  },
  {
    "objectID": "Hiplot/099-map-china-county.html",
    "href": "Hiplot/099-map-china-county.html",
    "title": "China Map (County)",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot China Map (County) plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/map-china-county?lang=en",
    "crumbs": [
      "HIPLOT",
      "China Map (County)"
    ]
  },
  {
    "objectID": "Hiplot/099-map-china-county.html#setup",
    "href": "Hiplot/099-map-china-county.html#setup",
    "title": "China Map (County)",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2; RColorBrewer\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"RColorBrewer\", quietly = TRUE)) {\n  install.packages(\"RColorBrewer\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(RColorBrewer)",
    "crumbs": [
      "HIPLOT",
      "China Map (County)"
    ]
  },
  {
    "objectID": "Hiplot/099-map-china-county.html#data-preparation",
    "href": "Hiplot/099-map-china-county.html#data-preparation",
    "title": "China Map (County)",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/map-china-county/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\ndt_map &lt;- readRDS(url(\"https://download.hiplot.cn/ui/basic/map-china-county/china.county.rds\"))\n\n# Convert data structure\ndt_map$Value &lt;- data$value[match(dt_map$county, data$name)]\n\n# View data\nhead(data)\n\n      name value\n1   东城区   739\n2   西城区   536\n3   朝阳区   138\n4   丰台区   561\n5 石景山区   345\n6   海淀区   898",
    "crumbs": [
      "HIPLOT",
      "China Map (County)"
    ]
  },
  {
    "objectID": "Hiplot/099-map-china-county.html#visualization",
    "href": "Hiplot/099-map-china-county.html#visualization",
    "title": "China Map (County)",
    "section": "Visualization",
    "text": "Visualization\n\n# China Map (County)\np &lt;- ggplot(dt_map) +\n  geom_polygon(aes(x = long, y = lat, group = group, fill = Value),\n               alpha = 0.9, size = 0.5) +\n  geom_path(aes(x = long, y = lat, group = group), color = \"black\", size = 0.2) +\n  coord_fixed() +\n  scale_fill_gradientn(\n    colours = colorRampPalette(rev(brewer.pal(11,\"RdYlBu\")))(500),\n    breaks = seq(min(data$value), max(data$value), \n                 round((max(data$value)-min(data$value))/7)),\n    name = \"\",\n    guide = guide_legend(\n      direction = \"vertical\", keyheight = unit(1, units = \"mm\"),\n      keywidth = unit(8, units = \"mm\"),\n      title.position = \"top\", title.hjust = 0.5, label.hjust = 0.5,\n      nrow = 1, byrow = T, reverse = F, label.position = \"bottom\")) +\n  theme(text = element_text(color = \"#3A3F4A\"),\n        axis.text = element_blank(),\n        axis.ticks = element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        legend.position = \"top\",\n        legend.text = element_text(size = 4 * 1.5, color = \"black\"),\n        legend.title = element_text(size = 5 * 1.5, color = \"black\"),\n        plot.title = element_text(\n          face = \"bold\", size = 5 * 1.5, hjust = 0.5, \n          margin = margin(t = 4, b = 5), color = \"black\"),\n        plot.background = element_rect(fill = \"#FFFFFF\", color = \"#FFFFFF\"),\n        panel.background = element_rect(fill = \"#FFFFFF\", color = NA),\n        legend.background = element_rect(fill = \"#FFFFFF\", color = NA),\n        plot.margin = unit(c(1.5, 1.5, 1.5, 1.5), \"cm\")) +\n  labs(x = NULL, y = NULL, title = \"China City Map\")\n\np\n\n\n\n\n\n\n\nFigure 1: China Map (County)",
    "crumbs": [
      "HIPLOT",
      "China Map (County)"
    ]
  },
  {
    "objectID": "Hiplot/079-gocircle.html",
    "href": "Hiplot/079-gocircle.html",
    "title": "GOCircle Plot",
    "section": "",
    "text": "The gocircle plot is used to display the circular plot combines gene expression and gene- annotation enrichment data. A subset of terms is displayed like the GOBar plot in combination with a scatter plot of the gene expression data. The whole plot is drawn on a specific coordinate system to achieve the circular layout. The segments are labeled with the term ID.",
    "crumbs": [
      "HIPLOT",
      "GOCircle Plot"
    ]
  },
  {
    "objectID": "Hiplot/079-gocircle.html#setup",
    "href": "Hiplot/079-gocircle.html#setup",
    "title": "GOCircle Plot",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; GOplot; ggplotify\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"GOplot\", quietly = TRUE)) {\n  install.packages(\"GOplot\")\n}\nif (!requireNamespace(\"ggplotify\", quietly = TRUE)) {\n  install.packages(\"ggplotify\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(GOplot)\nlibrary(ggplotify)",
    "crumbs": [
      "HIPLOT",
      "GOCircle Plot"
    ]
  },
  {
    "objectID": "Hiplot/079-gocircle.html#data-preparation",
    "href": "Hiplot/079-gocircle.html#data-preparation",
    "title": "GOCircle Plot",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data are the results of GO enrichment with seven columns: category, GO id, GO term, gene count, gene name, logFC, adjust pvalue and zscore.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/gocircle/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\ncolnames(data) &lt;- c(\"category\",\"ID\",\"term\",\"count\",\"genes\",\"logFC\",\"adj_pval\",\"zscore\")\ndata &lt;- data[!is.na(data$adj_pval),]\ndata$adj_pval &lt;- as.numeric(data$adj_pval)\ndata$zscore &lt;- as.numeric(data$zscore)\ndata$count &lt;- as.numeric(data$count)\n\n# View data\nhead(data)\n\n  category         ID              term count  genes      logFC adj_pval\n1       BP GO:0007507 heart development    54   DLC1 -0.9707875 2.17e-06\n2       BP GO:0007507 heart development    54   NRP2 -1.5153173 2.17e-06\n3       BP GO:0007507 heart development    54   NRP1 -1.1412315 2.17e-06\n4       BP GO:0007507 heart development    54   EDN1  1.3813006 2.17e-06\n5       BP GO:0007507 heart development    54 PDLIM3 -0.8876939 2.17e-06\n6       BP GO:0007507 heart development    54   GJA1 -0.8179480 2.17e-06\n      zscore\n1 -0.8164966\n2 -0.8164966\n3 -0.8164966\n4 -0.8164966\n5 -0.8164966\n6 -0.8164966",
    "crumbs": [
      "HIPLOT",
      "GOCircle Plot"
    ]
  },
  {
    "objectID": "Hiplot/079-gocircle.html#visualization",
    "href": "Hiplot/079-gocircle.html#visualization",
    "title": "GOCircle Plot",
    "section": "Visualization",
    "text": "Visualization\n\n# GOCircle Plot\np &lt;- function () {\n  GOCircle(data, title = \"GO Enrichment Circleplot\",\n           nsub = 10, rad1 = 2, rad2 = 3, table.legend = T, label.size = 5,\n           zsc.col = c(\"#FC8D59\",\"#FFFFBF\",\"#99D594\")) + \n    theme(plot.title = element_text(hjust = 0.5))\n}\np &lt;- as.ggplot(p)\n\np\n\n\n\n\n\n\n\nFigure 1: GOCircle Plot\n\n\n\n\n\nAs shown in the example figure, the outer circle shows a scatter plot for each term of the logFC of the assigned genes. Red circles display up-regulation and blue ones down-regulation by default.",
    "crumbs": [
      "HIPLOT",
      "GOCircle Plot"
    ]
  },
  {
    "objectID": "Hiplot/117-map-world2.html",
    "href": "Hiplot/117-map-world2.html",
    "title": "World Map 2",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot World Map 2 plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/map-world2?lang=en",
    "crumbs": [
      "HIPLOT",
      "World Map 2"
    ]
  },
  {
    "objectID": "Hiplot/117-map-world2.html#setup",
    "href": "Hiplot/117-map-world2.html#setup",
    "title": "World Map 2",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2; RColorBrewer\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"RColorBrewer\", quietly = TRUE)) {\n  install.packages(\"RColorBrewer\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(RColorBrewer)",
    "crumbs": [
      "HIPLOT",
      "World Map 2"
    ]
  },
  {
    "objectID": "Hiplot/117-map-world2.html#data-preparation",
    "href": "Hiplot/117-map-world2.html#data-preparation",
    "title": "World Map 2",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/map-world2/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\ndt_map &lt;- readRDS(url(\"https://download.hiplot.cn/ui/basic/map-world/world.rds\"))\n\n# Convert data structure\ndt_map$Value &lt;- data$death_rate[match(dt_map$ENG_NAME, data$region)]\n\n# View data\nhead(data)\n\n          region death_rate\n1    Afghanistan       13.4\n2        Albania        6.8\n3        Algeria        4.3\n4 American Samoa        5.9\n5        Andorra        7.3\n6         Angola        9.2",
    "crumbs": [
      "HIPLOT",
      "World Map 2"
    ]
  },
  {
    "objectID": "Hiplot/117-map-world2.html#visualization",
    "href": "Hiplot/117-map-world2.html#visualization",
    "title": "World Map 2",
    "section": "Visualization",
    "text": "Visualization\n\n# World Map 2\np &lt;- ggplot(dt_map) +\n  geom_polygon(aes(x = long, y = lat, group = group, fill = Value),\n               alpha = 0.9, size = 0.5) +\n  geom_path(aes(x = long, y = lat, group = group), color = \"black\", size = 0.2) +\n  coord_fixed() +\n  scale_fill_gradientn(\n    colours = colorRampPalette(rev(brewer.pal(11,\"RdYlBu\")))(500),\n    breaks = seq(round(min(dt_map$Value)), round(max(dt_map$Value)), \n                 round((max(dt_map$Value)-min(dt_map$Value))/7)),\n    name = \"Color Key\",\n    guide = guide_legend(\n      direction = \"vertical\", keyheight = unit(1, units = \"mm\"),\n      keywidth = unit(8, units = \"mm\"),\n      title.position = \"top\", title.hjust = 0.5, label.hjust = 0.5,\n      nrow = 1, byrow = T, reverse = F, label.position = \"bottom\")) +\n  theme(text = element_text(color = \"#3A3F4A\"),\n        axis.text = element_blank(),\n        axis.ticks = element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        legend.position = \"top\",\n        legend.text = element_text(size = 4 * 1.5, color = \"black\"),\n        legend.title = element_text(size = 5 * 1.5, color = \"black\"),\n        plot.title = element_text(\n          face = \"bold\", size = 5 * 1.5, hjust = 0.5, \n          margin = margin(t = 4, b = 5), color = \"black\"),\n        plot.background = element_rect(fill = \"#FFFFFF\", color = \"#FFFFFF\"),\n        panel.background = element_rect(fill = \"#FFFFFF\", color = NA),\n        legend.background = element_rect(fill = \"#FFFFFF\", color = NA),\n        plot.margin = unit(c(1.5, 1.5, 1.5, 1.5), \"cm\")) +\n  labs(x = NULL, y = NULL, title = \"World Map\")\n\np\n\n\n\n\n\n\n\nFigure 1: World Map 2",
    "crumbs": [
      "HIPLOT",
      "World Map 2"
    ]
  },
  {
    "objectID": "Hiplot/044-diy-gsea.html",
    "href": "Hiplot/044-diy-gsea.html",
    "title": "DIY GSEA",
    "section": "",
    "text": "Make your geneset.",
    "crumbs": [
      "HIPLOT",
      "DIY GSEA"
    ]
  },
  {
    "objectID": "Hiplot/044-diy-gsea.html#setup",
    "href": "Hiplot/044-diy-gsea.html#setup",
    "title": "DIY GSEA",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; clusterProfiler\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"clusterProfiler\", quietly = TRUE)) {\n  install_github(\"YuLab-SMU/clusterProfiler\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(clusterProfiler)",
    "crumbs": [
      "HIPLOT",
      "DIY GSEA"
    ]
  },
  {
    "objectID": "Hiplot/044-diy-gsea.html#data-preparation",
    "href": "Hiplot/044-diy-gsea.html#data-preparation",
    "title": "DIY GSEA",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata1 &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/diy-gsea/data.json\")$exampleData$textarea[[1]])\ndata1 &lt;- as.data.frame(data1)\ndata2 &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/diy-gsea/data.json\")$exampleData$textarea[[2]])\ndata2 &lt;- as.data.frame(data2)\n\n# convert data structure\ndata1[,2] &lt;- as.numeric(data1[,2])\ngeneList &lt;- data1[,2]\nnames(geneList) &lt;- data1[,1]\ngeneList &lt;- sort(geneList, decreasing = TRUE)\nterm &lt;- data.frame(term=data2[,1], gene=data2[,2])\n\n# View data\nhead(term)\n\n                         term   gene\n1 GO_ADAPTIVE_IMMUNE_RESPONSE ADAM17\n2 GO_ADAPTIVE_IMMUNE_RESPONSE  AICDA\n3 GO_ADAPTIVE_IMMUNE_RESPONSE  ALCAM\n4 GO_ADAPTIVE_IMMUNE_RESPONSE  ANXA1\n5 GO_ADAPTIVE_IMMUNE_RESPONSE   BATF\n6 GO_ADAPTIVE_IMMUNE_RESPONSE  BCL10",
    "crumbs": [
      "HIPLOT",
      "DIY GSEA"
    ]
  },
  {
    "objectID": "Hiplot/044-diy-gsea.html#visualization",
    "href": "Hiplot/044-diy-gsea.html#visualization",
    "title": "DIY GSEA",
    "section": "Visualization",
    "text": "Visualization\n\n# DIY GSEA\ny &lt;- clusterProfiler::GSEA(geneList, TERM2GENE = term, pvalueCutoff = 1)\np &lt;- gseaplot(\n  y,\n  y@result$Description[1],\n  color = \"#000000\",\n  by = \"runningScore\",\n  color.line = \"#4CAF50\",\n  color.vline= \"#FA5860\",\n  title = \"DIY GSEA Plot\",\n  )\n\np\n\n\n\n\n\n\n\nFigure 1: DIY GSEA",
    "crumbs": [
      "HIPLOT",
      "DIY GSEA"
    ]
  },
  {
    "objectID": "Hiplot/107-map-germany.html",
    "href": "Hiplot/107-map-germany.html",
    "title": "Germany Map",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Germany Map plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/map-germany?lang=en",
    "crumbs": [
      "HIPLOT",
      "Germany Map"
    ]
  },
  {
    "objectID": "Hiplot/107-map-germany.html#setup",
    "href": "Hiplot/107-map-germany.html#setup",
    "title": "Germany Map",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2; RColorBrewer\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"RColorBrewer\", quietly = TRUE)) {\n  install.packages(\"RColorBrewer\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(RColorBrewer)",
    "crumbs": [
      "HIPLOT",
      "Germany Map"
    ]
  },
  {
    "objectID": "Hiplot/107-map-germany.html#data-preparation",
    "href": "Hiplot/107-map-germany.html#data-preparation",
    "title": "Germany Map",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/map-germany/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\ndt_map &lt;- readRDS(url(\"https://download.hiplot.cn/ui/basic/map-germany/germany.rds\"))\n\n# Convert data structure\ndt_map$Value &lt;- data$value[match(dt_map$ENG_NAME, data$name)]\n\n# View data\nhead(data)\n\n               name value\n1 Baden-Württemberg   334\n2            Bayern   562\n3            Berlin   980\n4       Brandenburg   577\n5            Bremen    54\n6           Hamburg   528",
    "crumbs": [
      "HIPLOT",
      "Germany Map"
    ]
  },
  {
    "objectID": "Hiplot/107-map-germany.html#visualization",
    "href": "Hiplot/107-map-germany.html#visualization",
    "title": "Germany Map",
    "section": "Visualization",
    "text": "Visualization\n\n# Germany Map\np &lt;- ggplot(dt_map) +\n  geom_polygon(aes(x = long, y = lat, group = group, fill = Value),\n               alpha = 0.9, size = 0.5) +\n  geom_path(aes(x = long, y = lat, group = group), color = \"black\", size = 0.2) +\n  coord_fixed() +\n  scale_fill_gradientn(\n    colours = colorRampPalette(rev(brewer.pal(11,\"RdYlBu\")))(500),\n    breaks = seq(min(data$value), max(data$value), \n                 round((max(data$value)-min(data$value))/7)),\n    name = \"Color Key\",\n    guide = guide_legend(\n      direction = \"vertical\", keyheight = unit(1, units = \"mm\"),\n      keywidth = unit(8, units = \"mm\"),\n      title.position = \"top\", title.hjust = 0.5, label.hjust = 0.5,\n      nrow = 1, byrow = T, reverse = F, label.position = \"bottom\")) +\n  theme(text = element_text(color = \"#3A3F4A\"),\n        axis.text = element_blank(),\n        axis.ticks = element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        legend.position = \"top\",\n        legend.text = element_text(size = 4 * 1.5, color = \"black\"),\n        legend.title = element_text(size = 5 * 1.5, color = \"black\"),\n        plot.title = element_text(\n          face = \"bold\", size = 5 * 1.5, hjust = 0.5, \n          margin = margin(t = 4, b = 5), color = \"black\"),\n        plot.background = element_rect(fill = \"#FFFFFF\", color = \"#FFFFFF\"),\n        panel.background = element_rect(fill = \"#FFFFFF\", color = NA),\n        legend.background = element_rect(fill = \"#FFFFFF\", color = NA),\n        plot.margin = unit(c(1.5, 1.5, 1.5, 1.5), \"cm\")) +\n  labs(x = NULL, y = NULL, title = \"Germany Map\")\n\np\n\n\n\n\n\n\n\nFigure 1: Germany Map",
    "crumbs": [
      "HIPLOT",
      "Germany Map"
    ]
  },
  {
    "objectID": "Hiplot/065-ggdag.html",
    "href": "Hiplot/065-ggdag.html",
    "title": "Directed Acyclic Graphs",
    "section": "",
    "text": "Visualizing directed acyclic graphs.",
    "crumbs": [
      "HIPLOT",
      "Directed Acyclic Graphs"
    ]
  },
  {
    "objectID": "Hiplot/065-ggdag.html#setup",
    "href": "Hiplot/065-ggdag.html#setup",
    "title": "Directed Acyclic Graphs",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: ggdag\n\n\n# Install packages\nif (!requireNamespace(\"ggdag\", quietly = TRUE)) {\n  install.packages(\"ggdag\")\n}\n\n# Load packages\nlibrary(ggdag)",
    "crumbs": [
      "HIPLOT",
      "Directed Acyclic Graphs"
    ]
  },
  {
    "objectID": "Hiplot/065-ggdag.html#data-preparation",
    "href": "Hiplot/065-ggdag.html#data-preparation",
    "title": "Directed Acyclic Graphs",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ntidy_ggdag &lt;- dagify(\n  y ~ x + z2 + w2 + w1,\n  x ~ z1 + w1 + w2,\n  z1 ~ w1 + v,\n  z2 ~ w2 + v,\n  w1 ~ ~w2, # bidirected path\n  exposure = \"x\",\n  outcome = \"y\") %&gt;%\n  tidy_dagitty()\n\n# View data\nhead(tidy_ggdag)\n\n$data\n# A tibble: 13 × 8\n   name      x       y direction to      xend    yend circular\n   &lt;chr&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;fct&gt;     &lt;chr&gt;  &lt;dbl&gt;   &lt;dbl&gt; &lt;lgl&gt;   \n 1 v     1.84  -1.74   -&gt;        z1     0.537 -1.17   FALSE   \n 2 v     1.84  -1.74   -&gt;        z2     2.42  -0.461  FALSE   \n 3 w1    0.420  0.346  -&gt;        x      0.691 -0.210  FALSE   \n 4 w1    0.420  0.346  -&gt;        y      1.52   0.726  FALSE   \n 5 w1    0.420  0.346  -&gt;        z1     0.537 -1.17   FALSE   \n 6 w1    0.420  0.346  &lt;-&gt;       w2     1.58   0.0952 FALSE   \n 7 w2    1.58   0.0952 -&gt;        x      0.691 -0.210  FALSE   \n 8 w2    1.58   0.0952 -&gt;        y      1.52   0.726  FALSE   \n 9 w2    1.58   0.0952 -&gt;        z2     2.42  -0.461  FALSE   \n10 x     0.691 -0.210  -&gt;        y      1.52   0.726  FALSE   \n11 y     1.52   0.726  &lt;NA&gt;      &lt;NA&gt;  NA     NA      FALSE   \n12 z1    0.537 -1.17   -&gt;        x      0.691 -0.210  FALSE   \n13 z2    2.42  -0.461  -&gt;        y      1.52   0.726  FALSE   \n\n$dag\ndag {\nv\nw1\nw2\nx [exposure]\ny [outcome]\nz1\nz2\nv -&gt; z1\nv -&gt; z2\nw1 -&gt; x\nw1 -&gt; y\nw1 -&gt; z1\nw1 &lt;-&gt; w2\nw2 -&gt; x\nw2 -&gt; y\nw2 -&gt; z2\nx -&gt; y\nz1 -&gt; x\nz2 -&gt; y\n}",
    "crumbs": [
      "HIPLOT",
      "Directed Acyclic Graphs"
    ]
  },
  {
    "objectID": "Hiplot/065-ggdag.html#visualization",
    "href": "Hiplot/065-ggdag.html#visualization",
    "title": "Directed Acyclic Graphs",
    "section": "Visualization",
    "text": "Visualization\n\n# Directed Acyclic Graphs\np &lt;- ggdag(tidy_ggdag) +\n  theme_dag() \n\np\n\n\n\n\n\n\n\nFigure 1: Directed Acyclic Graphs",
    "crumbs": [
      "HIPLOT",
      "Directed Acyclic Graphs"
    ]
  },
  {
    "objectID": "Hiplot/026-connected-scatterplot.html",
    "href": "Hiplot/026-connected-scatterplot.html",
    "title": "Connected Scatterplot",
    "section": "",
    "text": "Connected scatterplot",
    "crumbs": [
      "HIPLOT",
      "Connected Scatterplot"
    ]
  },
  {
    "objectID": "Hiplot/026-connected-scatterplot.html#setup",
    "href": "Hiplot/026-connected-scatterplot.html#setup",
    "title": "Connected Scatterplot",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2; dplyr; ggrepel\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"dplyr\", quietly = TRUE)) {\n  install.packages(\"dplyr\")\n}\nif (!requireNamespace(\"ggrepel\", quietly = TRUE)) {\n  install.packages(\"ggrepel\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(ggrepel)",
    "crumbs": [
      "HIPLOT",
      "Connected Scatterplot"
    ]
  },
  {
    "objectID": "Hiplot/026-connected-scatterplot.html#data-preparation",
    "href": "Hiplot/026-connected-scatterplot.html#data-preparation",
    "title": "Connected Scatterplot",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/connected-scatterplot/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# View data\nhead(data)\n\n  year Alice Anna\n1 1991   724 7118\n2 1992   686 6846\n3 1993   684 6808\n4 1994   595 7523\n5 1995   579 8564\n6 1996   593 8565",
    "crumbs": [
      "HIPLOT",
      "Connected Scatterplot"
    ]
  },
  {
    "objectID": "Hiplot/026-connected-scatterplot.html#visualization",
    "href": "Hiplot/026-connected-scatterplot.html#visualization",
    "title": "Connected Scatterplot",
    "section": "Visualization",
    "text": "Visualization\n\n# Connected Scatterplot\nconnected_scatterplot &lt;- function(data, x, y, label, label_ratio, line_color, arrow_size, label_size) {\n\n  draw_data &lt;- data.frame(\n    x = data[[x]],\n    y = data[[y]],\n    label = data[[label]]\n  )\n\n  add_label_data &lt;- draw_data %&gt;% sample_frac(label_ratio)\n  rm(data)\n\n  p &lt;- ggplot(draw_data, aes(x = x, y = y, label = label)) +\n    geom_point(color = line_color) +\n    geom_text_repel(data = add_label_data, size = label_size) +\n    geom_segment(\n      color = line_color,\n      aes(\n        xend = c(tail(x, n = -1), NA),\n        yend = c(tail(y, n = -1), NA)\n      ),\n      arrow = arrow(length = unit(arrow_size, \"mm\"))\n    )\n\n  return(p)\n}\n\np &lt;- connected_scatterplot(\n  data = if (exists(\"data\") && is.data.frame(data)) data else \"\",\n  x = \"Alice\",\n  y = \"Anna\",\n  label = \"year\",\n  label_ratio = 0.5,\n  line_color = \"#1A237E\",\n  arrow_size = 2,\n  label_size = 2.5\n) +\n  theme_bw() +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n\np\n\n\n\n\n\n\n\nFigure 1: Connected Scatterplot",
    "crumbs": [
      "HIPLOT",
      "Connected Scatterplot"
    ]
  },
  {
    "objectID": "Hiplot/046-dotchart.html",
    "href": "Hiplot/046-dotchart.html",
    "title": "Dotchart",
    "section": "",
    "text": "Sliding bead chart is a graph of beads sliding on a column. It is the superposition of bar chart and scatter chart.",
    "crumbs": [
      "HIPLOT",
      "Dotchart"
    ]
  },
  {
    "objectID": "Hiplot/046-dotchart.html#setup",
    "href": "Hiplot/046-dotchart.html#setup",
    "title": "Dotchart",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggpubr\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggpubr\", quietly = TRUE)) {\n  install.packages(\"ggpubr\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggpubr)",
    "crumbs": [
      "HIPLOT",
      "Dotchart"
    ]
  },
  {
    "objectID": "Hiplot/046-dotchart.html#data-preparation",
    "href": "Hiplot/046-dotchart.html#data-preparation",
    "title": "Dotchart",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data are gene names and their corresponding gene expression values and groups.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/dotchart/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# View data\nhead(data)\n\n      Name Value  Group\n1     BMP2  18.7 Group1\n2     XIST  14.3 Group1\n3 C19orf38  16.4 Group1\n4    PDZD3  17.3 Group1\n5   MAPRE2  15.2 Group1\n6     IRF4  10.4 Group1",
    "crumbs": [
      "HIPLOT",
      "Dotchart"
    ]
  },
  {
    "objectID": "Hiplot/046-dotchart.html#visualization",
    "href": "Hiplot/046-dotchart.html#visualization",
    "title": "Dotchart",
    "section": "Visualization",
    "text": "Visualization\n\n# Dotchart\np &lt;- ggdotchart(data, x = \"Name\", y = \"Value\", group = \"Group\", color = \"Group\",\n                rotate = T, sorting = \"descending\",\n                y.text.col = F, add = \"segments\", dot.size = 2) +\n  xlab(\"Name\") +\n  ylab(\"Value\") +\n  ggtitle(\"DotChart Plot\") +\n  scale_color_manual(values = c(\"#e04d39\",\"#5bbad6\",\"#1e9f86\")) +\n  theme_classic() +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n\np\n\n\n\n\n\n\n\nFigure 1: Dotchart\n\n\n\n\n\nEach color represents a different grouping, so that the differences in gene expression values can be intuitively understood.",
    "crumbs": [
      "HIPLOT",
      "Dotchart"
    ]
  },
  {
    "objectID": "Hiplot/003-barplot-3d.html",
    "href": "Hiplot/003-barplot-3d.html",
    "title": "3D Barplot",
    "section": "",
    "text": "3D bar charts are used to provide a 3D look and feel for the data. The third dimension is often used for aesthetic reasons, but it does not improve data reading. Still intended to show comparisons between discrete categories.",
    "crumbs": [
      "HIPLOT",
      "3D Barplot"
    ]
  },
  {
    "objectID": "Hiplot/003-barplot-3d.html#setup",
    "href": "Hiplot/003-barplot-3d.html#setup",
    "title": "3D Barplot",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; plot3D; ggplotify\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"plot3D\", quietly = TRUE)) {\n  install.packages(\"plot3D\")\n}\nif (!requireNamespace(\"ggplotify\", quietly = TRUE)) {\n  install.packages(\"ggplotify\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(plot3D)\nlibrary(ggplotify)",
    "crumbs": [
      "HIPLOT",
      "3D Barplot"
    ]
  },
  {
    "objectID": "Hiplot/003-barplot-3d.html#data-preparation",
    "href": "Hiplot/003-barplot-3d.html#data-preparation",
    "title": "3D Barplot",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data are efficacy data of different doses of drugs in different treatment regimens.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/barplot-3d/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# convert data vector to a matrix\nmat &lt;- matrix(rep(1, nrow(data)), nrow = length(unique(data[, 2])))\nrownames(mat) &lt;- unique(data[, 2])\ncolnames(mat) &lt;- unique(data[, 3])\nfor (i in 1:nrow(mat)) {\n  for (j in seq_len(ncol(mat))) {\n    mat[i, j] &lt;- data[, 1][data[, 2] == rownames(mat)[i] &\n      data[, 3] == colnames(mat)[j]]\n  }\n}\n\n# View data\nmat\n\n       high mid low\nGroup1   13  25   5\nGroup2   34   8  25\nGroup3   21  17  12\nGroup4   43  10  19",
    "crumbs": [
      "HIPLOT",
      "3D Barplot"
    ]
  },
  {
    "objectID": "Hiplot/003-barplot-3d.html#visualization",
    "href": "Hiplot/003-barplot-3d.html#visualization",
    "title": "3D Barplot",
    "section": "Visualization",
    "text": "Visualization\n\n# 3D Barplot\np &lt;- as.ggplot(function() {\n  hist3D(\n    x = 1:nrow(mat), y = seq_len(ncol(mat)), z = mat,\n    bty = \"g\", phi = 20,\n    theta = -55,\n    xlab = colnames(data)[2],\n    ylab = colnames(data)[3], zlab = colnames(data)[1],\n    main = \"3D Bar Plot\", colkey = F,\n    border = \"black\", shade = 0.8, axes = T,\n    ticktype = \"detailed\", space = 0.3, d = 2, cex.axis = 0.3,\n    colvar = as.numeric(as.factor(data[, 2])), alpha = 1,\n    col = c(\"#E64B35FF\",\"#4DBBD5FF\",\"#00A087FF\",\"#3C5488FF\")\n  )\n\n  # Use text3D to label x axis\n  text3D(\n    x = 1:nrow(mat), y = rep(0.5, nrow(mat)), z = rep(3, nrow(mat)),\n    labels = rownames(mat),\n    add = TRUE, adj = 0, cex = 0.8\n  )\n  # Use text3D to label y axis\n  text3D(\n    x = rep(1, ncol(mat)), y = seq_len(ncol(mat)), z = rep(0, ncol(mat)),\n    labels = colnames(mat), bty = \"g\",\n    add = TRUE, adj = 1, cex = 0.8\n  )\n})\n\np\n\n\n\n\n\n\n\nFigure 1: 3D Barplot\n\n\n\n\n\nThe 3D histogram shows the different therapeutic effects of different treatment groups (groups 1 to 4) with low, medium and high doses. Group 1 had the best effect with medium dose treatment, group 2 had the best effect with high dose treatment, group 3 had no significant difference with dose treatment, and group 4 had the best effect with high dose treatment.\n\n\n\n\n\n\nTip\n\n\n\nSpecial Parameters: \n\nPhi: The larger the positive value is, the more it tends to observe from the top down. The greater the negative value, the more likely it is to be observed from the bottom of the three-dimensional figure upwards.\nTheta: The Angle at which a three-dimensional figure rotates horizontally.",
    "crumbs": [
      "HIPLOT",
      "3D Barplot"
    ]
  },
  {
    "objectID": "Hiplot/113-map-uk.html",
    "href": "Hiplot/113-map-uk.html",
    "title": "UK Map",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot UK Map plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/map-uk?lang=en",
    "crumbs": [
      "HIPLOT",
      "South America Map"
    ]
  },
  {
    "objectID": "Hiplot/113-map-uk.html#setup",
    "href": "Hiplot/113-map-uk.html#setup",
    "title": "UK Map",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2; RColorBrewer\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"RColorBrewer\", quietly = TRUE)) {\n  install.packages(\"RColorBrewer\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(RColorBrewer)",
    "crumbs": [
      "HIPLOT",
      "South America Map"
    ]
  },
  {
    "objectID": "Hiplot/113-map-uk.html#data-preparation",
    "href": "Hiplot/113-map-uk.html#data-preparation",
    "title": "UK Map",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/map-uk/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\ndt_map &lt;- readRDS(url(\"https://download.hiplot.cn/ui/basic/map-uk/uk.rds\"))\n\n# Convert data structure\ndt_map$Value &lt;- data$value[match(dt_map$name, data$name)]\n\n# View data\nhead(data)\n\n              name value\n1 Northern Ireland   691\n2         Scotland   455\n3          England   530\n4            Wales   767",
    "crumbs": [
      "HIPLOT",
      "South America Map"
    ]
  },
  {
    "objectID": "Hiplot/113-map-uk.html#visualization",
    "href": "Hiplot/113-map-uk.html#visualization",
    "title": "UK Map",
    "section": "Visualization",
    "text": "Visualization\n\n# UK Map\np &lt;- ggplot(dt_map) +\n  geom_polygon(aes(x = long, y = lat, group = group, fill = Value),\n               alpha = 0.9, size = 0.5) +\n  geom_path(aes(x = long, y = lat, group = group), color = \"black\", size = 0.2) +\n  coord_fixed() +\n  scale_fill_gradientn(\n    colours = colorRampPalette(rev(brewer.pal(11,\"RdYlBu\")))(500),\n    breaks = seq(min(data$value), max(data$value), \n                 round((max(data$value)-min(data$value))/7)),\n    name = \"Color Key\",\n    guide = guide_legend(\n      direction = \"vertical\", keyheight = unit(1, units = \"mm\"),\n      keywidth = unit(8, units = \"mm\"),\n      title.position = \"top\", title.hjust = 0.5, label.hjust = 0.5,\n      nrow = 1, byrow = T, reverse = F, label.position = \"bottom\")) +\n  theme(text = element_text(color = \"#3A3F4A\"),\n        axis.text = element_blank(),\n        axis.ticks = element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        legend.position = \"top\",\n        legend.text = element_text(size = 4 * 1.5, color = \"black\"),\n        legend.title = element_text(size = 5 * 1.5, color = \"black\"),\n        plot.title = element_text(\n          face = \"bold\", size = 5 * 1.5, hjust = 0.5, \n          margin = margin(t = 4, b = 5), color = \"black\"),\n        plot.background = element_rect(fill = \"#FFFFFF\", color = \"#FFFFFF\"),\n        panel.background = element_rect(fill = \"#FFFFFF\", color = NA),\n        legend.background = element_rect(fill = \"#FFFFFF\", color = NA),\n        plot.margin = unit(c(1.5, 1.5, 1.5, 1.5), \"cm\")) +\n  labs(x = NULL, y = NULL, title = \"UK Map\")\n\np\n\n\n\n\n\n\n\nFigure 1: UK Map",
    "crumbs": [
      "HIPLOT",
      "South America Map"
    ]
  },
  {
    "objectID": "Hiplot/025-complex-heatmap.html",
    "href": "Hiplot/025-complex-heatmap.html",
    "title": "Complex Heatmap",
    "section": "",
    "text": "A multi-omics plugins to draw heatmap, meta annotation, and mutations.",
    "crumbs": [
      "HIPLOT",
      "Complex Heatmap"
    ]
  },
  {
    "objectID": "Hiplot/025-complex-heatmap.html#setup",
    "href": "Hiplot/025-complex-heatmap.html#setup",
    "title": "Complex Heatmap",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ComplexHeatmap; circlize; randomcoloR; ggplotify; stringr; cowplot; hiplotlib\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ComplexHeatmap\", quietly = TRUE)) {\n  install.packages(\"ComplexHeatmap\")\n}\nif (!requireNamespace(\"circlize\", quietly = TRUE)) {\n  install.packages(\"circlize\")\n}\nif (!requireNamespace(\"randomcoloR\", quietly = TRUE)) {\n  install.packages(\"randomcoloR\")\n}\nif (!requireNamespace(\"ggplotify\", quietly = TRUE)) {\n  install.packages(\"ggplotify\")\n}\nif (!requireNamespace(\"stringr\", quietly = TRUE)) {\n  install.packages(\"stringr\")\n}\nif (!requireNamespace(\"cowplot\", quietly = TRUE)) {\n  install.packages(\"cowplot\")\n}\nif (!requireNamespace(\"hiplotlib\", quietly = TRUE)) {\n  remotes::install_github(\"hiplot/hiplotlib\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ComplexHeatmap)\nlibrary(circlize)\nlibrary(randomcoloR)\nlibrary(ggplotify)\nlibrary(stringr)\nlibrary(cowplot)\nlibrary(hiplotlib)",
    "crumbs": [
      "HIPLOT",
      "Complex Heatmap"
    ]
  },
  {
    "objectID": "Hiplot/025-complex-heatmap.html#data-preparation",
    "href": "Hiplot/025-complex-heatmap.html#data-preparation",
    "title": "Complex Heatmap",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/complex-heatmap/data.json\")$exampleData[[1]]$textarea[[1]])\ndata &lt;- as.data.frame(data)\ndata2 &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/complex-heatmap/data.json\")$exampleData[[1]]$textarea[[2]])\ndata2 &lt;- as.data.frame(data2)\n\n# convert data structure\nkeep_vars_ref &lt;- ls() \nrow.names(data) &lt;- data[, 1]\ndata &lt;- data[, -1]\naxis_raw &lt;- c(\"KRAS\",\"GBP4\")\nexp_start_col &lt;- which(colnames(data) == axis_raw[2])\nmut_start_col &lt;- which(colnames(data) == axis_raw[1])\nheat_mat &lt;- as.matrix(t(data[, exp_start_col:ncol(data)]))\nmut_mat &lt;- as.matrix(t(data[, mut_start_col:(exp_start_col - 1)]))\nmut_mat[is.na(mut_mat)] &lt;- \"\"\n\ncolor_key &lt;- c(\"#196ABD\", \"#3399FF\", \"#3399FF\", \"#f4f4f4\", \"#f4f4f4\", \"#f4f4f4\", \"#FF3333\", \"#FF3333\", \"#C20B01\")\n\ncols &lt;- c()\nfor (i in 1:nrow(data2)) {\n  cols[data2[i,1]] &lt;- data2[i,2]\n}\ncol_meta &lt;- list()\ncol_meta_pre &lt;- list()\nitems &lt;- c()\nfor (i in 1:(mut_start_col - 1)) {\n  ref &lt;- unique(data[, i])\n  ref &lt;- ref[!is.na(ref) & ref != \"\"]\n  if (any(is.numeric(ref)) & length(ref) &gt; 2) {\n    col_meta_pre[[colnames(data)[i]]] &lt;- hiplotlib::col_fun_cont(data[,i])\n  } else if (length(ref) == 2 & any(is.numeric(ref))) {\n    col_meta_pre[[colnames(data)[i]]] &lt;- c(\"#f4f4f4\", \"#5a5a5a\")\n    items &lt;- c(items, ref)\n  } else if (length(ref) == 2 & any(is.character(ref))) {\n    col_meta_pre[[colnames(data)[i]]] &lt;- c(\"#196ABD\", \"#C20B01\")\n    items &lt;- c(items, unique(data[, i]))\n  } else if (length(unique(data[, i])) &gt; 2) {\n    col_meta_pre[[colnames(data)[i]]] &lt;- distinctColorPalette(\n      length(unique(data[, i]))\n    )\n    items &lt;- c(items, unique(data[, i]))\n  }\n}\nmeta_mat2 &lt;- NULL\nmeta_mat2_unique_names &lt;- c()\nmeta_mat2_unique_cols &lt;- c()\nfor (i in names(col_meta_pre)) {\n  if (!is.function(col_meta_pre[[i]])) {\n    meta_mat2_unique_names &lt;- c(meta_mat2_unique_names, i)\n    meta_mat2_unique_cols &lt;- c(meta_mat2_unique_cols, col_meta_pre[[i]])\n    meta_mat2 &lt;- cbind(meta_mat2, data[, i])\n    colnames(meta_mat2)[ncol(meta_mat2)] &lt;- i\n  } else {\n    col_meta[[i]] &lt;- col_meta_pre[[i]]\n  }\n}\nmeta_mat2 &lt;- as.matrix(meta_mat2)\ncol_meta[[\"Meta2\"]] &lt;- structure(\n  names = items[!duplicated(items)],\n  meta_mat2_unique_cols[!duplicated(items)]\n)\n\n# View data\nhead(data)\n\n   Age Gender      Fusion Death Relapse     KRAS       TP53                NRAS\nM1  12 Female   ETV6-PMEL     0       0 missense       &lt;NA&gt; missense/frameshift\nM2   5   Male ETV6-BORCS5     0       1 missense       &lt;NA&gt;                &lt;NA&gt;\nM3  16 Female   ETV6-NID1     0       0 missense       &lt;NA&gt;                &lt;NA&gt;\nM4  26 Female     ERG-FUS     0       0     &lt;NA&gt;       &lt;NA&gt;                &lt;NA&gt;\nM5  32 Female RUNX1-UGGT2     1       0     &lt;NA&gt; frameshift                &lt;NA&gt;\nM6   1 Female  ETV6-RUNX1     1       1 missense       &lt;NA&gt;                &lt;NA&gt;\n         JAK1       JAK3       PTEN   NOTCH1      KMT2A               SETD2\nM1       &lt;NA&gt; frameshift       &lt;NA&gt;     &lt;NA&gt;       &lt;NA&gt; missense/frameshift\nM2       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;     &lt;NA&gt;       &lt;NA&gt;                &lt;NA&gt;\nM3       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt; missense   nonsense            nonsense\nM4       &lt;NA&gt;       &lt;NA&gt; proteinIns     &lt;NA&gt;       &lt;NA&gt;                &lt;NA&gt;\nM5       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt; missense frameshift                &lt;NA&gt;\nM6 frameshift       &lt;NA&gt; proteinIns     &lt;NA&gt;       &lt;NA&gt;                &lt;NA&gt;\n        KDM6A     DNMT3A                        DDX3X     GBP4    BCAT1\nM1                  &lt;NA&gt;                         &lt;NA&gt; 6.599344 5.760380\nM2   nonsense       &lt;NA&gt;                         &lt;NA&gt; 5.226266 4.892783\nM3       &lt;NA&gt;       &lt;NA&gt;                         &lt;NA&gt; 3.693288 5.448924\nM4       &lt;NA&gt;       &lt;NA&gt;                         &lt;NA&gt; 3.938501 3.485413\nM5       &lt;NA&gt;       &lt;NA&gt;                         &lt;NA&gt; 4.527193 3.855669\nM6 proteinDel frameshift missense/frameshift/missense 9.308119 8.662081\n      CMPK2    STOX2    PADI2   SCARNA5 ALOX12P2  SNORA74B HIST1H2BL     MNDA\nM1 9.561905 8.396409 8.419766  7.653074 9.001421  5.538709  6.181270 8.702635\nM2 4.549168 8.717055 8.268430  5.780393 7.753542  7.169053  4.448419 7.322352\nM3 3.998655 8.039064 8.451181 10.633550 4.920960 11.441646  5.604961 9.271821\nM4 5.614384 7.643060 9.200732  5.913684 7.636354  5.982566  6.485168 9.134515\nM5 3.904793 9.274649 8.598207  8.805605 9.888625  8.394403  2.599574 8.339114\nM6 9.790770 4.417013 4.590033  5.890120 6.211944  4.751559  7.630177 4.571902\n      OLFM4     FLT3     CHD7    NFIL3   HSPA1B    AP5B1   IPCEF1     LRG1\nM1 9.345308 5.164306 8.373475 8.055416 5.008199 8.236820 8.263067 8.553083\nM2 6.438607 4.419355 8.728032 8.365100 9.194650 8.972639 9.287856 9.053322\nM3 8.716761 5.063551 8.408818 9.239194 6.598850 8.204217 8.602233 9.074509\nM4 9.685545 5.412784 8.716476 8.536825 7.129509 8.432428 8.491156 8.736700\nM5 7.688262 3.337863 8.373771 8.452351 3.885270 9.224007 8.447699 7.656333\nM6 5.969804 8.585164 4.613199 4.478527 5.712179 4.424204 4.483936 4.529944\n      THBS4     RGL4     MPP7     UGCG   CYSTM1    ANXA2   ENDOD1 ARHGAP24\nM1 8.881039 8.454808 8.690520 8.648366 8.628884 4.983769 5.551640 6.890079\nM2 8.896205 8.019389 8.630346 8.600555 9.238677 6.748022 5.406465 8.883941\nM3 7.844801 8.990836 7.080873 9.431046 8.487243 6.220791 4.663785 9.560651\nM4 8.739369 9.718631 9.838476 7.923021 8.958537 4.719403 3.550765 8.285674\nM5 8.627063 7.908075 8.271824 8.309214 7.357109 3.284346 4.103507 9.043752\nM6 4.699310 4.147051 5.179200 4.902510 4.541605 8.089850 8.393991 3.544010\n       CST7 HIST1H2BM     EREG     EMP1    NFAM1  SLC40A1     CD52 HIST1H2BH\nM1 7.883061  6.186908 8.598145 4.837475 8.656290 9.520822 4.230927  5.805177\nM2 8.546585  4.448803 4.920184 5.999576 9.957289 4.630086 5.932496  4.343197\nM3 8.364553  5.428771 9.227645 6.115168 7.319900 5.116486 5.011898  6.139380\nM4 9.540110  6.747681 5.222157 5.056323 8.073514 9.346003 5.101308  5.817530\nM5 8.697473  2.577579 4.689850 4.808930 9.016658 9.813192 4.398327  2.513284\nM6 3.557674  7.828233 8.703617 6.713164 4.517623 6.101416 6.380094  8.188458\n     PFKFB3 SNORD116-20    STX11    SYNE2     TCN1  SNORA74A     CD74   EIF4E3\nM1 7.424257    8.377058 8.338488 9.110726 8.193179  5.498904 5.017443 9.366888\nM2 9.676785    5.359553 8.565954 9.678361 8.907285  5.062103 5.383978 8.360189\nM3 8.935156    8.694841 8.767868 8.405612 8.713848 12.561499 3.405651 5.655052\nM4 8.045833    8.044567 9.403257 6.946242 8.980928  5.839202 3.264327 4.287721\nM5 8.890690    2.953568 7.892702 8.156073 7.627558  7.581051 5.602966 8.713765\nM6 4.273864    7.268419 4.205835 5.791007 4.626609  5.498296 8.550157 8.880801\n      MYO7B       MX1      LDLR    S100P  PTPRCAP      KIT     OLR1      NKG7\nM1 8.796115 10.739903  3.302395 8.356363 5.028667 5.888212 9.018682  7.312523\nM2 9.265837  4.504043 10.582430 7.915491 4.724011 2.533194 7.936957 10.372964\nM3 7.865640  4.714303  6.209913 9.481770 4.122229 5.077111 9.390897  7.937744\nM4 8.785320  6.244798  3.804214 9.642993 4.188948 4.744693 8.897994  8.161249\nM5 9.209703  4.891501  4.631391 8.363519 3.803051 4.839051 8.668925  9.671051\nM6 4.272202 10.727879  5.534046 3.699451 8.525159 9.085158 5.261595  4.164076",
    "crumbs": [
      "HIPLOT",
      "Complex Heatmap"
    ]
  },
  {
    "objectID": "Hiplot/025-complex-heatmap.html#visualization",
    "href": "Hiplot/025-complex-heatmap.html#visualization",
    "title": "Complex Heatmap",
    "section": "Visualization",
    "text": "Visualization\n\n# Complex Heatmap\nparams &lt;- list()\nfor (i in names(col_meta)) {\n  if (i != \"Meta2\") {\n    params[[i]] &lt;- data[, i]\n  }\n}\nparams2 &lt;- list(\n  Meta2 = meta_mat2,\n  gap = 0,\n  border = TRUE,\n  show_annotation_name = TRUE,\n  col = col_meta,\n  na_col = \"#FFFFFF\",\n  show_legend = FALSE,\n  annotation_legend_param = list(direction = \"horizontal\")\n)\nfor (i in names(params2)) {\n  params[[i]] &lt;- params2[[i]]\n}\nha &lt;- do.call(HeatmapAnnotation, params)\nhlist &lt;- Heatmap(heat_mat,\n      col = hiplotlib::col_fun_cont(heat_mat, cols = color_key),\n      name = \"Expression\",\n      gap = 0,\n      clustering_distance_columns = \"euclidean\",\n      clustering_distance_rows = \"euclidean\",\n      clustering_method_columns = \"ward.D2\",\n      show_row_dend = TRUE, show_column_dend = TRUE,\n      show_row_names = FALSE,\n      row_title_gp = gpar(col = \"#FFFFFF00\"),\n      cluster_rows = TRUE,\n      cluster_columns = TRUE,\n      bottom_annotation = ha,\n      show_heatmap_legend = TRUE,\n      heatmap_legend_param = list(direction = \"horizontal\")\n    )\np1 &lt;- as.ggplot(\n  function() {\n    draw(hlist, annotation_legend_side = \"right\", heatmap_legend_side = \"top\")\n  }\n)\nidx &lt;- sort(rowSums(!is.na(mut_mat) & mut_mat != \"0\" & mut_mat != \"\"), decreasing = TRUE)\nmut_mat &lt;- mut_mat[names(idx),]\n\np2 &lt;- as.ggplot(\n  function() {\n    params &lt;- list(\n      mut_mat,\n      get_type = function(x) strsplit(x, \"/\")[[1]],\n      alter_fun = hiplotlib::alter_fun, col = cols, row_order = 1:nrow(mut_mat),\n      show_column_names = TRUE,\n      show_pct = TRUE,\n      right_annotation = NULL,\n      top_annotation = NULL,\n      border = TRUE,\n      heatmap_legend_param = list(direction = \"horizontal\"),\n      show_heatmap_legend = FALSE)\n      params$column_order &lt;- unlist(column_order(hlist))\n      draw(do.call(oncoPrint, params), annotation_legend_side = \"bottom\", heatmap_legend_side = \"bottom\")\n    }\n  )\n\np3 &lt;- as.ggplot(function() {\n    legend_tmp &lt;- list()\n    for (i in names(col_meta_pre)) {\n      if (is.function(col_meta_pre[[i]])) {\n        legend_tmp[[i]] &lt;- Legend(\n          col_fun = col_meta_pre[[i]],\n          title = i, direction = \"horizontal\"\n        )\n      } else if (identical(col_meta_pre[[i]], c(\"#f4f4f4\", \"#5a5a5a\"))) {\n        legend_tmp[[i]] &lt;- Legend(\n          at = unique(data[, i]), title = i,\n          direction = \"horizontal\",\n          labels = c(\"No\", \"Yes\"),\n          legend_gp = gpar(fill = col_meta_pre[[i]])\n        )\n      } else {\n         legend_tmp[[i]] &lt;- Legend(\n          at = unique(data[, i]), title = i,\n          direction = \"horizontal\",\n          legend_gp = gpar(fill = col_meta_pre[[i]])\n        )\n      }\n    }\n    ref_mut &lt;- unique(unlist(str_split(mut_mat, \"/\")))\n    ref_mut &lt;- ref_mut[ref_mut != \"\" & ref_mut != \"NANA\"]\n    ref_mut &lt;- ref_mut[!is.na(ref_mut)]\n    lgd_mut &lt;- Legend(\n      at = ref_mut, title = \"Mutations\",\n      direction = \"horizontal\",\n      legend_gp = gpar(fill = cols[ref_mut])\n    )\n    legend_tmp[[length(legend_tmp) + 1]] &lt;- lgd_mut\n    legend_tmp$direction &lt;- \"horizontal\"\n    legend_tmp$max_width &lt;- unit(14, \"cm\")\n    legend_tmp$column_gap &lt;- unit(5, \"mm\")\n    legend_tmp$row_gap &lt;- unit(0.5, \"cm\")\n    draw(do.call(packLegend, legend_tmp))\n  })\nrel_height &lt;- as.numeric(str_split(\"4, 2, 2\", \", |,| |;\")[[1]])\np &lt;- plot_grid(p1, p2, p3, ncol = 1, rel_heights = rel_height)\np\n\n\n\n\n\n\n\nFigure 1: Complex Heatmap",
    "crumbs": [
      "HIPLOT",
      "Complex Heatmap"
    ]
  },
  {
    "objectID": "Hiplot/130-nomogram-logistic.html",
    "href": "Hiplot/130-nomogram-logistic.html",
    "title": "Nomogram (Logistic)",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Nomogram (Logistic) plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/nomogram-logistic?lang=en",
    "crumbs": [
      "HIPLOT",
      "Nomogram (Logistic)"
    ]
  },
  {
    "objectID": "Hiplot/130-nomogram-logistic.html#setup",
    "href": "Hiplot/130-nomogram-logistic.html#setup",
    "title": "Nomogram (Logistic)",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; rms; ggplotify\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"rms\", quietly = TRUE)) {\n  install.packages(\"rms\")\n}\nif (!requireNamespace(\"ggplotify\", quietly = TRUE)) {\n  install.packages(\"ggplotify\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(rms)\nlibrary(ggplotify)",
    "crumbs": [
      "HIPLOT",
      "Nomogram (Logistic)"
    ]
  },
  {
    "objectID": "Hiplot/130-nomogram-logistic.html#data-preparation",
    "href": "Hiplot/130-nomogram-logistic.html#data-preparation",
    "title": "Nomogram (Logistic)",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/nomogram-logistic/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\ndd &lt;- datadist(data)\noptions(datadist = \"dd\")\n## Build Logistic model and run nomogram\nlogistic_res &lt;- lrm(data=data, as.formula(paste(\n    colnames(data)[1], \" ~ \",\n    paste(colnames(data)[2:length(colnames(data))],\n      collapse = \"+\"\n    )\n  ))\n)\nlogistic_nomo &lt;- nomogram(logistic_res, maxscale = 100,\n  fun= function(x)1/(1+exp(-x)), lp=F, funlabel=\"Dead Risk\",\n  fun.at=c(.001,.01,.05,seq(.1,.9,by=.1),.95,.99,.999)\n)\n\n# View data\nhead(data)\n\n  status age sex ph.ecog ph.karno pat.karno meal.cal wt.loss\n1      2  74   1       1       90       100     1175      NA\n2      2  68   1       0       90        90     1225      15\n3      1  56   1       0       90        90       NA      15\n4      2  57   1       1       90        60     1150      11\n5      2  60   1       0      100        90       NA       0\n6      1  74   1       1       50        80      513       0",
    "crumbs": [
      "HIPLOT",
      "Nomogram (Logistic)"
    ]
  },
  {
    "objectID": "Hiplot/130-nomogram-logistic.html#visualization",
    "href": "Hiplot/130-nomogram-logistic.html#visualization",
    "title": "Nomogram (Logistic)",
    "section": "Visualization",
    "text": "Visualization\n\n# Nomogram (Logistic)\np &lt;- as.ggplot(function() {\n  plot(logistic_nomo,\n    scale = 1\n  )\n  title(main = \"Nomogram (Logistic)\")\n})\n\np\n\n\n\n\n\n\n\nFigure 1: Nomogram (Logistic)",
    "crumbs": [
      "HIPLOT",
      "Nomogram (Logistic)"
    ]
  },
  {
    "objectID": "Hiplot/127-network-igraph.html",
    "href": "Hiplot/127-network-igraph.html",
    "title": "Network (igraph)",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Network (igraph) plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/network-igraph?lang=en\nNetwork (igraph) can be used to visulize basic network based on igraph.",
    "crumbs": [
      "HIPLOT",
      "Network (igraph)"
    ]
  },
  {
    "objectID": "Hiplot/127-network-igraph.html#setup",
    "href": "Hiplot/127-network-igraph.html#setup",
    "title": "Network (igraph)",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; igraph; stringr; ggplotify; RColorBrewer\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"igraph\", quietly = TRUE)) {\n  install.packages(\"igraph\")\n}\nif (!requireNamespace(\"stringr\", quietly = TRUE)) {\n  install.packages(\"stringr\")\n}\nif (!requireNamespace(\"ggplotify\", quietly = TRUE)) {\n  install.packages(\"ggplotify\")\n}\nif (!requireNamespace(\"RColorBrewer\", quietly = TRUE)) {\n  install.packages(\"RColorBrewer\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(igraph)\nlibrary(stringr)\nlibrary(ggplotify)\nlibrary(RColorBrewer)",
    "crumbs": [
      "HIPLOT",
      "Network (igraph)"
    ]
  },
  {
    "objectID": "Hiplot/127-network-igraph.html#data-preparation",
    "href": "Hiplot/127-network-igraph.html#data-preparation",
    "title": "Network (igraph)",
    "section": "Data Preparation",
    "text": "Data Preparation\nTwo data tables need to be entered. Table 1 is node information, including node ID and other annotation information, which can be used to map color and size. Table 2 is the link information, including node ID and connection information between nodes.\n\n# Load data\nnodes_data &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/network-igraph/data.json\")$exampleData[[1]]$textarea[[1]])\nnodes_data &lt;- as.data.frame(nodes_data)\nedges_data &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/network-igraph/data.json\")$exampleData[[1]]$textarea[[2]])\nedges_data &lt;- as.data.frame(edges_data)\n\n# Convert data structure\nnodes_data[,\"type.label\"] &lt;- factor(nodes_data[,\"type.label\"], \n                                    levels = unique(nodes_data[,\"type.label\"]))\nnodes_data$hiplot_color_type &lt;- as.numeric(nodes_data[,\"type.label\"])\nnet &lt;- graph_from_data_frame(d = edges_data, vertices = nodes_data, directed = T)\n## Generate colors based on type\ncolrs &lt;- c(\"#7f7f7f\",\"#ff6347\",\"#ffd700\")\ncolrs2 &lt;- c(\"#BC3C29FF\",\"#0072B5FF\",\"#E18727FF\",\"#20854EFF\",\"#7876B1FF\",\n            \"#6F99ADFF\",\"#FFDC91FF\",\"#EE4C97FF\")\nV(net)$color &lt;- colrs[V(net)$hiplot_color_type]\n## Compute node degrees (#links) and use that to set node size\ndeg &lt;- degree(net, mode=\"all\")\nV(net)$size &lt;- deg*3\n## Set label\nV(net)$label.color &lt;- \"black\"\nV(net)$label &lt;- NA\n## Set edge width based on weight\nweight_column &lt;- edges_data$weight\nE(net)$width &lt;- weight_column/6\n## Change arrow size and edge color\nE(net)$arrow.size &lt;- .2\nE(net)$edge.color &lt;- \"gray80\"\nedge.start &lt;- ends(net, es=E(net), names=F)[,1]\nedge.col &lt;- V(net)$color[edge.start]\n\n# View data\nhead(nodes_data)\n\n   id               media media.type type.label audience.size hiplot_color_type\n1 s01            NY Times          1  Newspaper            20                 1\n2 s02     Washington Post          1  Newspaper            25                 1\n3 s03 Wall Street Journal          1  Newspaper            30                 1\n4 s04           USA Today          1  Newspaper            32                 1\n5 s05            LA Times          1  Newspaper            20                 1\n6 s06       New York Post          1  Newspaper            50                 1\n\nhead(edges_data)\n\n  from  to      type weight\n1  s01 s02 hyperlink     22\n2  s01 s03 hyperlink     22\n3  s01 s04 hyperlink     21\n4  s01 s15   mention     20\n5  s02 s01 hyperlink     23\n6  s02 s03 hyperlink     21",
    "crumbs": [
      "HIPLOT",
      "Network (igraph)"
    ]
  },
  {
    "objectID": "Hiplot/127-network-igraph.html#visualization",
    "href": "Hiplot/127-network-igraph.html#visualization",
    "title": "Network (igraph)",
    "section": "Visualization",
    "text": "Visualization\n\n# Network (igraph)\nraw &lt;- par()\np &lt;- as.ggplot(function () {\n  par(mar=c(8,2,2,2))\n  radian.rescale &lt;- function(x, start=0, direction=1) {\n    c.rotate &lt;- function(x) (x + start) %% (4 * pi) * direction\n    c.rotate(scales::rescale(x, c(0, 2 * pi), range(x)))\n  }\n\n  label &lt;- eval(parse(text = sprintf(\"V(net)$%s\", \"media\")))\n\n  l &lt;- do.call(layout_as_star, list(net))\n  params &lt;- list(net, layout = l, main = \"Network1\",\n      edge.color = edge.col, edge.curved = .1,\n      vertex.shape = \"circle\",\n      edge.lty = \"solid\",\n      label.family = \"Arial\",\n      vertex.label.family = \"Arial\",\n      vertex.label.dist = 3.1,\n      edge.arrow.mode = F\n  )\n  lab.locs &lt;- radian.rescale(x=1:length(label), direction=-1, start=0)\n  params$vertex.label.degree &lt;- lab.locs\n  params$vertex.label &lt;- label\n  params$vertex.color = V(net)$color\n  do.call(plot, params)\n  legend(x = -1.7, y = -1.4, unique(nodes_data[,\"type.label\"]), pch = 21,\n        col = \"#777777\", pt.bg = colrs, pt.cex = 2, cex = .8, bty = \"n\",\n        ncol = 1)\n  legend(x = -1.2, y = -1.37,\n    legend=round(sort(unique(E(net)$width)), 2), pt.cex= 0.8,\n      col='black', ncol = 3, bty = \"n\", lty = 1,\n      lwd = round(sort(unique(E(net)$width)), 2)\n  )\n  if (length(unique(V(net)$size)) &gt; 8) {\n    size_leg &lt;- sort(unique(V(net)$size))[seq(1, length(unique(V(net)$size)), 2)]\n  } else {\n    size_leg &lt;- sort(unique(V(net)$size))\n  }\n  legend(x = 0.5, y = -1.3,\n        size_leg,\n        pch = 21,\n        col = \"black\", pt.bg = \"#777777\",\n        pt.cex = size_leg / 3.8, cex = .8, bty = \"n\",\n        ncol = 3,\n        y.intersp = 3,\n        x.intersp = 2.5,\n        text.width = 0.25\n  )\n  par(mar=raw$mar)\n})\n\np\n\n\n\n\n\n\n\nFigure 1: Network (igraph)",
    "crumbs": [
      "HIPLOT",
      "Network (igraph)"
    ]
  },
  {
    "objectID": "Hiplot/139-pie-group.html",
    "href": "Hiplot/139-pie-group.html",
    "title": "Pie Group",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Pie Group plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/pie-group?lang=en",
    "crumbs": [
      "HIPLOT",
      "Pie Group"
    ]
  },
  {
    "objectID": "Hiplot/139-pie-group.html#setup",
    "href": "Hiplot/139-pie-group.html#setup",
    "title": "Pie Group",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; patchwork; ggplotify; cowplot\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"patchwork\", quietly = TRUE)) {\n  install.packages(\"patchwork\")\n}\nif (!requireNamespace(\"ggplotify\", quietly = TRUE)) {\n  install.packages(\"ggplotify\")\n}\nif (!requireNamespace(\"cowplot\", quietly = TRUE)) {\n  install.packages(\"cowplot\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(patchwork)\nlibrary(ggplotify)\nlibrary(cowplot)",
    "crumbs": [
      "HIPLOT",
      "Pie Group"
    ]
  },
  {
    "objectID": "Hiplot/139-pie-group.html#data-preparation",
    "href": "Hiplot/139-pie-group.html#data-preparation",
    "title": "Pie Group",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/pie-group/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\ndata[,\"genre\"] &lt;- factor(data[,\"genre\"], levels = unique(data[,\"genre\"]))\ndata[,\"mpaa\"] &lt;- factor(data[,\"mpaa\"], levels = unique(data[,\"mpaa\"]))\n\n# View data\nhead(data)\n\n                                               title year length budget rating\n1                          Shawshank Redemption, The 1994    142     25    9.1\n2     Lord of the Rings: The Return of the King, The 2003    251     94    9.0\n3 Lord of the Rings: The Fellowship of the Ring, The 2001    208     93    8.8\n4             Lord of the Rings: The Two Towers, The 2002    223     94    8.8\n5                                       Pulp Fiction 1994    168      8    8.8\n6                                   Schindler's List 1993    195     25    8.8\n   votes  mpaa  genre\n1 149494     R  Drama\n2 103631 PG-13 Action\n3 157608 PG-13 Action\n4 114797 PG-13 Action\n5 132745     R  Drama\n6  97667     R  Drama",
    "crumbs": [
      "HIPLOT",
      "Pie Group"
    ]
  },
  {
    "objectID": "Hiplot/139-pie-group.html#visualization",
    "href": "Hiplot/139-pie-group.html#visualization",
    "title": "Pie Group",
    "section": "Visualization",
    "text": "Visualization\n\n# Pie Group\ncol &lt;- c(\"#E64B35FF\",\"#4DBBD5FF\",\"#00A087FF\",\"#3C5488FF\",\"#F39B7FFF\",\"#8491B4FF\",\n         \"#91D1C2FF\",\"#DC0000FF\",\"#7E6148FF\",\"#B09C85FF\")\nplist &lt;- list()\nfor (i in 1:length(unique(data[,\"mpaa\"]))) {\n  data_tmp &lt;- data[data[,\"mpaa\"] == unique(data[,\"mpaa\"])[i],]\n  x &lt;- table(data_tmp[,\"genre\"])\n  ptmp &lt;- as.ggplot(function(){\n    par(oma=c(0,0,0,0))\n    pie(x,\n      labels = sprintf(\"%s\\n(n=%s, %s%%)\", names(x), x,\n        round(x / sum(x) * 100, 0)),\n      col = col,\n      main = paste0(\"mpaa\", \":\", unique(data[,\"mpaa\"])[i]),\n      edges = 200,\n      radius = 0.8,\n      clockwise = F\n    )\n  })\n  plist[[i]] &lt;- ptmp\n}\n\nplot_grid(plotlist = plist, ncol = 2)\n\n\n\n\n\n\n\nFigure 1: Pie Group",
    "crumbs": [
      "HIPLOT",
      "Pie Group"
    ]
  },
  {
    "objectID": "Hiplot/012-beeswarm.html",
    "href": "Hiplot/012-beeswarm.html",
    "title": "Beeswarm",
    "section": "",
    "text": "The beeswarm is a noninterference scatter plot which is similar to a bee colony.",
    "crumbs": [
      "HIPLOT",
      "Beeswarm"
    ]
  },
  {
    "objectID": "Hiplot/012-beeswarm.html#setup",
    "href": "Hiplot/012-beeswarm.html#setup",
    "title": "Beeswarm",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggbeeswarm; ggthemes\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggbeeswarm\", quietly = TRUE)) {\n  install.packages(\"ggbeeswarm\")\n}\nif (!requireNamespace(\"ggthemes\", quietly = TRUE)) {\n  install.packages(\"ggthemes\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggbeeswarm)\nlibrary(ggthemes)",
    "crumbs": [
      "HIPLOT",
      "Beeswarm"
    ]
  },
  {
    "objectID": "Hiplot/012-beeswarm.html#data-preparation",
    "href": "Hiplot/012-beeswarm.html#data-preparation",
    "title": "Beeswarm",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data are different groups and their data.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/beeswarm/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# convert data structure\ndata[, 1] &lt;- factor(data[, 1], levels = unique(data[, 1]))\ncolnames(data) &lt;- c(\"Group\", \"y\")\n\n# View data\nhead(data)\n\n  Group   y\n1    G1 5.1\n2    G1 4.9\n3    G1 4.7\n4    G1 4.6\n5    G1 5.0\n6    G1 5.4",
    "crumbs": [
      "HIPLOT",
      "Beeswarm"
    ]
  },
  {
    "objectID": "Hiplot/012-beeswarm.html#visualization",
    "href": "Hiplot/012-beeswarm.html#visualization",
    "title": "Beeswarm",
    "section": "Visualization",
    "text": "Visualization\n\n# Beeswarm\np &lt;- ggplot(data, aes(Group, y, color = Group)) +\n  geom_beeswarm(alpha = 1, size = 0.8) +\n  labs(x = NULL, y = \"value\") +\n  ggtitle(\"BeeSwarm Plot\") +\n  scale_color_manual(values = c(\"#e04d39\",\"#5bbad6\",\"#1e9f86\")) +\n  theme_stata() +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n\np\n\n\n\n\n\n\n\nFigure 1: Beeswarm\n\n\n\n\n\nDifferent colors represent different groups, and dots represent data.",
    "crumbs": [
      "HIPLOT",
      "Beeswarm"
    ]
  },
  {
    "objectID": "Hiplot/106-map-germany-town.html",
    "href": "Hiplot/106-map-germany-town.html",
    "title": "Germany Map (Town)",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Germany Map (Town) plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/map-germany-town?lang=en",
    "crumbs": [
      "HIPLOT",
      "Germany Map (Town)"
    ]
  },
  {
    "objectID": "Hiplot/106-map-germany-town.html#setup",
    "href": "Hiplot/106-map-germany-town.html#setup",
    "title": "Germany Map (Town)",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2; RColorBrewer\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"RColorBrewer\", quietly = TRUE)) {\n  install.packages(\"RColorBrewer\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(RColorBrewer)",
    "crumbs": [
      "HIPLOT",
      "Germany Map (Town)"
    ]
  },
  {
    "objectID": "Hiplot/106-map-germany-town.html#data-preparation",
    "href": "Hiplot/106-map-germany-town.html#data-preparation",
    "title": "Germany Map (Town)",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/map-germany-town/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\ndt_map &lt;- readRDS(url(\"https://download.hiplot.cn/ui/basic/map-germany-town/germany_town.rds\"))\n\n# Convert data structure\ndt_map$Value &lt;- data$value[match(dt_map$ENG_NAME, data$name)]\n\n# View data\nhead(data)\n\n          name value\n1 Allmendingen   711\n2      Altheim   540\n3    Berghülen   582\n4   Blaubeuren   454\n5    Blaustein   766\n6     Balzheim   480",
    "crumbs": [
      "HIPLOT",
      "Germany Map (Town)"
    ]
  },
  {
    "objectID": "Hiplot/106-map-germany-town.html#visualization",
    "href": "Hiplot/106-map-germany-town.html#visualization",
    "title": "Germany Map (Town)",
    "section": "Visualization",
    "text": "Visualization\n\n# Germany Map (Town)\np &lt;- ggplot(dt_map) +\n  geom_polygon(aes(x = long, y = lat, group = group, fill = Value),\n               alpha = 0.9, size = 0.5) +\n  geom_path(aes(x = long, y = lat, group = group), color = \"black\", size = 0.2) +\n  coord_fixed() +\n  scale_fill_gradientn(\n    colours = colorRampPalette(rev(brewer.pal(11,\"RdYlBu\")))(500),\n    breaks = seq(min(data$value), max(data$value), \n                 round((max(data$value)-min(data$value))/7)),\n    name = \"Color Key\",\n    guide = guide_legend(\n      direction = \"vertical\", keyheight = unit(1, units = \"mm\"),\n      keywidth = unit(8, units = \"mm\"),\n      title.position = \"top\", title.hjust = 0.5, label.hjust = 0.5,\n      nrow = 1, byrow = T, reverse = F, label.position = \"bottom\")) +\n  theme(text = element_text(color = \"#3A3F4A\"),\n        axis.text = element_blank(),\n        axis.ticks = element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        legend.position = \"top\",\n        legend.text = element_text(size = 4 * 1.5, color = \"black\"),\n        legend.title = element_text(size = 5 * 1.5, color = \"black\"),\n        plot.title = element_text(\n          face = \"bold\", size = 5 * 1.5, hjust = 0.5, \n          margin = margin(t = 4, b = 5), color = \"black\"),\n        plot.background = element_rect(fill = \"#FFFFFF\", color = \"#FFFFFF\"),\n        panel.background = element_rect(fill = \"#FFFFFF\", color = NA),\n        legend.background = element_rect(fill = \"#FFFFFF\", color = NA),\n        plot.margin = unit(c(1.5, 1.5, 1.5, 1.5), \"cm\")) +\n  labs(x = NULL, y = NULL, title = \"Germany Map\")\n\np\n\n\n\n\n\n\n\nFigure 1: Germany Map (Town)",
    "crumbs": [
      "HIPLOT",
      "Germany Map (Town)"
    ]
  },
  {
    "objectID": "Hiplot/048-dumbbell.html",
    "href": "Hiplot/048-dumbbell.html",
    "title": "Dumbbell Chart",
    "section": "",
    "text": "Dumbbell Chart can display the data change.",
    "crumbs": [
      "HIPLOT",
      "Dumbbell Chart"
    ]
  },
  {
    "objectID": "Hiplot/048-dumbbell.html#setup",
    "href": "Hiplot/048-dumbbell.html#setup",
    "title": "Dumbbell Chart",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2; ggalt\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"ggalt\", quietly = TRUE)) {\n  install.packages(\"ggalt\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(ggalt)",
    "crumbs": [
      "HIPLOT",
      "Dumbbell Chart"
    ]
  },
  {
    "objectID": "Hiplot/048-dumbbell.html#data-preparation",
    "href": "Hiplot/048-dumbbell.html#data-preparation",
    "title": "Dumbbell Chart",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/dumbbell/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# View data\nhead(data)\n\n    country  y1952  y2007\n1 Argentina 62.485 75.320\n2   Bolivia 40.414 65.554\n3    Brazil 50.917 72.390\n4    Canada 68.750 80.653\n5     Chile 54.745 78.553\n6  Colombia 50.643 72.889",
    "crumbs": [
      "HIPLOT",
      "Dumbbell Chart"
    ]
  },
  {
    "objectID": "Hiplot/048-dumbbell.html#visualization",
    "href": "Hiplot/048-dumbbell.html#visualization",
    "title": "Dumbbell Chart",
    "section": "Visualization",
    "text": "Visualization\n\n# Dumbbell Chart\ncolors &lt;- c(\"#3B4992FF\",\"#EE0000FF\")\np &lt;- ggplot(data, aes(y = reorder(country, y1952), x = y1952, xend = y2007)) +\n  geom_dumbbell(size = 1, size_x = 3,  size_xend = 3, colour = \"#AFAFAF\",  \n                colour_x = colors[1],  colour_xend = colors[2]) +\n  labs(title = \"Dummbbell Chart\", x = \"Life Expectancy (years)\",\n       y = \"country\") +\n  theme_minimal() +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n\np\n\n\n\n\n\n\n\nFigure 1: Dumbbell Chart",
    "crumbs": [
      "HIPLOT",
      "Dumbbell Chart"
    ]
  },
  {
    "objectID": "Hiplot/063-ggbarstats.html",
    "href": "Hiplot/063-ggbarstats.html",
    "title": "Barstats",
    "section": "",
    "text": "System Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggstatsplot; ggplot2; cowplot\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggstatsplot\", quietly = TRUE)) {\n  install.packages(\"ggstatsplot\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"cowplot\", quietly = TRUE)) {\n  install.packages(\"cowplot\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggstatsplot)\nlibrary(ggplot2)\nlibrary(cowplot)",
    "crumbs": [
      "HIPLOT",
      "Barstats"
    ]
  },
  {
    "objectID": "Hiplot/063-ggbarstats.html#setup",
    "href": "Hiplot/063-ggbarstats.html#setup",
    "title": "Barstats",
    "section": "",
    "text": "System Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggstatsplot; ggplot2; cowplot\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggstatsplot\", quietly = TRUE)) {\n  install.packages(\"ggstatsplot\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"cowplot\", quietly = TRUE)) {\n  install.packages(\"cowplot\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggstatsplot)\nlibrary(ggplot2)\nlibrary(cowplot)",
    "crumbs": [
      "HIPLOT",
      "Barstats"
    ]
  },
  {
    "objectID": "Hiplot/063-ggbarstats.html#data-preparation",
    "href": "Hiplot/063-ggbarstats.html#data-preparation",
    "title": "Barstats",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/ggbarstats/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\naxis &lt;- c(\"relig\", \"partyid\", \"race\")\ndata[, axis[1]] &lt;- factor(data[, axis[1]], levels = rev(unique(data[, axis[1]])))\ndata[, axis[2]] &lt;- factor(data[, axis[2]], levels = unique(data[, axis[2]]))\ndata[, axis[3]] &lt;- factor(data[, axis[3]], levels = unique(data[, axis[3]]))\n\n# View data\nhead(data)\n\n  year       marital age  race        rincome            partyid      relig\n1 2000 Never married  26 White  $8000 to 9999       Ind,near rep Protestant\n2 2000      Divorced  48 White  $8000 to 9999 Not str republican Protestant\n3 2000       Widowed  67 White Not applicable        Independent Protestant\n4 2000      Divorced  25 White Not applicable   Not str democrat       None\n5 2000       Married  25 White $20000 - 24999    Strong democrat Protestant\n6 2000      Divorced  44 White  $7000 to 7999       Ind,near dem Protestant\n              denom tvhours\n1  Southern baptist      12\n2  Baptist-dk which      NA\n3   No denomination       2\n4    Not applicable       1\n5  Southern baptist      NA\n6 Lutheran-mo synod      NA",
    "crumbs": [
      "HIPLOT",
      "Barstats"
    ]
  },
  {
    "objectID": "Hiplot/063-ggbarstats.html#visualization",
    "href": "Hiplot/063-ggbarstats.html#visualization",
    "title": "Barstats",
    "section": "Visualization",
    "text": "Visualization\n\n# Barstats\ng &lt;- unique(data[,axis[3]])\nplist &lt;- list()\nfor (i in 1:length(g)) {\n  fil &lt;- data[,axis[3]] == g[i]\n  plist[[i]] &lt;- ggbarstats(\n    data = data[fil,], x = relig, y = partyid,\n    plotgrid.args = list(ncol = 1), paired = F, k = 2) +\n    scale_fill_manual(values = c(\"#00468BFF\",\"#ED0000FF\",\"#42B540FF\"))\n}\np &lt;- plot_grid(plotlist = plist, ncol = 1)\n\np\n\n\n\n\n\n\n\nFigure 1: Barstats",
    "crumbs": [
      "HIPLOT",
      "Barstats"
    ]
  },
  {
    "objectID": "Hiplot/068-ggpie.html",
    "href": "Hiplot/068-ggpie.html",
    "title": "GGPIE",
    "section": "",
    "text": "The pie chart is a statistical chart that shows the proportion of each part by dividing a circle into sections.",
    "crumbs": [
      "HIPLOT",
      "GGPIE"
    ]
  },
  {
    "objectID": "Hiplot/068-ggpie.html#setup",
    "href": "Hiplot/068-ggpie.html#setup",
    "title": "GGPIE",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggpie; dplyr; ggplot2; cowplot\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggpie\", quietly = TRUE)) {\n  install.packages(\"ggpie\")\n}\nif (!requireNamespace(\"dplyr\", quietly = TRUE)) {\n  install.packages(\"dplyr\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"cowplot\", quietly = TRUE)) {\n  install.packages(\"cowplot\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggpie)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(cowplot)",
    "crumbs": [
      "HIPLOT",
      "GGPIE"
    ]
  },
  {
    "objectID": "Hiplot/068-ggpie.html#data-preparation",
    "href": "Hiplot/068-ggpie.html#data-preparation",
    "title": "GGPIE",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data are different groups and their data.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/ggpie/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\naxis &lt;- c(\"am\", \"cyl\")\ndata[, axis[1]] &lt;- factor(data[, axis[1]], levels = unique(data[, axis[1]]))\ndata[, axis[2]] &lt;- factor(data[, axis[2]], levels = unique(data[, axis[2]]))\n\n# View data\nhead(data)\n\n   mpg cyl disp  hp drat    wt  qsec vs am gear carb\n1 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\n2 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\n3 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n4 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\n5 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\n6 18.1   6  225 105 2.76 3.460 20.22  1  0    3    1",
    "crumbs": [
      "HIPLOT",
      "GGPIE"
    ]
  },
  {
    "objectID": "Hiplot/068-ggpie.html#visualization",
    "href": "Hiplot/068-ggpie.html#visualization",
    "title": "GGPIE",
    "section": "Visualization",
    "text": "Visualization\n\n# GGPIE\nplist &lt;- list()\nfor (j in unique(data[, axis[2]])) {\n  plist[[j]] &lt;- ggpie(\n    data = data[data[, axis[2]] == j,],\n    group_key = axis[1], count_type = \"full\",\n    label_type = \"horizon\", label_size = 8,\n    label_info = \"all\", label_pos = \"out\") + \n    scale_fill_manual(values = c(\"#00468BFF\",\"#ED0000FF\")) +\n    ggtitle(j)\n  }\n\nplot_grid(plotlist = plist, ncol = 3)\n\n\n\n\n\n\n\nFigure 1: GGPIE\n\n\n\n\n\nIn a circle graph, the arc length of each slice (the arc length of its center Angle and the region corresponding to its center Angle) is proportional to the number represented. The pie chart shows the number of samples for the 1 to 4 components and the corresponding proportions. The number of samples in one group is 13, accounting for 11.71%; the number of samples in two groups is 34, accounting for 30.63%; the number of samples in three groups is 21, accounting for 18.92%; and the number of samples in four groups is 43, accounting for 38.74%.",
    "crumbs": [
      "HIPLOT",
      "GGPIE"
    ]
  },
  {
    "objectID": "Hiplot/037-dendrogram.html",
    "href": "Hiplot/037-dendrogram.html",
    "title": "Dendrogram",
    "section": "",
    "text": "The dendrogram is a diagram representing a tree. This diagrammatic representation is frequently used in different contexts:In hierarchical clustering, it illustrates the arrangement of the clusters produced by the corresponding analyses.",
    "crumbs": [
      "HIPLOT",
      "Dendrogram"
    ]
  },
  {
    "objectID": "Hiplot/037-dendrogram.html#setup",
    "href": "Hiplot/037-dendrogram.html#setup",
    "title": "Dendrogram",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ape; ggplotify\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ape\", quietly = TRUE)) {\n  install.packages(\"ape\")\n}\nif (!requireNamespace(\"ggplotify\", quietly = TRUE)) {\n  install.packages(\"ggplotify\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ape)\nlibrary(ggplotify)",
    "crumbs": [
      "HIPLOT",
      "Dendrogram"
    ]
  },
  {
    "objectID": "Hiplot/037-dendrogram.html#data-preparation",
    "href": "Hiplot/037-dendrogram.html#data-preparation",
    "title": "Dendrogram",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/dendrogram/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# convert data structure\ndata &lt;- data[, -1]\n\n# View data\nhead(data)\n\n        M1       M2        M3       M4       M5       M6       M7       M8\n1 6.599344 5.226266  3.693288 3.938501 4.527193 9.308119 8.987865 7.658312\n2 5.760380 4.892783  5.448924 3.485413 3.855669 8.662081 8.793320 8.765915\n3 9.561905 4.549168  3.998655 5.614384 3.904793 9.790770 7.133188 7.379591\n4 8.396409 8.717055  8.039064 7.643060 9.274649 4.417013 4.725270 3.542217\n5 8.419766 8.268430  8.451181 9.200732 8.598207 4.590033 5.368268 4.136667\n6 7.653074 5.780393 10.633550 5.913684 8.805605 5.890120 5.527945 3.822596\n        M9      M10\n1 8.666038 7.419708\n2 8.097206 8.262942\n3 7.938063 6.154118\n4 4.305187 6.964710\n5 4.910986 4.080363\n6 4.041078 7.956589",
    "crumbs": [
      "HIPLOT",
      "Dendrogram"
    ]
  },
  {
    "objectID": "Hiplot/037-dendrogram.html#visualization",
    "href": "Hiplot/037-dendrogram.html#visualization",
    "title": "Dendrogram",
    "section": "Visualization",
    "text": "Visualization\n\n# Dendrogram\nd &lt;- dist(t(data), method = \"euclidean\")\nhc &lt;- hclust(d, method = \"complete\")\nclus &lt;- cutree(hc, 4)\n\np &lt;- as.ggplot(function() {\n  par(mar = c(5, 5, 10, 5), mgp = c(2.5, 1, 0))\n  plot(as.phylo(hc),\n       type = \"phylogram\",\n       tip.color = c(\"#00468bff\",\"#ed0000ff\",\"#42b540ff\",\"#0099b4ff\")[clus], \n       label.offset = 1,\n       cex = 1, font = 2, use.edge.length = T\n       )\n  title(\"Dendrogram Plot\", line = 1)\n  })\n\np\n\n\n\n\n\n\n\nFigure 1: Dendrogram",
    "crumbs": [
      "HIPLOT",
      "Dendrogram"
    ]
  },
  {
    "objectID": "Hiplot/080-grdotplot.html",
    "href": "Hiplot/080-grdotplot.html",
    "title": "Group Rank Dotplot",
    "section": "",
    "text": "Values distribution for different groups.",
    "crumbs": [
      "HIPLOT",
      "Group Rank Dotplot"
    ]
  },
  {
    "objectID": "Hiplot/080-grdotplot.html#setup",
    "href": "Hiplot/080-grdotplot.html#setup",
    "title": "Group Rank Dotplot",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; sigminer; ggplot2\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"sigminer\", quietly = TRUE)) {\n  install_github(\"ShixiangWang/sigminer\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(sigminer)\nlibrary(ggplot2)",
    "crumbs": [
      "HIPLOT",
      "Group Rank Dotplot"
    ]
  },
  {
    "objectID": "Hiplot/080-grdotplot.html#data-preparation",
    "href": "Hiplot/080-grdotplot.html#data-preparation",
    "title": "Group Rank Dotplot",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/grdotplot/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# View data\nhead(data)\n\n  gvar       dvar\n1    A  0.4871212\n2    A -0.1370275\n3    A  0.1717455\n4    A -0.9447939\n5    A -1.2876203\n6    A  1.4077657",
    "crumbs": [
      "HIPLOT",
      "Group Rank Dotplot"
    ]
  },
  {
    "objectID": "Hiplot/080-grdotplot.html#visualization",
    "href": "Hiplot/080-grdotplot.html#visualization",
    "title": "Group Rank Dotplot",
    "section": "Visualization",
    "text": "Visualization\n\n# Group Rank Dotplot\np &lt;- show_group_distribution(data, gvar = \"gvar\",  dvar = \"dvar\", \n                             order_by_fun = F)\n\np\n\n\n\n\n\n\n\nFigure 1: Group Rank Dotplot",
    "crumbs": [
      "HIPLOT",
      "Group Rank Dotplot"
    ]
  },
  {
    "objectID": "Hiplot/138-pie-3d.html",
    "href": "Hiplot/138-pie-3d.html",
    "title": "3D Pie",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot 3D Pie plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/pie-3d?lang=en\nThe 3D pie chart is a pie chart that has a 3D appearance.",
    "crumbs": [
      "HIPLOT",
      "PCAtools"
    ]
  },
  {
    "objectID": "Hiplot/138-pie-3d.html#setup",
    "href": "Hiplot/138-pie-3d.html#setup",
    "title": "3D Pie",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; plotrix; ggplotify\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"plotrix\", quietly = TRUE)) {\n  install.packages(\"plotrix\")\n}\nif (!requireNamespace(\"ggplotify\", quietly = TRUE)) {\n  install.packages(\"ggplotify\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(plotrix)\nlibrary(ggplotify)",
    "crumbs": [
      "HIPLOT",
      "PCAtools"
    ]
  },
  {
    "objectID": "Hiplot/138-pie-3d.html#data-preparation",
    "href": "Hiplot/138-pie-3d.html#data-preparation",
    "title": "3D Pie",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data are different groups and their data.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/pie-3d/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\ncolnames(data) &lt;- c(\"Group\", \"Value\")\ndata$Value &lt;- as.numeric(data$Value)\ndata &lt;- data[data$Value != 0,]\n\n# View data\nhead(data)\n\n   Group Value\n1 Group1    13\n2 Group2    34\n3 Group3    21\n4 Group4    43",
    "crumbs": [
      "HIPLOT",
      "PCAtools"
    ]
  },
  {
    "objectID": "Hiplot/138-pie-3d.html#visualization",
    "href": "Hiplot/138-pie-3d.html#visualization",
    "title": "3D Pie",
    "section": "Visualization",
    "text": "Visualization\n\n# 3D Pie\npie3D(data$Value, radius = 0.8, height = 0.05, theta = 0.8,\n      labels = paste(data$Group, \"\\n(n=\", data$Value, \", \",\n                     round(data$Value / sum(data$Value) * 100, 2), \"%)\",\n                     sep = \"\"),\n      explode = 0.1, main = \"\", labelcex = 1, shade = 0.4, labelcol = \"black\",\n      col = c(\"#E64B35FF\",\"#4DBBD5FF\",\"#00A087FF\",\"#3C5488FF\"))\n\n\n\n\n\n\n\nFigure 1: 3D Pie\n\n\n\n\n\nThe figure shows more aesthetically the number of samples in groups 1 to 4 and the proportion corresponding to the number of samples in the 3D form. The number of samples in one group is 13, accounting for 11.71%; the number of samples in two groups is 34, accounting for 30.63%; the number of samples in three groups is 21, accounting for 18.92%; and the number of samples in four groups is 43, accounting for 38.74%.",
    "crumbs": [
      "HIPLOT",
      "PCAtools"
    ]
  },
  {
    "objectID": "Hiplot/084-group-line.html",
    "href": "Hiplot/084-group-line.html",
    "title": "Group Line",
    "section": "",
    "text": "System Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)",
    "crumbs": [
      "HIPLOT",
      "Group Line"
    ]
  },
  {
    "objectID": "Hiplot/084-group-line.html#setup",
    "href": "Hiplot/084-group-line.html#setup",
    "title": "Group Line",
    "section": "",
    "text": "System Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)",
    "crumbs": [
      "HIPLOT",
      "Group Line"
    ]
  },
  {
    "objectID": "Hiplot/084-group-line.html#data-preparation",
    "href": "Hiplot/084-group-line.html#data-preparation",
    "title": "Group Line",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/group-line/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# View data\nhead(data)\n\n  x        y names groups\n1 1 2.253573    L1      A\n2 2 2.231082    L1      A\n3 3 1.740380    L1      A\n4 4 2.255786    L1      A\n5 5 2.429561    L1      A\n6 6 1.951557    L1      A",
    "crumbs": [
      "HIPLOT",
      "Group Line"
    ]
  },
  {
    "objectID": "Hiplot/084-group-line.html#visualization",
    "href": "Hiplot/084-group-line.html#visualization",
    "title": "Group Line",
    "section": "Visualization",
    "text": "Visualization\n\n# Group Line\np &lt;- ggplot(data, aes(x = x, y = y, group = names, color = groups)) +\n  geom_line() +\n  geom_point() +\n  scale_color_manual(values = c(\"#e04d39\",\"#5bbad6\")) +\n  theme_bw()\n\np\n\n\n\n\n\n\n\nFigure 1: Group Line",
    "crumbs": [
      "HIPLOT",
      "Group Line"
    ]
  },
  {
    "objectID": "Hiplot/087-hic-heatmap.html",
    "href": "Hiplot/087-hic-heatmap.html",
    "title": "Hi-C Heatmap",
    "section": "",
    "text": "The HiC heatmap is used to display the genome-wide chromatin interaction with heatmap on different chromosomes.",
    "crumbs": [
      "HIPLOT",
      "Hi-C Heatmap"
    ]
  },
  {
    "objectID": "Hiplot/087-hic-heatmap.html#setup",
    "href": "Hiplot/087-hic-heatmap.html#setup",
    "title": "Hi-C Heatmap",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2; RColorBrewer\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"RColorBrewer\", quietly = TRUE)) {\n  install.packages(\"RColorBrewer\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(RColorBrewer)",
    "crumbs": [
      "HIPLOT",
      "Hi-C Heatmap"
    ]
  },
  {
    "objectID": "Hiplot/087-hic-heatmap.html#data-preparation",
    "href": "Hiplot/087-hic-heatmap.html#data-preparation",
    "title": "Hi-C Heatmap",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data have three columns, with the first for one locus bin index, the second for another locus bin index, and the third for the interaction frequency between this two locus.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/hic-heatmap/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# View data\nhead(data)\n\n  index_bin1 index_bin2 freq\n1        135        428   13\n2        365        479   38\n3        209        340    8\n4        216        166   34\n5        288        484    5\n6        162        479   14",
    "crumbs": [
      "HIPLOT",
      "Hi-C Heatmap"
    ]
  },
  {
    "objectID": "Hiplot/087-hic-heatmap.html#visualization",
    "href": "Hiplot/087-hic-heatmap.html#visualization",
    "title": "Hi-C Heatmap",
    "section": "Visualization",
    "text": "Visualization\n\n# Hi-C Heatmap\n## Calculate the number of bins\nbins_num &lt;- max(data$index_bin1) + 1\n## Set the resolution of HiC data\nresolution &lt;- 500\nres &lt;- resolution * 1000\n# Set the separation unit to 50Mb\nintervals &lt;- 50\nspacing &lt;- intervals * 1000000\n## Count the number of breaks\nbreaks_num &lt;- (res * bins_num) / spacing\n## Set breaks\nbreaks &lt;- c()\nfor (i in 0:breaks_num) {\n  breaks &lt;- c(breaks, i * intervals)\n}\n\np &lt;- ggplot(data = data, aes(x = index_bin1 * res, y = index_bin2 * res)) +\n  geom_tile(aes(fill = freq)) +\n  scale_fill_gradientn(\n    colours = colorRampPalette(rev(brewer.pal(11,\"RdYlBu\")))(500),\n    limits = c(0, max(data$freq) * 1.2)\n  ) +\n  scale_y_reverse() +\n  scale_x_continuous(breaks = breaks * 1000000, labels = paste0(breaks, \"Mb\")) +\n  scale_y_continuous(breaks = breaks * 1000000, labels = paste0(breaks, \"Mb\")) +\n  theme(panel.grid = element_blank(), axis.title = element_blank()) +\n  labs(title = paste0(\"(resolution: \", res / 1000, \"Kb)\"), x=\"\", y=\"\") +\n  theme_bw() +\n  theme(plot.title = element_text(hjust = 0.5),\n        legend.position = \"right\", legend.key.size = unit(0.8, \"cm\"),\n        panel.grid = element_blank())\n\np\n\n\n\n\n\n\n\nFigure 1: Hi-C Heatmap\n\n\n\n\n\nAs shown in the example figure, a heat map represent the interaction frequency between any two locus. The color displays their intensity of interaction.",
    "crumbs": [
      "HIPLOT",
      "Hi-C Heatmap"
    ]
  },
  {
    "objectID": "Hiplot/111-map-south-america.html",
    "href": "Hiplot/111-map-south-america.html",
    "title": "South America Map",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot South America Map plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/map-south-america?lang=en",
    "crumbs": [
      "HIPLOT",
      "South America Map"
    ]
  },
  {
    "objectID": "Hiplot/111-map-south-america.html#setup",
    "href": "Hiplot/111-map-south-america.html#setup",
    "title": "South America Map",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2; RColorBrewer\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"RColorBrewer\", quietly = TRUE)) {\n  install.packages(\"RColorBrewer\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(RColorBrewer)",
    "crumbs": [
      "HIPLOT",
      "South America Map"
    ]
  },
  {
    "objectID": "Hiplot/111-map-south-america.html#data-preparation",
    "href": "Hiplot/111-map-south-america.html#data-preparation",
    "title": "South America Map",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/map-south-america/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\ndt_map &lt;- readRDS(url(\"https://download.hiplot.cn/ui/basic/map-south-america/sa.rds\"))\n\n# Convert data structure\ndt_map$Value &lt;- data$value[match(dt_map$ENG_NAME, data$region)]\n\n# View data\nhead(data)\n\n     region value\n1 Argentina   198\n2   Bolivia   568\n3    Brazil   191\n4     Chile   275\n5  Colombia   901\n6   Ecuador   604",
    "crumbs": [
      "HIPLOT",
      "South America Map"
    ]
  },
  {
    "objectID": "Hiplot/111-map-south-america.html#visualization",
    "href": "Hiplot/111-map-south-america.html#visualization",
    "title": "South America Map",
    "section": "Visualization",
    "text": "Visualization\n\n# South America Map\np &lt;- ggplot(dt_map) +\n  geom_polygon(aes(x = long, y = lat, group = group, fill = Value),\n               alpha = 0.9, size = 0.5) +\n  geom_path(aes(x = long, y = lat, group = group), color = \"black\", size = 0.2) +\n  coord_fixed() +\n  scale_fill_gradientn(\n    colours = colorRampPalette(rev(brewer.pal(11,\"RdYlBu\")))(500),\n    breaks = seq(min(data$value), max(data$value), \n                 round((max(data$value)-min(data$value))/7)),\n    name = \"Color Key\",\n    guide = guide_legend(\n      direction = \"vertical\", keyheight = unit(1, units = \"mm\"),\n      keywidth = unit(8, units = \"mm\"),\n      title.position = \"top\", title.hjust = 0.5, label.hjust = 0.5,\n      nrow = 1, byrow = T, reverse = F, label.position = \"bottom\")) +\n  theme(text = element_text(color = \"#3A3F4A\"),\n        axis.text = element_blank(),\n        axis.ticks = element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        legend.position = \"top\",\n        legend.text = element_text(size = 4 * 1.5, color = \"black\"),\n        legend.title = element_text(size = 5 * 1.5, color = \"black\"),\n        plot.title = element_text(\n          face = \"bold\", size = 5 * 1.5, hjust = 0.5, \n          margin = margin(t = 4, b = 5), color = \"black\"),\n        plot.background = element_rect(fill = \"#FFFFFF\", color = \"#FFFFFF\"),\n        panel.background = element_rect(fill = \"#FFFFFF\", color = NA),\n        legend.background = element_rect(fill = \"#FFFFFF\", color = NA),\n        plot.margin = unit(c(1.5, 1.5, 1.5, 1.5), \"cm\")) +\n  labs(x = NULL, y = NULL, title = \"South America Map\")\n\np\n\n\n\n\n\n\n\nFigure 1: South America Map",
    "crumbs": [
      "HIPLOT",
      "South America Map"
    ]
  },
  {
    "objectID": "Hiplot/088-histogram.html",
    "href": "Hiplot/088-histogram.html",
    "title": "Histogram",
    "section": "",
    "text": "Histogram refers to the distribution of continuous variable data by a series of vertical stripes or line segments with different heights.",
    "crumbs": [
      "HIPLOT",
      "Histogram"
    ]
  },
  {
    "objectID": "Hiplot/088-histogram.html#setup",
    "href": "Hiplot/088-histogram.html#setup",
    "title": "Histogram",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2; ggthemes\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"ggthemes\", quietly = TRUE)) {\n  install.packages(\"ggthemes\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(ggthemes)",
    "crumbs": [
      "HIPLOT",
      "Histogram"
    ]
  },
  {
    "objectID": "Hiplot/088-histogram.html#data-preparation",
    "href": "Hiplot/088-histogram.html#data-preparation",
    "title": "Histogram",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data is the data set (data on treatment outcomes of different treatment regimens).\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/histogram/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\ndata[, 2] &lt;- factor(data[, 2], levels = unique(data[, 2]))\n\n# View data\nhead(data)\n\n  Value Group2\n1   4.2 treat1\n2  11.5 treat1\n3   7.3 treat1\n4   5.8 treat1\n5   6.4 treat1\n6  10.0 treat1",
    "crumbs": [
      "HIPLOT",
      "Histogram"
    ]
  },
  {
    "objectID": "Hiplot/088-histogram.html#visualization",
    "href": "Hiplot/088-histogram.html#visualization",
    "title": "Histogram",
    "section": "Visualization",
    "text": "Visualization\n\n# Histogram\np &lt;- ggplot(data, aes(x=Value, fill=Group2)) +\n  geom_histogram(alpha = 1, bins = 12, col = \"white\") +\n  ggtitle(\"Histogram Plot\") +\n  scale_fill_manual(values = c(\"#e04d39\",\"#5bbad6\",\"#1e9f86\")) +\n  theme_stata() +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n\np\n\n\n\n\n\n\n\nFigure 1: Histogram\n\n\n\n\n\nThe width of the rectangle in the figure is proportional to and different from the spacing, and the vertical axis represents the frequency.",
    "crumbs": [
      "HIPLOT",
      "Histogram"
    ]
  },
  {
    "objectID": "Hiplot/150-radar.html",
    "href": "Hiplot/150-radar.html",
    "title": "Radar",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Radar plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/radar?lang=en\nRadar chart displays multivariable data in the form of two-dimensional charts representing three or more quantitative variables on the axis starting from the same point, so as to visually express the comparison of a research object in multiple parameters.",
    "crumbs": [
      "HIPLOT",
      "Radar"
    ]
  },
  {
    "objectID": "Hiplot/150-radar.html#setup",
    "href": "Hiplot/150-radar.html#setup",
    "title": "Radar",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggradar; dplyr; scales; tibble; ggplot2\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggradar\", quietly = TRUE)) {\n  install_github(\"ricardo-bion/ggradar\", dependencies = TRUE)\n}\nif (!requireNamespace(\"dplyr\", quietly = TRUE)) {\n  install.packages(\"dplyr\")\n}\nif (!requireNamespace(\"scales\", quietly = TRUE)) {\n  install.packages(\"scales\")\n}\nif (!requireNamespace(\"tibble\", quietly = TRUE)) {\n  install.packages(\"tibble\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggradar)\nlibrary(dplyr)\nlibrary(scales)\nlibrary(tibble)\nlibrary(ggplot2)",
    "crumbs": [
      "HIPLOT",
      "Radar"
    ]
  },
  {
    "objectID": "Hiplot/150-radar.html#data-preparation",
    "href": "Hiplot/150-radar.html#data-preparation",
    "title": "Radar",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data is data set (expression levels of 5 genes in 4 diseases).\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/radar/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\ndata &lt;- as.data.frame(t(data))\ncolnames(data) &lt;- data[1, ]\ndata &lt;- data[-1, ]\nfor (i in seq_len(ncol(data))) {\n  data[, i] &lt;- as.numeric(data[, i])\n}\ndata_radar &lt;- data %&gt;%\n  rownames_to_column(var = \"sample\")\ndata_radar &lt;- data_radar %&gt;% mutate_at(vars(-sample), rescale)\n\n# View data\nhead(data)\n\n   value1 value2 value3 value4 value5\nS1      6    160    110   3.90  2.620\nS2      6    160    110   3.90  2.875\nS3      4    108     93   3.85  2.320\nS4      6    258    110   3.08  3.215",
    "crumbs": [
      "HIPLOT",
      "Radar"
    ]
  },
  {
    "objectID": "Hiplot/150-radar.html#visualization",
    "href": "Hiplot/150-radar.html#visualization",
    "title": "Radar",
    "section": "Visualization",
    "text": "Visualization\n\n# Radar\np &lt;- ggradar(data_radar, gridline.max.linetype = 1, group.point.size = 4,\n             group.line.width = 1, font.radar = \"Arial\", fill.alpha = 0.5,\n             gridline.min.colour = \"grey\", gridline.mid.colour = \"#007A87\",\n             gridline.max.colour = \"grey\") +\n  ggtitle(\"Radar Plot\") +\n  scale_color_manual(values = c(\"#E64B35FF\",\"#4DBBD5FF\",\"#00A087FF\",\"#3C5488FF\")) +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_blank(),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_blank(),\n        axis.title.y=element_blank(),\n        axis.ticks.y=element_blank(),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n \np\n\n\n\n\n\n\n\nFigure 1: Radar\n\n\n\n\n\nEach color of the radar map represents a disease, and the position of each point represents different gene expression. The higher the gene expression value, the farther away it is from the center of the circle, and vice versa.",
    "crumbs": [
      "HIPLOT",
      "Radar"
    ]
  },
  {
    "objectID": "Hiplot/090-interval-bar-chart.html",
    "href": "Hiplot/090-interval-bar-chart.html",
    "title": "Interval Bar Chart",
    "section": "",
    "text": "System Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)",
    "crumbs": [
      "HIPLOT",
      "Interval Bar Chart"
    ]
  },
  {
    "objectID": "Hiplot/090-interval-bar-chart.html#setup",
    "href": "Hiplot/090-interval-bar-chart.html#setup",
    "title": "Interval Bar Chart",
    "section": "",
    "text": "System Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)",
    "crumbs": [
      "HIPLOT",
      "Interval Bar Chart"
    ]
  },
  {
    "objectID": "Hiplot/090-interval-bar-chart.html#data-preparation",
    "href": "Hiplot/090-interval-bar-chart.html#data-preparation",
    "title": "Interval Bar Chart",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe case data consists of the highest and lowest temperatures for each of the twelve months in a year, along with the corresponding abbreviated month names. Based on the case data, temperature intervals and average temperature lines have been plotted for each month.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/interval-bar-chart/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\ndata$name_num &lt;- match(data[[\"month\"]], unique(data[[\"month\"]]))\n\n# View data\nhead(data)\n\n  month min_temperature max_temperature mean name_num\n1   Jan              15              20   16        1\n2   Feb              17              25   20        2\n3   Mar              20              26   23        3\n4   Apr              25              30   27        4\n5   May              30              35   32        5\n6   Jun              32              35   34        6",
    "crumbs": [
      "HIPLOT",
      "Interval Bar Chart"
    ]
  },
  {
    "objectID": "Hiplot/090-interval-bar-chart.html#visualization",
    "href": "Hiplot/090-interval-bar-chart.html#visualization",
    "title": "Interval Bar Chart",
    "section": "Visualization",
    "text": "Visualization\n\n# Interval Bar Chart\np &lt;- ggplot(data, aes(x = month, y = max_temperature)) +\n  geom_rect(aes(xmin = name_num - 0.4, xmax = name_num + 0.4,\n                ymin = min_temperature, ymax = max_temperature), \n            fill = \"#282726\", alpha = 0.7) +\n  geom_line(aes(x = name_num, y = mean), color = \"#006064\", size = 0.8) +\n  labs(x = \"Month\", y = \"Temperature\") +\n  scale_x_discrete() +\n  theme_bw()\n\np\n\n\n\n\n\n\n\nFigure 1: Interval Bar Chart",
    "crumbs": [
      "HIPLOT",
      "Interval Bar Chart"
    ]
  },
  {
    "objectID": "Hiplot/001-area.html",
    "href": "Hiplot/001-area.html",
    "title": "Area Plot",
    "section": "",
    "text": "The area chart displays graphically quantitative data. It is based on the line chart. The area between axis and line are commonly emphasized with colors, textures and hatchings.",
    "crumbs": [
      "HIPLOT",
      "Area"
    ]
  },
  {
    "objectID": "Hiplot/001-area.html#setup",
    "href": "Hiplot/001-area.html#setup",
    "title": "Area Plot",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2; ggthemes\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"ggthemes\", quietly = TRUE)) {\n  install.packages(\"ggthemes\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(ggthemes)",
    "crumbs": [
      "HIPLOT",
      "Area"
    ]
  },
  {
    "objectID": "Hiplot/001-area.html#data-preparation",
    "href": "Hiplot/001-area.html#data-preparation",
    "title": "Area Plot",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data are xaxis.value and yaxis.value.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/area/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# View data\nhead(data)\n\n   group xaxis.value yaxis.value\n1 Group1        1900          26\n2 Group1        1901          27\n3 Group1        1902          10\n4 Group1        1903          16\n5 Group1        1904          19\n6 Group1        1905          18",
    "crumbs": [
      "HIPLOT",
      "Area"
    ]
  },
  {
    "objectID": "Hiplot/001-area.html#visualization",
    "href": "Hiplot/001-area.html#visualization",
    "title": "Area Plot",
    "section": "Visualization",
    "text": "Visualization\n\n# Area Plot\np &lt;- ggplot(data, aes(x = xaxis.value, y = yaxis.value, fill = group)) +\n  geom_area(alpha = 1) +\n  ylab(\"yaxis.value\") +\n  xlab(\"xaxis.value\") +\n  ggtitle(\"Area Plot\") +\n  scale_fill_manual(values = c(\"#e04d39\",\"#5bbad6\",\"#1e9f86\")) +\n  theme_stata() +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n\np\n\n\n\n\n\n\n\nFigure 1: Area Plot\n\n\n\n\n\nDifferent colors represent different groups of area charts.",
    "crumbs": [
      "HIPLOT",
      "Area"
    ]
  },
  {
    "objectID": "Hiplot/116-map-world.html",
    "href": "Hiplot/116-map-world.html",
    "title": "World Map",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot World Map plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/map-world?lang=en",
    "crumbs": [
      "HIPLOT",
      "World Map"
    ]
  },
  {
    "objectID": "Hiplot/116-map-world.html#setup",
    "href": "Hiplot/116-map-world.html#setup",
    "title": "World Map",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2; RColorBrewer\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"RColorBrewer\", quietly = TRUE)) {\n  install.packages(\"RColorBrewer\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(RColorBrewer)",
    "crumbs": [
      "HIPLOT",
      "World Map"
    ]
  },
  {
    "objectID": "Hiplot/116-map-world.html#data-preparation",
    "href": "Hiplot/116-map-world.html#data-preparation",
    "title": "World Map",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/map-world/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\ndt_map &lt;- readRDS(url(\"https://download.hiplot.cn/ui/basic/map-world/world.rds\"))\n\n# Convert data structure\ndt_map$Value &lt;- data$death_rate[match(dt_map$ENG_NAME, data$region)]\n\n# View data\nhead(data)\n\n          region death_rate\n1    Afghanistan       13.4\n2        Albania        6.8\n3        Algeria        4.3\n4 American Samoa        5.9\n5        Andorra        7.3\n6         Angola        9.2",
    "crumbs": [
      "HIPLOT",
      "World Map"
    ]
  },
  {
    "objectID": "Hiplot/116-map-world.html#visualization",
    "href": "Hiplot/116-map-world.html#visualization",
    "title": "World Map",
    "section": "Visualization",
    "text": "Visualization\n\n# World Map\np &lt;- ggplot(dt_map) +\n  geom_polygon(aes(x = long, y = lat, group = group, fill = Value),\n               alpha = 0.9, size = 0.5) +\n  geom_path(aes(x = long, y = lat, group = group), \n            color = \"black\", size = 0.2) +\n  coord_fixed() +\n  scale_fill_gradientn(\n    colours = colorRampPalette(rev(brewer.pal(11,\"RdYlBu\")))(500),\n    na.value = \"grey10\",\n    limits = c(0, max(dt_map$Value) * 1.2)) +\n    ggtitle(\"World Map Plot\") +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5),\n        legend.position = \"bottom\", legend.direction = \"horizontal\")\n\np\n\n\n\n\n\n\n\nFigure 1: World Map",
    "crumbs": [
      "HIPLOT",
      "World Map"
    ]
  },
  {
    "objectID": "Hiplot/049-easy-pairs.html",
    "href": "Hiplot/049-easy-pairs.html",
    "title": "Easy Pairs",
    "section": "",
    "text": "Display a matrix of plots for viewing correlation relationship and distributions of multiple variables.",
    "crumbs": [
      "HIPLOT",
      "Easy Pairs"
    ]
  },
  {
    "objectID": "Hiplot/049-easy-pairs.html#setup",
    "href": "Hiplot/049-easy-pairs.html#setup",
    "title": "Easy Pairs",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; GGally\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"GGally\", quietly = TRUE)) {\n  install.packages(\"GGally\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(GGally)",
    "crumbs": [
      "HIPLOT",
      "Easy Pairs"
    ]
  },
  {
    "objectID": "Hiplot/049-easy-pairs.html#data-preparation",
    "href": "Hiplot/049-easy-pairs.html#data-preparation",
    "title": "Easy Pairs",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/easy-pairs/data.json\")$exampleData[[1]]$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# View data\nhead(data)\n\n  total_bill  tip gender smoker day   time size\n1      16.99 1.01 Female     No Sun Dinner    2\n2      10.34 1.66   Male     No Sun Dinner    3\n3      21.01 3.50   Male     No Sun Dinner    3\n4      23.68 3.31   Male     No Sun Dinner    2\n5      24.59 3.61 Female     No Sun Dinner    4\n6      25.29 4.71   Male     No Sun Dinner    4",
    "crumbs": [
      "HIPLOT",
      "Easy Pairs"
    ]
  },
  {
    "objectID": "Hiplot/049-easy-pairs.html#visualization",
    "href": "Hiplot/049-easy-pairs.html#visualization",
    "title": "Easy Pairs",
    "section": "Visualization",
    "text": "Visualization\n\n# Easy Pairs\np &lt;- ggpairs(data, columns = c(\"total_bill\", \"time\", \"tip\"),\n             mapping = aes_string(color = \"gender\")) +\n  ggtitle(\"Easy Pairs\") +\n  scale_fill_manual(values = c(\"#3B4992FF\",\"#EE0000FF\")) +\n  theme_bw() +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n\np\n\n\n\n\n\n\n\nFigure 1: Easy Pairs",
    "crumbs": [
      "HIPLOT",
      "Easy Pairs"
    ]
  },
  {
    "objectID": "Hiplot/016-bubble.html",
    "href": "Hiplot/016-bubble.html",
    "title": "Bubble",
    "section": "",
    "text": "The bubble chart is a statistical chart that shows the third variable by the size of the bubble on the basis of the scatter chart, so that the three variables can be compared and analyzed simultaneously.",
    "crumbs": [
      "HIPLOT",
      "Bubble"
    ]
  },
  {
    "objectID": "Hiplot/016-bubble.html#setup",
    "href": "Hiplot/016-bubble.html#setup",
    "title": "Bubble",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2; stringr\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"stringr\", quietly = TRUE)) {\n  install.packages(\"stringr\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(stringr)",
    "crumbs": [
      "HIPLOT",
      "Bubble"
    ]
  },
  {
    "objectID": "Hiplot/016-bubble.html#data-preparation",
    "href": "Hiplot/016-bubble.html#data-preparation",
    "title": "Bubble",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data are GO Term,Gene Ridio, Gene count and P-value.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/bubble/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# convert data structure\ndata[, 1] &lt;- str_to_sentence(str_remove(data[, 1], pattern = \"\\\\w+:\\\\d+\\\\W\"))\ntopnum &lt;- 7\ndata &lt;- data[1:topnum, ]\ndata[, 1] &lt;- factor(data[, 1], level = rev(unique(data[, 1])))\n\n# View data\nhead(data)\n\n                               Term Count     Ratio   PValue\n1                   Immune response    20 10.471204 9.61e-08\n2     Defense response to bacterium    11  5.759162 3.02e-06\n3                   Cell chemotaxis     8  4.188482 5.14e-06\n4                     Cell adhesion    17  8.900524 2.73e-05\n5             Complement activation     8  4.188482 3.56e-05\n6 Extracellular matrix organization    11  5.759162 4.23e-05",
    "crumbs": [
      "HIPLOT",
      "Bubble"
    ]
  },
  {
    "objectID": "Hiplot/016-bubble.html#visualization",
    "href": "Hiplot/016-bubble.html#visualization",
    "title": "Bubble",
    "section": "Visualization",
    "text": "Visualization\n\n# Bubble\np &lt;- ggplot(data, aes(Ratio, Term)) +\n  geom_point(aes(size = Count, colour = -log10(PValue))) +\n  scale_colour_gradient(low = \"#00438E\", high = \"#E43535\") +\n  labs(colour = \"-log10 (PValue)\", size = \"Count\", x = \"Ratio\", y = \"Term\", \n       title = \"Bubble Plot\") +\n  scale_x_continuous(limits = c(0, max(data$Ratio) * 1.2)) +\n  guides(color = guide_colorbar(order = 1), size = guide_legend(order = 2)) +\n  scale_y_discrete(labels = function(x) {str_wrap(x, width = 65)}) +\n  theme_bw() +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n\np\n\n\n\n\n\n\n\nFigure 1: Bubble\n\n\n\n\n\nThe x-axis represents Gene Ridio, and the y-axis is GO Term; The size of the dot represents the number of genes, and the color of the dot represents the high or low P value.",
    "crumbs": [
      "HIPLOT",
      "Bubble"
    ]
  },
  {
    "objectID": "Hiplot/176-umap.html",
    "href": "Hiplot/176-umap.html",
    "title": "UMAP",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot UMAP plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/umap?lang=en\nUMAP is a nonlinear dimensionality reduction algorithm suitable for high-dimensional data reduction to two or three dimensions and visualization. The algorithm can make the t distribution of points with greater similarity closer in the lower dimensional space. For low similarity points, the t distribution is farther away in the low dimensional space.",
    "crumbs": [
      "HIPLOT",
      "UMAP"
    ]
  },
  {
    "objectID": "Hiplot/176-umap.html#setup",
    "href": "Hiplot/176-umap.html#setup",
    "title": "UMAP",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; umap; ggpubr\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"umap\", quietly = TRUE)) {\n  install.packages(\"umap\")\n}\nif (!requireNamespace(\"ggpubr\", quietly = TRUE)) {\n  install.packages(\"ggpubr\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(umap)\nlibrary(ggpubr)",
    "crumbs": [
      "HIPLOT",
      "UMAP"
    ]
  },
  {
    "objectID": "Hiplot/176-umap.html#data-preparation",
    "href": "Hiplot/176-umap.html#data-preparation",
    "title": "UMAP",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data are the data set (gene name and corresponding gene expression value) and sample information (sample name and grouping).\n\n# Load data\ndata1 &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/umap/data.json\")$exampleData$textarea[[1]])\ndata1 &lt;- as.data.frame(data1)\ndata2 &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/umap/data.json\")$exampleData$textarea[[2]])\ndata2 &lt;- as.data.frame(data2)\n\n# convert data structure\nsample.info &lt;- data2\nrownames(data1) &lt;- data1[, 1]\ndata1 &lt;- as.matrix(data1[, -1])\n## umap\nset.seed(123)\numap_info &lt;- umap(t(data1))\ncolnames(umap_info$layout) &lt;- c(\"UMAP_1\", \"UMAP_2\")\n# handle data\numap_data &lt;- data.frame(\n  sample = colnames(data1),\n  umap_info$layout\n)\ncolorBy &lt;- sample.info[match(colnames(data1), sample.info[, 1]), \"Species\"]\ncolorBy &lt;- factor(colorBy, level = colorBy[!duplicated(colorBy)])\numap_data$colorBy = colorBy\nshapeBy &lt;- NULL\n\n# View data\nhead(data1[,1:5])\n\n              M1  M2  M3  M4  M5\nSepal.Length 5.1 4.9 4.7 4.6 5.0\nSepal.Width  3.5 3.0 3.2 3.1 3.6\nPetal.Length 1.4 1.4 1.3 1.5 1.4\nPetal.Width  0.2 0.2 0.2 0.2 0.2\n\nhead(data2)\n\n  Samples Species\n1      M1  setosa\n2      M2  setosa\n3      M3  setosa\n4      M4  setosa\n5      M5  setosa\n6      M6  setosa",
    "crumbs": [
      "HIPLOT",
      "UMAP"
    ]
  },
  {
    "objectID": "Hiplot/176-umap.html#visualization",
    "href": "Hiplot/176-umap.html#visualization",
    "title": "UMAP",
    "section": "Visualization",
    "text": "Visualization\n\n# umap\np &lt;- ggscatter(data = umap_data, x = \"UMAP_1\", y = \"UMAP_2\", size = 2, \n               palette = \"lancet\", color = \"colorBy\") +\n  labs(color = \"group\") +\n  ggtitle(\"UMAP Plot\") +\n  theme_classic() +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n\np\n\n\n\n\n\n\n\nFigure 1: umap\n\n\n\n\n\nDifferent colors represent different samples, which is the same as PCA (principal component analysis) graphic interpretation. The difference lies in the visualization effect. For dissimilar points in T-SNE, a small distance will generate a large gradient to repel them.",
    "crumbs": [
      "HIPLOT",
      "UMAP"
    ]
  },
  {
    "objectID": "Hiplot/028-contour-xy.html",
    "href": "Hiplot/028-contour-xy.html",
    "title": "Contour (XY)",
    "section": "",
    "text": "Contour plot (XY) is a data processing method that reflects data density through contour line.",
    "crumbs": [
      "HIPLOT",
      "Contour (XY)"
    ]
  },
  {
    "objectID": "Hiplot/028-contour-xy.html#setup",
    "href": "Hiplot/028-contour-xy.html#setup",
    "title": "Contour (XY)",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2; ggisoband\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"ggisoband\", quietly = TRUE)) {\n  install.packages(\"ggisoband\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(ggisoband)",
    "crumbs": [
      "HIPLOT",
      "Contour (XY)"
    ]
  },
  {
    "objectID": "Hiplot/028-contour-xy.html#data-preparation",
    "href": "Hiplot/028-contour-xy.html#data-preparation",
    "title": "Contour (XY)",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data are two variables.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/contour-xy/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# convert data structure\ncolnames(data) &lt;- c(\"xvalue\", \"yvalue\")\n\n# View data\nhead(data)\n\n  xvalue yvalue\n1  2.620    110\n2  2.875    110\n3  2.320     93\n4  3.215    110\n5  3.440    175\n6  3.460    105",
    "crumbs": [
      "HIPLOT",
      "Contour (XY)"
    ]
  },
  {
    "objectID": "Hiplot/028-contour-xy.html#visualization",
    "href": "Hiplot/028-contour-xy.html#visualization",
    "title": "Contour (XY)",
    "section": "Visualization",
    "text": "Visualization\n\n# Contour (XY)\np &lt;- ggplot(data, aes(xvalue, yvalue)) +\n  geom_density_bands(\n    alpha = 1,\n    aes(fill = stat(density)), color = \"gray40\", size = 0.2\n    ) +\n  geom_point(alpha = 1, shape = 21, fill = \"white\") +\n  scale_fill_viridis_c(guide = \"legend\") +\n  ylab(\"value2\") +\n  xlab(\"value1\") +\n  ggtitle(\"Contour-XY Plot\") +\n  theme_bw() +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n\np\n\n\n\n\n\n\n\nFigure 1: Contour (XY)\n\n\n\n\n\nJust as contour lines in geography represent different heights, different contour lines in contour maps represent different densities. The closer to the center, the smaller contour loop is, and the higher the regional data density is. For example, the data density of yellow area is the highest, while that of blue area is the lowest.",
    "crumbs": [
      "HIPLOT",
      "Contour (XY)"
    ]
  },
  {
    "objectID": "Hiplot/086-heatmap.html",
    "href": "Hiplot/086-heatmap.html",
    "title": "Heatmap",
    "section": "",
    "text": "Heat map is an intuitive and visual method for analyzing the distribution of experimental data, which can be used for quality control of experimental data and visualization display of difference data, as well as clustering of data and samples to observe sample quality.",
    "crumbs": [
      "HIPLOT",
      "Heatmap"
    ]
  },
  {
    "objectID": "Hiplot/086-heatmap.html#setup",
    "href": "Hiplot/086-heatmap.html#setup",
    "title": "Heatmap",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ComplexHeatmap; genefilter\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ComplexHeatmap\", quietly = TRUE)) {\n  install_github(\"jokergoo/ComplexHeatmap\")\n}\nif (!requireNamespace(\"genefilter\", quietly = TRUE)) {\n  install.packages(\"genefilter\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ComplexHeatmap)\nlibrary(genefilter)",
    "crumbs": [
      "HIPLOT",
      "Heatmap"
    ]
  },
  {
    "objectID": "Hiplot/086-heatmap.html#data-preparation",
    "href": "Hiplot/086-heatmap.html#data-preparation",
    "title": "Heatmap",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data are Count (gene name and corresponding gene expression value), sampleInfo (sample name, group and other relevant information, such as age), and gene information (gene name and its pathway, such as tumor pathway and physiological pathway).\n\n# Load data\ndata_count &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/heatmap/data.json\")$exampleData[[1]]$textarea[[1]])\ndata_count &lt;- as.data.frame(data_count)\ndata_sample &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/heatmap/data.json\")$exampleData[[1]]$textarea[[2]])\ndata_sample &lt;- as.data.frame(data_sample)\ndata_gene &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/heatmap/data.json\")$exampleData[[1]]$textarea[[3]])\ndata_gene &lt;- as.data.frame(data_gene)\n\n# Convert data structure\ndata_count &lt;- data_count[!is.na(data_count[, 1]), ]\nidx &lt;- duplicated(data_count[, 1])\ndata_count[idx, 1] &lt;- paste0(data_count[idx, 1], \"--dup-\", cumsum(idx)[idx])\nfor (i in 2:ncol(data_count)) {\n  data_count[, i] &lt;- as.numeric(data_count[, i])\n}\ndata &lt;- as.matrix(data_count[, -1])\nrownames(data) &lt;- data_count[, 1]\n\n## Add annotation information to samples\nsample.info &lt;- data_sample[-1]\nrow.names(sample.info) &lt;- data_sample[, 1]\nsample_info_reorder &lt;- as.data.frame(sample.info[match(\n  colnames(data), rownames(sample.info)\n  ), ])\ncolnames(sample_info_reorder) &lt;- colnames(sample.info)\nrownames(sample_info_reorder) &lt;- colnames(data)\n\n## Add annotation information to genes\ngene_info &lt;- data_gene[-1]\nrownames(gene_info) &lt;- data_gene[, 1]\ngene_info_reorder &lt;- as.data.frame(gene_info[match(\n  rownames(data), rownames(gene_info)\n  ), ])\ncolnames(gene_info_reorder) &lt;- colnames(gene_info)\nrownames(gene_info_reorder) &lt;- rownames(data)\n\n# View data\nhead(data)\n\n              M1       M2        M3       M4       M5       M6       M7\nGBP4    6.599344 5.226266  3.693288 3.938501 4.527193 9.308119 8.987865\nBCAT1   5.760380 4.892783  5.448924 3.485413 3.855669 8.662081 8.793320\nCMPK2   9.561905 4.549168  3.998655 5.614384 3.904793 9.790770 7.133188\nSTOX2   8.396409 8.717055  8.039064 7.643060 9.274649 4.417013 4.725270\nPADI2   8.419766 8.268430  8.451181 9.200732 8.598207 4.590033 5.368268\nSCARNA5 7.653074 5.780393 10.633550 5.913684 8.805605 5.890120 5.527945\n              M8       M9      M10\nGBP4    7.658312 8.666038 7.419708\nBCAT1   8.765915 8.097206 8.262942\nCMPK2   7.379591 7.938063 6.154118\nSTOX2   3.542217 4.305187 6.964710\nPADI2   4.136667 4.910986 4.080363\nSCARNA5 3.822596 4.041078 7.956589",
    "crumbs": [
      "HIPLOT",
      "Heatmap"
    ]
  },
  {
    "objectID": "Hiplot/086-heatmap.html#visualization",
    "href": "Hiplot/086-heatmap.html#visualization",
    "title": "Heatmap",
    "section": "Visualization",
    "text": "Visualization\n\n# Heatmap\n## Set annotation_col and annotation_row to add annotations to samples and genes respectively\ntop_var &lt;- 100\ntop_var_genes &lt;- rownames(data)[head(\n  order(genefilter::rowVars(data), decreasing = TRUE),\n  nrow(data) * top_var / 100\n)]\n## Set annotation_colors\ncol &lt;- colorRampPalette(c(\"#0060BF\",\"#FFFFFF\",\"#CA1111\"))(50)\nannotation_colors &lt;- list()\nfor(i in colnames(sample_info_reorder)) {\n  if (is.numeric(sample_info_reorder[,i])) {\n    annotation_colors[[i]] &lt;- col\n  } else {\n    ref &lt;- c(\"#323232\",\"#1B6393\")\n    annotation_colors[[i]] &lt;- ref\n    names(annotation_colors[[i]]) &lt;- unique(sample_info_reorder[,i])\n  }\n}\nfor(i in colnames(gene_info_reorder)) {\n  if (is.numeric(gene_info_reorder[,i])) {\n    annotation_colors[[i]] &lt;- col\n  } else {\n    ref &lt;- c(\"#323232\",\"#1B6393\")\n    annotation_colors[[i]] &lt;- ref\n    names(annotation_colors[[i]]) &lt;- unique(gene_info_reorder[,i])\n  }\n}\n\np &lt;- \n  ComplexHeatmap::pheatmap(\n    data[row.names(data) %in% top_var_genes,],\n    color = col, \n    border_color = NA,\n    fontsize_row = 6, fontsize_col = 6,\n    main = \"Heatmap Plot\",\n    cluster_rows = T, cluster_cols = T,\n    scale = \"none\",\n    clustering_method = \"ward.D2\",\n    clustering_distance_cols = \"euclidean\",\n    clustering_distance_rows = \"euclidean\",\n    fontfamily = \"Arial\",\n    display_numbers = F,\n    number_color = \"black\",\n    annotation_col = sample_info_reorder,\n    annotation_row = gene_info_reorder,\n    annotation_colors = annotation_colors\n  )\n\np\n\n\n\n\n\n\n\nFigure 1: Heatmap\n\n\n\n\n\nIn the example figure, each small grid represents each gene, and the shade of color represents the expression level of this gene. The larger the expression level is, the darker the color will be (red is up-regulated, green is down-regulated).Each row represents the expression of each gene in a different sample, and each column represents the expression of all genes in each sample.The upper tree represents the clustering analysis results of different samples of different groups and ages, and the left tree represents the clustering analysis results of different genes from different samples.",
    "crumbs": [
      "HIPLOT",
      "Heatmap"
    ]
  },
  {
    "objectID": "Hiplot/045-donut.html",
    "href": "Hiplot/045-donut.html",
    "title": "Donut",
    "section": "",
    "text": "The donut is a variant of the pie chart, with a blank center allowing for additional information about the data as a whole to be included. Doughnut charts are similar to pie charts in that their aim is to illustrate proportions.",
    "crumbs": [
      "HIPLOT",
      "Donut"
    ]
  },
  {
    "objectID": "Hiplot/045-donut.html#setup",
    "href": "Hiplot/045-donut.html#setup",
    "title": "Donut",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)",
    "crumbs": [
      "HIPLOT",
      "Donut"
    ]
  },
  {
    "objectID": "Hiplot/045-donut.html#data-preparation",
    "href": "Hiplot/045-donut.html#data-preparation",
    "title": "Donut",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data are different groups and their data.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/donut/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# convert data structure\ndata$fraction &lt;- data[, 2] / sum(data[, 2])\ndata$ymax &lt;- cumsum(data$fraction)\ndata$ymin &lt;- c(0, head(data$ymax, n = -1))\ndata$labelPosition &lt;- (data$ymax + data$ymin) / 2\ndata$label &lt;- paste0(data[, 1], \"\\n\",\n  \"(\", data[, 2], \", \", sprintf(\"%2.2f%%\", 100 * data[, 2] / sum(data[, 2])), \")\",\n  sep = \"\"\n)\n\n# View data\nhead(data)\n\n   group value  fraction      ymax      ymin labelPosition                label\n1 Group1    13 0.1171171 0.1171171 0.0000000    0.05855856 Group1\\n(13, 11.71%)\n2 Group2    34 0.3063063 0.4234234 0.1171171    0.27027027 Group2\\n(34, 30.63%)\n3 Group3    21 0.1891892 0.6126126 0.4234234    0.51801802 Group3\\n(21, 18.92%)\n4 Group4    43 0.3873874 1.0000000 0.6126126    0.80630631 Group4\\n(43, 38.74%)",
    "crumbs": [
      "HIPLOT",
      "Donut"
    ]
  },
  {
    "objectID": "Hiplot/045-donut.html#visualization",
    "href": "Hiplot/045-donut.html#visualization",
    "title": "Donut",
    "section": "Visualization",
    "text": "Visualization\n\n# Donut\np &lt;- ggplot(data, aes_(ymax = as.name(\"ymax\"), ymin = as.name(\"ymin\"), \n                       xmax = 4, xmin = 3, fill = as.name(colnames(data)[1]))) +\n  geom_rect() +\n  geom_text(x = 5 + (4 - 5) / 3,\n            aes(y = labelPosition, label = label), size = 4) +\n  coord_polar(theta = \"y\") +\n  xlim(c(2, 5)) +\n  scale_fill_manual(values = c(\"#00468BCC\",\"#ED0000CC\",\"#42B540CC\",\"#0099B4CC\")) +\n  ggtitle(\"Donut Plot\") +\n  theme_void() +\n  theme(plot.title = element_text(hjust = 0.5),\n        legend.position = \"none\")\n\np\n\n\n\n\n\n\n\nFigure 1: Donut\n\n\n\n\n\nDifferent colors represent different groups and different areas represent data and proportion.",
    "crumbs": [
      "HIPLOT",
      "Donut"
    ]
  },
  {
    "objectID": "Hiplot/156-roc.html",
    "href": "Hiplot/156-roc.html",
    "title": "ROC",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot ROC plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/roc?lang=en\nReceiver operating characteristic curve (ROC curve) is used to describe the diagnostic ability of binary classifier system when its recognition threshold changes.",
    "crumbs": [
      "HIPLOT",
      "ROC"
    ]
  },
  {
    "objectID": "Hiplot/156-roc.html#setup",
    "href": "Hiplot/156-roc.html#setup",
    "title": "ROC",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; pROC; ggplotify\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"pROC\", quietly = TRUE)) {\n  install.packages(\"pROC\")\n}\nif (!requireNamespace(\"ggplotify\", quietly = TRUE)) {\n  install.packages(\"ggplotify\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(pROC)\nlibrary(ggplotify)",
    "crumbs": [
      "HIPLOT",
      "ROC"
    ]
  },
  {
    "objectID": "Hiplot/156-roc.html#data-preparation",
    "href": "Hiplot/156-roc.html#data-preparation",
    "title": "ROC",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data are the outcomes of one column of dichotomous variables and three columns of different variables (diagnostic indicators) and their values.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/roc/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\nname_val &lt;- colnames(data)[2:ncol(data)]\nnum_value &lt;- ncol(data) - 1\n\n# View data\nhead(data)\n\n  outcome value-Am value-GG value-EL\n1    Good        3     0.33    17.30\n2    Good        2     0.11    12.71\n3    Good        4     0.28     9.44\n4    Good        2     0.07    11.07\n5    Good        1     0.10    19.46\n6    Good        4     0.32    10.83",
    "crumbs": [
      "HIPLOT",
      "ROC"
    ]
  },
  {
    "objectID": "Hiplot/156-roc.html#visualization",
    "href": "Hiplot/156-roc.html#visualization",
    "title": "ROC",
    "section": "Visualization",
    "text": "Visualization\n\n# ROC\ncol &lt;- c(\"#00468BFF\",\"#ED0000FF\",\"#42B540FF\")\np &lt;- as.ggplot(function() {\n  for (i in 1:num_value) {\n    if (i == 1) {\n      roc_data &lt;- roc(data[, 1], data[, i + 1],\n        percent = T, plot = T, grid = T, lty = i, quiet = T,\n        print.auc = F, col = col[i], smooth = F,\n        main = \"ROC Plot\"\n      )\n      text(30, 50, \"AUC\", font = 2, col = \"darkgray\")\n      text(30, 50 - 10 * i,\n        paste(name_val[i], \":\", sprintf(\"%0.4f\", as.numeric(roc_data$auc))),\n        col = col[i]\n      )\n    } else {\n      roc_data &lt;- roc(data[, 1], data[, i + 1],\n        percent = T, plot = T, grid = T, add = T, lty = i, quiet = T,\n        print.auc = F, col = col[i]\n      )\n      text(30, 50 - 10 * i,\n        paste(name_val[i], \":\", sprintf(\"%0.4f\", as.numeric(roc_data$auc))),\n        col = col[i]\n      )\n    }\n  }\n    })\n\np\n\n\n\n\n\n\n\nFigure 1: ROC\n\n\n\n\n\nThere is no functional relationship between specificity on the horizontal axis and sensitivity on the vertical axis.The closer the curve is to the upper left corner, the better the predictive ability of the diagnostic index is.Each color represented a variable (diagnostic indicator), and the blue and red curves were significantly better predictors than the green curves.AUC is the area under ROC curve.AUC=1 indicates that there is at least one threshold on the curve that leads to a perfect prediction.0.5&lt;AUC&lt;1, better than random guess, appropriate selection of threshold value, can have predictive value. AUC=0.5, like random guesses, the model has no predictive value. If AUC&lt;0.5, the possible reason is that the dichotomy variable such as (0,1) is reversed with the ending setting, and the result assignment can be reversed.In this diagram, it can be considered that Am variable has the best predictive ability as shown in value-Am(86.9792)&gt;value-GG(84.3750)&gt;value-EL(56.7708).",
    "crumbs": [
      "HIPLOT",
      "ROC"
    ]
  },
  {
    "objectID": "Hiplot/153-ribbon.html",
    "href": "Hiplot/153-ribbon.html",
    "title": "Ribbon",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Ribbon plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/ribbon?lang=en\nThe ribbon diagram is a pattern similar to a ribbon.",
    "crumbs": [
      "HIPLOT",
      "Ribbon"
    ]
  },
  {
    "objectID": "Hiplot/153-ribbon.html#setup",
    "href": "Hiplot/153-ribbon.html#setup",
    "title": "Ribbon",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2; ggthemes\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"ggthemes\", quietly = TRUE)) {\n  install.packages(\"ggthemes\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(ggthemes)",
    "crumbs": [
      "HIPLOT",
      "Ribbon"
    ]
  },
  {
    "objectID": "Hiplot/153-ribbon.html#data-preparation",
    "href": "Hiplot/153-ribbon.html#data-preparation",
    "title": "Ribbon",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data are the X-axis values and their corresponding Y-axis values and groups.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/ribbon/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\ncolnames(data) &lt;- c(\"group\", \"xvalue\", \"yvalue1\", \"yvalue2\")\ndata$yvalue &lt;- (data$yvalue1 + data$yvalue2) / 2\n\n# View data\nhead(data)\n\n   group xvalue yvalue1 yvalue2 yvalue\n1 Group1   1900  -0.279  -0.063 -0.171\n2 Group1   1901  -0.271  -0.053 -0.162\n3 Group1   1902  -0.285  -0.069 -0.177\n4 Group1   1903  -0.303  -0.095 -0.199\n5 Group1   1904  -0.328  -0.118 -0.223\n6 Group1   1905  -0.348  -0.134 -0.241",
    "crumbs": [
      "HIPLOT",
      "Ribbon"
    ]
  },
  {
    "objectID": "Hiplot/153-ribbon.html#visualization",
    "href": "Hiplot/153-ribbon.html#visualization",
    "title": "Ribbon",
    "section": "Visualization",
    "text": "Visualization\n\n# Ribbon\np &lt;- ggplot(data, aes(xvalue, yvalue, fill = group)) +\n  geom_ribbon(alpha = 0.2, aes(ymin = yvalue1, ymax = yvalue2)) +\n  geom_line(aes(y = yvalue, color = group), lwd = 1) +\n  geom_line(aes(y = yvalue1, color = group), linetype = \"dotted\") +\n  geom_line(aes(y = yvalue2, color = group), linetype = \"dotted\") +\n  ylab(\"y axis value\") +\n  xlab(\"x axis value\") +\n  ggtitle(\"Ribbon Plot\") +\n  scale_fill_manual(values = c(\"#e04d39\",\"#5bbad6\")) +\n  scale_color_manual(values = c(\"#e04d39\",\"#5bbad6\")) +\n  theme_stata() +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n \np\n\n\n\n\n\n\n\nFigure 1: Ribbon\n\n\n\n\n\nEach color represents a different grouping, through which broken lines can be seen the change of each group of data over time.",
    "crumbs": [
      "HIPLOT",
      "Ribbon"
    ]
  },
  {
    "objectID": "Correlation/Scatter.html",
    "href": "Correlation/Scatter.html",
    "title": "Scatter Plot",
    "section": "",
    "text": "A scatter plot is a basic visualization chart used to represent the general trend of the dependent variable changing with the independent variable.",
    "crumbs": [
      "Correlation",
      "Scatter Plot"
    ]
  },
  {
    "objectID": "Correlation/Scatter.html#example",
    "href": "Correlation/Scatter.html#example",
    "title": "Scatter Plot",
    "section": "Example",
    "text": "Example\n\n\n\n\n\nThe basic scatter plot above can intuitively show the general trend of the dependent variable y changing with the independent variable x. It can be seen that y generally increases with the increase of x.",
    "crumbs": [
      "Correlation",
      "Scatter Plot"
    ]
  },
  {
    "objectID": "Correlation/Scatter.html#setup",
    "href": "Correlation/Scatter.html#setup",
    "title": "Scatter Plot",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming Language: R\nDependencies: ggplot2, ggpmisc, ggpubr, ggExtra, geomtextpath, plotly, dplyr\n\n\n# Install packages\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"ggpmisc\", quietly = TRUE)) {\n  install.packages(\"ggpmisc\")\n}\nif (!requireNamespace(\"ggpubr\", quietly = TRUE)) {\n  install.packages(\"ggpubr\")\n}\nif (!requireNamespace(\"ggExtra\", quietly = TRUE)) {\n  install.packages(\"ggExtra\")\n}\nif (!requireNamespace(\"geomtextpath\", quietly = TRUE)) {\n  install.packages(\"geomtextpath\")\n}\nif (!requireNamespace(\"plotly\", quietly = TRUE)) {\n  install.packages(\"plotly\")\n}\nif (!requireNamespace(\"dplyr\", quietly = TRUE)) {\n  install.packages(\"dplyr\")\n}\n\n# Load packages\nlibrary(ggpmisc)\nlibrary(ggplot2)\nlibrary(ggpubr)\nlibrary(ggExtra)\nlibrary(geomtextpath)\nlibrary(plotly)\nlibrary(dplyr)",
    "crumbs": [
      "Correlation",
      "Scatter Plot"
    ]
  },
  {
    "objectID": "Correlation/Scatter.html#data-preparation",
    "href": "Correlation/Scatter.html#data-preparation",
    "title": "Scatter Plot",
    "section": "Data Preparation",
    "text": "Data Preparation\nUsing R’s built-in dataset iris and the NCBI GSE243555 dataset\n\n# 1.Load iris data\ndata &lt;- iris\n\n# 2.Load gene expression data (first two rows)\ndata_counts &lt;- read.csv(\"https://bizard-1301043367.cos.ap-guangzhou.myqcloud.com/GSE243555_all_genes_with_counts.txt\", sep = \"\\t\", header = TRUE, nrows = 10) \n\naxis_names &lt;- data_counts[c(1, 2), 1]        # Save names\ndata_counts &lt;- data_counts %&gt;%      \n  select(-1) %&gt;%               # Remove first column\n  slice(1:2) %&gt;%               # remain the first two rows\n  t()  %&gt;%                     # Transpose\n  as.data.frame() %&gt;%\n  setNames(c(\"V1\", \"V2\"))      # Set column names\n\nhead(data_counts)\n\n                           V1  V2\nMCF7.HG..1.              2905 178\nMCF7.HG..LG..2.          2496 161\nADIPO.HG..2.             1802 184\nADIPO.HG..LG..2.         1400 174\nMCF7...ADIPO..HG..2.     2180 154\nMCF7...ADIPO..HG..LG..2. 2123 118",
    "crumbs": [
      "Correlation",
      "Scatter Plot"
    ]
  },
  {
    "objectID": "Correlation/Scatter.html#visualization",
    "href": "Correlation/Scatter.html#visualization",
    "title": "Scatter Plot",
    "section": "Visualization",
    "text": "Visualization\n\n1. Basic Plotting\nFigure 1 is a basic scatter plot, which can be drawn by calling geom_point().\n\n# Basic plotting\np &lt;- ggplot(data, aes(x = Sepal.Width, y = Sepal.Length)) +\n  geom_point()\n\np\n\n\n\n\n\n\n\nFigure 1: Basic Plotting\n\n\n\n\n\n\n\n2. Set Point Style\nFigure 2 has changed the shape, size, and color style of the points based on the basic scatter plot.\n\n# Set the shape, size, and color parameters in `geom_point`\np &lt;- ggplot(data, aes(x = Sepal.Width, y = Sepal.Length)) +\n  geom_point(shape = 17, size = 1.5, color = \"blue\")\n\np\n\n\n\n\n\n\n\nFigure 2: Set Point Style\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nKey Parameters: shape\nshape is the shape of the point, with optional values ranging from 0 to 25, and the specific shapes are shown in the following figure:\n\n\n\n\n\n\n\n\n\n3. Multi-class Data Plotting, Change Legend Position\n\nMulti-class Data Plotting\nFigure 3 uses color=Species to map the species variable to the color feature, giving different species different colors.\n\n# Multi-class data plotting\np_multi &lt;- ggplot(data, aes(x = Sepal.Width, y = Sepal.Length, color = Species)) +\n  geom_point(shape = 16, size = 1.5)\n\np_multi\n\n\n\n\n\n\n\nFigure 3: Multi-class Data Plotting\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nKey Parameters: color=Species\nHere, the Species variable is mapped to the color feature, with different Species groups having different color. You can also map variables to multiple features, such as alpha=Species (mapping the species variable to the transparency feature, meaning the three types of data points will have different transparencies), shape=Species (mapping the species variable to the shape variable), and so on.\n\n\n\n\nMap Categorical Variables to other Features\nFigure 4 maps the species variable to both color and shape, with different species having different colors and shapes.\n\n## Map categorical variables to other features\np_multi &lt;- ggplot(data, aes(\n  x = Sepal.Width, y = Sepal.Length,\n  color = Species, shape = Species\n)) +\n  geom_point()\n\np_multi\n\n\n\n\n\n\n\nFigure 4: Map Categorical Variables to other Features\n\n\n\n\n\n\n\nChange Legend Position\nFigure 5 places the legend in the blank space of the chart, making it more aesthetically pleasing.\n\n## Map categorical variables to other features\np_multi &lt;- ggplot(data, aes(\n  x = Sepal.Width, y = Sepal.Length,\n  color = Species, shape = Species\n)) +\n  geom_point() +\n  # use `theme()` to change the legend position\n  theme(legend.position = \"inside\", legend.position.inside = c(0.87, 0.8))\n\np_multi\n\n\n\n\n\n\n\nFigure 5: Change Legend Position\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nKey Parameters: theme\nlegend.position：\nSet the position of the legend, with options including “none”, “left”, “right”, “bottom”, “top”, “inside”.\nlegend.position.inside：\nThe legend.position=\"inside\" is effective only when it is set. The general form is legend.position.inside=c(x,y), where x and y are numerical values, both ranging from 0 to 1. The larger the x value, the more the legend is positioned to the right; the larger the y value, the higher the legend is positioned. Adjustments can be made according to the actual blank space.\n\n\n\n\n\n4. Add Point Labels\n\ngeom_text() for Point Labels\nFigure 6 uses geom_text() to draw point labels.\n\n# Basic plotting and point labels\n# To ensure that the points do not overlap, only the data with the species \"setosa\" was selected for plotting\np &lt;- ggplot(data = data[data$Species == \"setosa\", ], aes(x = Sepal.Width, y = Sepal.Length)) +\n  geom_point(shape = 16, size = 1.5, color = \"blue\") +\n  geom_text(\n    label = rownames(data[data$Species == \"setosa\", ]),\n    nudge_x = 0.03, nudge_y = -0.04,\n    check_overlap = T\n  )\n\np\n\n\n\n\n\n\n\nFigure 6: geom_text() for Point Labels\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nKey Parameters: geom_text\nlabel:\nThe label content displayed on the chart can be column names or other features.\nnudge_x,nudge_y:\nCentered on each point, nudge_x and nudge_y represent the deviation from this center point, and adjustments are made to place the labels in the optimal position.\ncheck_overlap：\nA boolean value, when true, will avoid overlap, but some point labels may not be displayed; when false, it will not check if the points overlap.\n\n\n\n\ngeom_label() for Point Labels\nFigure 7 uses geom_label() to draw point labels.\n\n# `geom_label` can also be used to draw point labels, and the parameters can remain unchanged.\np &lt;- ggplot(data = data[data$Species == \"setosa\", ], aes(x = Sepal.Width, y = Sepal.Length)) +\n  geom_point(shape = 16, size = 1.5, color = \"blue\") +\n  geom_label(\n    label = rownames(data[data$Species == \"setosa\", ]),\n    nudge_x = 0.025, nudge_y = -0.04, size = 2.5\n  )\n\np\n\n\n\n\n\n\n\nFigure 7: geom_label() for Point Labels\n\n\n\n\n\n\n\n\n5. Regression Curve and Regression Equation/Correlation Coefficient\n\nDraw Regression Curve\nFigure 8 introduces a regression curve using geom_smooth(), which is a common form in articles.\n\n# Draw regression curve\np &lt;- ggplot(data_counts, aes(x = V1, y = V2)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", formula = y ~ x, se = T, color = \"red\")\n\np\n\n\n\n\n\n\n\nFigure 8: Draw Regression Curve\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nKey Parameters: geom_smooth\nmethod:\nThe method for drawing the regression curve can be chosen, with the default method=NULL. Options include “lm”, “glm”, “gam”, “loess”, or a custom function.\nformula:\nThe formula used for drawing the regression curve can be chosen, with the default formula=NULL. Options include y ~ x, y ~ poly(x, 2), y ~ log(x), etc.\nse:\nThe Boolean value, where TRUE indicates displaying the confidence interval, with the default se = TRUE.\n\n\n\n\nAdd Regression Equation\nFigure 9 has annotated the regression equation, R-squared, p-value, and other information in the upper left corner.\n\n# Draw regression curve\np &lt;- ggplot(data_counts, aes(x = V1, y = V2)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", formula = y ~ x, se = T, color = \"red\") +\n  # Add the regression equation, eq: equation, R2: R-squared, P: p-value\n  stat_poly_eq(use_label(\"eq\", \"R2.CI\", \"P\"), formula = y ~ x, size = 4, method = \"lm\")\n\np\n\n\n\n\n\n\n\nFigure 9: Add Regression Equation\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nKey Parameters: use_label\nThe types of labels to be added, “eq”, “R2”, “P” represent the equation of the regression equation, the R-squared value, and the p-value, respectively. There are also other optional values such as “R2.CI” (displaying the 95% confidence interval) and “method” (displaying the method).\n\n\n\n\nAdjust the Position of the Regression Equation Label\nFigure 10 used the label.y and label.x parameters to adjust the label position as needed.\n\n## Adjust the label to a suitable position\np &lt;- ggplot(data_counts, aes(x = V1, y = V2)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", formula = y ~ x, se = T, color = \"red\") +\n  stat_poly_eq(use_label(\"eq\"),\n    formula = y ~ x, size = 4, method = \"lm\",\n    label.y = 0.45, label.x = 0.5, angle = -5\n  )\n\np\n\n\n\n\n\n\n\nFigure 10: Adjust the Position of the Regression Equation Label\n\n\n\n\n\n\n\nPlotting Multi-class Data with Regression Equations\nFigure 11 uses multiple types of data for plotting and adds regression curves and their labels.\n\n# Multi-class plotting with regression equations\np_multi &lt;- ggplot(data, aes(x = Sepal.Width, y = Sepal.Length, color = Species, shape = Species)) +\n  geom_point(size = 1.5) +\n  scale_colour_manual(values = c(\"setosa\" = \"purple\", \"versicolor\" = \"blue\", \"virginica\" = \"pink\")) +\n  theme(legend.position = \"inside\", legend.position.inside = c(0.87, 0.8)) +      # Set the legend position\n  geom_smooth(method = \"lm\", formula = y ~ x, se = T) +\n  stat_poly_eq(use_label(\"eq\"),\n    formula = y ~ x, size = 3.5, method = \"lm\",\n    label.x = c(0.6, 0.6, 0.6), label.y = c(0.2, 0.6, 0.75), angle = 10, color = \"black\"\n  )\n\np_multi\n\n\n\n\n\n\n\nFigure 11: Plotting Multi-class Data with Regression Equations\n\n\n\n\n\n\n\nDisplay Correlation Coefficient\nFigure 12 uses the stat_cor() function to display the correlation coefficient label.\n\n# Display correlation coefficient\np &lt;- ggplot(data_counts, aes(x = V1, y = V2)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", formula = y ~ x, se = T, color = \"red\") +\n  stat_cor(\n    method = \"pearson\", label.sep = \",\",\n    p.accuracy = 0.00001, r.digits = 5, size = 4\n  )\n\np\n\n\n\n\n\n\n\nFigure 12: Display Correlation Coefficient\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nKey Parameters: stat_cor\nmethod:\nThe method for calculating the correlation coefficient, which can be chosen from “pearson” (default), “kendall”, or “spearman”.\nlabel.sep:\nThe delimiter for labels, defaulting to “,”.\nr.accuracy,p.accuracy:\nThe precision of the R value or P value.\nr.digits,p.digits：\nThe number of significant digits for the R value or P value.\n\n\n\n\n\n6. Add Labels to Regression Curve\n\nsingle-type Data Plotting with Label\nFigure 13 uses geom_labelsmooth() to add labels to the regression curve.\n\n## Draw the regression line and add labels\np &lt;- ggplot(data[data$Species == \"setosa\", ], aes(x = Sepal.Width, y = Sepal.Length)) +\n  geom_point(shape = 16, size = 2, color = \"blue\") +\n  geom_labelsmooth(aes(label = Species[1]),\n    fill = \"white\",\n    method = \"lm\", formula = y ~ x,\n    size = 6, linewidth = 1,\n    boxlinewidth = 0.6, linecolour = \"red\"\n  )\n\np\n\n\n\n\n\n\n\nFigure 13: single-type Data Plotting with Label\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nKey Parameters: geom_labelsmooth\nlabel：\nLabel name.\nfill：\nBox fill color.\nlinewidth:\nLine thickness.\nboxlinewidth:\nThe thickness of the box border.\n\n\n\n\nMulti-class Data Plotting with Labels\nFigure 14 adds label to multiple types of data accordingly.\n\n# Multi-class data plotting with labels\np &lt;- ggplot(data, aes(x = Sepal.Width, y = Sepal.Length, color = Species, shape = Species)) +\n  geom_point(size = 2) +\n  theme(legend.position = \"none\") +\n  geom_labelsmooth(aes(label = Species),\n    fill = \"white\",\n    method = \"lm\", formula = y ~ x,\n    size = 3, linewidth = 0.6, boxlinewidth = 0.3\n  )\n\np     \n\n\n\n\n\n\n\nFigure 14: Multi-class Data Plotting with Labels\n\n\n\n\n\n\n\n\n7. Add Marginal Rug Plots\nFigure 15 uses geom_rug() to add marginal rugs.\n\np &lt;- ggplot(data, aes(x = Sepal.Width, y = Sepal.Length)) +\n  geom_point(shape = 16, size = 1.5, color = \"blue\") +\n  geom_rug(color = \"steelblue\", alpha = 0.1, linewidth = 1.5)\n\np\n\n\n\n\n\n\n\nFigure 15: Add Marginal Rug Plots\n\n\n\n\n\n\n\n8. Add Marginal Distributions\nFigure 16 introduces the marginal distribution of histograms, and multiple parameters can be used to adjust the style of the marginal plots.\n\n# Add marginal distributions\np &lt;- ggplot(data, aes(x = Sepal.Width, y = Sepal.Length)) +\n  geom_point(shape = 16, size = 1.5, color = \"blue\")\n\np\n\np1 &lt;- ggMarginal(p,\n  type = \"histogram\", color = \"red\", fill = \"green\",\n  margins = \"both\", xparams = list(bins = 12, fill = \"purple\")\n)\n\np1\n\n\n\n\n\n\n\nFigure 16: Add Marginal Distributions\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nKey Parameters: ggMarginal\ntype:\nThe type of marginal distribution plot, with options including “density”, “histogram”, “boxplot”, “violin”, “densigram”.\nmargins:\nSet which edge to draw the marginal distribution plot, margins=c(x,y) indicates that marginal plots are drawn on both the x and y edges.\nxparams,yparams：\nSet the side plot to be effective only for the x or y dimension. The parameters include common parameters such as color, fill, and size, as well as unique parameters for this marginal plot, such as the bins for histograms.\nbins:\nLike the histogram parameter bins, divide the histogram into several bars.\n\n\n\n\n9. Draw 3D Interactive Scatter Plot\nFigure 17 uses three columns of data and supports interactive browsing.\n\n## 3D Interactive Scatter Plot.\np &lt;- plot_ly(data,\n  x = ~ data$Sepal.Length, y = ~ data$Sepal.Width,\n  z = ~ data$Petal.Length, color = ~ data$Species,\n  colors = c(\"#FF6DAE\", \"#D4CA3A\", \"#00BDFF\"),\n  marker = list(size = 5)\n) %&gt;%\n  add_markers()        # Add the above chart to the `plotly` visualization\n\np\n\n\n\n\n\n\n\nFigure 17: Draw 3D Interactive Scatter Plot",
    "crumbs": [
      "Correlation",
      "Scatter Plot"
    ]
  },
  {
    "objectID": "Correlation/Scatter.html#applications",
    "href": "Correlation/Scatter.html#applications",
    "title": "Scatter Plot",
    "section": "Applications",
    "text": "Applications\n\n\n\n\n\n\nFigure 18: Applications of Scatter Plot\n\n\n\nThe figure shows that KRT6B expression is positively correlated with immune-related genes (including CXCL9 and CXCL10). [1]\n\n\n\n\n\n\nFigure 19: Applications of Scatter Plot\n\n\n\nThe figure shows that in the brown and dark blue modules, there is a strong positive correlation between module members and gene importance (cor=0.78&p&lt;0.001, cor=0.59&p&lt;0.001). [2]\n\n\n\n\n\n\nFigure 20: Applications of Scatter Plot\n\n\n\nThe figure explores the association between CXCR4 and various immune cells. [3]",
    "crumbs": [
      "Correlation",
      "Scatter Plot"
    ]
  },
  {
    "objectID": "Correlation/Scatter.html#reference",
    "href": "Correlation/Scatter.html#reference",
    "title": "Scatter Plot",
    "section": "Reference",
    "text": "Reference\n[1] Song Q, Yu H, Cheng Y, et al. Bladder cancer-derived exosomal KRT6B promotes invasion and metastasis by inducing EMT and regulating the immune microenvironment[J]. J Transl Med, 2022,20(1):308.\n[2] Xie J, Chen L, Wu D, et al. Significance of liquid-liquid phase separation (LLPS)-related genes in breast cancer: a multi-omics analysis[J]. Aging (Albany NY), 2023,15(12):5592-5610.\n[3]Zhang S, Hou L, Sun Q. Correlation analysis of intestinal flora and immune function in patients with primary hepatocellular carcinoma[J]. J Gastrointest Oncol, 2022,13(3):1308-1316.",
    "crumbs": [
      "Correlation",
      "Scatter Plot"
    ]
  },
  {
    "objectID": "Correlation/ConnectedScatter.html",
    "href": "Correlation/ConnectedScatter.html",
    "title": "Connected Scatter",
    "section": "",
    "text": "Connected scatter is a type of chart that builds upon scatter by adding lines to connect the data points in a certain order. It allows us to discern not only the correlation between independent variable and dependent variable but also the trend in the data points.",
    "crumbs": [
      "Correlation",
      "Connected Scatter"
    ]
  },
  {
    "objectID": "Correlation/ConnectedScatter.html#example",
    "href": "Correlation/ConnectedScatter.html#example",
    "title": "Connected Scatter",
    "section": "Example",
    "text": "Example\n\n\n\n\n\nIn this figure, this is a basic connected scatter plot. The curve representing the change between Sepal.Length and Sepal.Widthfluctuates up and down. However, overall, the dependent variable Sepal.Length increases as the independent variable Sepal.Width increases.",
    "crumbs": [
      "Correlation",
      "Connected Scatter"
    ]
  },
  {
    "objectID": "Correlation/ConnectedScatter.html#setup",
    "href": "Correlation/ConnectedScatter.html#setup",
    "title": "Connected Scatter",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming Language: R\nDependencies: ggplot2, dplyr\n\n\n# Install packages\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"dplyr\", quietly = TRUE)) {\n  install.packages(\"dplyr\")\n}\n\n# Load packages\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(stringr)",
    "crumbs": [
      "Correlation",
      "Connected Scatter"
    ]
  },
  {
    "objectID": "Correlation/ConnectedScatter.html#data-preparation",
    "href": "Correlation/ConnectedScatter.html#data-preparation",
    "title": "Connected Scatter",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe datasets used are the built-in R datasets iris and economics. The iris dataset contains measurements of sepal length and width, as well as petal length and width, for three species of iris plants. The economics dataset is a time series of U.S. economic data. Additionally, the gene expression data for breast cancer from the NCBI database is used,which has 24 sample columns, and two rows of gene expression data are selected for plotting.\n\n# 1.Load iris data\ndata(\"iris\", package = \"datasets\")\ndata &lt;- iris\n\n# 2. Load and filter time series data\n# To simplify the plotting process, only the data from December is selected to represent the entire year\ndata_economics &lt;- economics %&gt;%\n  select(date, psavert, uempmed) %&gt;%\n  filter(str_detect(date, \"-12-01\")) %&gt;%\n  slice_head(n = 25) %&gt;%\n  mutate(date = str_extract(date, \"^\\\\d{4}\")) %&gt;% #extracts the 4-digit year from the beginning of each date string.\n  select(date, psavert, uempmed)\n\n# 3.Load gene expression data (first two rows)\ndata_counts &lt;- read.csv(\"https://bizard-1301043367.cos.ap-guangzhou.myqcloud.com/GSE243555_all_genes_with_counts.txt\", sep = \"\\t\", header = TRUE, nrows = 10)\n\naxis_names &lt;- data_counts[c(1, 2), 1]        # Save names\n\ndata_counts &lt;- data_counts %&gt;%      \n  select(-1) %&gt;%               # Remove first column\n  slice(1:2) %&gt;%               # remain the first two rows\n  t()  %&gt;%                     # Transpose\n  as.data.frame() %&gt;%\n  setNames(c(\"V1\", \"V2\"))      # Set column names\n\nhead(data_counts)\n\n                           V1  V2\nMCF7.HG..1.              2905 178\nMCF7.HG..LG..2.          2496 161\nADIPO.HG..2.             1802 184\nADIPO.HG..LG..2.         1400 174\nMCF7...ADIPO..HG..2.     2180 154\nMCF7...ADIPO..HG..LG..2. 2123 118",
    "crumbs": [
      "Correlation",
      "Connected Scatter"
    ]
  },
  {
    "objectID": "Correlation/ConnectedScatter.html#visualization",
    "href": "Correlation/ConnectedScatter.html#visualization",
    "title": "Connected Scatter",
    "section": "Visualization",
    "text": "Visualization\n\n1. Basic Plotting\nFigure 1 was created by adding geom_line to the scatter plot.\n\n# Basic plotting, only adding `geom_line`\np &lt;- ggplot(data[data$Species == \"setosa\", ], aes(x = Sepal.Width, y = Sepal.Length)) +\n  geom_point(shape = 17, size = 1.5, color = \"blue\") +\n  geom_line()\n\np\n\n\n\n\n\n\n\nFigure 1: Basic Plotting\n\n\n\n\n\n\n\n2. Set Line Styles\nFigure 2 sets the line direction, width, type, and color by parameters.\n\n## Set line styles\np &lt;- ggplot(data[data$Species == \"setosa\", ], aes(x = Sepal.Width, y = Sepal.Length)) +\n  geom_point(shape = 17, size = 1.5, color = \"blue\") +\n  geom_line(orientation = \"x\", linetype = 1, color = \"red\", linewidth = 0.1)\n\np\n\n\n\n\n\n\n\nFigure 2: Set Line Styles\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nKey Parameters: geom_line\nlinetype:\nlinetype indicates the type of line, with optional values ranging from 0 to 6 (0 = blank, 1 = solid, 2 = dashed, 3 = dotted, 4 = dotdash, 5 = longdash, 6 = twodash). The specific shapes are shown in the following figure:\n\n\n\n\n\norientation:\nThe orientation of the line segment, with options “x” and “y”. When orientation=\"x\", the line is plotted with x as the independent variable and y as the dependent variable.\nlinewidth:\nThe thickness of the line segment.\n\n\n\n\n3. Multiclass Data Plotting\nFigure 3 was created by using color=Species, shape=Species, and linetype=Species to map the categorical variable to multiple features.\n\n## Multiclass Data Plotting\n## Use `color=Species`,`shape=Species`,`linetype=Species` to map categorical variables to multiple features\np &lt;- ggplot(\n  data[data$Species == \"setosa\" | data$Species == \"virginica\", ],\n  aes(x = Sepal.Width, y = Sepal.Length)\n) +\n  geom_point(aes(color = Species, shape = Species), size = 1.5) +\n  geom_line(aes(linetype = Species)) +\n  # Change the position of the legend\n  theme(legend.position = \"inside\", legend.position.inside = c(0.85, 0.8))\n\np\n\n\n\n\n\n\n\nFigure 3: Multiclass Data Plotting\n\n\n\n\n\n\n\n4. Plotting with Genetic Data\nFigure 4 shows a connected scatter plot of two genes related to breast cancer.\n\n# Plotting with genetic data\np &lt;- ggplot(data_counts, aes(x = V1, y = V2)) +\n  geom_point(shape = 17, size = 1.5, color = \"blue\") +\n  geom_line(orientation = \"x\", linetype = 1, color = \"red\", linewidth = 0.1) +\n  theme(axis.text.x = element_text(angle = 90)) + # Avoid text overlap\n  labs(x = axis_names[1], y = axis_names[2]) # Add x-axis and y-axis labels\n\np\n\n\n\n\n\n\n\nFigure 4: Plotting with Genetic Data\n\n\n\n\n\n\n\n5. Connect Points In Chronological Order\n\nDo not Connect Points in Chronological Order (For Comparison)\nFigure 5 uses geom_line() for drawing. By default, geom_line() draws along the x-axis direction (it draws along the y-axis when orientation=\"y\").\n\np &lt;- ggplot(data_economics, aes(x = psavert, y = uempmed)) +\n  geom_point(shape = 17, size = 1.5, color = \"blue\") +\n  geom_text(\n    label = data_economics$date, nudge_x = 0,\n    nudge_y = -0.1, size = 3\n  ) +\n  geom_line(linewidth = 1)\n\np\n\n\n\n\n\n\n\nFigure 5: Comparison Diagram\n\n\n\n\n\n\n\nConnect Points in Chronological Order\nIn Figure 6, geom_segment() is used to connect points in chronological order, which results in a significant difference compared to the plot drawn with geom_line().\n\n# Sort by date\ndata_economics &lt;- data_economics[order(data_economics$date), ]\n\n# Use `geom_segment()` to draw line segments\np &lt;- ggplot(data_economics, aes(x = psavert, y = uempmed)) +\n  geom_point(shape = 17, size = 1.5, color = \"blue\") +\n  geom_text(\n    label = data_economics$date, nudge_x = 0,\n    nudge_y = -0.1, size = 5\n  ) +\n  geom_segment(\n    aes(\n      xend = c(tail(psavert, n = 24), NA),\n      yend = c(tail(uempmed, n = 24), NA)\n    ),\n    linewidth = 1\n  )\n\np\n\n\n\n\n\n\n\nFigure 6: Connect Points in Chronological Order\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nKey Parameters: geom_segment\nxend,yend：\nCorresponding to x and y, that is, drawing a line segment from (x, y) to (xend, yend). In the code, c(tail(psavert, n=24), NA) takes the last 24 values of the psavert column and appends an NA. This makes each point point to the next one to draw a line segment, with the final point pointing to NA, thus not drawing a line segment.\n\n\n\n\nDraw Arrows\nArrows are added to each line segment in Figure 7, making the chronological features in the connected scatter plot more apparent.\n\n# Sort by date\ndata_economics &lt;- data_economics[order(data_economics$date), ]\n\n# Use `geom_segment()` to draw line segments\np &lt;- ggplot(data_economics, aes(x = psavert, y = uempmed)) +\n  geom_point(shape = 17, size = 1.5, color = \"blue\") +\n  geom_text(\n    label = data_economics$date, nudge_x = 0,\n    nudge_y = -0.1, size = 5\n  ) +\n  geom_segment(\n    aes(\n      xend = c(tail(psavert, n = 24), NA),\n      yend = c(tail(uempmed, n = 24), NA)\n    ),\n    linewidth = 1, arrow = arrow(length = unit(0.5, \"cm\"))\n  )\n\np\n\n\n\n\n\n\n\nFigure 7: Draw Arrows",
    "crumbs": [
      "Correlation",
      "Connected Scatter"
    ]
  },
  {
    "objectID": "Correlation/ConnectedScatter.html#applications",
    "href": "Correlation/ConnectedScatter.html#applications",
    "title": "Connected Scatter",
    "section": "Applications",
    "text": "Applications\n\n\n\n\n\nThe plot shows the relative error curves corresponding to the model methods based on the unused, original, and improved methods. The average relative error of the component content model based on the improved method is superior to the models based on the unused and original methods.[1]\n\n\n\n\n\nComparison of sparse canonical correlation analysis with iCluster for cancer classification(SCCA-CC). Using a different number of genes preselected based on MAD, we compared the classification performance between SCCA-CC and iCluster. (A) represents the P-value associated with survival, calculated by the log-rank test; (B) represents the Silhouette score indicating clustering consistency; (C) assesses the algorithm’s runtime to evaluate computational complexity.[2]\n\n\n\n\n\n\nDistribution of the number of comorbidities among HCC patients. (B) Average number of comorbidities among HCC patients of different ages and genders. (C) Distribution of the number of comorbidities among male HCC patients in different age groups. (D) Distribution of the number of comorbidities among female HCC patients in different age groups.[3]",
    "crumbs": [
      "Correlation",
      "Connected Scatter"
    ]
  },
  {
    "objectID": "Correlation/ConnectedScatter.html#reference",
    "href": "Correlation/ConnectedScatter.html#reference",
    "title": "Connected Scatter",
    "section": "Reference",
    "text": "Reference\n[1] LU R, LIU H, YANG H, et al. Multi-Delay Identification of Rare Earth Extraction Process Based on Improved Time-Correlation Analysis[J]. Sensors (Basel), 2023,23(3).\n[2] QI L, WANG W, WU T, et al. Multi-Omics Data Fusion for Cancer Molecular Subtyping Using Sparse Canonical Correlation Analysis[J]. Front Genet, 2021,12: 607817.\n[3] MU X M, WANG W, JIANG Y Y, et al. Patterns of Comorbidity in Hepatocellular Carcinoma: A Network Perspective[J]. Int J Environ Res Public Health, 2020,17(9).",
    "crumbs": [
      "Correlation",
      "Connected Scatter"
    ]
  },
  {
    "objectID": "Correlation/Heatmap.html",
    "href": "Correlation/Heatmap.html",
    "title": "Heatmap",
    "section": "",
    "text": "A heatmap is a powerful visualization tool that represents matrix values through color gradients. It is widely used to illustrate gene expression differences across sample groups, variations in compound concentrations, and pairwise sample similarities. More broadly, any tabular dataset can be structured into a heatmap to enhance interpretability.",
    "crumbs": [
      "Correlation",
      "Heatmap"
    ]
  },
  {
    "objectID": "Correlation/Heatmap.html#example",
    "href": "Correlation/Heatmap.html#example",
    "title": "Heatmap",
    "section": "Example",
    "text": "Example\n\n\n\n\n\nIn this heatmap, rows correspond to car models (e.g., Mazda RX4, Merc 450SLC), while columns represent specific attributes (e.g., mpg for miles per gallon, hp for horsepower, wt for weight). Each cell encodes the attribute value for a given car, with higher values appearing closer to yellow.\nHierarchical clustering (dendrograms) on the top and left depict similarity relationships among rows and columns, facilitating pattern recognition and comparative analysis.\n\n\n\n\n\n\nNote\n\n\n\nNotes: The heatmap in this example provides limited insight due to the disparity in attribute scales. Attributes such as hp (horsepower) and disp (displacement) exhibit substantially higher values than others, distorting the color mapping and overshadowing lower-range features. To enhance interpretability, data normalization is required, as discussed in the following sections.",
    "crumbs": [
      "Correlation",
      "Heatmap"
    ]
  },
  {
    "objectID": "Correlation/Heatmap.html#setup",
    "href": "Correlation/Heatmap.html#setup",
    "title": "Heatmap",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming Language: R\nDependencies:readr, ggplot2, hrbrthemes, dplyr, tidyr, viridis, tibble, htmlwidgets, RColorBrewer, plotly, devtools, d3heatmap, heatmaply, lattice, ComplexHeatmap, pheatmap, circlize, gridExtra, cowplot\n\n\n# Installing necessary packages\nif (!requireNamespace(\"readr\", quietly = TRUE)) {\n  install.packages(\"readr\")\n}\nif (!requireNamespace(\"tidyverse\", quietly = TRUE)) {\n  install.packages(\"tidyverse\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"hrbrthemes\", quietly = TRUE)) {\n  install.packages(\"hrbrthemes\")\n}\nif (!requireNamespace(\"dplyr\", quietly = TRUE)) {\n  install.packages(\"dplyr\")\n}\nif (!requireNamespace(\"tidyr\", quietly = TRUE)) {\n  install.packages(\"tidyr\")\n}\nif (!requireNamespace(\"viridis\", quietly = TRUE)) {\n  install.packages(\"viridis\")\n}\nif (!requireNamespace(\"tibble\", quietly = TRUE)) {\n  install.packages(\"tibble\")\n}\nif (!requireNamespace(\"htmlwidgets\", quietly = TRUE)) {\n  install.packages(\"htmlwidgets\")\n}\nif (!requireNamespace(\"RColorBrewer\", quietly = TRUE)) {\n  install.packages(\"RColorBrewer\")\n}\nif (!requireNamespace(\"plotly\", quietly = TRUE)) {\n  install.packages(\"plotly\")\n}\nif (!requireNamespace(\"devtools\", quietly = TRUE)) {\n  install.packages(\"devtools\")\n}\nif (!requireNamespace(\"d3heatmap\", quietly = TRUE)) {\n  devtools::install_github(\"talgalili/d3heatmap\")\n}\nif (!requireNamespace(\"heatmaply\", quietly = TRUE)) {\n  install.packages(\"heatmaply\")\n}\nif (!requireNamespace(\"lattice\", quietly = TRUE)) {\n  install.packages(\"lattice\")\n}\nif (!requireNamespace(\"ComplexHeatmap\", quietly = TRUE)) {\n  devtools::install_github(\"jokergoo/ComplexHeatmap\")\n}\nif (!requireNamespace(\"pheatmap\", quietly = TRUE)) {\n  install.packages(\"pheatmap\")\n}\nif (!requireNamespace(\"circlize\", quietly = TRUE)) {\n  install.packages(\"circlize\")\n}\nif (!requireNamespace(\"gridExtra\", quietly = TRUE)) {\n  install.packages(\"gridExtra\")\n}\nif (!requireNamespace(\"cowplot\", quietly = TRUE)) {\n  install.packages(\"cowplot\")\n}\n\n# Loading the libraries\nlibrary(readr)\nlibrary(hrbrthemes)     # Additional themes for ggplot2\nlibrary(dplyr)          # Data manipulation functions\nlibrary(tidyr)          # Data tidying functions\nlibrary(viridis)        # Color palettes for better visualization\nlibrary(tibble)         # Tidy data frames\nlibrary(htmlwidgets)    # Interactive web visualizations\nlibrary(RColorBrewer)   # Color palettes for visualizations\nlibrary(plotly)         # Interactive plots\nlibrary(d3heatmap)      # D3.js-based interactive heatmaps\nlibrary(heatmaply)      # Interactive heatmaps with ggplot2\nlibrary(lattice)        # Trellis graphics for multivariate data\nlibrary(ComplexHeatmap) # Advanced heatmap functionalities\nlibrary(pheatmap)       # Pretty heatmaps with clustering support\nlibrary(circlize)       # Circular visualizations\nlibrary(gridExtra)      # Grid layout visualization\nlibrary(cowplot)\nlibrary(tidyverse)\nlibrary(ggplot2)        # Data visualization package",
    "crumbs": [
      "Correlation",
      "Heatmap"
    ]
  },
  {
    "objectID": "Correlation/Heatmap.html#data-preparation",
    "href": "Correlation/Heatmap.html#data-preparation",
    "title": "Heatmap",
    "section": "Data Preparation",
    "text": "Data Preparation\nThis section provides a brief tutorial using built-in R datasets (mtcars, volcano) and the TCGA-CHOL.methylation450.tsv dataset from UCSC Xena DATASETS. These datasets will be used to demonstrate heatmap visualization in R. This example demonstrates how to load and work with these datasets in R.\n\n# load built-in R datasets `mtcars`\ndata(\"mtcars\", package = \"datasets\")\nmtcars_matrix &lt;- as.matrix(mtcars)\n\n# Load and process methylation data\nraw_methylation_data &lt;- readr::read_tsv(\"https://bizard-1301043367.cos.ap-guangzhou.myqcloud.com/TCGA-CHOL.methylation450.tsv\")\n\n# Convert to matrix and clean up row/column names\nmethylation_matrix &lt;- raw_methylation_data[, -1] %&gt;%\n  as.data.frame() %&gt;%\n  `rownames&lt;-`(raw_methylation_data$Composite)\n\n# Tidy to long format\nmethylation_long &lt;- methylation_matrix %&gt;%\n  rownames_to_column(\"Composite\") %&gt;%\n  pivot_longer(cols = -Composite, names_to = \"Sample\", values_to = \"Methylation_Level\") %&gt;%\n  mutate(\n    Methylation_Level = as.numeric(Methylation_Level),\n    Composite = gsub(\"^cg0+\", \"cg\", Composite),\n    Sample = substr(Sample, 9, 12)\n  )\n\n# Standardize methylation values\nmethylation_long_standardized &lt;- methylation_long %&gt;%\n  group_by(Composite) %&gt;%\n  mutate(Standardized_Level = scale(Methylation_Level)[,1]) %&gt;%\n  ungroup()\n\n# Convert back to wide format matrix\nstandardized_methylation_matrix &lt;- methylation_long_standardized %&gt;%\n  select(Composite, Sample, Standardized_Level) %&gt;%\n  pivot_wider(names_from = Sample, values_from = Standardized_Level) %&gt;%\n  column_to_rownames(\"Composite\") %&gt;%\n  as.matrix()\n\n\n# Clean up raw methylation matrix (numerical version for raw heatmap)\nmethylation_matrix_num &lt;- methylation_matrix %&gt;%\n  mutate(across(everything(), ~ as.numeric(as.character(.)))) %&gt;%\n  `rownames&lt;-`(gsub(\"^cg0+\", \"cg\", rownames(.))) %&gt;%\n  { `colnames&lt;-`(., substr(colnames(.), 9, 12)) } %&gt;%\n  as.matrix()",
    "crumbs": [
      "Correlation",
      "Heatmap"
    ]
  },
  {
    "objectID": "Correlation/Heatmap.html#visualization",
    "href": "Correlation/Heatmap.html#visualization",
    "title": "Heatmap",
    "section": "Visualization",
    "text": "Visualization\n\n1. Basic R Heatmaps\n\n1.1 Basic Heatmap\nUsing the heatmap() function to construct a heatmap. Below is the simplest heatmap created in base R without additional parameters. The heatmap() function requires a matrix as input. If the data is in a data frame, it can be converted into a matrix using the as.matrix() function. A matrix can also be transposed using the t() function, which swaps rows and columns, effectively exchanging the X and Y axes.\n\nheatmap(mtcars_matrix)\n\n\n\n\n\n\n\nFigure 1: Basic Heatmap Basic R\n\n\n\n\n\nThis heatmap uses color variations to display numerical differences between performance variables of various cars in the mtcars dataset.\n\n\n\n\n\n\nTip\n\n\n\nThis heatmap is not particularly insightful because the variables hp and disp with relatively high values dominate the scale. Consequently, variations in other variables (e.g., mpg, wt) are hard to discern. Standardizing the data, as discussed in the next section, is necessary.\n\n\n\n\n1.2 Standardization\nThe scale parameter in the heatmap() function can be used to standardize the matrix. It can be applied to rows or columns. Here, columns are chosen since we aim to capture variations between columns.\n\nheatmap(mtcars_matrix, scale=\"column\")\n\n\n\n\n\n\n\nFigure 2: Standardization Basic R\n\n\n\n\n\nThis heatmap presents standardized values of performance variables in the mtcars dataset, making comparisons across variables on a common scale and improving the visual accuracy and interpretability.\n\n\n1.3 Clustering Dendrograms and Reordering\nIn the generated heatmap, the order of rows and columns differs from the original mtcars matrix because heatmap() applies clustering algorithms to reorder variables and observations. It calculates distances between pairs of rows and columns and sorts them based on similarities.\nAdditionally, dendrograms are displayed alongside the heatmap. These can be disabled using the Rowv and Colv parameters, as shown below.\n\nheatmap(mtcars_matrix, Colv = NA, Rowv = NA, scale=\"column\")\n\n\n\n\n\n\n\nFigure 3: Clustering Dendrograms and Reordering Basic R\n\n\n\n\n\nThis heatmap shows the standardized values of performance variables in the mtcars dataset, with the dendrograms removed to maintain the original order of rows and columns.\n\n\n1.4 Color Palettes\nHeatmaps can utilize different color palettes:\n\nBuilt-in R palettes: terrain.colors(), rainbow(), heat.colors(), topo.colors(), cm.colors()\nPalettes suggested by the RColorBrewer package\nCustom color palettes\n\n\n# Native color palette\nheatmap(mtcars_matrix, scale=\"column\", col = cm.colors(256))\nheatmap(mtcars_matrix, scale=\"column\", col = terrain.colors(256))\n\n# Using Rcolorbrewer\ncoul &lt;- colorRampPalette(brewer.pal(8, \"PiYG\"))(25)\nheatmap(mtcars_matrix, scale=\"column\", col = coul)\n\n# Custom color palette\nmy_palette &lt;- colorRampPalette(c(\"blue\", \"white\", \"red\"))(256)\nheatmap(mtcars_matrix, scale = \"column\", col = my_palette)\n\n\n\n\n\n\n\nFigure 4: Color Palettes Basic R\n\n\n\n\n\n\n\n\n\n\n\nFigure 5: Color Palettes Basic R\n\n\n\n\n\n\n\n\n\n\n\nFigure 6: Color Palettes Basic R\n\n\n\n\n\n\n\n\n\n\n\nFigure 7: Color Palettes Basic R\n\n\n\n\n\nThe following four heatmaps demonstrate the same data using different color palettes. These highlight the differences in performance variables of cars in the mtcars dataset, emphasizing how palette selection can influence visual interpretation and clarity.\n\nRColorBrewer\nThe display.brewer.all() function in the RColorBrewer package showcases all available color schemes.\n\npar(plt=c(0.1,1,0,1))\ndisplay.brewer.all()\n\n\n\n\n\n\n\nFigure 8: RColorBrewer Basic R\n\n\n\n\n\nThe image displays color scheme names on the left and their respective colors on the right. These schemes fall into three categories: - Sequential (seq): Gradual variations of a single color, suitable for continuous or ordered categorical variables. - Qualitative (qual): Highly distinct colors without hierarchical relationships, ideal for unordered categorical variables. - Diverging (div): Two colors transitioning in opposite directions, often used for continuous variables with meaningful midpoint values (e.g., temperature or odds ratios).\n\n\n\n1.5 Customizing Layout\nHeatmaps can be customized using standard parameters like main for the title and xlab/ylab for axis labels. Additionally, labRow/colRow allow changes to labels, while cexRow/cexCol adjust their sizes.\n\n# Custom titles and axis titles\np5 &lt;- heatmap(mtcars_matrix, Colv = NA, Rowv = NA, scale=\"column\", col = coul, xlab=\"variable\", main=\"heatmap\")\n\n# Custom labels\np6 &lt;- par(mar = c(5, 0, 4, 2))  # Adjust margins\nheatmap(mtcars_matrix, scale=\"column\", cexRow=.8, labRow=paste(\"new_\", rownames(mtcars_matrix),sep=\"\"), col= colorRampPalette(brewer.pal(8, \"Blues\"))(25))\n\n\n\n\n\n\n\nFigure 9: Customizing Layout Basic R\n\n\n\n\n\n\n\n\n\n\n\nFigure 10: Customizing Layout Basic R\n\n\n\n\n\nThe following two heatmaps illustrate standardized performance variables in the mtcars dataset with customized titles, axis labels, and row annotations, improving visual clarity and data communication.\n\n\n1.6 Heatmaps with Color Annotations\nHeatmaps are often used to compare observed structures against expected ones. TheRowSideColors parameter can add a color vector to the side of a heatmap to indicate expected groupings.\n\nmy_group &lt;- as.numeric(as.factor(substr(rownames(mtcars_matrix), 1 , 1))) # Group row labels by the first letter and convert to numeric\ncolSide &lt;- brewer.pal(9, \"Set1\")[my_group] # Use the Set1 color scheme from RColorBrewer to generate 9 colors, assigning each group a color\ncolMain &lt;- colorRampPalette(brewer.pal(8, \"Blues\"))(25)\nheatmap(mtcars_matrix, Colv = NA, Rowv = NA, scale=\"column\" , RowSideColors=colSide, col=colMain)\n\n\n\n\n\n\n\nFigure 11: Heatmaps with Color Annotations Basic R\n\n\n\n\n\nThe heatmap below groups rows by their first letters and assigns a distinct color to each group, helping observers quickly identify differences between groups and understand data patterns more intuitively.\n\n\n\n2. ggplot2 Heatmaps\nThe ggplot2 package uses the geom_tile() function to create heatmaps. Unlike heatmap(), it doesn’t natively support standardization, clustering, or dendrograms.\n\n2.1 Basic Heatmap\nA basic heatmap created with ggplot2 and geom_tile(). Standardization must be performed beforehand, as geom_tile() cannot directly standardize data.\nThe input data must be in a long-format data frame, where each row represents one observation with three key variables:\n\nx: Position on the X-axis\ny: Position on the Y-axis\nfill: Numerical values mapped to colors\n\np &lt;- ggplot(methylation_long_standardized, aes(x = Sample, y = Composite, fill= Standardized_Level)) + \n  geom_tile()\n\np \nThis heatmap demonstrates the distribution of standardized methylation levels (Standardized_Level) in the TCGA-CHOL dataset across samples (Sample) and composites (Composite), highlighting differences in methylation patterns.\n\n\n2.2 Color Palettes\nHeatmaps can have their color palettes customized, just like any ggplot2 chart. Below are three examples using different approaches:\n\nscale_fill_gradient(): Sets the extreme colors of the palette.\nscale_fill_distiller()): Uses ColorBrewer palettes.\nscale_fill_viridis() Implements the Viridis palette. Remember to set discrete=FALSE for continuous variables (ensuring smooth color gradients).\n\n# Extreme colors\np7 &lt;- ggplot(methylation_long_standardized, aes(x = Sample, y = Composite, fill= Standardized_Level)) + \n  geom_tile()+\n  scale_fill_gradient(low=\"white\", high=\"blue\") +\n  theme_ipsum() +\n  theme(axis.text.x = element_text(size = 10))\n\n# ColorBrewer color palette\np8 &lt;- ggplot(methylation_long_standardized, aes(x = Sample, y = Composite, fill= Standardized_Level)) + \n  geom_tile() +\n  scale_fill_distiller(palette = \"RdPu\") +\n  theme_ipsum() +\n  theme(axis.text.x = element_text(size = 10)) \n\n# Using Viridis\np9 &lt;- ggplot(methylation_long_standardized, aes(x = Sample, y = Composite, fill= Standardized_Level)) + \n  geom_tile()+\n  scale_fill_viridis(discrete=FALSE) +\n  theme_ipsum() + \n  theme(axis.text.x = element_text(size = 10))\n\nplot_grid(p7, p8, p9, ncol = 1)\nThese three heatmaps showcase identical data from the TCGA-CHOL dataset, illustrating the distribution of standardized methylation levels between various samples and composites. They emphasize the importance of palette choice for visual impact and data interpretation.\n\n\n2.3 Handling Wide-Format Data\nA common issue involves input in a wide matrix format, such as the volcano dataset. In such cases, the gather() function from the tidyr package can transform the data into a long format suitable for visualization with ggplot.\nvolcano %&gt;%\n  as_tibble() %&gt;%\n  rowid_to_column(var=\"X\") %&gt;%\n  gather(key=\"Y\", value=\"Z\", -1) %&gt;%\n  \n  mutate(Y=as.numeric(gsub(\"V\",\"\",Y))) %&gt;%\n\n  ggplot(aes(X, Y, fill= Z)) + \n    geom_tile() +\n    theme_ipsum() +\n    theme(legend.position=\"none\")\nThis heatmap represents the elevation values (Z) in the volcano dataset. The x-axis indicates row indices (X), the y-axis represents column indices (Y), and color fill depicts changes in elevation.\n\n\n2.4 Interactive Heatmaps\nOne of the significant advantages of creating heatmaps with ggplot2 is the ability to make them interactive using the plotly package. Simply wrap the plot in an object and pass it to the ggplotly() function.\nYou can also customize tooltips to provide richer information. Try hovering over a cell to view tooltips or zoom in on specific areas.\n# Create tooltips text\nmethylation_long_annotated &lt;- methylation_long_standardized %&gt;%\n  mutate(text = paste0(\"Composite: \",Composite, \"\\n\", \"Sample: \", Sample, \"\\n\", \"Standardized_Level: \", Standardized_Level))\n\np &lt;- ggplot(methylation_long_annotated, aes(Composite, Sample, fill = Standardized_Level, text = text)) + \n  geom_tile() +\n  theme_ipsum()\n\npp &lt;- ggplotly(p, tooltip=\"text\", width = 1200, height = 700)\n\npp\nThis interactive heatmap, built with the plotly package, allows dynamic exploration and in-depth data analysis, offering a more intuitive understanding and information retrieval process.\nAlternative packages like d3heatmap and heatmaply can also create interactive heatmaps.\n\nUsing the d3heatmap Package\n\nd3heatmap(standardized_methylation_matrix, scale = \"row\", dendrogram = \"none\")\n\n\n\n\n\n\n\nFigure 12: Using d3heatmap ggplot2\n\n\n\n\nThe d3heatmap package creates interactive heatmaps, enabling dynamic exploration and deeper insights into data.\n\n\nUsing the heatmaply Package\n\np &lt;- heatmaply(standardized_methylation_matrix,\n               dendrogram = \"none\",\n               xlab = \"\", ylab = \"\",\n               main = \"\",\n               scale = \"row\",\n               margins = c(50,0,30,30),\n               grid_color = \"white\",\n               grid_width = 0.00001,\n               titleX = FALSE,\n               hide_colorbar = TRUE,\n               branches_lwd = 0.1,\n               fontsize_row = 5, fontsize_col = 5,\n               labCol = colnames(standardized_methylation_matrix),\n               labRow = rownames(standardized_methylation_matrix),\n               heatmap_layers = theme(axis.line = element_blank())\n)\n\np\n\n\n\n\n\n\n\nFigure 13: Using heatmaply ggplot2\n\n\n\n\nSimilarly, the heatmaply package generates interactive heatmaps, allowing for dynamic analysis and enhanced comprehension of the data.\n\n\n\n\n3. lattice Heatmaps\nThe lattice package provides the levelplot() function for constructing heatmaps.\n\n3.1 Basic Usage of levelplot()\n\n# Convert the Sample and Composite columns from characters to factors\nmethylation_long_standardized$Sample &lt;- as.factor(methylation_long_standardized$Sample)\nmethylation_long_standardized$Composite &lt;- as.factor(methylation_long_standardized$Composite) \n\nlevelplot(Standardized_Level ~ Sample * Composite, data = methylation_long_standardized,\n          xlab = \"Sample\", ylab = \"Composite\",\n          main = \"Heatmap of Standardized TCGA-CHOL Methylation Levels\")\n\n\n\n\n\n\n\nFigure 14: Basic Heatmap lattice\n\n\n\n\n\nThis heatmap illustrates the distribution of standardized methylation levels between samples and composites in the TCGA-CHOL dataset, highlighting variations in methylation states across different samples.\n\n\n3.2 Wide-Format Matrix Input\nUnlike the earlier example with long-format data, this approach uses a square matrix.\n\n\n\n\n\n\nTip\n\n\n\nRows and columns are flipped in the heatmap.\n\n\n\nlevelplot(standardized_methylation_matrix)\n\n\n\n\n\n\n\nFigure 15: Wide-Format Matrix Input lattice\n\n\n\n\n\nThis heatmap demonstrates variations in methylation states across TCGA-CHOL samples using a wide-format matrix in levelplot().\n\n\n3.3 Flipping Axes\nR’s t() function transposes the input matrix, flipping the x and y coordinates. This makes the heatmap’s structure align precisely with the input matrix.\nSetting aspect = \"fill\" adjusts the aspect ratio automatically to reflect the matrix’s actual proportions.\n\n# Flip X and Y axes\nlevelplot( t(standardized_methylation_matrix),\n           col.regions=heat.colors(220),\n           aspect = \"fill\") # Automatically adjust aspect ratio\n\n\n\n\n\n\n\nFigure 16: Flipping Axes lattice\n\n\n\n\n\nThis heatmap reflects the same data as the original matrix with flipped coordinates for structural alignment.\n\n\n3.4 Color Palettes\nMultiple palette options are available: - Native R palettes: terrain.color()， rainbow()，heat.colors()， topo.colors()，cm.colors() - RColorBrewerpalettes - Viridispalettes: viridis, magma, inferno, plasma\n\n# Native color palette\np10 &lt;- levelplot(volcano, col.regions = terrain.colors(100)) # try cm.colors() or terrain.colors()\np10\n\n# Using Rcolorbrewer\ncoul &lt;- colorRampPalette(brewer.pal(8, \"PiYG\"))(25)\np11 &lt;- levelplot(volcano, col.regions = coul)\np11\n\n# Using Viridis\ncoul &lt;- viridis(100)\np12 &lt;- levelplot(volcano, col.regions = coul) \np12\n\n\n\n\n\n\n\nFigure 17: Color Palettes lattice\n\n\n\n\n\n\n\n\n\n\n\nFigure 18: Color Palettes lattice\n\n\n\n\n\n\n\n\n\n\n\nFigure 19: Color Palettes lattice\n\n\n\n\n\nUsing the volcano dataset, these heatmaps visualize elevation values and emphasize the impact of palette selection on interpretability.。\n\n\n\n4. pheatmap Heatmaps\nThe pheatmap package also builds heatmaps and supports data standardization.\n\n4.1 Basic Heatmap\npheatmap(methylation_matrix_num, scale = \"row\")\nThis heatmap visualizes differences in methylation patterns across samples in the TCGA-CHOL dataset using the pheatmap package.\n\n\n4.2 Adjusting Dendrograms\n\nclustering_distance_rows and clustering_distance_cols represent the distance measures used for row and column clustering. The default is “euclidean”, but it can also be set to “correlation”, meaning clustering will be performed based on the Pearson correlation method.\nclustering_method allows modification of the clustering method, which can be one of the following: ‘ward’, ‘ward.D’, ‘ward.D2’, ‘single’, ‘complete’, ‘average’, ‘mcquitty’, ‘median’, or ‘centroid’.\n\npheatmap(methylation_matrix_num, scale = \"row\", \n         clustering_distance_rows = \"euclidean\", clustering_distance_cols = \"euclidean\", # Distance measure used for clustering\n         clustering_method = \"complete\", # Clustering method\n         cluster_rows = T, cluster_cols = F, # Whether to display clustering trees\n         treeheight_row = 30, treeheight_col = 30) # Adjust clustering tree heights\nThis heatmap uses the pheatmap package to display the differences in methylation status across different samples in the TCGA-CHOL dataset, with clustering between samples turned off. The samples are arranged in their original order.\n\n\n4.3 Angle Adjustment of Labels and Segmentation Position Without Clustering\npheatmap(methylation_matrix_num, scale = \"row\", \n         clustering_distance_rows = \"euclidean\", clustering_distance_cols = \"euclidean\", # Distance measure used for clustering\n         clustering_method = \"complete\", # Clustering method\n         cluster_rows = T, cluster_cols = F, # Whether to display clustering trees\n         treeheight_row = 30, treeheight_col = 30, # Adjust clustering tree heights\n         angle_col = \"45\", # Change column label angle\n         gaps_col = c(3,6))  # Used only when column clustering is not performed, assuming samples are split into three groups at positions 3 and 6\nAdjusting the label angles in this heatmap can prevent overlapping labels and improve readability. Adjusting the segmentation position under non-clustered conditions can highlight differences between specific samples, facilitating intuitive analysis.\n\n\n4.4 Adding Values or Markers\npheatmap(methylation_matrix_num, scale = \"row\",\n         border_color = \"white\", # Change cell border color\n         display_numbers = TRUE, # Display corresponding values in heatmap cells\n         fontsize_number = 9, \n         number_color = \"grey30\",\n         number_format = \"%.1f\") # Keep one decimal place\nAdding values or markers to the heatmap provides additional context, helping observers quickly identify the specific methylation level of each sample or site, thereby enhancing the intuitiveness and accuracy of data interpretation.\n\nUsing Raw Data for Annotation\npheatmap(methylation_matrix_num, scale = \"row\",\n         border_color = \"white\",\n         display_numbers = matrix(ifelse(methylation_matrix_num &gt; .8 | methylation_matrix_num &lt; -.8, \"*\", \"\"), nrow = nrow(methylation_matrix_num)),\n         fontsize_number = 9, \n         number_color = \"grey30\")\nThis heatmap uses unnormalized data for annotation, making the results incomparable and potentially misleading observers regarding the differences between samples. Unnormalized values may obscure actual relative changes due to absolute value differences between samples, reducing the accuracy of data interpretation.\n\n\nUsing Normalized Data\npheatmap(standardized_methylation_matrix, scale = \"none\", # No need for further standardization\n         border_color = \"white\",\n         display_numbers = matrix(ifelse(standardized_methylation_matrix &gt; 1 | standardized_methylation_matrix &lt; -1, \"*\", \"\"), nrow = nrow(standardized_methylation_matrix)),\n         fontsize_number = 9, \n         number_color = \"grey30\") \nMarking the heatmap with normalized data can intuitively highlight significant values or features, making it easier for observers to recognize notable methylation state changes or outliers, thus providing guidance for subsequent analysis. This approach enhances the readability and interpretability of the data, helping users quickly extract key information.\n\n\n\n4.5 Color Palettes\nThe heatmap generated by the pheatmap package allows for various ways to modify the color palette: - Native R palettes:terrain.color()， rainbow()，heat.colors()， topo.colors()，cm.colors() - Custom palettes - RColorBrewer palettes\n# Native color palette\np13 &lt;- pheatmap(standardized_methylation_matrix, scale = \"none\",\n         border_color = \"white\",\n         color = colorRampPalette(c(\"navy\",\"white\",\"firebrick3\"))(100))\n\n# Custom color palette\np14 &lt;- pheatmap(standardized_methylation_matrix, scale = \"none\",\n         border_color = \"white\",\n         color = cm.colors(100))\n\n# Using Rcolorbrewer\ncoul &lt;- colorRampPalette(brewer.pal(8, \"PiYG\"))(25)\np15 &lt;- pheatmap(standardized_methylation_matrix, scale = \"none\",\n         border_color = \"white\",\n         color = coul)\nThese three heatmaps use different color palettes to showcase the differences in methylation states among samples in the TCGA-CHOL dataset, emphasizing the importance of palette choice for visual effects and data interpretation.\n\n\n\n5. complexheatmap Heatmaps\nThe ComplexHeatmap package, based on the grid package, uses an object-oriented approach to implement heatmaps and their components. It mainly includes the following classes:\n\nHeatmap：Draws a single heatmap (note the capitalization).\nHeatmapList：Draws a list of heatmaps.\nHeatmapAnnotation: Defines row and column annotations for the heatmap, which can either be part of the heatmap or independent of it.\n\nAdditionally, there are some internal classes:\n\nSingleAnnotation：: Defines a single row or column annotation, forming the list elements of HeatmapAnnotation.\nColorMapping: Defines the mapping of values to colors.\nAnnotationFunction: Used to customize annotation graphics.\n\n\n5.1 Basic Heatmap\n\nHeatmap(standardized_methylation_matrix)\n\n\n\n\n\n\n\nFigure 20: Basic Heatmap complexheatmap\n\n\n\n\n\nThis heatmap uses the ComplexHeatmap package to display the differences in methylation status across different samples in the TCGA-CHOL dataset.\n\n\n5.2 Color Palettes\nUsually, the matrices we plot consist of continuous data, so the color mapping function needs to take a vector as input and return a vector as output.\nThe author of this package recommends using the colorRamp2() function from another package, circlize, to set up color mapping. The colorRamp2() function takes two parameters: the first sets the breakpoint values for mapping, and the second specifies the corresponding color values.\nIn the example below, values between -2 and 2 are linearly interpolated to obtain corresponding colors, with values greater than 2 mapped to red and values less than -2 mapped to green.\n\ncol_fun &lt;- colorRamp2(c(-2, 0, 2), c(\"green\", \"white\", \"red\"))\nHeatmap(standardized_methylation_matrix, name = \"Standardized_Level\", col = col_fun)\n\n\n\n\n\n\n\nFigure 21: Color Palettes complexheatmap\n\n\n\n\n\nThis heatmap uses colorRamp2() to set up color mapping, showcasing the differences in methylation states among samples in the TCGA-CHOL dataset.\nAdditionally, using colorRamp2() ensures color comparability across multiple heatmaps. For example, in two heatmaps, the same color always corresponds to the same value:\n\np1 &lt;- Heatmap(standardized_methylation_matrix, name = \"Standardized_Level1\", col = col_fun)\np2 &lt;- Heatmap(standardized_methylation_matrix/2, name = \"Standardized_Level2\", col = col_fun)\np1 + p2 \n\n\n\n\n\n\n\nFigure 22: Using colorRamp2 complexheatmap\n\n\n\n\n\nThis heatmap uses colorRamp2() to enable color comparisons on the same scale, showcasing the differences in methylation states among samples in the TCGA-CHOL dataset.\nIf the matrix is continuous, you can simply provide a color vector, and the colors will be linearly interpolated. However, this method is not robust to outliers, as color mapping is determined by the minimum and maximum values in the matrix. Extreme outliers can cause less noticeable color variations within the normal range.\n\nHeatmap(standardized_methylation_matrix, name = \"Standardized_Level\", col = rev(cm.colors(10)), column_title = \"color vector for continuous matrix\")\n\n\n\n\n\n\n\nFigure 23: Using Color Vector complexheatmap\n\n\n\n\n\nThis heatmap demonstrates color mapping through linear interpolation, showing the differences in methylation states among samples in the TCGA-CHOL dataset.\nYou can also visualize NA values using the na_col parameter to specify the color for NA:\n\nstandardized_methylation_matrix_na &lt;- standardized_methylation_matrix\nna_index &lt;- sample(c(TRUE, FALSE), nrow(standardized_methylation_matrix)*ncol(standardized_methylation_matrix), replace = TRUE, prob = c(1, 9))\nstandardized_methylation_matrix_na[na_index] &lt;- NA\nHeatmap(standardized_methylation_matrix_na, name = \"matrix with na\", na_col = \"grey\", column_title = \"matrix with na\")\n\n\n\n\n\n\n\nFigure 24: Using na_col Parameter complexheatmap\n\n\n\n\n\nThis heatmap uses the na_col parameter to set the color of NA values to gray, showcasing the differences in methylation states among samples in the TCGA-CHOL dataset.\nBy default, linear interpolation of colors follows the LAB color space. Other color spaces, such as RGB, XYZ, and sRGB, are also available.\n\nf1 &lt;- colorRamp2(seq(min(standardized_methylation_matrix), max(standardized_methylation_matrix), length = 3), c(\"blue\", \"#EEEEEE\", \"red\"))\nf2 &lt;- colorRamp2(seq(min(standardized_methylation_matrix), max(standardized_methylation_matrix), length = 3), c(\"blue\", \"#EEEEEE\", \"red\"), space = \"RGB\")\n\np1 &lt;- Heatmap(standardized_methylation_matrix, name = \"Standardized_Level1\", col = f1, column_title = \"color space in LAB\")\np2 &lt;- Heatmap(standardized_methylation_matrix, name = \"Standardized_Level2\", col = f2, column_title = \"color space in RGB\")\np1 + p2\n\n\n\n\n\n\n\nFigure 25: Different Linear Interpolation complexheatmap\n\n\n\n\n\nThis heatmap illustrates the differences in methylation states among samples in the TCGA-CHOL dataset across various color spaces.\n\n\n5.3 Borders and Gridlines\nThe outermost border of the heatmap is set using the border parameter, while gridlines are configured with the rect_gp parameter.\nThe border parameter can be a logical or a color value. The rect_gp parameter requires a grid::gpar object.\n\nHeatmap(standardized_methylation_matrix, name = \"Standardized_Level\", border = \"black\", col = col_fun, rect_gp = gpar(col = \"white\", lwd = 2) )\n\n\n\n\n\n\n\nFigure 26: Borders and Gridlines complexheatmap\n\n\n\n\n\nThis heatmap modifies the borders and gridlines to show the differences in methylation states among samples in the TCGA-CHOL dataset.\n\n\n5.4 Clustering\nAdjusting the cluster_rows and cluster_columns parameters modifies the clustering of the heatmap.\n\np1 &lt;- Heatmap(standardized_methylation_matrix, cluster_rows = F, cluster_columns = F)\np1\n\n\n\n\n\n\n\nFigure 27: Clustering complexheatmap\n\n\n\n\n\nThis heatmap disables clustering, highlighting the differences in methylation states among samples in the TCGA-CHOL dataset.\n\n\n5.5 Annotation Bars and Multiple Heatmaps\nAnnotation bars are an important component of heatmaps. The ComplexHeatmap package provides flexible settings for annotation bars, which can be placed on any of the four sides of the heatmap (top, bottom, left, or right) using top_annotation, bottom_annotation, left_annotation, and right_annotation. All annotation bars are created using the HeatmapAnnotation() function (alternatively, the rowAnnotation() function can be used as a variant by specifying HeatmapAnnotation(..., which = \"row\")).\n\np1 &lt;- rowAnnotation(\n  \"Average Methylation\" = anno_barplot(\n    rowMeans(standardized_methylation_matrix), \n    gp = gpar(fill = \"blue\"), \n    width = unit(4, \"cm\"),\n    axis_param = list(at = pretty(rowMeans(standardized_methylation_matrix)), \n                      labels = format(pretty(rowMeans(standardized_methylation_matrix)), nsmall = 1, digits = 1))\n  )\n)\n\np2 &lt;- Heatmap(standardized_methylation_matrix, \n               name = \"Standardized Methylation Levels\", \n               col = f2, \n               row_km = 2,\n               column_names_gp = gpar(fontsize = 8))  # Based on row clustering\n\np1 + p2\n\n\n\n\n\n\n\nFigure 28: Multiple Heatmaps complexheatmap\n\n\n\n\n\nThis bar chart serves as an annotation bar for the heatmap, displaying the average methylation value for each site.\nOne of the standout features of the ComplexHeatmap package is its ability to plot multiple heatmaps simultaneously. The example below shows horizontally arranged heatmaps; vertically arranged heatmaps follow a similar principle. Horizontally aligned heatmaps require the same rows.\nThe combination of the heatmap and bar chart displays differences in methylation states among samples in the TCGA-CHOL dataset and the average methylation value for each site.",
    "crumbs": [
      "Correlation",
      "Heatmap"
    ]
  },
  {
    "objectID": "Correlation/Heatmap.html#applications",
    "href": "Correlation/Heatmap.html#applications",
    "title": "Heatmap",
    "section": "Applications",
    "text": "Applications\n\n1. Basic Heatmap\n\n\n\n\n\n\nYang, M., Liu, B. et al.(2013)\n\n\n\n\nFigure 29: Applications of Basic Heatmap\n\n\n\nFigure 2: Heatmaps of TEC matching from 52 healthy individuals. (a) Raw heatmap. (b) Binary heatmap. [1]\n\n\n2. Heatmaps with Color Annotations\n\n\n\n\n\n\nKey, M. (2012)\n\n\n\n\nFigure 30: Applications of Heatmaps with Color Annotations\n\n\n\nFigure 6: Grouping by labels. All heatmap functions support row and column annotations, but implementations vary. Heatmap (a) and heatmap.2 (b) functions support displaying only a single color bar. Heatmap.plus (c) supports displaying a matrix of colored bars. Heatmap_plus (d) can display data frames for binary variables. Although heatmap.2 and heatmap.plus can generate rectangular images, heatmap and heatmap_plus output square images. [2]\n\n\n3. Comparative Heatmaps\n\n\n\n\n\n\nHoggard, T. et al.(2016)\n\n\n\n\nFigure 31: Applications of Comparative Heatmaps\n\n\n\nFigure 6: Comparative heatmaps for miniARS experiments to resolve ambiguities in partitioning and replication functions associated with miniARS chromosomal fragments. Fragments depleted in the Cen-miniARS or Acen-miniARS experiments (e.g., miniARS317 fragments) compared to fragments enriched in these experiments. (B) Shared fragments in the miniARS datasets located in the given competition fitness deciles (i.e., fragments present in both Acen-miniARS and Cen-miniARS libraries) are represented in this heatmap. The heatmap is divided into 100 sections, each representing a combination of competition fitness deciles in the Acen-miniARS and Cen-miniARS experiments, as shown: Bottom-left: Fragments with low competition fitness in both Acen- and Cen-miniARS, indicating weak replication and partitioning abilities. (Partitioning “−”; Replication “−”). Contains 288 fragments representing 62 origins. Bottom-right: Fragments with high competition fitness in Acen-miniARS but low in Cen-miniARS, indicating strong partitioning but weak replication abilities (Partitioning “+”; Replication “−”). Contains 103 fragments representing 32 origins. Top-left: Fragments with low competition fitness in Acen-miniARS but high in Cen-miniARS, indicating weak partitioning but strong replication abilities (Partitioning “−”; Replication “+”). Contains 105 fragments representing 33 origins. (C) Combination analysis of the fragments from (B), aiming to define regions critical for maximizing partitioning abilities (1st and 4th pairs of heatmaps) versus replication abilities (2nd and 3rd pairs of heatmaps). (D) Similar to (B), but heatmaps include only miniARS fragments indicating ARS regions.\nAbbreviations: ARS: Autonomous Replicating Sequence, FKH: Forkhead, ORC: Origin Recognition Complex, RAP1: Rap1 protein binding site [3]",
    "crumbs": [
      "Correlation",
      "Heatmap"
    ]
  },
  {
    "objectID": "Correlation/Heatmap.html#reference",
    "href": "Correlation/Heatmap.html#reference",
    "title": "Heatmap",
    "section": "Reference",
    "text": "Reference\n\nYang, M., Liu, B., Zhao, M., Li, F., Wang, G., & Zhou, F. (2013). Normalizing electrocardiograms of both healthy persons and cardiovascular disease patients for biometric authentication. PLoS One, 8(8), e71523. https://doi.org/10.1371/journal.pone.0071523\n\nKey, M. (2012). A tutorial in displaying mass spectrometry-based proteomic data using heat maps. BMC Bioinformatics, 13(Suppl 16), S10. https://doi.org/10.1186/1471-2105-13-S16-S10\n\nHoggard, T., Liachko, I., Burt, C., Meikle, T., Jiang, K., Craciun, G., Dunham, M. J., & Fox, C. A. (2016). High throughput analyses of budding yeast ARSs reveal new DNA elements capable of conferring centromere-independent plasmid propagation. G3 (Bethesda), 6(4), 993–1012. https://doi.org/10.1534/g3.116.027904\n\nWickham, H. (2016). ggplot2: Elegant graphics for data analysis. Springer. https://r-graph-gallery.com/ggplot2-package.html\n\nRudis, B. (2020). hrbrthemes: Additional themes and theme components for ‘ggplot2’. https://cran.r-project.org/package=hrbrthemes\n\nWickham, H., François, R., Henry, L., & Müller, K. (2021). dplyr: A grammar of data manipulation. https://cran.r-project.org/package=dplyr\n\nWickham, H., & Henry, L. (2021). tidyr: Tidy messy data. https://cran.r-project.org/package=tidyr\n\nGarnier, S. (2018). viridis: Default color maps from ‘matplotlib’. https://cran.r-project.org/package=viridis\n\nHenry, L. (2022). tibble: Simple data frames. https://cran.r-project.org/package=tibble\n\nUrbanek, S. (2021). htmlwidgets: HTML widgets for R. https://cran.r-project.org/package=htmlwidgets\n\nNeuwirth, E. (2014). RColorBrewer: ColorBrewer palettes. https://cran.r-project.org/package=RColorBrewer\n\nWinston, L., & Hsu, T. (2021). plotly: Create interactive web graphics via ‘plotly.js’. https://cran.r-project.org/package=plotly\n\nD3heatmap: Interactive heatmaps using ‘d3.js’. https://cran.r-project.org/package=d3heatmap\n\nGang, C. (2020). heatmaply: Interactive heat maps for R. https://cran.r-project.org/package=heatmaply\n\nBecker, R. A., Wilks, A. R., & Brownrigg, R. (2021). lattice: The lattice package for R. https://cran.r-project.org/package=lattice\n\nAuguie, B. (2017). gridExtra: Miscellaneous Functions for “Grid” Graphics. https://cran.r-project.org/package=gridExtra",
    "crumbs": [
      "Correlation",
      "Heatmap"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Bizard",
    "section": "",
    "text": "Data visualization is a critical tool in biomedical research, enabling intuitive interpretation of complex datasets to advance scientific discovery and inform clinical decisions. The R programming language, with its powerful statistical capabilities and extensive package ecosystem, has become a cornerstone for creating high-quality visualizations. However, the vast and ever-evolving landscape of R plotting packages often poses challenges for researchers, who must select appropriate methods and customize visualizations to meet specific research needs. This process demands advanced coding expertise, interdisciplinary collaboration, and significant time investment, which can hinder progress and impact the accuracy of experimental outcomes.\nTo address these challenges, we developed Bizard, a comprehensive, community-driven platform that integrates a curated repository of visualization codes, advanced tutorials, and collaborative forums. By streamlining access to resources and promoting knowledge exchange, Bizard aims to enhance biomedical researchers’ data analysis capabilities and facilitate the clinical translation of research findings.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "Bizard",
    "section": "",
    "text": "Data visualization is a critical tool in biomedical research, enabling intuitive interpretation of complex datasets to advance scientific discovery and inform clinical decisions. The R programming language, with its powerful statistical capabilities and extensive package ecosystem, has become a cornerstone for creating high-quality visualizations. However, the vast and ever-evolving landscape of R plotting packages often poses challenges for researchers, who must select appropriate methods and customize visualizations to meet specific research needs. This process demands advanced coding expertise, interdisciplinary collaboration, and significant time investment, which can hinder progress and impact the accuracy of experimental outcomes.\nTo address these challenges, we developed Bizard, a comprehensive, community-driven platform that integrates a curated repository of visualization codes, advanced tutorials, and collaborative forums. By streamlining access to resources and promoting knowledge exchange, Bizard aims to enhance biomedical researchers’ data analysis capabilities and facilitate the clinical translation of research findings.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#what-is-bizard",
    "href": "index.html#what-is-bizard",
    "title": "Bizard",
    "section": "What is Bizard?",
    "text": "What is Bizard?\nBizard brings together powerful visualization tools, curated code, and collaborative features, enabling researchers to streamline data analysis and present their findings in a clear and impactful way.\n\nComprehensive Visualization Repository: Bizard consolidates visualization codes from diverse sources, including conventional graphgallery charts and innovative contributions from global experts, providing a state-of-the-art toolkit for biomedical research.\nVersatile Chart Options: The repository features R code implementations for a wide range of visualizations—variable distributions, correlation analyses, ranking plots, and interactive charts—meeting diverse data analysis needs.\nReal-World Applications: Leveraging both native R datasets and authentic biomedical data examples, Bizard enables intuitive understanding and application of visualization techniques in real-world research contexts, accelerating clinical translation.\nTailored for Biomedical Data: Includes preprocessing algorithms, annotated plotting codes, and specialized methodologies to accommodate the complexities of biomedical datasets, making advanced visualization accessible even to users with limited programming expertise.\nIntegrated Statistical Analysis: Combines statistical analysis functions with visualization modules, ensuring rigorous, visually compelling outputs that bolster research reliability and advance evidence-based medicine.\nCollaborative and Open Innovation: Actively invites contributions from biomedical experts to refine features and address evolving data visualization challenges through collective expertise.\nMulti-Platform Accessibility: Offers resources through an open-source GitHub repository with interactive forums and a WeChat official account for tutorials and updates, fostering knowledge sharing and collaboration.\nDriving Research Excellence: Empowers researchers to elevate their data visualization skills, improve methodological standards, and advance precision medicine and personalized therapies.\nFuture Vision: Committed to expanding international collaborations and delivering innovative, refined solutions to address the growing complexity of biomedical data visualization and analysis.\n\n\n\n\n\n\n\nNote\n\n\n\nIf you find this useful or have suggestions for improvement, please let us know by leaving your comments in the GitHub Discussions💬 at the bottom of any page.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "Template/visualization_guidance_EN.html",
    "href": "Template/visualization_guidance_EN.html",
    "title": "Contribution_guidance",
    "section": "",
    "text": "Example guide for a visualization tutorial"
  },
  {
    "objectID": "Template/visualization_guidance_EN.html#example",
    "href": "Template/visualization_guidance_EN.html#example",
    "title": "Contribution_guidance",
    "section": "Example",
    "text": "Example\n【Figure. Example Plot】\nShow the title/diagram notes for the above example diagrams and interpret the meaning of the example diagram xy axes or other identifiers."
  },
  {
    "objectID": "Template/visualization_guidance_EN.html#setup",
    "href": "Template/visualization_guidance_EN.html#setup",
    "title": "Contribution_guidance",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming Language: R\nDependencies: (Populate R packages or other resources that the visualization tutorial depends on)\n\n\n#Example Code-----\n# Installing necessary packages\nif (!requireNamespace(\"readr\", quietly = TRUE)) {\n  install.packages(\"readr\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"tidyverse\", quietly = TRUE)) {\n  install.packages(\"tidyverse\")\n}\n\n# Loading the libraries\nlibrary(readr) \nlibrary(ggplot2) \nlibrary(tidyverse)"
  },
  {
    "objectID": "Template/visualization_guidance_EN.html#data-preparation",
    "href": "Template/visualization_guidance_EN.html#data-preparation",
    "title": "Contribution_guidance",
    "section": "Data Preparation",
    "text": "Data Preparation\n\nR built-in datasets (e.g. iris, penguins) and biomedical related datasets (e.g. histology data, survival information, clinical indicators, etc.) need to be included.\nBiomedical related datasets need to be uploaded to the Bizard Tencent Cloud in order to get a link to the insertion tutorial, data from public datasets is best, and if provided by an individual/organization needs to ensure that the data can be made public. The size of the dataset should be less than 1MB.\n\n\n# Data reading and processing codes can be freely chosen to be displayed or not------\n# Read the TSV data\ndata &lt;- readr::read_tsv(\"https://bizard-1301043367.cos.ap-guangzhou.myqcloud.com/TCGA-LIHC.htseq_counts.tsv.gz\")\n\n# Filter and reshape data for the first gene TSPAN6 (Ensembl ID: ENSG00000000003.13)\ndata1 &lt;- data %&gt;%\n  filter(Ensembl_ID == \"ENSG00000000003.13\") %&gt;%\n  pivot_longer(\n    cols = -Ensembl_ID, \n    names_to = \"sample\", \n    values_to = \"expression\"\n  ) %&gt;%\n  mutate(var = \"var1\")  # Add a column to differentiate the variables\n\n# Filter and reshape data for the second gene SCYL3 (Ensembl ID: ENSG00000000457.12)\ndata2 &lt;- data %&gt;%\n  filter(Ensembl_ID == \"ENSG00000000457.12\") %&gt;%\n  pivot_longer(\n    cols = -Ensembl_ID, \n    names_to = \"sample\", \n    values_to = \"expression\"\n  ) %&gt;%\n  mutate(var = \"var2\")  # Add a column to differentiate the variables\n\n# Combine the two datasets\ndata12 &lt;- bind_rows(data1, data2)\n\n# View the final combined dataset\nhead(data12)\n\n# A tibble: 0 × 4\n# ℹ 4 variables: Ensembl_ID &lt;chr&gt;, sample &lt;chr&gt;, expression &lt;chr&gt;, var &lt;chr&gt;"
  },
  {
    "objectID": "Template/visualization_guidance_EN.html#visualization",
    "href": "Template/visualization_guidance_EN.html#visualization",
    "title": "Contribution_guidance",
    "section": "Visualization",
    "text": "Visualization\n\n1. Basic Plot\nUse the base functions to draw graphical annotations and profiles of images. e.g.@fig-BasicHist illustrates the distribution of expression levels for the TSPAN6 gene across different samples.\n\n# Basic Drawing Code Example-----\n#| label: fig-BasicHist\n#| fig-cap: \"Basic Histogram\"\n#| out.width: \"95%\"\n#| warning: false\n\n# Basic Histogram\np1 &lt;- ggplot(data1, aes(x = expression)) +\n  geom_histogram() + \n  labs(x = \"Gene Expression\", y = \"Count\")\n\np1\n\n\n\n\n\n\n\n\nSupplement the base code with important parameters that can be extended and provide the corresponding plotting code.\n\n\n\n\n\n\nTip\n\n\n\nKey Parameters: binwidth / bins\nThe binwidth or bins parameter determines how much data each bin will contain. Modifying these values can significantly affect the appearance of the histogram and the information conveyed.\n\n\n\n# Code example (with supplementary parameter `bins`)-----\n#| label: fig-bins\n#| fig-cap: \"Key Parameters: `binwidth` / `bins`\"\n#| fig.width: 8\n#| fig.heright: 2\n#| out.width: \"95%\"\n#| warning: false\n\np2_1 &lt;- ggplot(data1, aes(x = expression)) +\n  geom_histogram(bins = 30, fill = \"skyblue\", color = \"white\") +\n  ggtitle(\"Bins = 30\") + \n  labs(x = \"Gene Expression\", y = \"Count\")\n\np2_2 &lt;- ggplot(data1, aes(x = expression)) +\n  geom_histogram(bins = 50, fill = \"skyblue\", color = \"white\") +\n  ggtitle(\"Bins = 50\") + \n  labs(x = \"Gene Expression\", y = \"Count\")\n\ncowplot::plot_grid(p2_1, p2_2)\n\n\n\n\n\n\n\n\n\n\n2. More Advanced Plots (e.g.Histogram with Density Curve)\nIntroduces complex types of visualization, such as using functions that contain more custom parameters, using multiple base chart overlays, adding statistical tests, and more.\ne.g. The density curve provides a smooth representation of the data distribution. Unlike the histogram, which depends on the number of bins, the density curve uses kernel density estimation (KDE) to smooth the distribution. This allows a clearer understanding of the overall trend and shape of the data.\n\n# Advanced Drawing Code Example-----\n#| label: fig-DensityCurve\n#| fig-cap: \"Histogram with Density Curve\"\n#| out.width: \"95%\"\n#| warning: false\n\np1 &lt;- ggplot(data1, aes(x = expression)) +\n  geom_histogram(aes(y = after_stat(density)), bins = 30, fill = \"skyblue\", color = \"white\") +\n  geom_density(alpha = 0.2, fill = \"#FF6666\") + \n  labs(x = \"Gene Expression\", y = \"Density\")\n\np1\n\n\n\n\n\n\n\n\nOptionally you can add a detailed description of the parameters using callout-tip if you need it."
  },
  {
    "objectID": "Template/visualization_guidance_EN.html#applications",
    "href": "Template/visualization_guidance_EN.html#applications",
    "title": "Contribution_guidance",
    "section": "Applications",
    "text": "Applications\nDemonstrate the practical application of visualization charts in the biomedical literature, with the option to show basic/advanced charts separately if they are widely used in various types of biomedical literature.\ne.g.\n\n1. Applications of Basic Histogram\n\n\n\n\n\n\nFigure 1: Applications of Basic Histogram\n\n\n\nFigure 9 shows the differences between the relative frequencies of human X and human Y chromosome’s histograms for n = 6. [1]\nAdditional image figure notes and source documentation information are required. A code reproduction of the figure may be added at the author’s discretion."
  },
  {
    "objectID": "Template/visualization_guidance_EN.html#reference",
    "href": "Template/visualization_guidance_EN.html#reference",
    "title": "Contribution_guidance",
    "section": "Reference",
    "text": "Reference\ne.g. 1. Costa, A. M., Machado, J. T., & Quelhas, M. D. (2011). Histogram-based DNA analysis for the visualization of chromosome, genome, and species information. Bioinformatics, 27(9), 1207–1214. https://doi.org/10.1093/bioinformatics/btr131"
  },
  {
    "objectID": "Template/visualization_guidance_EN.html#contributors",
    "href": "Template/visualization_guidance_EN.html#contributors",
    "title": "Contribution_guidance",
    "section": "Contributors",
    "text": "Contributors\n\nEditor: Yours name.\nReviewers: Reviewers name."
  },
  {
    "objectID": "Ranking/UpsetPlot.html",
    "href": "Ranking/UpsetPlot.html",
    "title": "Upset Plot",
    "section": "",
    "text": "The Upset diagram is similar to the Venn diagram, mainly showing the number of elements in the intersection of different sets. However, when the number of sets in the Venn diagram reaches 5, the readability begins to drop sharply. The Upset diagram can well solve the problem of poor readability of the Venn diagram and can also provide additional statistical information on element properties.",
    "crumbs": [
      "Ranking",
      "UpsetPlot"
    ]
  },
  {
    "objectID": "Ranking/UpsetPlot.html#example",
    "href": "Ranking/UpsetPlot.html#example",
    "title": "Upset Plot",
    "section": "Example",
    "text": "Example\n\n\n\n\n\nThis is the basic style of the Upset graph. The image is divided into three parts. The top part is the histogram of the number of elements in the intersection between different sets, and the left part is the histogram of the number of elements in different sets. The matrix part in the middle is the intersection between the sets, as shown below:\n\n\n\n\n\nWhen an element of an intersection exists in a certain set, it is marked with a black dot, otherwise it is marked with a white dot. For example, if the green part is only marked in black in the B set, it means that the column is an element that only exists in B, and so on.",
    "crumbs": [
      "Ranking",
      "UpsetPlot"
    ]
  },
  {
    "objectID": "Ranking/UpsetPlot.html#setup",
    "href": "Ranking/UpsetPlot.html#setup",
    "title": "Upset Plot",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: UpSetR; ggupset\n\n\n# Installing necessary packages\nif (!requireNamespace(\"UpSetR\", quietly = TRUE)) {\n  install.packages(\"UpSetR\")\n}\nif (!requireNamespace(\"ggupset\", quietly = TRUE)) {\n  install.packages(\"ggupset\")\n}\n\n# Load packages\nlibrary(UpSetR)\nlibrary(ggupset)",
    "crumbs": [
      "Ranking",
      "UpsetPlot"
    ]
  },
  {
    "objectID": "Ranking/UpsetPlot.html#data-preparation",
    "href": "Ranking/UpsetPlot.html#data-preparation",
    "title": "Upset Plot",
    "section": "Data Preparation",
    "text": "Data Preparation\n\nThe movies dataset was created by the GroupLens lab and Bilal Alsallakh; the mutations dataset was originally created by the TCGA consortium and represents the mutational landscape of 100 common gene mutations in 284 glioblastoma multiforme tumors.\nBoth datasets are included in the UpSetR package\n\n\n# UpSetR can accept three formats of data. The first is a list with named vectors (see listInput variable), the second is an expression vector (see expressionInput variable), and the third is a data frame consisting of 0,1 (see movies and mutations variables)\n# Reading CSV data\n# The list format requires each vector in the list to be a set. UpSetR requires each set to be named, and the elements in the vector are members of the corresponding set. When using the upset function to draw, you need to use the fromList function to convert the list data format.\nlistInput &lt;- list(one = c(1, 2, 3, 5, 7, 8, 11, 12, 13), two = c(1, 2, 4, 5, 10), three = c(1, 5, 6, 7, 8, 9, 10, 12, 13))\n# The expression format accepts a vector of expressions. The elements of the expression vector are the names of the sets in the intersection (separated by &), and the numeric elements in the intersection. When using the upset function to draw, you need to use the fromExpression function to convert the list data format.\nexpressionInput &lt;- c(one = 2, two = 1, three = 2, `one&two` = 1, `one&three` = 4, `two&three` = 1, `one&two&three` = 2)\n\n# In the data frame format, each column is a set and each row is an element. The data frame is required to consist of 0 and 1, which respectively indicate whether the element exists in the set. When a column has a value other than 0 or 1, the column is considered to be an attribute of the element.\nmovies &lt;- read.csv( system.file(\"extdata\", \"movies.csv\", package = \"UpSetR\"), header=T, sep=\";\" )\nmutations &lt;- read.csv( system.file(\"extdata\", \"mutations.csv\", package = \"UpSetR\"), header=T, sep = \",\")",
    "crumbs": [
      "Ranking",
      "UpsetPlot"
    ]
  },
  {
    "objectID": "Ranking/UpsetPlot.html#visualization",
    "href": "Ranking/UpsetPlot.html#visualization",
    "title": "Upset Plot",
    "section": "Visualization",
    "text": "Visualization\n\n1. Basic Upset Plot\nThis basic Upset graph shows the number of movies that contain different elements.\n\n# Use the above three data types to draw the Upset graph\nupset(fromList(listInput))\nupset(fromExpression(expressionInput))\nupset(movies)\n\n\n\n\n\n\n\nFigure 1: Basic Upset Plot\n\n\n\n\n\n\n\n\n\n\n\nFigure 2: Basic Upset Plot\n\n\n\n\n\n\n\n\n\n\n\nFigure 3: Basic Upset Plot\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nKey Parameters: nsets\nThe nsets parameter determines how many sets are used to draw the UpSet graph, and defaults to 5 when not set.\n\n\n\n# Set nset to 6 and use the mutations dataset\nupset(mutations, nsets = 6)\n\n\n\n\n\n\n\nFigure 4: Key Parameters: nsets\n\n\n\n\n\nThis graph uses the six most mutated genes to show the number of glioblastoma multiforme tumors that contain different mutations.\n\n\n\n\n\n\nTip\n\n\n\nKey Parameters: order.by\nThe order.by parameter determines the order in which the intersections in the UpSet graph are sorted. If not set, the order is based on the number of sets intersected. If set to “degree”, the order is based on the number of elements in the intersection. If set to “freq”, the order is based on the size of the intersection.\n\n\n\n# Three different order.by settings, using the mutations dataset\nupset(mutations)\nupset(mutations, order.by = \"degree\")\nupset(mutations, order.by = \"freq\")\n\n\n\n\n\n\n\nFigure 5: Key Parameters: order.by\n\n\n\n\n\n\n\n\n\n\n\nFigure 6: Key Parameters: order.by\n\n\n\n\n\n\n\n\n\n\n\nFigure 7: Key Parameters: order.by\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nKey Parameters: sets\nThe sets parameter can be used to specify the sets to be plotted. If not set, the nsets sets with the most elements are taken. In addition, the keep.order parameter can keep the order of the set histogram consistent with the order of the sets input.\n\n\n\n# Specify \"TTN\", \"NF1\", \"FLG\", \"KEL\" as the target set, and keep the order of the set bar graph consistent with the sets parameter\nupset(mutations, sets = c(\"TTN\",\"NF1\",\"FLG\",\"KEL\"), keep.order = T)\n\n\n\n\n\n\n\nFigure 8: Key Parameters: sets\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nKey Parameters: empty.intersections\nThe empty.intersections parameter is set to “NULL” by default, in which case empty intersections are not displayed. When set to any parameter, empty intersections are displayed.\n\n\n\n# Show Empty Intersections\nupset(mutations, sets = c(\"TTN\",\"NF1\",\"FLG\",\"KEL\"), keep.order = T, empty.intersections=T)\n\n\n\n\n\n\n\nFigure 9: Key Parameters: empty.intersections\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nKey Parameters: decreasing\nThe decreasing parameter setting can reverse the direction of order.by or keep.order. When there are multiple sorting directions to control, enter a vector with multiple elements, such as “c(T,F)”\n\n\n\n# Reverse sort direction\nupset(mutations, sets = c(\"TTN\",\"NF1\",\"FLG\",\"KEL\"), keep.order = T, decreasing = c(T, T))\n\n\n\n\n\n\n\nFigure 10: Key Parameters: decreasing\n\n\n\n\n\n\n\n2. Personalized Upset Plot\nIn terms of image ratio, the default value of the mb.ratio parameter is “c(0.7, 0.3)”, which can specify the ratio between the intersection bar graph and the intersection matrix dot graph. You need to input a vector containing two elements, which represent the ratio of the height of the bar graph and the height of the matrix dot graph to the height of the whole image.\n\nupset(mutations, mb.ratio=c(0.5,0.5))\n\n\n\n\n\n\n\nFigure 11: Key Parameters: mb.ratio\n\n\n\n\n\nIn terms of image color, the UpSetR package provides multiple parameters to set the color of different parts of the Upset image:\n\nupset(mutations,\n      shade.color = \"#4C4C4C\", # Color of the intersection matrix point shadow\n      matrix.color = \"#067522\", # Colors of points and lines in the matrix\n      main.bar.color = \"#3E7B92\", # Color of the histogram of the number of intersection elements\n      sets.bar.color = \"#C9AE42\" # Color of the collection quantity bar chart\n)\n\n\n\n\n\n\n\nFigure 12: Upset plot color setting\n\n\n\n\n\nIf you want to highlight certain intersections, you need to use the queries parameter provided by the UpSetR package. The queries parameter requires an input list list, which contains at least one sub-list. Each sub-list needs to contain the following fields: query, params, color, active, and query.name.\n\nquery can be entered as intersects or elements, the effect is the same\nparams specifies a subset, the input is also a list, the elements in the list can be the names of the sets, and multiple elements represent the intersection of these elements.\ncolor is the color that will be represented on the plot. If no color is provided, a color will be selected from the UpSetR default palette.\nactive determines how the query will be represented on the plot. If active is TRUE, the cross-size bars will be overlaid by the bars representing the query. If active is FALSE, a jitter point will be placed on the intersecting size bars.\nquery.name is the name of the current highlighted set, and the query.legend parameter needs to be used to specify the legend position. query.legend can be entered as “top” or “bottom”\n\n\nupset(mutations, sets = c(\"TTN\",\"NF1\",\"FLG\",\"KEL\"), keep.order = T,\n      query.legend = \"top\", \n      queries = list(list(query = intersects, params = list(\"TTN\"), active = T, query.name = \"NAME\"),\n                     list(query = elements, params = list(\"TTN\",\"NF1\"))))\n\n\n\n\n\n\n\nFigure 13: Key Parameters: queries\n\n\n\n\n\nThere are also multiple parameters that can be adjusted for image labels and fonts:\n\nupset(mutations,\n      number.angles = 30, # The tilt angle of the numbers above the intersection bar graph\n      point.size = 2, # The size of the points in the matrix\n      line.size = 1, # Size of the lines in the matrix\n      sets.x.label = \"NAME1\", # Axis labels for a collection of bar charts\n      mainbar.y.label = \"NAME2\", # Axis labels for intersection bar chart\n      text.scale = c(1.3, 1.3, 1, 1, 1.2,1)) # Text size settings, corresponding to the axis labels of the intersection bar chart, the numbers of the intersection bar chart, the axis labels of the set bar chart, the numbers of the set bar chart, the name of the set, and the numbers above the intersection bar chart\n\n\n\n\n\n\n\nFigure 14: Upset plot labels and fonts\n\n\n\n\n\n\n\n3. Advanced Upset Plot\nSometimes you need to display some properties of the elements in the collection, such as showing the distribution of movies released in 1995 in different intersections. You also need to use the queries parameter. Enter a column name that records the release years of different movies and 1995 in the params field to highlight the distribution of movies released in 1995.\n\nupset(movies, sets = c(\"Action\", \"Adventure\", \"Children\", \"War\", \"Noir\"),\n      queries = list(list(query = elements, params = list(\"ReleaseDate\",1995), active = T)))\n\n\n\n\n\n\n\nFigure 15: params field\n\n\n\n\n\nIf it is a compound condition, such as highlighting only action movies released in 1995, you can introduce an additional expression parameter to further restrict the query condition.\n\nupset(movies, sets = c(\"Action\", \"Adventure\", \"Children\", \"War\", \"Noir\"),\n      queries = list(list(query = intersects, params = list(\"Action\"), active = T)),\n      expression = \"ReleaseDate == 1995\")\n\n\n\n\n\n\n\nFigure 16: Key Parameters: expression\n\n\n\n\n\nThe above method is limited to discrete variables, but the attributes of elements may also include continuous variables. For continuous variables, it is recommended to use custom functions for querying. The following code can be used to highlight elements whose Watches attribute is greater than 100:\n\nMyfunc &lt;- function(row, num) {\n  data &lt;- row[\"Watches\"] &gt; num\n}\nupset(movies, sets = c(\"Action\", \"Adventure\", \"Children\", \"War\", \"Noir\"),\n      queries = list(list(query = Myfunc, params = list(100), active = T)))\n\n\n\n\n\n\n\nFigure 17: Upset plot for continuous variables\n\n\n\n\n\nUpsetR also supports drawing other types of images at the same time, including histograms, scatter plots, and density plots. The first two need to be drawn using the attribute.plots parameter, and the boxplot needs to be drawn using the boxplot.summary parameter. The boxplot is not compatible with the other three types of images. attribute.plots contains the following sub-parameters:\n\ngridrows: Specifies the extent of the plot window to make room for attribute plots. UpSetR plots are based on a 100x100 grid layout. For example, if gridrows is set to 50, the new grid layout will become 150x100, with 1/3 of the area used to place attribute plots.\nplots: Receives a list of parameters including plot, x, y (if applicable), and queries.\n\nplot: is a function that returns a ggplot object, which can be input to histogram or scatter_plot.\nx: defines the x-axis aesthetic mapping used in ggplot (input as a string).\ny: defines the y-axis aesthetic mapping used in ggplot (input as a string).\nqueries: controls whether to overlay query results on the property map. If TRUE, the property map will be overlaid with query data; if FALSE, query results will not be shown in the property map.\n\nncols: specifies how the attribute graph is arranged in the space reserved by gridrows. For example:\n\nIf two attribute graphs are input and ncols=1, the two graphs are arranged one above the other.\nIf two attribute graphs are input and ncols=2, the two graphs are displayed side by side.\n\n\n\nupset(movies, sets = c(\"Action\", \"Adventure\", \"Children\", \"War\", \"Noir\"),\n      queries = list(list(query = intersects, params = list(\"War\"), active = T),\n                     list(query = elements, params = list(\"Noir\"))),\n      attribute.plots=list(gridrows = 100, \n                           ncols = 1,\n                           plots = list(list(plot=histogram, \n                                             x=\"AvgRating\",\n                                             queries=T),\n                                        list(plot = scatter_plot, \n                                             y = \"AvgRating\", \n                                             x = \"Watches\",\n                                             queries = T)\n                                        )\n                           )\n      )\n\n\n\n\n\n\n\nFigure 18: Key Parameters: attribute.plots\n\n\n\n\n\nboxplot.summary is relatively simple, just specify the column name to which the element belongs:\n\nupset(movies, sets = c(\"Action\", \"Adventure\", \"Children\", \"War\", \"Noir\"),\n      queries = list(list(query = intersects, params = list(\"War\"), active = T),\n                     list(query = elements, params = list(\"Noir\"))),\n      boxplot.summary = c(\"AvgRating\", \"ReleaseDate\"))\n\n\n\n\n\n\n\nFigure 19: Key Parameters: boxplot.summary\n\n\n\n\n\n\n\n4. Biological Data Example\nThe dataset uses the df_complex_conditions dataset in the ggupset package\n\n# Formatting\ndf &lt;- df_complex_conditions\ndf$\"T8\" &lt;- ifelse(df$Timepoint==8,1,0)\ndf$\"T24\" &lt;- ifelse(df$Timepoint==24,1,0)\ndf$\"T48\" &lt;- ifelse(df$Timepoint==48,1,0)\ndf$KO &lt;- ifelse(df$KO==\"TRUE\",1,0)\ndf$DrugA &lt;- ifelse(df$DrugA==\"Yes\",1,0)\n# It should be noted that the UpSetR package does not support tibble data frames and needs to be converted to traditional data frames.\ndf &lt;- data.frame(df[sample(360,180),c(3,4,1,2,5:7)])  # Here we randomly select half of the data for beauty\n\n# upset plot\nupset(df,\n      queries = list(list(query = intersects, params = list(\"DrugA\",\"T48\"), active = T)),\n      boxplot.summary = c(\"response\"))\n\n\n\n\n\n\n\nFigure 20: Key Parameters: boxplot.summary\n\n\n\n\n\nThis figure shows the response of knockout KO and WT (KO behavior white dots) after or without drug (DrugA) treatment at different times.",
    "crumbs": [
      "Ranking",
      "UpsetPlot"
    ]
  },
  {
    "objectID": "Ranking/UpsetPlot.html#applications",
    "href": "Ranking/UpsetPlot.html#applications",
    "title": "Upset Plot",
    "section": "Applications",
    "text": "Applications\n\n\n\n\n\n\nFigure 21: Applications of Upset plot\n\n\n\nThis graph shows the statistics of different diseases in the population and their survival time. [1]",
    "crumbs": [
      "Ranking",
      "UpsetPlot"
    ]
  },
  {
    "objectID": "Ranking/UpsetPlot.html#reference",
    "href": "Ranking/UpsetPlot.html#reference",
    "title": "Upset Plot",
    "section": "Reference",
    "text": "Reference\n[1] Peng X, Hu Y, Cai W. Association between urinary incontinence and mortality risk among US adults: a prospective cohort study. BMC Public Health. 2024 Oct 9;24(1):2753. doi: 10.1186/s12889-024-20091-x. PMID: 39385206; PMCID: PMC11463129.",
    "crumbs": [
      "Ranking",
      "UpsetPlot"
    ]
  },
  {
    "objectID": "Ranking/VennPlot.html",
    "href": "Ranking/VennPlot.html",
    "title": "Veen Plot",
    "section": "",
    "text": "For the visualization of Venn diagrams, the commonly used R packages are ggVennDiagram and VennDiagram. Compared with the VennDiagram package, ggVennDiagram has the advantages of being applicable to more groups, adapting to ggplot2 syntax, and flexibly setting output formats, and is easier to learn and post-process. However, the set color of ggVennDiagram can only be set to a continuous gradient color related to the number of elements, and cannot be set to a discrete color with one color for each set. VennDiagram is just the opposite, so you can choose which R package to use for drawing according to specific needs.",
    "crumbs": [
      "Ranking",
      "VeenPlot"
    ]
  },
  {
    "objectID": "Ranking/VennPlot.html#example",
    "href": "Ranking/VennPlot.html#example",
    "title": "Veen Plot",
    "section": "Example",
    "text": "Example",
    "crumbs": [
      "Ranking",
      "VeenPlot"
    ]
  },
  {
    "objectID": "Ranking/VennPlot.html#setup",
    "href": "Ranking/VennPlot.html#setup",
    "title": "Veen Plot",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: ggplot2; ggVennDiagram; VennDiagram\n\n\n# Installing necessary packages\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"ggVennDiagram\", quietly = TRUE)) {\n  install.packages(\"ggVennDiagram\")\n}\nif (!requireNamespace(\"VennDiagram\", quietly = TRUE)) {\n  install.packages(\"VennDiagram\")\n}\n\n# Load packages\nlibrary(ggplot2)\nlibrary(ggVennDiagram)\nlibrary(VennDiagram)",
    "crumbs": [
      "Ranking",
      "VeenPlot"
    ]
  },
  {
    "objectID": "Ranking/VennPlot.html#data-preparation",
    "href": "Ranking/VennPlot.html#data-preparation",
    "title": "Veen Plot",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe data uses a simulated gene set. Assume that we have multiple groups of different treatments A~D, each of which produces a certain number of differentially expressed genes under different treatments. The input format required by ggVennDiagram is a list. Each element in the list needs to have a corresponding name and the sub-elements it contains.\n\ngenes &lt;- paste(\"gene\",1:1000,sep=\"\")\nset.seed(123)\nx &lt;- list(A=sample(genes,300),\n          B=sample(genes,525),\n          C=sample(genes,440),\n          D=sample(genes,350))",
    "crumbs": [
      "Ranking",
      "VeenPlot"
    ]
  },
  {
    "objectID": "Ranking/VennPlot.html#visualization",
    "href": "Ranking/VennPlot.html#visualization",
    "title": "Veen Plot",
    "section": "Visualization",
    "text": "Visualization\n\n\n\n\n\n\nTip\n\n\n\nggVennDiagram basic parameters:\n\nx: list collection data to be input\ncategory.names: collection name, default is the name defined in list\nshow_intersect: when set to TRUE, output interactive images\nset_color: the stroke color of the collection, you can enter one or the same number of colors as the collection\nset_size: the size of the collection label\nlabel: the type of the numeric label in the collection, you can select an input from “both”, “count”, “percent”, “none”, the default is “both”\nlabel_alpha: the background transparency of the numeric label\nlabel_geom: the layer position of the numeric label, you can select one from “label”, “text”, the default is “label”, when “text” is entered, the label will be located below the collection color block\nlabel_color: the color of the numeric label\nlabel_size: the size of the numeric label\nlabel_percent_digit: the number of decimal places reserved for the numeric label\nlabel_txtWidth: In interactive mode, the width of the text box showing the intersection element\nedge_lty: The line type of the set stroke, the default is “solid”, other line types that can be set are: “blank”, “solid”, “dashed”, “dotted”, “dotdash”, “longdash”, “twodash”\nedge_size: The line width of the set stroke\nforce_upset: Whether to use the upset graph to show the intersection\nnintersects: The number of sets used for drawing, if NULL, all sets are used\norder.intersect.by: The arrangement of intersections when drawing the upset graph\norder.set.by: The arrangement of sets when drawing the upset graph\nrelative_height: The relative height of the upper bar graph when drawing the upset graph\nrelative_width: The relative width of the left bar graph when drawing the upset graph\n\n\n\n\n1. Basic Venn Diagram\n\n# Basic Venn Diagram\nggVennDiagram(x)\n\n\n\n\n\n\n\nFigure 1: Basic Venn Diagram\n\n\n\n\n\nThis figure shows the intersection of differentially expressed genes under different treatments.\n\n\n2. Beautify the Venn diagram\nThe color of the set in ggVennDiagram is a continuous variable set according to the number of elements contained in the set. The set color can be modified by functions such as scale_fill_gradient or scale_fill_gradient2 in ggplot2. For example, the following code can be used to implement continuous color setting:\n\n# Color settings\nggVennDiagram(x) + scale_fill_gradient(low=\"grey90\",high = \"red\")\n\n\n\n\n\n\n\nFigure 2: Color settings\n\n\n\n\n\nYou can also use scale_fill_gradient2 to define the colors more freely:\n\n# Color settings\nggVennDiagram(x) + scale_fill_gradient2(low=\"grey90\",mid = \"yellow\",midpoint = 100,high = \"red\")\n\n\n\n\n\n\n\nFigure 3: Color settings\n\n\n\n\n\nMore complex color settings can be accomplished by calling the palette:\n\n# Color settings\nggVennDiagram(x) + scale_fill_distiller(palette = \"Set1\") \n\n\n\n\n\n\n\nFigure 4: Color settings\n\n\n\n\n\nIt’s also very easy to customize the palette:\n\n# Color settings\ncols &lt;- c('#E64E00','#65B48E','#E6EB00','#E64E00')\npal &lt;- colorRampPalette(cols)\nggVennDiagram(x) + scale_fill_gradientn(colors = pal(10)) # Numbers are the number of color levels\n\n\n\n\n\n\n\nFigure 5: Color settings\n\n\n\n\n\nggVennDiagram can also customize the border of the collection through edge_lty, edge_size, and set_color.\n\n# edge settings\nggVennDiagram(x, set_color=c(\"blue\",\"red\",\"green\",\"purple\"), edge_lty=\"dashed\", edge_size=2)\n\n\n\n\n\n\n\nFigure 6: edge settings\n\n\n\n\n\nThe font settings can be modified via the following parameters:\n\n# Font Settings\n# The most special parameter among the following is label. Among the four optional inputs of label, \"percent\" means only displaying percentage, \"count\" means only displaying quantity, and \"none\" means not displaying.\nggVennDiagram(x, set_size = 5, label = \"percent\", label_alpha = 0, \n              label_color = \"red\", label_size = 5, label_percent_digit = 2)\n\n\n\n\n\n\n\nFigure 7: Font Settings\n\n\n\n\n\n\n\n3. VennDiagram\nWe can also draw Venn diagrams using the VennDiagram package.\n\n\n\n\n\n\nTip\n\n\n\nvenn.diagram basic parameters:\n\nx: list collection data to be input\nfilename: output file name\nimagetype: output file type can be selected from “tiff”, “png”, “svg”\nunits: image size unit can be selected from “cm”, “px”, “unit”\nheight: image height\nwidth: image width\nresolution: image resolution\ncompression: image compression algorithm\nscaled: display collection size according to proportion\nalpha: collection transparency\nfill: collection color\ncol: line color\nlwd: line thickness\nlty: line shape, 1 is solid line, 2 is dotted line, blank is no line\nlabel.col: number color\ncex: number size\ncat.dist: distance between label and collection\ncat.pos: angle of label relative to collection\ncat.cex: Label font size\ncat.col: Label color\n\n\n\nThe core function of the VennDiagram package is venn.diagram. This function cannot draw images directly to the drawing board. You can draw images to the drawing board by cooperating with the grid::grid.draw() function.\n\np &lt;- venn.diagram(x,filename = NULL);grid::grid.draw(p)\n\n\n\n\n\n\n\nFigure 8: venn.diagram\n\n\n\n\n\nThe biggest difference between VennDiagram set color settings and ggVennDiagram is that the colors are set as discrete colors according to different sets. The setting method is as follows:\n\n# When only one color is entered, all sets display the same color. When the number of entered colors matches the number of sets, each set has its own color. You can also use a specific naming method to accurately set the color of the set.\np &lt;- venn.diagram(\n  x, filename = NULL,\n  fill = c(\"A\"=\"#2E75A2\",\"B\"=\"#FBD75F\",\"C\"=\"#379337\",\"D\"=\"#C13A3C\"),\n  alpha= 0.3);grid::grid.draw(p)\n\n\n\n\n\n\n\nFigure 9: Color settings\n\n\n\n\n\nLine settings:\n\np &lt;- venn.diagram(\n  x, filename = NULL,\n  col = c(\"A\"=\"#2E75A2\",\"B\"=\"#FBD75F\",\"C\"=\"#379337\",\"D\"=\"#C13A3C\"),\n  lwd = 0.3, lty = 2);grid::grid.draw(p)\n\n\n\n\n\n\n\nFigure 10: Line settings\n\n\n\n\n\nFont settings. If you need to adjust the position, please use the cat.dist, cat.pos parameters:\n\np &lt;- venn.diagram(\n  x, filename = NULL, \n  cat.col =c(\"A\"=\"#2E75A2\",\"B\"=\"#FBD75F\",\"C\"=\"#379337\",\"D\"=\"#C13A3C\"),\n  label.col = \"red\");grid::grid.draw(p)\n\n\n\n\n\n\n\nFigure 11: Font Settings\n\n\n\n\n\nDisplay the size of the collection in proportion. This mode is only applicable to two collections:\n\np &lt;- venn.diagram(\n  x[c(\"A\",\"B\")], filename = NULL, fill= c(\"A\"=\"#2E75A2\",\"B\"=\"#FBD75F\"),\n  scaled = T\n);grid::grid.draw(p)\n\n\n\n\n\n\n\nFigure 12: scaled",
    "crumbs": [
      "Ranking",
      "VeenPlot"
    ]
  },
  {
    "objectID": "Ranking/VennPlot.html#application",
    "href": "Ranking/VennPlot.html#application",
    "title": "Veen Plot",
    "section": "Application",
    "text": "Application\n\n\n\n\n\n\nFigure 13: Applications of Venn Diagram\n\n\n\nIn this figure, R1-R4 are four different genotypes. Since R2 and R4 have exactly the same genotype at the target gene, the differentially expressed genes shared by R2 and R4 may be the downstream of the target gene [4].",
    "crumbs": [
      "Ranking",
      "VeenPlot"
    ]
  },
  {
    "objectID": "Ranking/VennPlot.html#reference",
    "href": "Ranking/VennPlot.html#reference",
    "title": "Veen Plot",
    "section": "Reference",
    "text": "Reference\n[1] Yu Y, Li W, Liu Y, Liu Y, Zhang Q, Ouyang Y, Ding W, Xue Y, Zou Y, Yan J, Jia A, Yan J, Hao X, Gou Y, Zhai Z, Liu L, Zheng Y, Zhang B, Xu J, Yang N, Xiao Y, Zhuo L, Lai Z, Yin P, Liu HJ, Fernie AR, Jackson D, Yan J. A Zea genus-specific micropeptide controls kernel dehydration in maize. Cell. 2025 Jan 9;188(1):44-59.e21. doi: 10.1016/j.cell.2024.10.030. Epub 2024 Nov 12. PMID: 39536747.",
    "crumbs": [
      "Ranking",
      "VeenPlot"
    ]
  },
  {
    "objectID": "Distribution/Ridgeline.html",
    "href": "Distribution/Ridgeline.html",
    "title": "Ridgeline Plot",
    "section": "",
    "text": "A ridgeline plot, also known as a joyplot, visualizes the distribution of multiple numeric variables across different categories. This method is useful for comparing density distributions while preserving an overall view of trends and variations.",
    "crumbs": [
      "Distribution",
      "Ridgeline Plot"
    ]
  },
  {
    "objectID": "Distribution/Ridgeline.html#example",
    "href": "Distribution/Ridgeline.html#example",
    "title": "Ridgeline Plot",
    "section": "Example",
    "text": "Example\n\n\n\n\n\nA Ridgeline plot represents the distribution of a numeric variable across several groups. In this example, the plot displays the distribution of diamond prices across different quality categories. The x-axis represents price values, while the density curves illustrate how frequently each price occurs within each quality group.",
    "crumbs": [
      "Distribution",
      "Ridgeline Plot"
    ]
  },
  {
    "objectID": "Distribution/Ridgeline.html#setup",
    "href": "Distribution/Ridgeline.html#setup",
    "title": "Ridgeline Plot",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming Language: R\nDependencies: readr, ggplot2, ggridges, viridis, hrbrthemes\n\n\n# Installing necessary packages\nif (!requireNamespace(\"readr\", quietly = TRUE)) {\n  install.packages(\"readr\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"ggridges\", quietly = TRUE)) {\n  install.packages(\"ggridges\")\n}\nif (!requireNamespace(\"hrbrthemes\", quietly = TRUE)) {\n  install.packages(\"hrbrthemes\")\n}\nif (!requireNamespace(\"viridis\", quietly = TRUE)) {\n  install.packages(\"viridis\")\n}\n\n# Loading the libraries\nlibrary(readr)      # For reading TSV files\nlibrary(dplyr)      # For data manipulation\nlibrary(ggplot2)    # For creating plots\nlibrary(ggridges)   # For density ridgeline plots\nlibrary(hrbrthemes) # For enhanced ggplot2 themes\nlibrary(viridis)    # For color maps",
    "crumbs": [
      "Distribution",
      "Ridgeline Plot"
    ]
  },
  {
    "objectID": "Distribution/Ridgeline.html#data-preparation",
    "href": "Distribution/Ridgeline.html#data-preparation",
    "title": "Ridgeline Plot",
    "section": "Data Preparation",
    "text": "Data Preparation\nHere’s a brief tutorial using the built-in R datasets (iris) and the Lung Cancer (Raponi 2006) dataset from UCSC Xena DATASETS.\n\n# Load iris dataset\ndata(\"iris\")\n\n# Load Lung Cancer (Raponi 2006) clinical data\nTCGA_clinic &lt;- readr::read_tsv(\"https://ucsc-public-main-xena-hub.s3.us-east-1.amazonaws.com/download/raponi2006_public%2Fraponi2006_public_clinicalMatrix.gz\") %&gt;%\n  mutate(T = as.factor(T))\nhead(TCGA_clinic)\n\n# A tibble: 6 × 16\n  sampleID   Age Differentiation Gender Histology     M     N Race \n  &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n1 LS-1        75 mod_poor        M      SCC           0     0 w    \n2 LS-10       61 poor            F      SCC           0     0 w    \n3 LS-100      72 mod             M      SCC           0     0 w    \n4 LS-101      75 mod             M      SCC           0     1 w    \n5 LS-102      76 mod             F      SCC           0     0 w    \n6 LS-103      58 well_mod        M      SCC           0     1 w    \n# ℹ 8 more variables: Smoking_History_Packyears &lt;dbl&gt;, Stage &lt;chr&gt;,\n#   OS.time &lt;dbl&gt;, T &lt;fct&gt;, OS &lt;chr&gt;, `_INTEGRATION` &lt;chr&gt;, `_PATIENT` &lt;chr&gt;,\n#   `_GENOMIC_ID_raponi2006` &lt;chr&gt;",
    "crumbs": [
      "Distribution",
      "Ridgeline Plot"
    ]
  },
  {
    "objectID": "Distribution/Ridgeline.html#visualization",
    "href": "Distribution/Ridgeline.html#visualization",
    "title": "Ridgeline Plot",
    "section": "Visualization",
    "text": "Visualization\n\n1. Basic Ridgeline Plot\nFigure 1 illustrates the distribution of the Sepal.Length variable across different Species.\n\n# Basic Ridgeline plot\np1_1 &lt;- ggplot(iris, aes(x = Sepal.Length, y = Species, fill = Species)) +\n  geom_density_ridges(alpha = 0.5) +\n  theme_ridges(font_size = 16, grid = TRUE) +\n  theme(legend.position = \"right\")\n\np1_1\n\n\n\n\n\n\n\nFigure 1: Basic Ridgeline Plot Using the iris Dataset\n\n\n\n\n\nFigure 2 illustrates the distribution of the OS.time variable across primary tumor conditions and survival status.\n\n# Basic Ridgeline plot\np1_2 &lt;- ggplot(TCGA_clinic, aes(x = OS.time, y = T, fill = T)) +\n  geom_density_ridges(alpha = 0.5, scale = 2) +\n  theme_ridges(font_size = 16, grid = TRUE) +\n  theme(legend.position = \"right\")\n\np1_2\n\n\n\n\n\n\n\nFigure 2: Basic Ridgeline Plot Using the Lung Cancer (Raponi 2006) Dataset\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nKey function notes: geom_density_ridges() / theme_ridges()\ngeom_density_ridges()\ngeom_density_ridges is a very flexible function that can be used to create multiple styles of ridgeline plots.\nHere are some commonly used parameters and options for geom_density_ridges():\n\nalpha: Sets the transparency.\ncolour: Sets the line color.\nfill: Fills colors based on categorical variables.\nscale: Controls the overlap between ridges.\n\ntheme_ridges()\ntheme_ridges is a theme function provided by the ggridges package specifically for beautifying ridge plots.\nThe parameters of this function include:\n\n**font_size**: Overall font size, default is 14.\nline_size: Default line size.\ngrid: If set to TRUE (default), it will draw a background grid; if set to FALSE, the background will be blank.\n\n\n\n\n\n2. Histogram Ridgeline Plots\nHistogram ridgeline plots are ideal for displaying data distributions and counts, whereas traditional ridgeline plots are better suited for comparing distribution shapes across categories. Density can be represented in various ways; for instance, setting stat = “binline” creates a histogram-like appearance for each distribution.\nFigure 3 illustrates the Sepal The distribution of the Length variable on different specifications.\n\np2_1 &lt;- ggplot(iris, aes(x = Sepal.Length, y = Species, fill = Species)) +\n  geom_density_ridges(alpha = 0.5, stat = \"binline\", bins = 10) +\n  theme_ridges(font_size = 16, grid = TRUE) +\n  theme(legend.position = \"none\")\n\np2_1\n\n\n\n\n\n\n\nFigure 3: Histogram Ridgeline Plots Using the iris Dataset\n\n\n\n\n\nFigure 4 illustrates the distribution of the OS.time variable in primary tumor conditions and survival status\n\np2_2 &lt;- ggplot(TCGA_clinic, aes(x = OS.time, y = T, fill = T)) +\n  geom_density_ridges(alpha = 0.5, stat = \"binline\", bins = 10) +\n  theme_ridges(font_size = 16, grid = TRUE) +\n  theme(legend.position = \"none\")\n\np2_2\n\n\n\n\n\n\n\nFigure 4: Histogram Ridgeline Plots Using the Lung Cancer (Raponi 2006) Dataset\n\n\n\n\n\n\n\n3. Ridgeline Plot with Variable Colors\nColors can be assigned based on numerical variables instead of categorical ones, allowing for a more intuitive visualization of changes in data size.\nFigure 5 illustrates the Sepal The distribution of the Length variable on different specifications.\n\np3_1 &lt;- ggplot(iris, aes(x = Sepal.Length, y = Species, fill = ..x..)) +  # Create ridge plot\n  geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) +  # Adjust parameters\n  scale_fill_viridis(name = \"Sepal.Length\", option = \"C\") +  # Adjust color mapping\n  labs(title = 'Sepal.Length in iris') + \n  theme_ipsum() +   # Set image theme\n  theme(legend.position = \"bottom\",  \n        panel.spacing = unit(0.1, \"lines\"),\n        strip.text.x = element_text(size = 8))\n\np3_1\n\n\n\n\n\n\n\nFigure 5: Ridgeline Plot with Variable Colors Using the iris Dataset\n\n\n\n\n\nFigure 6 illustrates the distribution of the OS.time variable in primary tumor conditions and survival status.\n\np3_2 &lt;- ggplot(TCGA_clinic, aes(x = OS.time, y = T, fill = ..x..)) +  # Create ridge plot\n  geom_density_ridges_gradient(scale = 1, rel_min_height = 0.01) +  # Adjust parameters\n  scale_fill_viridis(name = \"OS.time\", option = \"C\") +  # Adjust color mapping\n  labs(title = 'Distribution of OS.time in different tumor staging') + \n  theme_ipsum() +   # Set image theme\n  theme(legend.position = \"bottom\", panel.spacing = unit(0.1, \"lines\"),\n        strip.text.x = element_text(size = 8))\n\np3_2\n\n\n\n\n\n\n\nFigure 6: Ridgeline Plot with Variable Colors Using the Lung Cancer (Raponi 2006) Dataset\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nKey function notes: scale_fill_viridis() / theme_ipsum()\nscale_fill_viridis()\nThis function from the viridis package provides color mapping schemes for continuous data.\nCommonly used parameters include:\n\nbegin and end: Control the start and end positions of the color mapping (values between 0 and 1).\ndirection: Controls the color direction.\n\nA value of 1 gradually darkens the color from low to high values.\nA value of -1 reverses this direction.\n\noption: Selects a predefined color scheme from the viridis package (e.g., “magma”, “inferno”, or “plasma”).\naesthetics: Specifies whether the color is applied to the fill (fill) or the outline (colour).\n\ntheme_ipsum()\nThis function from the hrbrthemes package provides a predefined theme for ggplot2.\nHere are some themes available in the hrbrthemes package:\n\ntheme_ipsum(): The core theme, featuring Arial Narrow font and emphasizing good typography and readability.\ntheme_ft_rc(): A clean and precise theme with a focus on typography.\ntheme_ipsum_rc(): A variant of theme_ipsum(), with possible different typography or color choices.\ntheme_ipsum_tw(): A theme designed for Twitter branding, using Twitter’s colors and font styles.\ntheme_ipsum_ps(): Optimized for print design with specific typography and color choices.\ntheme_modern_rc(): A modern, minimalist theme suited for contemporary data visualization needs.",
    "crumbs": [
      "Distribution",
      "Ridgeline Plot"
    ]
  },
  {
    "objectID": "Distribution/Ridgeline.html#applications",
    "href": "Distribution/Ridgeline.html#applications",
    "title": "Ridgeline Plot",
    "section": "Applications",
    "text": "Applications\n\n1. Ridgeline Plot for Group Comparison\n\n\n\n\n\n\nFigure 7: Applications of Ridgeline Plot for Group Comparison\n\n\n\nRidgeline plots are used to visualize cytokine expression across various experimental conditions and to compare gene expression distributions in different cell populations. [1]\n\n\n2. Using Ridgeline Plots to Visualize Gene Set Enrichment Analysis Results\n\n\n\n\n\n\nFigure 8: Applications of Using Ridgeline Plots to Visualize Gene Set Enrichment Analysis Results\n\n\n\nRidgeline plots are used to visualize gene set enrichment analysis results, highlighting biomarkers associated with Moyamoya disease. [2]",
    "crumbs": [
      "Distribution",
      "Ridgeline Plot"
    ]
  },
  {
    "objectID": "Distribution/Ridgeline.html#reference",
    "href": "Distribution/Ridgeline.html#reference",
    "title": "Ridgeline Plot",
    "section": "Reference",
    "text": "Reference\n\nKrämer B, Nalin AP, Ma F, Eickhoff S, Lutz P, Leonardelli S, Goeser F, Finnemann C, Hack G, Raabe J, ToVinh M, Ahmad S, Hoffmeister C, Kaiser KM, Manekeller S, Branchi V, Bald T, Hölzel M, Hüneburg R, Nischalke HD, Semaan A, Langhans B, Kaczmarek DJ, Benner B, Lordo MR, Kowalski J, Gerhardt A, Timm J, Toma M, Mohr R, Türler A, Charpentier A, van Bremen T, Feldmann G, Sattler A, Kotsch K, Abdallah AT, Strassburg CP, Spengler U, Carson WE 3rd, Mundy-Bosse BL, Pellegrini M, O’Sullivan TE, Freud AG, Nattermann J. Single-cell RNA sequencing identifies a population of human liver-type ILC1s. Cell Rep. 2023 Jan 31;42(1):111937. doi: 10.1016/j.celrep.2022.111937. Epub 2023 Jan 1. PMID: 36640314; PMCID: PMC9950534.\nXu Y, Chen B, Guo Z, Chen C, Wang C, Zhou H, Zhang C, Feng Y. Identification of diagnostic markers for moyamoya disease by combining bulk RNA-sequencing analysis and machine learning. Sci Rep. 2024 Mar 11;14(1):5931. doi: 10.1038/s41598-024-56367-w. PMID: 38467737; PMCID: PMC10928210.\nWickham, H. (2009). ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. ISBN 978-0-387-98140-6 (Print) 978-0-387-98141-3 (E-Book). [DOI: 10.1007/978-0-387-98141-3] (https://doi.org/10.1007/978-0-387-98141-3)\nScherer, C. (2019). ggridges: Ridgeline plots in ‘ggplot2’. Journal of Statistical Software, 88(1), 1-19. [DOI: 10.18637/jss.v088.i01] (https://doi.org/10.18637/jss.v088.i01)\nGarnier, S., Team, R. C., & Team, R. S. (2018). viridis: Default color maps for R. R package version 0.5.1. https://CRAN.R-project.org/package=viridis\nFournet, H. (2016). hrbrthemes: Additional themes, scales, and geoms for ‘ggplot2’. R package version 1.7.6. https://CRAN.R-project.org/package=hrbrthemes",
    "crumbs": [
      "Distribution",
      "Ridgeline Plot"
    ]
  },
  {
    "objectID": "Distribution/Density.html",
    "href": "Distribution/Density.html",
    "title": "Density Plot",
    "section": "",
    "text": "A density plot represents the distribution of a numerical variable using kernel density estimation to display the probability density function. It is a smoothed version of a histogram, sharing the same concept but providing a clearer representation of the overall trend and shape of the data.",
    "crumbs": [
      "Distribution",
      "Density Plot"
    ]
  },
  {
    "objectID": "Distribution/Density.html#example",
    "href": "Distribution/Density.html#example",
    "title": "Density Plot",
    "section": "Example",
    "text": "Example\n\n\n\n\n\nThis density plot illustrates the distribution of expression levels for the TSPAN6 gene across multiple samples. The x-axis represents the data values (e.g., gene expression levels ranging from 8 to 15), while the y-axis represents density, not absolute counts. The y-axis can be interpreted as the “relative frequency” of data values within a specific interval. The total area under the density curve is 1, representing the relative probability distribution of the data across the x-axis. In simpler terms, it measures the proportion of samples within a specific value range relative to the total sample size.\nUnlike histograms, which use absolute frequencies on the y-axis, density plots use density values, resulting in a smoother representation of data distribution. This allows for a clearer visualization of the data’s central tendency and overall distribution characteristics.\nThe plot shows that the expression levels of the TSPAN6 gene are concentrated between 10 and 13, with a peak around 12, indicating that most samples have relatively consistent expression levels. The unimodal distribution suggests that the expression pattern of TSPAN6 is stable across most samples.",
    "crumbs": [
      "Distribution",
      "Density Plot"
    ]
  },
  {
    "objectID": "Distribution/Density.html#setup",
    "href": "Distribution/Density.html#setup",
    "title": "Density Plot",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming Language: R\nDependencies: readr; ggplot2, ggExtra, hrbrthemes, dplyr, tidyr, viridis, ggpmisc, ggpubr, geomtextpath, cowplot\n\n\n# Installing necessary packages \nif (!requireNamespace(\"readr\", quietly = TRUE)) {   \n  install.packages(\"readr\") \n} \nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {   \n  install.packages(\"ggplot2\") \n} \nif (!requireNamespace(\"ggExtra\", quietly = TRUE)) {   \n  install.packages(\"ggExtra\") \n} \nif (!requireNamespace(\"hrbrthemes\", quietly = TRUE)) {\n  install.packages(\"hrbrthemes\") \n} \nif (!requireNamespace(\"dplyr\", quietly = TRUE)) {\n  install.packages(\"dplyr\") \n} \nif (!requireNamespace(\"tidyr\", quietly = TRUE)) {\n  install.packages(\"tidyr\") \n} \nif (!requireNamespace(\"viridis\", quietly = TRUE)) {\n  install.packages(\"viridis\") \n} \nif (!requireNamespace(\"ggpmisc\", quietly = TRUE)) {\n  install.packages(\"ggpmisc\") \n} \nif (!requireNamespace(\"ggpubr\", quietly = TRUE)) {\n  install.packages(\"ggpubr\") \n} \nif (!requireNamespace(\"geomtextpath\", quietly = TRUE)) {\n  install.packages(\"geomtextpath\") \n}  \nif (!requireNamespace(\"cowplot\", quietly = TRUE)) {\n  install.packages(\"cowplot\")\n}\n\n# Loading the libraries\nlibrary(readr)         # For read files\nlibrary(ggplot2)       # For creating plots \nlibrary(ggExtra)       # For enhancing ggplot2 graphics \nlibrary(hrbrthemes)    # For professional themes \nlibrary(dplyr)         # For data manipulation\nlibrary(tidyr)         # For reshaping data\nlibrary(viridis)       # For color maps \nlibrary(ggpmisc)       # For statistical annotations \nlibrary(ggpubr)        # For publication-ready themes \nlibrary(geomtextpath)  # For adding text to density curves\nlibrary(cowplot)        # Plot alignment and annotation package",
    "crumbs": [
      "Distribution",
      "Density Plot"
    ]
  },
  {
    "objectID": "Distribution/Density.html#data-preparation",
    "href": "Distribution/Density.html#data-preparation",
    "title": "Density Plot",
    "section": "Data Preparation",
    "text": "Data Preparation\nHere’s a brief tutorial using the built-in R datasets (iris, mtcars, diamonds) and the TCGA-LIHC.htseq_counts.tsv dataset from UCSC Xena DATASETS. This example demonstrates how to load and work with these datasets in R.\n\n# Read the TSV data \ndata &lt;- readr::read_csv(\"https://bizard-1301043367.cos.ap-guangzhou.myqcloud.com/TCGA-LIHC.htseq_counts.csv.gz\")\n\n# Filter and reshape data for the first gene TSPAN6 (Ensembl ID: ENSG00000000003.13)\ndata1 &lt;- data %&gt;%   \n  filter(Ensembl_ID == \"ENSG00000000003.13\") %&gt;%   \n  pivot_longer(     \n    cols = -Ensembl_ID,      \n    names_to = \"sample\",      \n    values_to = \"expression\"   \n    ) %&gt;%   \n  mutate(var = \"var1\")  # Add a column to differentiate the variables  \n\n# Filter and reshape data for the second gene SCYL3 (Ensembl ID: ENSG00000000457.12)\ndata2 &lt;- data %&gt;%   \n  filter(Ensembl_ID == \"ENSG00000000457.12\") %&gt;%   \n  pivot_longer(     \n    cols = -Ensembl_ID,      \n    names_to = \"sample\",      \n    values_to = \"expression\"   \n    ) %&gt;%   \n  mutate(var = \"var2\")  # Add a column to differentiate the variables  \n\n# Combine the two datasets \ndata12 &lt;- bind_rows(data1, data2)  \n\n# View the final combined dataset \nhead(data12)\n\n# A tibble: 6 × 4\n  Ensembl_ID         sample           expression var  \n  &lt;chr&gt;              &lt;chr&gt;                 &lt;dbl&gt; &lt;chr&gt;\n1 ENSG00000000003.13 TCGA-DD-A4NG-01A      12.8  var1 \n2 ENSG00000000003.13 TCGA-G3-AAV4-01A       9.72 var1 \n3 ENSG00000000003.13 TCGA-2Y-A9H1-01A      11.3  var1 \n4 ENSG00000000003.13 TCGA-CC-A3M9-01A      11.6  var1 \n5 ENSG00000000003.13 TCGA-K7-AAU7-01A      11.5  var1 \n6 ENSG00000000003.13 TCGA-BC-A10W-01A      12.0  var1",
    "crumbs": [
      "Distribution",
      "Density Plot"
    ]
  },
  {
    "objectID": "Distribution/Density.html#visualization",
    "href": "Distribution/Density.html#visualization",
    "title": "Density Plot",
    "section": "Visualization",
    "text": "Visualization\n\n1. Basic Density Plot\nIn the ggplot2 package, you can create a density plot using geom_density, which requires only a numeric variable as input.\n\n# Basic Density Plot \np1 &lt;- ggplot(data1, aes(x = expression)) +   \n  geom_density(fill = \"#69b3a2\", color = \"#e9ecef\", alpha = 0.8) +   \n  labs(title = \"Density Plot of TSPAN6 Expression Levels\",        \n       x = \"Expression\",        \n       y = \"Density\") +   \n  theme_minimal()  \np1\n\n\n\n\n\n\n\nFigure 1: Basic Density Plot\n\n\n\n\n\nFigure 1 illustrates the distribution of expression levels of the TSPAN6 gene across multiple samples from LIHC patients sourced from TCGA.\n\n\n\n\n\n\nTip\n\n\n\ntheme_ipsum You can use the theme_ipsum from the hrbrthemes package: it is easy to use and makes your charts look more professional. As you can see, theme_ipsum() comes with a set of pre-configured settings, such as font size, color, and gridlines, which adhere to good visualization practices, are well-designed, and are ready for publishing.\n\nggplot(data1, aes(x = expression)) +\n  geom_density(fill = \"#69b3a2\", color = \"#e9ecef\", alpha = 0.8) +\n  labs(title = \"Density Plot of TSPAN6 Expression Levels\",\n       x = \"Expression\",\n       y = \"Density\") +\n  theme_ipsum()\n\n\n\n\n\n\n\nFigure 2: Themed Density Plot\n\n\n\n\n\n\n\n\n\n2. Mirrored Density Plot\nThe mirror density plot helps us intuitively compare the distributions of two datasets. Through the mirrored structure, we can quickly determine whether the two datasets exhibit symmetry or differences. The mirror density plot combines two density plots into a single graph, reducing the required visualization space while maintaining a clear description of the data distribution.\n\n# Create a mirrored density plot \nggplot(data12, aes(x = expression, fill = var)) +\n\n  # Draw the upper density curve\n  geom_density(data = filter(data12, var == \"var1\"), aes(y = ..density..), fill = \"#69b3a2\", alpha = 0.8) +\n  geom_label(data = filter(data12, var == \"var1\"), aes(x = median(expression), y = 0.25, label = \"TSPAN6\"), color = \"white\", fill = \"#1b9e77\") +\n  \n  # Draw the lower density curve\n  geom_density(data = filter(data12, var == \"var2\"), aes(y = -..density..), fill = \"#404080\", alpha = 0.8) +\n  geom_label(data = filter(data12, var == \"var2\"), aes(x = median(expression), y = -0.25, label = \"C1QA\"), color = \"white\", fill = \"#7570b3\") +  \n\n  # Beautify the plot\n  xlab(\"Expression\") +\n  ylab(\"Density\") +\n  ggtitle(\"Mirror Density Plot of TSPAN6 and C1QA\") +\n  theme(legend.position = \"none\") +\n  theme_minimal()\n\n\n\n\n\n\n\nFigure 3: Mirrored Density Plot\n\n\n\n\n\nFigure 3 demonstrates the expression distribution of the TSPAN6 and C1QA genes in LIHC patients sourced from TCGA. The same approach can also be used to generate a mirrored histogram.\n\n\n3. Multiple Groups Density Plot\nA multi-group density plot allows for an intuitive comparison of the distribution differences between different groups, helping to identify trends, patterns, and outliers, while presenting data from multiple groups on the same plot, making it easier to compare group characteristics. However, when there are many groups or the distribution curves overlap, the plot can become cluttered, making it difficult to distinguish the differences between groups, which reduces the readability of the chart. Transparency adjustments can be made to reduce visual interference from overlapping areas. However, this method can only improve the visualization to a certain extent and is not a universal solution. Other plotting methods discussed later in this document (e.g., facet density plots) can be used to resolve this issue.\n\n# Without transparency (left)\np1 &lt;- ggplot(data=diamonds, aes(x=price, group=cut, fill=cut)) +\n  geom_density(adjust=1.5) +\n  theme_minimal() +\n  ggtitle(\"p1\")\n\n# With transparency (right)\np2 &lt;- ggplot(data=diamonds, aes(x=price, group=cut, fill=cut)) +\n  geom_density(adjust=1.5, alpha=.4) +\n  theme_minimal() +\n  ggtitle(\"p2\")\n\nplot_grid(p1, p2, ncol = 2)\n\n\n\n\n\n\n\nFigure 4: Multiple Groups Density Plot Using the Diamonds Dataset\n\n\n\n\n\nFigure 4 compares the density distributions of the diamonds dataset’s price under different transparency settings. The left plot (p1) does not apply transparency, with all group fill colors opaque. The graph is overall crowded, and there is significant overlap between groups, making it hard to interpret the information. The right plot (p2) applies transparency, making the color layering effects between different groups more prominent, thus allowing for a clearer observation of the density distribution characteristics of each group.\n\n# Create annotation framework\nannot &lt;- data.frame(\n  Species = c(\"setosa\", \"versicolor\", \"virginica\"),\n  x = c(1.8, 4, 5.1),  # Annotation positions for each species\n  y = c(0.5, 0.9, .8)\n)\n\n# Generate density plot\nggplot(filter(iris, Species %in% c(\"setosa\", \"versicolor\", \"virginica\")), aes(x = Petal.Length, color = Species, fill = Species)) +\n  geom_density(alpha = 0.6) +\n  scale_fill_viridis(discrete = TRUE) +\n  scale_color_viridis(discrete = TRUE) +\n  geom_text(data = annot, aes(x = x, y = y, label = Species, color = Species), hjust = 0, size = 4.5) +\n  theme_minimal() +\n  theme(\n    legend.position = \"none\"\n  ) +\n  ylab(\"\") +\n  xlab(\"Petal Length (cm)\")\n\n\n\n\n\n\n\nFigure 5: Multiple Groups Density Plot Using the Iris Dataset\n\n\n\n\n\nFigure 5 shows the distribution density of petal length (Petal.Length) for different species in the Iris dataset, allowing for a clear visualization of the distribution differences in petal length across species.\n\n\n4. Faceted Density Plot\nFacet density plots for multiple variables, by displaying data from different groups in different panels, allow for a more intuitive comparison of distribution differences between groups, reducing visual clutter. If all panels share the same X-axis, the distribution features of each group, such as central tendency, spread, and shape, can still be compared. Facet density plots for multiple variables are created using facet_wrap().\n\nggplot(data=diamonds, aes(x=price, group=cut, fill=cut)) +\n  geom_density(adjust=1.5) +\n  theme_ipsum() +\n  facet_wrap(~cut) + \n  theme(\n    legend.position=\"none\",\n    panel.spacing = unit(0.1, \"lines\"),\n    axis.ticks.x=element_blank()\n  )\n\n\n\n\n\n\n\nFigure 6: Faceted Density Plot\n\n\n\n\n\nFigure 6 demonstrates the price distribution for different cut grades in the diamonds dataset. The density curve for each cut grade is displayed in separate facets, making it easier to observe the price distribution pattern of each cut grade within the same coordinate system.\n\n\n5. Stacked Density Plot\nIn a stacked density plot, the density distributions of different groups are stacked on top of each other, avoiding the confusion caused by overlapping curves. However, since the groups are stacked, it becomes difficult to understand the distribution of groups not at the bottom of the chart (facet density plots are recommended here).\n\np &lt;- ggplot(data=diamonds, aes(x=price, group=cut, fill=cut)) +\n  geom_density(adjust=1.5, position=\"fill\") +\n  theme_ipsum()\np\n\n\n\n\n\n\n\nFigure 7: Stacked Density Plot\n\n\n\n\n\nFigure 7 shows the relative distribution of prices for different cut grades in the diamonds dataset. By using a stacked density plot (position=“fill”), the cumulative density for all groups at each price position sums to 1, making it easier to compare the relative density distributions of different cut grades.\n\n\n6. Marginal distributions (density plots)\nMarginal distributions provide additional information about the data, not only showing the relationships between variables but also revealing the independent distribution characteristics of each variable. Combining marginal density plots with scatter plots (or other main plots) offers a comprehensive view, making it easier to detect patterns, outliers, and trends in the data. Marginal distributions (density plots) can be drawn using the ggMarginal() function from the ggExtra package.\n\np &lt;- ggplot(mtcars, aes(x = wt, y = mpg, color = factor(cyl), size = factor(cyl))) +\n  geom_point(aes(color = factor(cyl)), show.legend = TRUE) +  # Scatter plot with size variation based on cyl\n  geom_smooth(method = 'lm', formula = y ~ x, se = TRUE, linewidth = 1, aes(color = factor(cyl))) +  # Regression curve with color and width based on cyl\n  scale_color_manual(values = c(\"#2e3b97\", \"#faad61\", \"#b76252\")) +  # Specifying colors for the regression curves\n  stat_poly_eq(aes(label = paste(after_stat(eq.label), after_stat(rr.label), after_stat(p.value.label), sep = \"~~~~\")), \n               formula = y ~ x, size = 4,\n               hjust = -1,   # Adjust horizontal alignment\n               vjust = 1.1,   # Adjust vertical alignment\n               position = position_nudge(x = 2.7, y = 1)) + \n  theme(legend.position = \"none\")  # Hide legend\n\n# Add marginal density plot to the scatter plot\np1 &lt;- ggMarginal(p, type=\"density\")  \n\np1\n\n\n\n\n\n\n\nFigure 8: Marginal Density Plot\n\n\n\n\n\nThe scatter plot shows the relationship between car weight (wt) and miles per gallon (mpg) for different cylinder counts (cyl) in the mtcars dataset. The marginal density plot shows the distribution patterns of wt (weight) and mpg (miles per gallon) for cars with different cylinder counts (cyl), revealing the differences in wt or mpg between the different cylinder groups.\n\n\n\n\n\n\nTip\n\n\n\nCustomizable Parameters for Plots with Marginal Distributions\n\nChange the size of the marginal plot using the size parameter.\nCustomize the appearance of the marginal plot with common parameters.\nDisplay only one marginal plot (either the x or y axis) using margins = 'x' or margins = 'y'.\n\n\np &lt;- ggplot(mtcars, aes(x = wt, y = mpg, color = factor(cyl), size = factor(cyl))) +\n  geom_point(aes(color = factor(cyl)), show.legend = TRUE) +  # Scatter plot with size variation based on cyl\n  geom_smooth(method = 'lm', formula = y ~ x, se = TRUE, linewidth = 1, aes(color = factor(cyl))) +  # Regression curve with color and width based on cyl\n  scale_color_manual(values = c(\"#2e3b97\", \"#faad61\", \"#b76252\")) +  # Specifying colors for the regression curves\n  stat_poly_eq(aes(label = paste(after_stat(eq.label), after_stat(rr.label), after_stat(p.value.label), sep = \"~~~~\")),\n               formula = y ~ x, size = 4,\n               hjust = -1.45,   # Adjusted horizontal alignment (modified value)\n               vjust = 1.1,   # Adjust vertical alignment\n               position = position_nudge(x = 2.7, y = 1)) + \n  theme(legend.position = \"none\")  # Hide legend\n\n# Marginal density plot\np2 &lt;- ggMarginal(p, type=\"density\", margins = 'x', color=\"purple\", size = 4)  # Display only x-axis marginal density plot\n\np2\n\n\n\n\n\n\n\nFigure 9: Customizable Parameters for Plots with Marginal Distributions\n\n\n\n\n\nSimilar to the previous plot, Figure 9 also shows the relationship between weight (wt) and miles per gallon (mpg) for cars with different numbers of cylinders (cyl) in the mtcars dataset. The marginal density plot illustrates the distribution pattern of cars with different cylinder counts (cyl) in terms of mpg (miles per gallon).\n\n\n\n\n7. Annotated Density Plot\nAnnotated density plots allow key information or group names to be displayed directly on the plot, making it easier to understand the distribution and differences of data across groups without relying on a legend. This enhances the readability of the plot and improves the efficiency of information delivery. You can add text or labels along the density curve using ggplot2 and the geomtextpath package.\n\nggplot(iris, aes(x = Sepal.Length, colour = Species, label = Species)) +\n  geom_textdensity() +\n  theme_bw() + guides(color = 'none')\n\n\n\n\n\n\n\nFigure 10: Annotated Density Plot\n\n\n\n\n\nFigure 10 represents the Sepal.Length distribution for different species in the iris dataset using text density curves. The text layout adjusts dynamically according to the density of the distribution, making it easier to visually observe the distribution of sepal length across species.\n\n\n\n\n\n\nTip\n\n\n\nCustomizable Parameters for Labels in Annotated Density Plots\n\nChange the size of the text using the size parameter.\nCustomize the font style with the fontface parameter.\nAdjust vertical alignment with the vjust parameter.\nAdjust horizontal alignment with the hjust parameter. The last two parameters (vjust and hjust) can be floats (usually between -1 and 1) or strings such as xmid (or ymid), xmax (or ymax), and auto (default).\n\n\n\n\nmtcars$labels = ifelse(mtcars$vs==0, \"Type 0\", \"Type 1\")\nggplot(mtcars, aes(x = qsec, colour = as.factor(labels), label = as.factor(labels))) +\n  geom_textdensity(size = 6, fontface = 4, # Bold italic text\n                   vjust = -0.4, hjust = \"ymid\") +\n  theme_bw() + guides(color = 'none')  # Remove color guide\n\n\n\n\n\n\n\nFigure 11: Customizable Parameters for Annotated Density Plot\n\n\n\n\n\nFigure 11 shows the text density distribution of qsec (1/4 mile acceleration time) and vs (engine type) in the mtcars dataset. By adjusting text density properties, the labels become more noticeable and readable.",
    "crumbs": [
      "Distribution",
      "Density Plot"
    ]
  },
  {
    "objectID": "Distribution/Density.html#applications",
    "href": "Distribution/Density.html#applications",
    "title": "Density Plot",
    "section": "Applications",
    "text": "Applications\n\n1. Applications of Basic Density Plot\n\n\n\n\n\n\nMende, D. R. et al.(2016)\n\n\n\n\nFigure 12: Applications of Basic Density Plot\n\n\n\nFigure 12: Summary of the coverage of iSAGs assembled from the metagenomic and single-cell datasets used in this study. (A) Fragment recruitment map of metagenomic reads mapped to the iSAGs constructed in this study. The alternating orange and green bars at the bottom of each graph represent overlapping group boundaries, which are sorted from longest to shortest. (B) A density plot showing the relative coverage of raw SAG reads mapped to the iSAGs constructed here. [1]\n\n\n2. Applications of Multiple Groups Density Plot\n\n\n\n\n\n\nGrimmer, M. R. et al.(2014)\n\n\n\n\nFigure 13: Applications of Multiple Groups Density Plot\n\n\n\nFigure 13: Analysis of activating and repressing promoters. (A) A tag density plot of the frequency of the main 598-SKD binding motifs at the binding promoters (as shown in the figure above, representing partial target motifs). The colored curves correspond to the 598-SKD binding promoters on genes that are constitutively active, downregulated, or upregulated. (B) Tag density plot of 598-SKD and 598 ChIP-seq tags at the 598-SKD target promoters across expression groups; plot colors correspond to those in (A). (C) Tag density plot of 598-SKD across promoters and gene bodies; plot colors correspond to those in (A). [2]\n\n\n3. Applications of Faceted Density Plots\n\n\n\n\n\n\nReck, M. et al.(2015)\n\n\n\n\nFigure 14: Applications of Faceted Density Plots\n\n\n\nFigure 14 analyzes the overexpression of comE, comR, comS, and comRS in the LytFsm reporter gene strain background. [3]",
    "crumbs": [
      "Distribution",
      "Density Plot"
    ]
  },
  {
    "objectID": "Distribution/Density.html#reference",
    "href": "Distribution/Density.html#reference",
    "title": "Density Plot",
    "section": "Reference",
    "text": "Reference\n\nMende, D. R., Aylward, F. O., Eppley, J. M., Nielsen, T. N., & DeLong, E. F. (2016). Improved Environmental Genomes via Integration of Metagenomic and Single-Cell Assemblies. Frontiers in Microbiology, 7, 143. https://doi.org/10.3389/fmicb.2016.00143. PMID: 26904016; PMCID: PMC4749706.\n\nGrimmer, M. R., Stolzenburg, S., Ford, E., Lister, R., Blancafort, P., & Farnham, P. J. (2014). Analysis of an artificial zinc finger epigenetic modulator: widespread binding but limited regulation. Nucleic Acids Research, 42(16), 10856–10868. https://doi.org/10.1093/nar/gku708. PMID: 25122745; PMCID: PMC4176344.\nReck, M., Tomasch, J., & Wagner-Döbler, I. (2015). The Alternative Sigma Factor SigX Controls Bacteriocin Synthesis and Competence, the Two Quorum Sensing Regulated Traits in Streptococcus mutans. PLoS Genetics, 11(7), e1005353. https://doi.org/10.1371/journal.pgen.1005353. PMID: 26158727; PMCID: PMC4497675.\n\nWickham, H. (2016). ggplot2: Elegant graphics for data analysis. Springer. https://ggplot2.tidyverse.org\n\nGao, Y. (2021). ggExtra: Add marginal plots to ggplot2. https://cran.r-project.org/package/ggExtra\n\nRudis, B. (2020). hrbrthemes: Additional Themes and Theme Components for ‘ggplot2’. https://cran.r-project.org/package/hrbrthemes\n\nWickham, H., François, R., Henry, L., & Müller, K. (2021). dplyr: A Grammar of Data Manipulation. https://cran.r-project.org/package/dplyr\nWickham, H., & Henry, L. (2021). tidyr: Tidy Messy Data. https://cran.r-project.org/package/tidyr\n\nGarnier, S. (2018). viridis: Default Color Maps from ‘matplotlib’. https://cran.r-project.org/package/viridis\n\nAubry, R., & Bouchard, C. (2020). ggpmisc: Miscellaneous Extensions to ‘ggplot2’. https://cran.r-project.org/package/ggpmisc\n\nKassambara, A. (2021). ggpubr: ‘ggplot2’ Based Publication Ready Plots. https://cran.r-project.org/package/ggpubr\n\nBrown, C. (2022). geomtextpath: Curved Text on Geoms in ‘ggplot2’. https://cran.r-project.org/package/geomtextpath\nWilke, C. O. (2020). cowplot: Streamlined Plot Theme and Plot Annotations for “ggplot2”. https://cran.r-project.org/package=cowplot",
    "crumbs": [
      "Distribution",
      "Density Plot"
    ]
  },
  {
    "objectID": "Distribution/Histogram.html",
    "href": "Distribution/Histogram.html",
    "title": "Histogram",
    "section": "",
    "text": "A histogram uses rectangular bars to represent the frequency of data within specific intervals, where the total area of the bars corresponds to the total frequency. It is primarily used to visualize the distribution of continuous variables.",
    "crumbs": [
      "Distribution",
      "Histogram"
    ]
  },
  {
    "objectID": "Distribution/Histogram.html#example",
    "href": "Distribution/Histogram.html#example",
    "title": "Histogram",
    "section": "Example",
    "text": "Example\n\n\n\n\n\nThis basic histogram illustrates the expression levels of the TSPAN6 gene across different samples. The x-axis represents the data values, with each bar covering a specific range of values, while the y-axis shows how many data points fall within that range. In this histogram, the bars indicate the count of values within each specified range.\nThe histogram reveals that the data is centered around a value of 12, with values spanning roughly from 8 to 16. The shape of the histogram is approximately bell-shaped, suggesting that the data may follow a normal distribution.",
    "crumbs": [
      "Distribution",
      "Histogram"
    ]
  },
  {
    "objectID": "Distribution/Histogram.html#setup",
    "href": "Distribution/Histogram.html#setup",
    "title": "Histogram",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming Language: R\nDependencies: readr, ggplot2, ggExtra, tidyverse, cowplot, viridis, ggpmisc, ggpubr\n\n\n# Installing necessary packages\nif (!requireNamespace(\"readr\", quietly = TRUE)) {\n  install.packages(\"readr\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"ggExtra\", quietly = TRUE)) {\n  install.packages(\"ggExtra\")\n}\nif (!requireNamespace(\"tidyverse\", quietly = TRUE)) {\n  install.packages(\"tidyverse\")\n}\nif (!requireNamespace(\"cowplot\", quietly = TRUE)) {\n  install.packages(\"cowplot\")\n}\nif (!requireNamespace(\"viridis\", quietly = TRUE)) {\n  install.packages(\"viridis\")\n}\nif (!requireNamespace(\"ggpmisc\", quietly = TRUE)) {\n  install.packages(\"ggpmisc\")\n}\nif (!requireNamespace(\"ggpubr\", quietly = TRUE)) {\n  install.packages(\"ggpubr\")\n}\n\n# Loading the libraries\nlibrary(readr)      # Read tsv files\nlibrary(ggplot2)    # Load ggplot2 for creating plots\nlibrary(ggExtra)    # Load ggExtra for enhancing ggplot2 graphics\nlibrary(tidyverse)  # Load tidyverse for data manipulation functions\nlibrary(cowplot)  # Load cowplot for combining separate ggplots into the same graphic\nlibrary(viridis)    # Load viridis for color maps\nlibrary(ggpmisc)    # Load ggpmisc for extentions to ggplot2 with additional functions for statistical annotation\nlibrary(ggpubr)     # Load ggpubr for extentions to ggplot2 with adding publication-ready themes, arranging multiple plots, and statistical tests",
    "crumbs": [
      "Distribution",
      "Histogram"
    ]
  },
  {
    "objectID": "Distribution/Histogram.html#data-preparation",
    "href": "Distribution/Histogram.html#data-preparation",
    "title": "Histogram",
    "section": "Data Preparation",
    "text": "Data Preparation\nWe used the built-in R datasets (iris, mtcars) and the TCGA-LIHC.htseq_counts.tsv dataset from UCSC Xena DATASETS.\n\n# Read the TSV data\ndata &lt;- readr::read_csv(\"https://bizard-1301043367.cos.ap-guangzhou.myqcloud.com/TCGA-LIHC.htseq_counts.csv.gz\")\n\n# Filter and reshape data for the first gene TSPAN6 (Ensembl ID: ENSG00000000003.13)\ndata1 &lt;- data %&gt;%\n  filter(Ensembl_ID == \"ENSG00000000003.13\") %&gt;%\n  pivot_longer(\n    cols = -Ensembl_ID, \n    names_to = \"sample\", \n    values_to = \"expression\"\n  ) %&gt;%\n  mutate(var = \"var1\")  # Add a column to differentiate the variables\n\n# Filter and reshape data for the second gene SCYL3 (Ensembl ID: ENSG00000000457.12)\ndata2 &lt;- data %&gt;%\n  filter(Ensembl_ID == \"ENSG00000000457.12\") %&gt;%\n  pivot_longer(\n    cols = -Ensembl_ID, \n    names_to = \"sample\", \n    values_to = \"expression\"\n  ) %&gt;%\n  mutate(var = \"var2\")  # Add a column to differentiate the variables\n\n# Combine the two datasets\ndata12 &lt;- bind_rows(data1, data2)\n\n# View the final combined dataset\nhead(data12)\n\n# A tibble: 6 × 4\n  Ensembl_ID         sample           expression var  \n  &lt;chr&gt;              &lt;chr&gt;                 &lt;dbl&gt; &lt;chr&gt;\n1 ENSG00000000003.13 TCGA-DD-A4NG-01A      12.8  var1 \n2 ENSG00000000003.13 TCGA-G3-AAV4-01A       9.72 var1 \n3 ENSG00000000003.13 TCGA-2Y-A9H1-01A      11.3  var1 \n4 ENSG00000000003.13 TCGA-CC-A3M9-01A      11.6  var1 \n5 ENSG00000000003.13 TCGA-K7-AAU7-01A      11.5  var1 \n6 ENSG00000000003.13 TCGA-BC-A10W-01A      12.0  var1",
    "crumbs": [
      "Distribution",
      "Histogram"
    ]
  },
  {
    "objectID": "Distribution/Histogram.html#visualization",
    "href": "Distribution/Histogram.html#visualization",
    "title": "Histogram",
    "section": "Visualization",
    "text": "Visualization\n\n1. Basic Histograms\nFigure 1 illustrates the distribution of expression levels for the TSPAN6 gene across different samples.\n\n# Basic Histogram\np1 &lt;- ggplot(data1, aes(x = expression)) +\n  geom_histogram() + \n  labs(x = \"Gene Expression\", y = \"Count\")\n\np1\n\n\n\n\n\n\n\nFigure 1: Basic Histogram\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nKey Parameters: binwidth / bins\nThe binwidth or bins parameter determines how much data each bin will contain. Modifying these values can significantly affect the appearance of the histogram and the information conveyed.\n\n\n\np2_1 &lt;- ggplot(data1, aes(x = expression)) +\n  geom_histogram(bins = 30, fill = \"skyblue\", color = \"white\") +\n  ggtitle(\"Bins = 30\") + \n  labs(x = \"Gene Expression\", y = \"Count\")\n\np2_2 &lt;- ggplot(data1, aes(x = expression)) +\n  geom_histogram(bins = 50, fill = \"skyblue\", color = \"white\") +\n  ggtitle(\"Bins = 50\") + \n  labs(x = \"Gene Expression\", y = \"Count\")\n\ncowplot::plot_grid(p2_1, p2_2)\n\n\n\n\n\n\n\nFigure 2: Key Parameters: binwidth / bins\n\n\n\n\n\n\n\n2. Histogram with Density Curve\nThe density curve provides a smooth representation of the data distribution. Unlike the histogram, which depends on the number of bins, the density curve uses kernel density estimation (KDE) to smooth the distribution. This allows a clearer understanding of the overall trend and shape of the data.\n\np1 &lt;- ggplot(data1, aes(x = expression)) +\n  geom_histogram(aes(y = after_stat(density)), bins = 30, fill = \"skyblue\", color = \"white\") +\n  geom_density(alpha = 0.2, fill = \"#FF6666\") + \n  labs(x = \"Gene Expression\", y = \"Density\")\n\np1\n\n\n\n\n\n\n\nFigure 3: Histogram with Density Curve\n\n\n\n\n\n\n\n3. Mirrored Histogram\nA mirrored histogram provides an intuitive way to compare the distributions of two datasets. This visualization uses a mirrored structure, allowing you to quickly assess symmetry or differences between the datasets. By overlaying both histograms into a single plot, the mirrored histogram conserves visualization space while maintaining a clear representation of data distribution.\n\np &lt;- ggplot(data12, aes(x = expression, fill = var)) +\n  geom_histogram(data = subset(data12, var == \"var1\"), \n                 aes(y = after_stat(density)), \n                 binwidth = 0.5, \n                 alpha = 0.7, \n                 fill = \"#69b3a2\") +\n  geom_histogram(data = subset(data12, var == \"var2\"), \n                 aes(y = -after_stat(density)), \n                 binwidth = 0.5, \n                 alpha = 0.7, \n                 fill = \"#404080\") +\n  scale_fill_manual(values = c(\"var1\" = \"#69b3a2\", \"var2\" = \"#404080\")) +\n  labs(x = \"Gene Expression\", y = \"Density\")\n\np\n\n\n\n\n\n\n\nFigure 4: Mirrored Histogram\n\n\n\n\n\n\n\n4. Overlapping Histograms on the Same Axis\nOverlaying or placing multiple histograms side by side on the same axis enables a direct comparison of distributions for two or more datasets within the same coordinate system. By adjusting colors and transparency, you can clearly visualize overlapping regions and distinguish between datasets. This technique is ideal for comparing 2–3 groups; more groups may lead to visual clutter, making the plot difficult to interpret.\n\np &lt;- data12 %&gt;%\n  ggplot(aes(x = expression, fill = var)) +\n  geom_histogram(color = \"#e9ecef\", alpha = 0.6, position = 'identity') +\n  scale_fill_manual(values = c(\"#69b3a2\", \"#404080\")) +\n  labs(x = \"Expression Value\", y = \"Count\", fill = \"Type\") +\n  theme_minimal()\n\np\n\n\n\n\n\n\n\nFigure 5: Overlapping Histograms on the Same Axis\n\n\n\n\n\n\n\n5. Faceted Histograms for Multiple Variables\nFaceted histograms provide a structured way to compare and analyze data across multiple variables or categorical groups by displaying them in separate panels. Unlike traditional histograms, faceted layouts are particularly effective for avoiding overlap in visualizations, ensuring clarity in comparisons, and enabling multidimensional data exploration. This approach is ideal for grouped or classified data and enhances the interpretability of complex datasets.\n\n# Use built-in iris dataset\ndata &lt;- iris\n\n# Reshape the data from wide to long format\ndata &lt;- data %&gt;%\n  gather(key = \"variable\", value = \"value\", -Species)  # Exclude the Species column\n\n# Plot the faceted histograms\np &lt;- data %&gt;%\n  ggplot(aes(x = value, color = Species, fill = Species)) +\n  geom_histogram(alpha = 0.6, binwidth = 0.3, position = \"identity\") +\n  scale_fill_viridis(discrete = TRUE, option = \"D\") +\n  scale_color_viridis(discrete = TRUE, option = \"D\") +\n  theme(\n    legend.position = \"bottom\",\n    panel.spacing = unit(0.5, \"lines\"),\n    strip.text.x = element_text(size = 10)\n  ) +\n  xlab(\"Value\") +\n  ylab(\"Frequency\") +\n  facet_grid(Species ~ variable, scales = \"free_x\")  # Create a facet grid\n\np\n\n\n\n\n\n\n\nFigure 6: Faceted Histograms for Multiple Variables\n\n\n\n\n\n\n\n6. Adding Marginal Distributions Using ggMarginal()\n\n# Create a scatterplot with marginal histograms\np &lt;- ggplot(mtcars, aes(x = wt, y = mpg, color = factor(cyl), size = factor(cyl))) +\n  geom_point(aes(color = factor(cyl)), show.legend = TRUE) +  # Scatter points with color mapped to cylinder\n  geom_smooth(method = 'lm', formula = y ~ x, se = TRUE, linewidth = 1, aes(color = factor(cyl))) +  # Regression lines\n  scale_color_manual(values = c(\"#2e3b97\", \"#faad61\", \"#b76252\")) +  # Custom colors for regression lines\n  stat_regline_equation(\n    aes(label = paste(after_stat(eq.label), after_stat(rr.label), sep = \"~~~~\")),\n    formula = y ~ x, size = 3,\n    position = position_nudge(x = 2.7, y = 1)\n  ) +  # Add regression equations and R² values\n  theme(legend.position = \"none\")  # Hide legend for cleaner visualization\n\n# Add marginal histograms to the scatterplot\np1 &lt;- ggMarginal(p, type = \"histogram\")\n\n# Display the plot\np1\n\n\n\n\n\n\n\nFigure 7: Adding Marginal Distributions Using ggMarginal()\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nCustomizable Parameters for Plots with Marginal Distributions\n\nChange the size of the marginal plot using the size parameter.\nCustomize the appearance of the marginal plot with common parameters.\nDisplay only one marginal plot (either the x or y axis) using margins = 'x' or margins = 'y'.\n\n\n\n\n# Create a scatterplot with marginal histograms\np &lt;- ggplot(mtcars, aes(x = wt, y = mpg, color = factor(cyl), size = factor(cyl))) +\n  geom_point(aes(color = factor(cyl)), show.legend = TRUE) +  # Scatter points with color mapped to cylinder\n  geom_smooth(method = 'lm', formula = y ~ x, se = TRUE, linewidth = 1, aes(color = factor(cyl))) +  # Regression lines\n  scale_color_manual(values = c(\"#2e3b97\", \"#faad61\", \"#b76252\")) +  # Custom colors for regression lines\n  stat_regline_equation(\n    aes(label = paste(after_stat(eq.label), after_stat(rr.label), sep = \"~~~~\")),\n    formula = y ~ x, size = 1.5,\n    position = position_nudge(x = 2.2, y = 1)\n  ) +  # Add regression equations and R² values\n  theme(legend.position = \"none\")  # Hide legend for cleaner visualization\n\n# Change the size of the marginal plot\np1 &lt;- ggMarginal(p, type = \"histogram\", size = 10)\n\n# Customize the appearance of the marginal plot\np2 &lt;- ggMarginal(p, type = \"histogram\", fill = \"slateblue\", xparams = list(bins = 10))\n\n# Display only one marginal plot (x-axis marginal plot)\np3 &lt;- ggMarginal(p, type = \"histogram\", margins = 'x')\n\ncowplot::plot_grid(p1, p2, p3)\n\n\n\n\n\n\n\nFigure 8: Customizable Parameters for Plots with Marginal Distributions",
    "crumbs": [
      "Distribution",
      "Histogram"
    ]
  },
  {
    "objectID": "Distribution/Histogram.html#applications",
    "href": "Distribution/Histogram.html#applications",
    "title": "Histogram",
    "section": "Applications",
    "text": "Applications\n\n1. Applications of Basic Histogram\n\n\n\n\n\n\nFigure 9: Applications of Basic Histogram\n\n\n\nFigure 9 shows the differences between the relative frequencies of human X and human Y chromosome’s histograms for n = 6. [1]\n\n\n2. Applications of Faceted Histograms\n\n\n\n\n\n\n\n\n\n\n\n(a) Xiang, L. et al.(2023)\n\n\n\n\n\n\n\n\n\n\n\n(b) Gihr, G.A. et al.(2020)\n\n\n\n\n\n\n\nFigure 10: Applications of Faceted Histograms\n\n\n\nFig. 10a shows the imaging features and whole-lesion histogram analysis of typical SPLs. [2]\nFig. 10b demonstrates examples of cranial MRI from patients with WHO grade I (upper row) and WHO grade II astrocytoma (lower row) including the corresponding whole tumor ADC histogram, H&E staining and Ki-67 immunohistochemistry. [3]",
    "crumbs": [
      "Distribution",
      "Histogram"
    ]
  },
  {
    "objectID": "Distribution/Histogram.html#reference",
    "href": "Distribution/Histogram.html#reference",
    "title": "Histogram",
    "section": "Reference",
    "text": "Reference\n\nCosta, A. M., Machado, J. T., & Quelhas, M. D. (2011). Histogram-based DNA analysis for the visualization of chromosome, genome, and species information. Bioinformatics, 27(9), 1207–1214. https://doi.org/10.1093/bioinformatics/btr131\nXiang, L., Yang, H., Qin, Y., Wen, Y., Liu, X., & Zeng, W.-B. (2023). Differential value of diffusion kurtosis imaging and intravoxel incoherent motion in benign and malignant solitary pulmonary lesions. Frontiers in Oncology, 12, Article 1075072. https://doi.org/10.3389/fonc.2022.1075072\nGihr, G. A., Horvath-Rizea, D., Hekeler, E., Ganslandt, O., Henkes, H., Hoffmann, K.-T., Scherlach, C., & Schob, S. (2020). Histogram analysis of diffusion weighted imaging in low-grade gliomas: in vivo characterization of tumor architecture and corresponding neuropathology. Frontiers in Oncology, 10, 206. https://doi.org/10.3389/fonc.2020.00206\nWickham, H., Hester J, & Bryan J. (2024). readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr\nWickham, H. (2016). ggplot2: Elegant graphics for data analysis. Springer. https://ggplot2.tidyverse.org\nGao, Y. (2021). ggExtra: Add marginal plots to ggplot2. https://cran.r-project.org/package=ggExtra\nWickham, H., & RStudio Team. (2019). tidyverse: Easily install and load the ‘tidyverse’. https://cran.r-project.org/package=tidyverse\nClaus O. Wilke. (2024). cowplot: Streamlined Plot Theme and Plot Annotations for ‘ggplot2’. https://CRAN.R-project.org/package=cowplot\nGarcía, M. (2018). viridis: Default color maps from ‘matplotlib’. https://cran.r-project.org/package=viridis\nAubry, R., & Bouchard, C. (2020). ggpmisc: Miscellaneous extensions to ‘ggplot2’. https://cran.r-project.org/package=ggpmisc\nKassambara, A. (2021). ggpubr: ‘ggplot2’ based publication-ready plots. https://cran.r-project.org/package=ggpubr",
    "crumbs": [
      "Distribution",
      "Histogram"
    ]
  },
  {
    "objectID": "Omics/VolcanoPlot.html",
    "href": "Omics/VolcanoPlot.html",
    "title": "Volcano Plot",
    "section": "",
    "text": "The volcano plot is used to compare the two groups and obtain the up-regulation/down-regulation between the two groups. The screening basis is the p value and FC value, which are converted to -logP value and log2(FC) value. The imported data can be the OTU table or ASV table of the microbiome, the table of transcriptome gene expression, or the features table of metabolomics and other multi-omics data."
  },
  {
    "objectID": "Omics/VolcanoPlot.html#example",
    "href": "Omics/VolcanoPlot.html#example",
    "title": "Volcano Plot",
    "section": "Example",
    "text": "Example"
  },
  {
    "objectID": "Omics/VolcanoPlot.html#setup",
    "href": "Omics/VolcanoPlot.html#setup",
    "title": "Volcano Plot",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: tidyverse; readxl; ggrepel\n\n\n# Installing necessary packages\nif (!requireNamespace(\"tidyverse\", quietly = TRUE)) {\n  install.packages(\"tidyverse\")\n}\nif (!requireNamespace(\"readxl\", quietly = TRUE)) {\n  install.packages(\"readxl\")\n}\nif (!requireNamespace(\"ggrepel\", quietly = TRUE)) {\n  install.packages(\"ggrepel\")\n}\n\n# Load packages\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(ggrepel)"
  },
  {
    "objectID": "Omics/VolcanoPlot.html#data-preparation",
    "href": "Omics/VolcanoPlot.html#data-preparation",
    "title": "Volcano Plot",
    "section": "Data Preparation",
    "text": "Data Preparation\nWe import the volcano plot example data from omicshare.\n\n# Load excel data\ndata &lt;- read_excel(\"files/volcano.eg.xlsx\")\n\n# Rename column names (handle special characters)\ndata &lt;- data %&gt;%\n  rename(log2FC = \"log2 Ratio(WT0/LOG)\", Pvalue = \"Pvalue\")\n# Handle the case where the p-value is 0 (avoid calculating -Inf)\ndata &lt;- data %&gt;%\n  mutate(log10P = -log10(Pvalue + 1e-300)) # Make sure to handle the case where P=0\n# Convert to numeric type and handle values that fail to convert (such as invalid characters)\ndata &lt;- data %&gt;%\n  mutate(\n    log2FC = as.numeric(log2FC) # Values that fail the conversion become NA\n  )\n\n# Find the original value that caused the conversion to fail\ndata %&gt;%\n  filter(is.na(log2FC)) %&gt;%\n  select(log2FC) # View the raw log2FC values for these lines\n\n# A tibble: 0 × 1\n# ℹ 1 variable: log2FC &lt;dbl&gt;\n\n# Repair the data as needed (e.g. replace or remove outliers)\n# Example: Replace \"Inf\" with an actual value or filter out\ndata &lt;- data %&gt;%\n  mutate(\n    log2FC = ifelse(log2FC == \"Inf\", 100, log2FC), # Adjust according to needs\n    log2FC = as.numeric(log2FC)\n    ) %&gt;%\n  filter(!is.na(log2FC)) # Delete the rows that cannot be repaired\n\n# Defining significance (satisfying both P value &lt; 0.05 and |log2FC| &gt; 1)\n# Define significance categories (upregulated, downregulated, not significant)\ndata &lt;- data %&gt;%\n  mutate(\n    significant = case_when(\n      Pvalue &lt; 0.05 & log2FC &gt; 2 ~ \"Upregulated\", # Up (red)\n      Pvalue &lt; 0.05 & log2FC &lt; -2 ~ \"Downregulated\", # Down (green)\n      TRUE ~ \"Not significant\" # Not significant (grey)\n    )\n  )\n\n# View data structure\nhead(data, 5)\n\n# A tibble: 5 × 10\n  GeneID         LOG_count WT0_count LOG_rpkm WT0_rpkm  log2FC    Pvalue     FDR\n  &lt;chr&gt;              &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n1 Unigene0000003     17243     17525   932.     942.    0.0168   5.15e-1 6.73e-1\n2 Unigene0000004        65       101     4.12     6.37  0.629    6.64e-3 1.79e-2\n3 Unigene0000005       909       984    36.9     39.7   0.108    1.26e-1 2.25e-1\n4 Unigene0000006      1376      1082    74.7     58.5  -0.353    1.17e-8 6.86e-8\n5 Unigene0000007       121        73    15.7      9.42 -0.736    7.42e-4 2.45e-3\n# ℹ 2 more variables: significant &lt;chr&gt;, log10P &lt;dbl&gt;"
  },
  {
    "objectID": "Omics/VolcanoPlot.html#visualization",
    "href": "Omics/VolcanoPlot.html#visualization",
    "title": "Volcano Plot",
    "section": "Visualization",
    "text": "Visualization\n\n1. Basic volcano plot\n\n# Basic volcano plot\np &lt;- \n  ggplot(data, aes(x = log2FC, y = -log10(Pvalue))) + # Plot preliminary volcano\n  # Plot scatter points, colored by significant categories\n  geom_point(aes(color = significant), alpha = 0.6, size = 1.5) + \n  # Set color mapping (up: red, down: green, no significant: gray)\n  scale_color_manual(\n    values = c(\"Upregulated\" = \"red\", \"Downregulated\" = \"green\", \"Not significant\" = \"gray\"),\n    name = \"Significance\" # Legend Title\n    ) +\n  # Adding a filter threshold line\n  geom_vline(xintercept = c(-2, 2), linetype = \"dashed\", color = \"green\", linewidth = 0.5) + # log2FC threshold line\n  geom_hline(yintercept = -log10(0.05), linetype = \"dashed\", color = \"blue\", linewidth = 0.5) + # p-value threshold line\n  # Adjust axes and titles\n  labs(x = \"log2(Fold Change)\", y = \"-log10(P-value)\",\n       title = \"Volcano Plot with Thresholds\") +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5, face = \"bold\"), # Title centered bold\n        legend.position = \"right\") # Legend position\n\np\n\n\n\n\n\n\n\nFigure 1: Basic volcano plot\n\n\n\n\n\n\n\n2. Labeled volcano plot\n\n# Add Label\n# Step 1: Screening genes to be annotated\nlabel_data &lt;- data %&gt;%\n  filter(Pvalue &lt; 0.05) %&gt;% # Screening of significant genes\n  group_by(significant) %&gt;% # Group by up and down\n  top_n(10, abs(log2FC)) %&gt;% # Take the 10 with the largest absolute values of log2FC\n  ungroup()\n# Step 2: Define label colors (light red and light green)\nlabel_colors &lt;- c(\n  \"Upregulated\" = \"#FF9999\",\n  \"Downregulated\" = \"#99FF99\"\n  )\n# Step 3: Draw a labeled volcano plot\np &lt;- \n  ggplot(data, aes(x = log2FC, y = -log10(Pvalue))) +\n  geom_point(aes(color = significant), alpha = 0.6, size = 1.5) +\n  # Add gene tags (only target genes are marked)\n  geom_text_repel(\n    data = label_data,\n    aes(label = GeneID, color = significant), # Assume that the gene name column is named OTU ID\n    size = 3,\n    box.padding = 0.5, # Label padding\n    max.overlaps = 50, # Maximum overlap allowed\n    segment.color = \"grey50\", # Connection line color\n    show.legend = FALSE\n    ) +\n  # Set color mapping (original color + label color)\n  scale_color_manual(\n    values = c(\"Upregulated\" = \"red\", \"Downregulated\" = \"green\", \"Not significant\" = \"gray\"),\n    guide = guide_legend(override.aes = list(\n      color = c(\"red\", \"green\", \"gray\"), # Legend color remains original\n      label = \"\" # No text is displayed in the legend\n      ))) +\n  # Control label color (light red and light green)\n  scale_color_manual(\n    values = label_colors,\n    guide = \"none\" # Hide additional legend\n    ) +\n  # Keep the original threshold line and title\n  geom_vline(xintercept = c(-2, 2), linetype = \"dashed\", color = \"black\") +\n  geom_hline(yintercept = -log10(0.05), linetype = \"dashed\", color = \"black\") +\n  labs(title = \"Volcano Plot with Top 20 Labels\") +\n  theme_minimal()\n\np\n\n\n\n\n\n\n\nFigure 2: Labeled volcano plot"
  },
  {
    "objectID": "Omics/SankeyBubblePlot.html#setup",
    "href": "Omics/SankeyBubblePlot.html#setup",
    "title": "Sankey Bubble plot",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: tidyverse; readr; ggalluvial; patchwork\n\n\n# Installing necessary packages\nif (!requireNamespace(\"tidyverse\", quietly = TRUE)) {\n  install.packages(\"tidyverse\")\n}\nif (!requireNamespace(\"readr\", quietly = TRUE)) {\n  install.packages(\"readr\")\n}\nif (!requireNamespace(\"ggalluvial\", quietly = TRUE)) {\n  install.packages(\"ggalluvial\")\n}\nif (!requireNamespace(\"patchwork\", quietly = TRUE)) {\n  install.packages(\"patchwork\")\n}\n\n# Load packages\nlibrary(tidyverse)\nlibrary(readr)\nlibrary(ggalluvial)\nlibrary(patchwork)"
  },
  {
    "objectID": "Omics/SankeyBubblePlot.html#data-preparation",
    "href": "Omics/SankeyBubblePlot.html#data-preparation",
    "title": "Sankey Bubble plot",
    "section": "Data Preparation",
    "text": "Data Preparation\nWe imported pathway enrichment data from DAVID for network pharmacology annotation analysis.\n\n# Load data\ndata &lt;- read_tsv(\"files/DAVID.txt\")\n\n# Add a new categorical column\nget_category &lt;- function(cat) {\n  if (grepl(\"BP\", cat)) return(\"BP\")\n  if (grepl(\"MF\", cat)) return(\"MF\")\n  if (grepl(\"CC\", cat)) return(\"CC\")\n  if (grepl(\"KEGG\", cat)) return(\"KEGG\")\n  return(NA)\n}\ndata$MainCategory &lt;- sapply(data$Category, get_category)\n\n# Remove SMART and NA\ndata2 &lt;- data %&gt;%\n  filter(!grepl(\"SMART\", Category)) %&gt;%\n  filter(!is.na(MainCategory))\n\n# Sort each category and take the top 10\ntopN &lt;- function(data, n=10) {\n  data %&gt;%\n  arrange(desc(Count), PValue) %&gt;%\n  head(n)\n}\nresult &lt;- data2 %&gt;%\n  group_by(MainCategory) %&gt;%\n  group_modify(~topN(.x, 10)) %&gt;%\n  ungroup()\n\n# KEGG pathway annotation\nresult &lt;- result %&gt;%\n  mutate(\n    Source = ifelse(MainCategory == \"KEGG\", \"KEGG\", \"GO\"),\n    KEGG_Group = case_when(\n      MainCategory == \"KEGG\" & str_detect(Term,\"Neuro|synapse|neurodegeneration|Alzheimer|Parkinson|Prion\") ~ \"Nervous system\",\n      MainCategory == \"KEGG\" & str_detect(Term, \"Cytokine|inflammatory\") ~ \"Immune system\",\n      MainCategory == \"KEGG\" & str_detect(Term, \"Lipid|atherosclerosis\") ~ \"Lipid metabolism\",\n      MainCategory == \"KEGG\" ~ \"Other KEGG\",\n      TRUE ~ NA_character_\n      ),\n    GO_Group = ifelse(MainCategory != \"KEGG\", MainCategory, NA)\n    )\nalluvial_data &lt;- result %&gt;%\n  mutate(\n    Term = str_replace(Term, \"^GO:\\\\d+~\", \"\"), # Remove GO number\n    Term = str_replace(Term, \"^hsa\\\\d+:?\", \"\") # Remove KEGG number\n    )\n\n# GO Section\ngo_links &lt;- result %&gt;%\n  filter(Source == \"GO\") %&gt;%\n  transmute(\n    Source = Source,\n    Group = GO_Group,\n    Term = Term,\n    Count = Count\n    )\n\n# KEGG Section\nkegg_links &lt;- result %&gt;%\n  filter(Source == \"KEGG\") %&gt;%\n  transmute(\n    Source = Source,\n    Group = KEGG_Group,\n    Term = Term,\n    Count = Count\n    )\n\n# Generate Sankey diagram data\nalluvial_data &lt;- result %&gt;%\n  mutate(Group = ifelse(Source == \"KEGG\", KEGG_Group, GO_Group)) %&gt;%\n  select(Source, Group, Term, Count, FDR, FoldEnrichment, MainCategory)\n\n# Ensure character type\nalluvial_data$Source &lt;- as.character(alluvial_data$Source)\nalluvial_data$Group &lt;- as.character(alluvial_data$Group)\nalluvial_data$Term &lt;- as.character(alluvial_data$Term)\n\n# Bind\nalluvial_data &lt;- bind_rows(go_links, kegg_links)\n\n# Arrange the term column in ascending order of count value, and ensure that the bubble chart and Sankey chart are in the same order\nterm_levels &lt;- alluvial_data %&gt;%\n  arrange(Source, Group, desc(Count)) %&gt;%\n  pull(Term) %&gt;%\n  unique()\nalluvial_data$Term &lt;- factor(alluvial_data$Term, levels = term_levels)\n\n# View data structure\nhead(alluvial_data, 5)\n\n# A tibble: 5 × 4\n  Source Group Term                                                        Count\n  &lt;chr&gt;  &lt;chr&gt; &lt;fct&gt;                                                       &lt;dbl&gt;\n1 GO     BP    GO:0010628~positive regulation of gene expression              12\n2 GO     BP    GO:0045944~positive regulation of transcription by RNA pol…    11\n3 GO     BP    GO:0007187~G protein-coupled receptor signaling pathway, c…    10\n4 GO     BP    GO:0007268~chemical synaptic transmission                      10\n5 GO     BP    GO:0006954~inflammatory response                               10"
  },
  {
    "objectID": "Omics/SankeyBubblePlot.html#visualization",
    "href": "Omics/SankeyBubblePlot.html#visualization",
    "title": "Sankey Bubble plot",
    "section": "Visualization",
    "text": "Visualization\n\n1. Sankey Diagram\n\n# Sankey diagram (the Term column does not display labels)\n\n# Ensure Group is of character type and does not contain NA\nalluvial_data$Group &lt;- as.character(alluvial_data$Group)\nalluvial_data$Group[is.na(alluvial_data$Group)] &lt;- \"Other\"\n# Calculate the total Count of each Group\ngroup_order &lt;- alluvial_data %&gt;%\n  group_by(Group) %&gt;%\n  summarise(group_count = sum(Count, na.rm = TRUE)) %&gt;%\n  arrange(desc(group_count)) %&gt;%\n  pull(Group)\n# Set group to an ordered factor\nalluvial_data$Group &lt;- factor(alluvial_data$Group, levels = group_order)\n# Sort the Term column and set term as an ordered factor\nterm_order &lt;- alluvial_data %&gt;%\n  group_by(Term) %&gt;%\n  summarise(total_count = sum(Count, na.rm = TRUE)) %&gt;%\n  arrange(desc(total_count)) %&gt;%\n  pull(Term)\nalluvial_data$Term &lt;- factor(alluvial_data$Term, levels = term_order)\n# Retrieve the ordered labels of the group\ngroup_labels &lt;- levels(alluvial_data$Group)\ngroup_labels &lt;- c(\"BP\", \"MF\", \"CC\", \"Nervous system\", \"Immune system\", \"Lipid metabolism\", \"Other KEGG\")\nterm_labels &lt;- levels(alluvial_data$Term)\n\np1 &lt;- ggplot(\n  alluvial_data,\n  aes(axis1 = Source, axis2 = Group, axis3 = Term, y = 1)) +\n  geom_alluvium(aes(fill = Group), width = 1/12, alpha = 0.8) +\n  geom_stratum(width = 1/12, fill = \"grey\", color = \"black\") +\n  scale_fill_manual(values = c(\n    \"BP\" = \"#33ad37\",\"MF\" = \"#f2c867\",\"CC\" = \"#d45327\", \n    \"Nervous system\" = \"#2eb6aa\", \"Immune system\" = \"#3e4999\", \n    \"Lipid metabolism\" = \"#4fc1e4\", \"Other KEGG\" = \"#e0c4ce\")) +\n  geom_text(stat = \"stratum\", aes(label = ifelse(\n    after_stat(stratum) %in% group_labels, after_stat(stratum),\n    ifelse(after_stat(stratum) %in% term_labels, after_stat(stratum), \"\")\n    )), size = 3) +\n  scale_x_discrete(\n    limits = c(\"Source\", \"Group\", \"Term\"),\n    labels = c(\"Source\", \"Group\", \"term\"), expand = c(.05, .05)) +\n  labs(title = NULL, y = NULL, x = NULL) +\n  theme_minimal(base_size = 12) +\n  theme(\n    axis.title.x = element_blank(),\n    axis.text.x = element_text(size = 10),\n    axis.text.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    plot.margin = margin(5, 5, 5, 5), # This is consistent with p2\n    panel.grid = element_blank()\n    ) +\n  guides(fill = \"none\")\n\np1\n\n\n\n\n\n\n\nFigure 1: Sankey Diagram\n\n\n\n\n\n\n\n2. Bubble Plot\n\n# Bubble plot (Term label only on the right)\n# Prepare term_levels first, making sure the order is consistent with the y-axis\nterm_levels &lt;- levels(alluvial_data$Term)\n# Generate bubble plot data\nalluvial_data &lt;- result %&gt;%\n  mutate(Group = ifelse(Source == \"KEGG\", KEGG_Group, GO_Group)) %&gt;%\n  select(Source, Group, Term, Count, FDR, FoldEnrichment, MainCategory)\n\np2 &lt;- ggplot(alluvial_data, aes(x = log2(FoldEnrichment), y = Term)) +\n  # Segment: from x = min_x - offset to x = log2(FoldEnrichment)\n  geom_segment(aes(\n    x = min(log2(FoldEnrichment), na.rm = TRUE) - 0.5,\n    xend = log2(FoldEnrichment),\n    y = Term, yend = Term),\n    linetype = \"dashed\", color = \"grey50\") +\n  # Left label\n  geom_text(aes(\n    x = min(log2(FoldEnrichment), na.rm = TRUE) - 0.2,\n    label = Term\n    ), hjust = 1, size = 3) +\n  # Bubble\n  geom_point(aes(size = Count, color = -log10(FDR))) +\n  scale_y_discrete(limits = rev(term_levels), position = \"right\") +\n  scale_color_gradient(low = \"#4659a7\", high = \"#de4f30\") +\n  labs(title = NULL, x = \"log2(FoldEnrichment)\", y = NULL, color = \"-log10(FDR)\") +\n  theme_minimal() +\n  theme(\n    axis.text.y.left = element_blank(),\n    axis.text.y.right = element_blank(), # No label is displayed on the right\n    axis.title.y = element_blank(),\n    plot.margin = margin(5, 5, 5, 0),\n    panel.grid.major.y = element_blank()\n    )\n\np2\n\n\n\n\n\n\n\nFigure 2: Bubble Plot\n\n\n\n\n\n\n\n3. Combine\n\ncombined_plot &lt;- p1 + p2 + plot_layout(widths = c(1.5, 2), guides = \"collect\")\nprint(combined_plot)\n\n\n\n\n\n\n\nFigure 3: Combine"
  },
  {
    "objectID": "Omics/NetworkPlot.html",
    "href": "Omics/NetworkPlot.html",
    "title": "Network Plot",
    "section": "",
    "text": "In microbiome research, it is crucial to understand the interactions between microorganisms. Network analysis is a powerful method that can help us visualize and quantify these complex relationships. Next, we will introduce the network operation and annotation functions of the MetaNet package, which can make our network analysis more in-depth and intuitive."
  },
  {
    "objectID": "Omics/NetworkPlot.html#example",
    "href": "Omics/NetworkPlot.html#example",
    "title": "Network Plot",
    "section": "Example",
    "text": "Example"
  },
  {
    "objectID": "Omics/NetworkPlot.html#setup",
    "href": "Omics/NetworkPlot.html#setup",
    "title": "Network Plot",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: MetaNet; pcutils; igraph; dplyr\n\n\n# Installing necessary packages\nif (!requireNamespace(\"MetaNet\", quietly = TRUE)) {\n  install.packages(\"MetaNet\")\n}\nif (!requireNamespace(\"pcutils\", quietly = TRUE)) {\n  install.packages(\"pcutils\")\n}\nif (!requireNamespace(\"igraph\", quietly = TRUE)) {\n  install.packages(\"igraph\")\n}\nif (!requireNamespace(\"dplyr\", quietly = TRUE)) {\n  install.packages(\"dplyr\")\n}\n\n# Load packages\nlibrary(MetaNet)\nlibrary(pcutils)\nlibrary(igraph)\nlibrary(dplyr)"
  },
  {
    "objectID": "Omics/NetworkPlot.html#data-preparation",
    "href": "Omics/NetworkPlot.html#data-preparation",
    "title": "Network Plot",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n1. Load data\n\nThe data uses the otutab dataset in pcutils\nMetaNet is an R package for comprehensive network analysis of omics data\nThe c_net_calculate() function is used to quickly calculate the correlation between variables\nThe c_net_build() function is used to build the network\n\n\ndata(otutab, package = \"pcutils\")\nt(otutab) -&gt; totu\nc_net_calculate(totu, method = \"spearman\") -&gt; corr\nc_net_build(corr, r_threshold = 0.6, p_threshold = 0.05, delete_single = T) -&gt; co_net\nclass(co_net) \n\n[1] \"metanet\" \"igraph\" \n\n\n\n\n2. Get network properties\nAfter building a network with MetaNet, you get a classification object, which comes from igraph. This means that you can use MetaNet’s proprietary functions and igraph’s general functions at the same time. Next, learn how to get basic information about the network:\n\n# Get overall network properties\nget_n(co_net)\n\n  n_type\n1 single\n\n# View node properties\nget_v(co_net) %&gt;% head(5)\n\n                          name  v_group  v_class size\n1 s__un_f__Thermomonosporaceae v_group1 v_class1    4\n2        s__Pelomonas_puraquae v_group1 v_class1    4\n3     s__Rhizobacter_bergeniae v_group1 v_class1    4\n4     s__Flavobacterium_terrae v_group1 v_class1    4\n5         s__un_g__Rhizobacter v_group1 v_class1    4\n                         label  shape   color\n1 s__un_f__Thermomonosporaceae circle #a6bce3\n2        s__Pelomonas_puraquae circle #a6bce3\n3     s__Rhizobacter_bergeniae circle #a6bce3\n4     s__Flavobacterium_terrae circle #a6bce3\n5         s__un_g__Rhizobacter circle #a6bce3\n\n# View edge properties\nget_e(co_net) %&gt;% head(5)\n\n  id                         from                            to    weight\n1  1 s__un_f__Thermomonosporaceae     s__Actinocorallia_herbida 0.6759546\n2  2 s__un_f__Thermomonosporaceae       s__Kribbella_catacumbae 0.6742386\n3  3 s__un_f__Thermomonosporaceae       s__Kineosporia_rhamnosa 0.7378741\n4  4 s__un_f__Thermomonosporaceae   s__un_f__Micromonosporaceae 0.6236449\n5  5 s__un_f__Thermomonosporaceae s__Flavobacterium_saliperosum 0.6045747\n        cor      p.value   e_type     width   color  e_class lty\n1 0.6759546 0.0020739524 positive 0.6759546 #48A4F0 e_class1   1\n2 0.6742386 0.0021502138 positive 0.6742386 #48A4F0 e_class1   1\n3 0.7378741 0.0004730567 positive 0.7378741 #48A4F0 e_class1   1\n4 0.6236449 0.0056818984 positive 0.6236449 #48A4F0 e_class1   1\n5 0.6045747 0.0078660171 positive 0.6045747 #48A4F0 e_class1   1\n\n\nThe data frames returned by these functions contain the most basic key information of multi-omics biological networks, such as node name, grouping, size, edge weight, etc. MetaNet has set some internal attributes (such as v_group, v_class, e_type, etc.) when building the network, which will affect subsequent analysis and visualization.\n\n\n3. Adding biological meaning to networks\nIn microbiome research, network structure alone is not enough, we need to integrate biological information such as taxonomy and abundance. MetaNet provides flexible annotation functions:\n\n# Adding classification information to a node\nc_net_annotate(co_net, taxonomy[\"Phylum\"], mode = \"v\") -&gt; co_net1\nanno &lt;- data.frame(\"from\" = \"s__un_f__Thermomonosporaceae\", \n                   \"to\" = \"s__Actinocorallia_herbida\", new_atr = \"new\")\nc_net_annotate(co_net, anno, mode = \"e\") -&gt; co_net1\n\nIn MetaNet, a c_net_set() function is provided, which can add multiple annotation tables at the same time and specify which columns are used to set node size, color and other attributes:\n\nAbundance_df &lt;- data.frame(\"Abundance\" = colSums(totu))\nco_net1 &lt;- c_net_set(co_net, taxonomy[\"Phylum\"], Abundance_df)\nco_net1 &lt;- co_net\nV(co_net1)$new_attri &lt;- seq_len(length(co_net1))\nE(co_net1)$new_attri &lt;- \"new attribute\"\nget_e(co_net1) %&gt;% head(5)\n\n  id                         from                            to    weight\n1  1 s__un_f__Thermomonosporaceae     s__Actinocorallia_herbida 0.6759546\n2  2 s__un_f__Thermomonosporaceae       s__Kribbella_catacumbae 0.6742386\n3  3 s__un_f__Thermomonosporaceae       s__Kineosporia_rhamnosa 0.7378741\n4  4 s__un_f__Thermomonosporaceae   s__un_f__Micromonosporaceae 0.6236449\n5  5 s__un_f__Thermomonosporaceae s__Flavobacterium_saliperosum 0.6045747\n        cor      p.value   e_type     width   color  e_class lty     new_attri\n1 0.6759546 0.0020739524 positive 0.6759546 #48A4F0 e_class1   1 new attribute\n2 0.6742386 0.0021502138 positive 0.6742386 #48A4F0 e_class1   1 new attribute\n3 0.7378741 0.0004730567 positive 0.7378741 #48A4F0 e_class1   1 new attribute\n4 0.6236449 0.0056818984 positive 0.6236449 #48A4F0 e_class1   1 new attribute\n5 0.6045747 0.0078660171 positive 0.6045747 #48A4F0 e_class1   1 new attribute\n\n\nIn this way, a network information with both statistical significance and biological background can be obtained."
  },
  {
    "objectID": "Omics/NetworkPlot.html#visualization",
    "href": "Omics/NetworkPlot.html#visualization",
    "title": "Network Plot",
    "section": "Visualization",
    "text": "Visualization\n\n1. Build network\nSimple multi-omics network: contains information of microbiome, metabolome, transcriptome, etc.\n\n# Basic Network\ndata(\"multi_test\", package = \"MetaNet\")\ndata(\"c_net\", package = \"MetaNet\")\nmulti1 &lt;- multi_net_build(list(Microbiome = micro, Metabolome = metab, Transcriptome = transc))\nplot(multi1)\n\n\n\n\nBasic Network\n\n\n\n\n\n\n2. Add annotation\n\n# Set the node class\nmulti1_with_anno &lt;- c_net_set(multi1, \n                              micro_g, metab_g, \n                              transc_g, \n                              vertex_class = c(\"Phylum\", \"kingdom\", \"type\"))\n\n# Set the node size\nmulti1_with_anno &lt;- c_net_set(multi1_with_anno,\n                              data.frame(\"Abundance1\" = colSums(micro)),\n                              data.frame(\"Abundance2\" = colSums(metab)),\n                              data.frame(\"Abundance3\" = colSums(transc)),\n                              vertex_size = paste0(\"Abundance\", 1:3))\n\nplot(multi1_with_anno)\n\n\n\n\nAdd annotation\n\n\n\n\n\n\n3. Filter subnetwork\n\n# Filter subnetwork\ndata(\"multi_net\", package = \"MetaNet\")\nmulti2 &lt;- c_net_filter(multi1_with_anno, v_group %in% \n                         c(\"Microbiome\", \"Metabolome\")) %&gt;%\n  c_net_filter(., e_class == \"intra\", mode = \"e\")\n\nplot(multi2, lty_legend = T, main = \"Sub-network\") \n\n\n\n\nFilter subnetwork\n\n\n\n\n\n\n4. Merge Network\n\n# Network1\ndata(\"c_net\")\nplot(co_net)\n\n\n\n\nNetwork1\n\n\n\n\n\n# Network2\ndata(\"c_net\")\nplot(co_net2)\n\n\n\n\nNetwork2\n\n\n\n\n\n# Merge Network\nco_net_union &lt;- c_net_union(co_net, co_net2)\nplot(co_net_union)\n\n\n\n\nMerge Network\n\n\n\n\nThe MetaNet package provides a comprehensive set of tools for microbial network analysis, from basic network construction to advanced annotation and visualization. By flexibly using these functions, we can extract meaningful biological patterns from complex microbiome data and provide new perspectives for understanding the structure and function of microbial communities."
  },
  {
    "objectID": "Omics/NetworkPlot.html#reference",
    "href": "Omics/NetworkPlot.html#reference",
    "title": "Network Plot",
    "section": "Reference",
    "text": "Reference\n[1] K. Contrepois, S. Wu, K. J. Moneghetti, D. Hornburg, et al., [Molecular Choreography of Acute Exercise (https://doi.org/10.1016/j.cell.2020.04.043). Cell. 181, 1112–1130.e16 (2020).\n[2] Y. Deng, Y. Jiang, Y. Yang, Z. He, et al., Molecular ecological network analyses. BMC bioinformatics (2012), doi:10.1186/1471-2105-13-113.\n[3] K. Faust, J. Raes, Microbial interactions: From networks to models. Nature Reviews Microbiology (2012), doi:10.1038/nrmicro2832.\n[4] Chen Peng (2025). MetaNet: Network Analysis for Omics Data. R package"
  },
  {
    "objectID": "Omics/CollinearityPlot.html",
    "href": "Omics/CollinearityPlot.html",
    "title": "Collinearity Plot",
    "section": "",
    "text": "Collinearity plot is often used to compare genome sequences of different species, identify conserved homologous gene blocks and their arrangement order, and reveal changes in chromosome structure during evolution. This plot is widely used in the study of genome evolution, functional gene localization, and species relationship analysis."
  },
  {
    "objectID": "Omics/CollinearityPlot.html#example",
    "href": "Omics/CollinearityPlot.html#example",
    "title": "Collinearity Plot",
    "section": "Example",
    "text": "Example\n\n\n\n\n\nThis plot is a colinearity diagram of the ternary genome, where Amborella, Grape, and Liriodendron represent three different species, the long bars represent genomes, the numbers are chromosome numbers, and the lines represent the comparison between the genomes of different species. The highlighted lines represent the comparison of the genomic regions of interest."
  },
  {
    "objectID": "Omics/CollinearityPlot.html#setup",
    "href": "Omics/CollinearityPlot.html#setup",
    "title": "Collinearity Plot",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: RIdeogram\n\n\n# Install packages\nif (!requireNamespace(\"RIdeogram\", quietly = TRUE)) {\n  install.packages(\"RIdeogram\")\n}\n\n# Load packages\nlibrary(RIdeogram)"
  },
  {
    "objectID": "Omics/CollinearityPlot.html#data-preparation",
    "href": "Omics/CollinearityPlot.html#data-preparation",
    "title": "Collinearity Plot",
    "section": "Data Preparation",
    "text": "Data Preparation\nWe import the sample data provided in the RIdeogram package. karyotype_ternary_comparison contains different species and genome information, and synteny_ternary_comparison contains genome comparison information between different species.\n\ndata(karyotype_ternary_comparison, package=\"RIdeogram\")\ndata(synteny_ternary_comparison, package=\"RIdeogram\")\n\n\n# View karyotype_ternary_comparison data structure\nhead(karyotype_ternary_comparison)\n\n  Chr Start      End   fill   species size  color\n1  NA     1 15980527 fcb06b Amborella   10 fcb06b\n2  NA     1 11522362 fcb06b Amborella   10 fcb06b\n3  NA     1 11085951 fcb06b Amborella   10 fcb06b\n4  NA     1 10537363 fcb06b Amborella   10 fcb06b\n5  NA     1  9585472 fcb06b Amborella   10 fcb06b\n6  NA     1  9414115 fcb06b Amborella   10 fcb06b\n\n\n\n# View synteny_ternary_comparison data structure\nhead(synteny_ternary_comparison)\n\n  Species_1 Start_2   End_2 Species_2  Start_1    End_1   fill type\n1         1 4761181 2609697         1   342802   981451 cccccc    1\n2         6 6344197 8074393         1 15387184 16716190 cccccc    1\n3        10 6457890 9052487         1 11224953 14959548 cccccc    1\n4        13 6318795 1295413         1 20564870 21386271 cccccc    1\n5        16 1398101 2884119         1 21108654 22221088 cccccc    1\n6        16 1482529 2093625         1 21864494 22364888 cccccc    1"
  },
  {
    "objectID": "Omics/CollinearityPlot.html#visualization",
    "href": "Omics/CollinearityPlot.html#visualization",
    "title": "Collinearity Plot",
    "section": "Visualization",
    "text": "Visualization\n\n1. Basic Collinearity Plot\nYou can use the ideogram function provided in the RIdeogram package to draw a collinearity plot.\n\n# Basic Collinearity Plot\nideogram(karyotype = karyotype_ternary_comparison, synteny = synteny_ternary_comparison)\nconvertSVG(\"chromosome.svg\", device = \"png\")\n\n\n\n\n\n\n\nFigure 1: Basic Collinearity Plot\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nKey Parameters: \n\nkaryotype: A table containing information about different species and their genomes. The data structure is shown in karyotype_ternary_comparison.\noverlaid: A table containing genome comparison information between different species. The data structure is shown in synteny_ternary_comparison.\n\n\n\n\n\n2. Change Colors\nIf you want to change the colors of the plot, just modify the color column in the karyotype and overlaid tables. As shown below, we modify the color and fill columns in the karyotype_ternary_comparison table, and the fill column in the synteny_ternary_comparison.\n\n# Change the colors of three species\nchange_color1 &lt;- c(\"fcb06b\"=\"ff0000\", \"078dd8\"=\"00ff00\", \"139b08\"=\"0000ff\")\nkaryotype_ternary_comparison$color &lt;- as.character(change_color1[karyotype_ternary_comparison$color])\nkaryotype_ternary_comparison$fill &lt;- as.character(change_color1[karyotype_ternary_comparison$fill])\n\n# Change the line color\nchange_color2 &lt;- c(\"cccccc\"=\"add8e6\", \"e41a1c\"=\"8b0000\")\nsynteny_ternary_comparison$fill &lt;- as.character(change_color2[synteny_ternary_comparison$fill])\n\n# Plot\nideogram(karyotype = karyotype_ternary_comparison, synteny = synteny_ternary_comparison)\n\n\n\n\n\n\n\nFigure 2: Change Colors"
  },
  {
    "objectID": "Omics/CollinearityPlot.html#application",
    "href": "Omics/CollinearityPlot.html#application",
    "title": "Collinearity Plot",
    "section": "Application",
    "text": "Application\n\n\n\n\n\n\nFigure 3: Applications of Collinearity Plot\n\n\n\nThis figure shows the homology of R2R3-MYB genes in B. napus and three ancestral plant species. The figure shows the colinearity between Arabidopsis (A. thaliana), Brassica rapa (B. rapa), Brassica oleracea (B. oleracea), Brassica napus (B. napus).[1]"
  },
  {
    "objectID": "Omics/CollinearityPlot.html#reference",
    "href": "Omics/CollinearityPlot.html#reference",
    "title": "Collinearity Plot",
    "section": "Reference",
    "text": "Reference\n[1] Luo D, Mei D, Wei W, Liu J. Identification and Phylogenetic Analysis of the R2R3-MYB Subfamily in Brassica napus. Plants (Basel). 2023;12(4):886. Published 2023 Feb 16. doi:10.3390/plants12040886"
  },
  {
    "objectID": "Omics/GeneStructurePlot.html",
    "href": "Omics/GeneStructurePlot.html",
    "title": "Gene Structure Plot",
    "section": "",
    "text": "In biology, especially in molecular biology research, analyzing the expression and regulation patterns of genes has always been a research focus. In this process, it is inevitable that there will be a need to draw the structure of a gene or the upstream and downstream relationships. Therefore, this tutorial will summarize some common gene structure drawing methods based on the R package gggenes."
  },
  {
    "objectID": "Omics/GeneStructurePlot.html#example",
    "href": "Omics/GeneStructurePlot.html#example",
    "title": "Gene Structure Plot",
    "section": "Example",
    "text": "Example"
  },
  {
    "objectID": "Omics/GeneStructurePlot.html#setup",
    "href": "Omics/GeneStructurePlot.html#setup",
    "title": "Gene Structure Plot",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: tidyverse; gggenes; ggtree\n\n\n# Installing necessary packages\nif (!requireNamespace(\"tidyverse\", quietly = TRUE)) {\n  install.packages(\"tidyverse\")\n}\nif (!requireNamespace(\"gggenes\", quietly = TRUE)) {\n  install.packages(\"gggenes\")\n}\nif (!requireNamespace(\"ggtree\", quietly = TRUE)) {\n  install.packages(\"ggtree\")\n}\n\n# Load packages\nlibrary(tidyverse)\nlibrary(gggenes)\nlibrary(ggtree)"
  },
  {
    "objectID": "Omics/GeneStructurePlot.html#data-preparation",
    "href": "Omics/GeneStructurePlot.html#data-preparation",
    "title": "Gene Structure Plot",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe data uses the example_genes dataset, example_subgenes dataset, and example_features dataset that come with gggenes, which record the location information of genes, the location information of gene substructures, and the location information of marker points on genes, respectively.\nexample_genes is a data frame, which contains a column recording chromosome or chain information as the vertical coordinate, a column recording gene or sequence ID as the mapping index of the dye, two columns recording the start and end positions of the gene, and a column recording the gene direction. Each row is a gene. The following table is an example of the data of example_genes:\n\nhead(example_genes)\n\n  molecule gene start   end  strand orientation\n1  Genome1 genA 15389 17299 reverse           1\n2  Genome1 genB 17301 18161 forward           0\n3  Genome1 genC 18176 18640 reverse           1\n4  Genome1 genD 18641 18985 forward           0\n5  Genome1 genE 18999 20078 reverse           1\n6  Genome1 genF 20086 20451 forward           1\n\n\nexample_subgenes needs to contain all the columns of example_genes, and needs to contain an additional column to record the gene substructure ID, two columns to record the start and end positions of the gene substructure, and each row is a gene substructure. The following table is an example of the data of example_subgenes:\n\nhead(example_subgenes)\n\n  molecule gene  start    end  strand subgene   from     to orientation\n1  Genome5 genA 405113 407035 forward  genA-1 405774 406538           0\n2  Genome5 genB 407035 407916 forward  genB-1 407458 407897           0\n3  Genome5 genC 407927 408394 forward  genC-1 407942 408158           0\n4  Genome5 genC 407927 408394 forward  genC-2 408186 408209           0\n5  Genome5 genC 407927 408394 forward  genC-3 408233 408257           0\n6  Genome5 genF 409836 410315 forward  genF-1 409938 410016           0\n\n\nexample_features needs to contain a column for recording chromosome or chain information, a column for recording marker name, a column for recording marker type, a column for recording marker position, and a column for recording marker direction. Each line is a marker. The following table is an example of example_features data:\n\nhead(example_features)\n\n  molecule name             type position forward\n1  Genome1 tss9              tss    22988      NA\n2  Genome1  rs4 restriction site    18641      NA\n3  Genome1 ori5              ori    18174      NA\n4  Genome2  rs0 restriction site    12256      NA\n5  Genome2  rs1 restriction site    14076      NA\n6  Genome2 ori1              ori    13355   FALSE"
  },
  {
    "objectID": "Omics/GeneStructurePlot.html#visualization",
    "href": "Omics/GeneStructurePlot.html#visualization",
    "title": "Gene Structure Plot",
    "section": "Visualization",
    "text": "Visualization\n\n1. Gene structure plot basics\nAs an extension of ggplot2, gggenes consists of a main function geom_gene_arrow and several secondary functions. First, the basic usage of gggenes is introduced:\n\n1.1 Plotting the relative positions of a series of genes\n\n# Plotting the relative positions of a series of genes\nggplot(example_genes, aes(xmin = start, xmax = end, y = molecule)) +\n    geom_gene_arrow() +\n    facet_wrap(~ molecule, scales = \"free\", ncol = 1)  # gggenes is usually used with the facet_wrap function for faceting. It should be noted that if the drawing interface is too small, an error message will be displayed: \"Viewport has zero dimension(s)\". Just enlarge the drawing window or set a larger interface.\n\n\n\n\n\n\n\nFigure 1: Plotting the relative positions of a series of genes\n\n\n\n\n\n\n\n1.2 Plot a set of genes\nIf you are interested in the structure of the gene itself rather than its location, you can use the gene ID as the vertical axis:\n\n# Plot a set of genes\ndf &lt;- subset(example_genes, molecule == \"Genome4\")\ndf$end &lt;- df$end-df$start\ndf$start &lt;- 1\nggplot(df, aes(xmin = start, xmax = end, y = gene)) +\n    geom_gene_arrow()\n\n\n\n\n\n\n\nFigure 2: Plot a set of genes\n\n\n\n\n\n\n\n1.3 Plot gene substructure\nSometimes we may focus on more detailed structures of genes, such as CDS positions or special motif positions, etc. In this case, we need another extended function geom_subgene_arrow provided by gggenes to complete it. It should be noted that although example_subgenes can also be used as the input of geom_gene_arrow, since each row in the data will create an outline image of a gene, it is not recommended to do so when a gene contains multiple substructures. The recommended method is to separate the gene information and substructure information into two data frames. The usage is as follows:\n\n# Plot gene substructure\nggplot(example_genes, aes(xmin = start, xmax = end, y = molecule)) +\n    facet_wrap(~ molecule, scales = \"free\", ncol = 1) +\n    geom_gene_arrow(fill = \"white\") +\n    geom_subgene_arrow(data = example_subgenes,\n                       aes(fill = gene, xsubmin = from, xsubmax = to),\n                       color=\"black\", alpha=.7)\n\n\n\n\n\n\n\nFigure 3: Plot gene substructure\n\n\n\n\n\n\n\n1.4 Plot gene markers\nSometimes we may focus on a particular point on a gene or sequence, such as a restriction site or a promoter site. Unlike genes or their substructures, markers are often one or a limited number of bases. In this case, it is not suitable to use the arrow drawing method. The geom_feature and geom_feature_label extension functions can complete this labeling task well:\n\n# Plot gene markers\nggplot(example_genes, aes(xmin = start, xmax = end, y = molecule)) +\n    facet_wrap(~ molecule, scales = \"free\", ncol = 1) +\n    geom_gene_arrow(fill = \"white\")+\n    geom_feature(\n        data = example_features,\n        aes(x = position, y = molecule, forward = forward)\n    ) +\n    geom_feature_label(\n        data = example_features,\n        aes(x = position, y = molecule, label = name, forward = forward),\n        feature_height = unit(4, \"mm\"), # When the marker point cannot be displayed normally, you can set this parameter to adjust the marker label height.\n        label_height = unit(3, \"mm\") # When the size of the marker label is not appropriate, you can set this parameter to adjust the size of the marker label.\n    ) +\n    theme_genes() # This topic will be mentioned below\n\n\n\n\n\n\n\nFigure 4: Plot gene markers\n\n\n\n\n\n\n\n1.5 With evolutionary trees and plots\nWe may be interested in the genetic differences between different species or varieties in a certain chromosome region. At this time, we can combine the evolutionary tree with the gene structure diagram. In addition to using the puzzle method, the R package ggtree also provides an interface for combining the two: First, we need to obtain a tree structure. Here, we directly use the gggenes data set to construct a tree. When actually using it, just read a tree file. Generate an evolutionary tree based on the gene structure. It is not necessary to generate it for actual use:\n\nget_genes &lt;- function(data, genome) {\n    filter(data, molecule == genome) %&gt;% pull(gene)\n}\n\ng &lt;- unique(example_genes[,1])\nn &lt;- length(g)\nd &lt;- matrix(nrow = n, ncol = n)\nrownames(d) &lt;- colnames(d) &lt;- g\ngenes &lt;- lapply(g, get_genes, data = example_genes)\n\nfor (i in 1:n) {\n    for (j in 1:i) {\n        jaccard_sim &lt;- length(intersect(genes[[i]], genes[[j]])) / \n            length(union(genes[[i]], genes[[j]]))\n        d[j, i] &lt;- d[i, j] &lt;- 1 - jaccard_sim\n    }\n}\ntree &lt;- ape::bionj(d) \n\nWhen drawing, use the ggtree function, specify the gene structure data in geom_facet, and specify geom = geom_motif panel = 'Alignment'. The on parameter is used to specify the gene name to be aligned (it must be common to all species. If not, I don’t know how to set it for the time being). The coordinate mapping parameters are xmin and xmax. It should be noted that the chromosome ID used as the vertical axis above (here can be the name of different species) must be in the first column of the data frame. ggtree will determine the vertical axis position of the gene structure by comparing the branch labels of the tree and the first column of the gene structure. The drawing code is as follows:\n\n# With evolutionary trees and plots\nggtree(tree, branch.length='none') + \n    geom_tiplab() + xlim_tree(5.5) + \n    geom_facet(data = example_genes,\n               geom = geom_motif,\n               mapping = aes(xmin = start, xmax = end, fill = gene), \n               panel = 'Alignment',on = 'genE', \n               label = 'gene', align = 'left') +\n    scale_fill_brewer(palette = \"Set3\") +  #修改配色的方法下面会提到\n    scale_x_continuous(expand=c(0,0)) +\n    theme(strip.text=element_blank())\n\n\n\n\n\n\n\nFigure 5: With evolutionary trees and plots\n\n\n\n\n\n\n\n\n2. Beautification\n\n2.1 theme_genes\nIn gggenes, there is an image theme called theme_genes that is very suitable for drawing gene structure:\n\n# theme_genes\nggplot(example_genes, aes(xmin = start, xmax = end, y = molecule)) +\n    geom_gene_arrow() +\n    facet_wrap(~ molecule, scales = \"free\", ncol = 1) +\n    theme_genes() \n\n\n\n\n\n\n\nFigure 6: theme_genes\n\n\n\n\n\n\n\n2.2 Modify Color\nAdd colors to different genes (the same goes for substructures, so I won’t go into details):\n\n# Modify Color\nggplot(example_genes, aes(xmin = start, xmax = end, y = molecule, fill=gene)) +\n    geom_gene_arrow() +\n    facet_wrap(~ molecule, scales = \"free\", ncol = 1) +\n    theme_genes()\n\n\n\n\n\n\n\nFigure 7: Modify Color\n\n\n\n\n\nTo change the color scheme, you can use the palette or set it manually:\n\n# Modify Color\nggplot(example_genes, aes(xmin = start, xmax = end, y = molecule, fill = gene)) +\n    geom_gene_arrow() +\n    facet_wrap(~ molecule, scales = \"free\", ncol = 1) +\n    scale_fill_brewer(palette = \"Set3\") +\n    theme_genes()\n\n\n\n\n\n\n\nFigure 8: Modify Color\n\n\n\n\n\nCustom color scheme:\n\n# Modify Color\nggplot(example_genes, aes(xmin = start, xmax = end, y = molecule, fill = gene)) +\n    geom_gene_arrow() +\n    facet_wrap(~ molecule, scales = \"free\", ncol = 1) +\n    scale_fill_manual(values=c(\"genA\"=\"#266CAF\",\n                               \"genB\"=\"#BF3237\",\n                               \"genC\"=\"#54AC78\",\n                               \"genD\"=\"#FBD75F\")) +\n    theme_genes()\n\n\n\n\n\n\n\nFigure 9: Modify Color\n\n\n\n\n\n\n\n2.3 Add gene labels\nTo add gene labels, you need to use the geom_gene_label extension function, which only requires an additional label mapping to be defined.\n\n# Add gene labels\nggplot(example_genes, aes(xmin = start, xmax = end, y = molecule, fill = gene)) +\n    geom_gene_arrow() +\n    geom_gene_label(aes(label = gene),align = \"left\") +\n    facet_wrap(~ molecule, scales = \"free\", ncol = 1) +\n    scale_fill_brewer(palette = \"Set3\") +\n    theme_genes()\n\n\n\n\n\n\n\nFigure 10: Add gene labels\n\n\n\n\n\n\n\n2.4 Modify gene arrow shape\nTo modify the arrowhead properties, you need to use two parameters in geom_gene_arrow: arrowhead_height and arrowhead_width, which define the height and width of the arrowhead respectively.\n\n# Modify gene arrow shape\nggplot(example_genes, aes(xmin = start, xmax = end, y = molecule, fill = gene)) +\n    geom_gene_arrow(arrowhead_height = unit(3, \"mm\"), arrowhead_width = unit(1, \"mm\")) +\n    facet_wrap(~ molecule, scales = \"free\", ncol = 1) +\n    scale_fill_brewer(palette = \"Set3\") +\n    theme_genes()\n\n\n\n\n\n\n\nFigure 11: Modify gene arrow shape\n\n\n\n\n\n\n\n2.5 Modify the direction of genes\nTo modify the gene direction, you generally need to set the forward mapping. The content of the mapping column must be a value that can be converted into a Boolean value, such as: 0/1, T/F, TRUE/FALSE, “True”/“False”, etc. You can use the as.logical function to judge for yourself. If there is no setting, the gene arrow points to the direction of xmax by default. When the forward mapping is set, the gene with a Boolean value of TRUE points to the direction of xmax, and the gene with a Boolean value of FALSE points to the direction of xmin. Therefore, if xmin and xmax in your data are directional, you can also not perform forward mapping.\n\n# Modify the direction of genes\nggplot(example_genes, aes(xmin = start, xmax = end, y = molecule, fill = gene, forward = orientation)) +\n    geom_gene_arrow() +\n    facet_wrap(~ molecule, scales = \"free\", ncol = 1) +\n    scale_fill_brewer(palette = \"Set3\") +\n    theme_genes()\n\n\n\n\n\n\n\nFigure 12: Modify the direction of genes"
  },
  {
    "objectID": "Omics/GeneStructurePlot.html#application",
    "href": "Omics/GeneStructurePlot.html#application",
    "title": "Gene Structure Plot",
    "section": "Application",
    "text": "Application\n\n\n\n\n\n\nFigure 13: Applications of Gene Structure Plot\n\n\n\nThe figure shows the loss and differentiation model of NLR genes in plants during evolution. [1]。"
  },
  {
    "objectID": "Omics/GeneStructurePlot.html#reference",
    "href": "Omics/GeneStructurePlot.html#reference",
    "title": "Gene Structure Plot",
    "section": "Reference",
    "text": "Reference\n[1] Guo BC, Zhang YR, Liu ZG, Li XC, Yu Z, Ping BY, Sun YQ, van den Burg H, Ma FW, Zhao T. Deciphering Plant NLR Genomic Evolution: Synteny-Informed Classification Unveils Insights into TNL Gene Loss. Mol Biol Evol. 2025 Feb 3;42(2):msaf015. doi: 10.1093/molbev/msaf015. PMID: 39835721; PMCID: PMC11789945."
  },
  {
    "objectID": "Omics/ManhattanPlot.html",
    "href": "Omics/ManhattanPlot.html",
    "title": "Manhattan Plot",
    "section": "",
    "text": "Manhattan plot is a graph used to describe the relationship between mutations on chromosomes and traits. It is named Manhattan plot because it resembles the urban landscape of Manhattan, USA. Manhattan plot is generally drawn in the form of scatter plot, but it can also be displayed in bar chart or line chart. It is usually drawn using R package qqman or directly using ggplot2."
  },
  {
    "objectID": "Omics/ManhattanPlot.html#example",
    "href": "Omics/ManhattanPlot.html#example",
    "title": "Manhattan Plot",
    "section": "Example",
    "text": "Example\n\n\n\n\n\nThe horizontal axis of the Manhattan plot is the chromosome position, and the vertical axis is the P value or any value such as ΔSNP, ED, etc. that can indicate the strength of the association between the mutation site and the trait. The P value will be used as an example below."
  },
  {
    "objectID": "Omics/ManhattanPlot.html#setup",
    "href": "Omics/ManhattanPlot.html#setup",
    "title": "Manhattan Plot",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: qqman; tidyverse; aplot\n\n\n# Installing necessary packages\nif (!requireNamespace(\"qqman\", quietly = TRUE)) {\n  install.packages(\"qqman\")\n}\nif (!requireNamespace(\"tidyverse\", quietly = TRUE)) {\n  install.packages(\"tidyverse\")\n}\nif (!requireNamespace(\"aplot\", quietly = TRUE)) {\n  install.packages(\"aplot\")\n}\n\n# Load packages\nlibrary(qqman)\nlibrary(tidyverse)\nlibrary(aplot)"
  },
  {
    "objectID": "Omics/ManhattanPlot.html#data-preparation",
    "href": "Omics/ManhattanPlot.html#data-preparation",
    "title": "Manhattan Plot",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe data uses the gwasResults dataset that comes with qqman.\n\n# View the dataset\nhead(gwasResults)\n\n  SNP CHR BP         P\n1 rs1   1  1 0.9148060\n2 rs2   1  2 0.9370754\n3 rs3   1  3 0.2861395\n4 rs4   1  4 0.8304476\n5 rs5   1  5 0.6417455\n6 rs6   1  6 0.5190959"
  },
  {
    "objectID": "Omics/ManhattanPlot.html#visualization",
    "href": "Omics/ManhattanPlot.html#visualization",
    "title": "Manhattan Plot",
    "section": "Visualization",
    "text": "Visualization\n\n1. qqman draws Manhattan plot\nmanhattan and qq are the two most important functions in qqman, responsible for drawing Manhattan graphs and QQ graphs respectively:\n\n\n\n\n\n\nTip\n\n\n\nmanhattan parameters:\n\nx: input data, required format is dataframe\nchr: column name for recording chromosome information, must be a number\nbp: column name for recording base coordinate position information, must be a number\np: column name for recording P value or other value information, must be a number\nsnp: column name for recording SNP name\ncol: alternating color setting\nchrlabs: chromosome name on X-axis, default is consistent with the name in dataframe\nsuggestiveline: blue threshold line, not drawn when set to FALSE\ngenomewideline: red threshold line, not drawn when set to FALSE\nhighlight: highlighted SNP name\nlogp: when set to TRUE, the vertical axis is -log10(P), when set to FALSE, the vertical axis is P\nannotatePval: set threshold, mark SNPs above the threshold in the figure\nannotateTop: mark only one highest SNP for each chromosome\n\n\n\n\n# Basic manhattan plot\nmanhattan(gwasResults)\n\n\n\n\n\n\n\nFigure 1: Basic manhattan plot\n\n\n\n\n\nThis figure shows the association between all SNPs on the genome and traits, with an obvious peak on chromosome 3, indicating that there is a region on chromosome 3 that may be strongly correlated with the trait.\nThe color of chromosomes in manhattan can be modified by the col parameter:\n\n# Color settings\nmanhattan(gwasResults, col = c(\"#3E7B92\",\"#F0E442\",\"#BF242A\"))\n\n\n\n\n\n\n\nFigure 2: Color settings\n\n\n\n\n\nTo highlight specific SNPs:\n\n# Highlight settings\nmanhattan(gwasResults, highlight =\"rs3057\")\n\n\n\n\n\n\n\nFigure 3: Highlight settings\n\n\n\n\n\nAnnotate SNPs above the threshold (one per chromosome):\n\n# Annotation Settings\nmanhattan(gwasResults, highlight =\"rs3057\", annotatePval=1e-5)\n\n\n\n\n\n\n\nFigure 4: Annotation Settings\n\n\n\n\n\n\n\n2. ggplot2 draws manhattan plot\nUsing qqman to draw a Manhattan map can meet most of the needs, but there are still some needs that cannot be met, such as setting the style and color of the threshold line. In this case, ggplot2 can be used for drawing.\n\n# ggplot2 draws manhattan plot\ndf &lt;- gwasResults\ndf$CHR &lt;- factor(as.character(df$CHR),levels=unique(df$CHR))\nlen &lt;- \n    df %&gt;% \n    group_by(CHR) %&gt;%  # CHR is the column name of chromosome information\n    summarise(len=max(BP))  # BP is the column name for the location information\nlen &lt;-  # Calculate the position of SNP in the graph\n    len %&gt;% summarise(pos=cumsum(len)-len)\nrownames(len) &lt;- unique(df$CHR)\ndf$BP &lt;- df$BP+len$pos[match(df$CHR,rownames(len))]\nX_axis &lt;-  df %&gt;% group_by(CHR) %&gt;% summarize(center=( max(BP) + min(BP) ) / 2 ) # Calculate the position of chromosomes\n\n# The P value is subjected to multiple corrections below. It is actually not advisable to use a fixed threshold for P in qqman.\nbf &lt;- max(df$P[p.adjust(df$P, method = \"bonferroni\")&lt;0.05])  # Using the Bonferroni method\nfdr&lt;- max(df$P[p.adjust(df$P, method = \"fdr\")&lt;0.05])  # Using the fdr method\n\ncol &lt;- c(\"gray10\", \"gray60\") # Set the chromosome color here\ncols &lt;- rep(col ,nrow(X_axis))\nline_col1 &lt;- \"red\" # Threshold line color here\nline_col2 &lt;- \"blue\"\nline_type1 &lt;- \"dashed\" # Here the threshold line type\nline_type2 &lt;- \"dashed\" \nggplot()+\n    geom_point(df,mapping=aes(x=BP,y=-log10(P),color=CHR),alpha=0.7,size=1,shape=16)+\n    geom_hline(yintercept = -log10(bf),lty=line_type1 ,color= line_col1 )+\n    geom_hline(yintercept = -log10(fdr),lty=line_type2 ,color= line_col2)+\n    scale_color_manual(values = cols ) +\n    theme_bw()+\n    theme(panel.grid.major = element_blank(),panel.grid.minor=element_blank(),\n          legend.position = 'none')+\n    xlab(\"CHR\")+ylab(\"-log10(P)\")+ # Horizontal axis vertical axis title\n    scale_x_continuous( limits = c(0, max(df$BP)),label = X_axis$CHR, breaks= X_axis$center ) +\n    scale_y_continuous(expand = c(0,0)) \n\n\n\n\n\n\n\nFigure 5: ggplot2 draws manhattan plot\n\n\n\n\n\nThe advantage of using ggplot2 to draw a Manhattan map is that the style of the image can be highly customized. You can notice that I have set several variables above. You only need to modify these variables to customize the color and threshold line style.\n\ncol &lt;- c(\"#3E7B92\",\"#F0E442\",\"#BF242A\") # Set the chromosome color here\ncols &lt;- rep(col ,nrow(X_axis))\nline_col1 &lt;- \"#DB5A6A\" # Threshold line color here\nline_col2 &lt;- \"#0050B7\"\nline_type1 &lt;- \"solid\" # Here, the threshold line type can be set as follows: ”solid“,“blank”, “solid”, “dashed”, “dotted”, “dotdash”, “longdash”, “twodash”\nline_type2 &lt;- \"dotdash\" \nggplot()+\n    geom_point(df,mapping=aes(x=BP,y=-log10(P),color=CHR),alpha=0.7,size=1,shape=16)+\n    geom_hline(yintercept = -log10(bf),lty=line_type1 ,color= line_col1 )+\n    geom_hline(yintercept = -log10(fdr),lty=line_type2 ,color= line_col2)+\n    scale_color_manual(values = cols ) +\n    theme_bw()+\n    theme(panel.grid.major = element_blank(),panel.grid.minor=element_blank(),\n          legend.position = 'none')+\n    xlab(\"CHR\")+ylab(\"-log10(P)\")+\n    scale_x_continuous( limits = c(0, max(df$BP)),label = X_axis$CHR, breaks= X_axis$center ) +\n    scale_y_continuous(expand = c(0,0)) \n\n\n\n\n\n\n\nFigure 6: ggplot2 modify colors\n\n\n\n\n\nSince ggplot2 plots images one by one, the screened SNPs can be superimposed on the original image using geom_point:\n\ndf2 &lt;- df[df$P&lt;bf,]\ndf3 &lt;- df[df$SNP==\"rs3057\",]\ncol &lt;- c(\"gray10\", \"gray60\") # Set the chromosome color here\ncols &lt;- rep(col ,nrow(X_axis))\nline_col1 &lt;- \"red\" # Threshold line color here\nline_col2 &lt;- \"blue\"\nline_type1 &lt;- \"dashed\" # Here the threshold line type\nline_type2 &lt;- \"dashed\" \nggplot()+\n    geom_point(df,mapping=aes(x=BP,y=-log10(P),color=CHR),alpha=0.7,size=1,shape=16)+\n    geom_point(df2,mapping=aes(x=BP,y=-log10(P)),color=\"blue\",size=1,shape=16)+\n    geom_point(df3,mapping=aes(x=BP,y=-log10(P)),color=\"red\",size=3,shape=18)+\n    geom_hline(yintercept = -log10(bf),lty=line_type1 ,color= line_col1 )+\n    geom_hline(yintercept = -log10(fdr),lty=line_type2 ,color= line_col2)+\n    scale_color_manual(values = cols ) +\n    theme_bw()+\n    theme(panel.grid.major = element_blank(),panel.grid.minor=element_blank(),\n          legend.position = 'none')+\n    xlab(\"CHR\")+ylab(\"-log10(P)\")+\n    scale_x_continuous( limits = c(0, max(df$BP)),label = X_axis$CHR, breaks= X_axis$center ) +\n    scale_y_continuous(limits = c(0, max(-log10(df$P))+1),expand = c(0,0)) \n\n\n\n\n\n\n\nFigure 7: Highlight or mark SNPs\n\n\n\n\n\nWhen you have two traits, you may need to display the GWAS results of the two traits at the same time. You can use the following method to draw a two-way Manhattan plot. Here we only use one set of data as an example.\n\ncol &lt;- c(\"gray10\", \"gray60\") # Set the chromosome color here\ncols &lt;- rep(col ,nrow(X_axis))\nline_col1 &lt;- \"red\" # Threshold line color here\nline_col2 &lt;- \"blue\"\nline_type1 &lt;- \"dashed\" # Here the threshold line type\nline_type2 &lt;- \"dashed\" \np1 &lt;- \n    ggplot()+\n    geom_point(df,mapping=aes(x=BP,y=-log10(P),color=CHR),alpha=0.7,size=1,shape=16)+\n    geom_hline(yintercept = -log10(bf),lty=line_type1 ,color= line_col1 )+\n    geom_hline(yintercept = -log10(fdr),lty=line_type2 ,color= line_col2)+\n    scale_color_manual(values = cols ) +\n    theme_bw()+\n    theme(panel.grid.major = element_blank(),panel.grid.minor=element_blank(),\n          axis.text.x = element_text(vjust = -2),\n          axis.title.x = element_blank(),\n          legend.position = 'none')+\n    ylab(\"-log10(P)\")+ # Horizontal axis vertical axis title\n    scale_x_continuous( limits = c(0, max(df$BP)),label = X_axis$CHR, breaks= X_axis$center ) +\n    scale_y_continuous(expand = c(0,0)) \np2 &lt;- \n    ggplot()+\n    geom_point(df,mapping=aes(x=BP,y=-log10(P),color=CHR),alpha=0.7,size=1,shape=16)+\n    geom_hline(yintercept = -log10(bf),lty=line_type1 ,color= line_col1 )+\n    geom_hline(yintercept = -log10(fdr),lty=line_type2 ,color= line_col2)+\n    scale_color_manual(values = cols ) +\n    theme_bw()+\n    theme(panel.grid.major = element_blank(),panel.grid.minor=element_blank(),\n          axis.text.x = element_blank(),axis.title.x = element_blank(),\n          legend.position = 'none')+\n    ylab(\"-log10(P)\")+\n    scale_x_continuous( limits = c(0, max(df$BP)),label = X_axis$CHR, breaks= X_axis$center ,position = 'top') +\n    scale_y_reverse(expand = c(0,0))\np1/p2\n\n\n\n\n\n\n\nFigure 8: Bidirectional Manhattan plot"
  },
  {
    "objectID": "Omics/ManhattanPlot.html#application",
    "href": "Omics/ManhattanPlot.html#application",
    "title": "Manhattan Plot",
    "section": "Application",
    "text": "Application\nfig-HistApplications} \nApplications of Manhattan Plot :::\nThis figure shows the association between SNP loci in poplar trees and temperature (top)/rainfall (bottom) [1]。"
  },
  {
    "objectID": "Omics/ManhattanPlot.html#reference",
    "href": "Omics/ManhattanPlot.html#reference",
    "title": "Manhattan Plot",
    "section": "Reference",
    "text": "Reference\n[1] Sang Y, Long Z, Dan X, Feng J, Shi T, Jia C, Zhang X, Lai Q, Yang G, Zhang H, Xu X, Liu H, Jiang Y, Ingvarsson PK, Liu J, Mao K, Wang J. Genomic insights into local adaptation and future climate-induced vulnerability of a keystone forest tree in East Asia. Nat Commun. 2022 Nov 1;13(1):6541. doi: 10.1038/s41467-022-34206-8. PMID: 36319648; PMCID: PMC9626627."
  },
  {
    "objectID": "Omics/MultiVolcanoPlot.html",
    "href": "Omics/MultiVolcanoPlot.html",
    "title": "Multiple Volcano Plot",
    "section": "",
    "text": "Multiple Volcano Plot is a graph used for differential expression analysis of high-throughput data (such as transcriptomes and proteomes). Compared with the traditional volcano plot, the multi-group volcano plot can display the results of multiple groups at the same time, making it easier to compare the consistency or specificity of differential features horizontally."
  },
  {
    "objectID": "Omics/MultiVolcanoPlot.html#example",
    "href": "Omics/MultiVolcanoPlot.html#example",
    "title": "Multiple Volcano Plot",
    "section": "Example",
    "text": "Example\n\n\n\n\n\nThis Multiple Volcano Plot shows the differential gene expression patterns of multiple cell clusters in single-cell sequencing data. The blocks of different colors on the X-axis represent different cell clusters, and the scattered points inside the blocks represent differential genes. The geom_jitter function is used to add a jitter effect to the scattered points to avoid overlapping data points. The Y-axis represents the difference fold (Average log2FoldChange, red scattered points represent up-regulated genes with log2FC&gt;0, blue scattered points represent down-regulated genes with log2FC&lt;0, and the top5 differential genes are marked with text. The multi-group volcano plot not only highlights the specific differential genes of each cell cluster (such as marker genes for specific cell types), but also can intuitively identify the key regulatory molecules shared across cell clusters."
  },
  {
    "objectID": "Omics/MultiVolcanoPlot.html#setup",
    "href": "Omics/MultiVolcanoPlot.html#setup",
    "title": "Multiple Volcano Plot",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming Language: R\nDependencies: scRNAtoolVis; corrplot\n\n\n# Installing necessary packages\nif (!requireNamespace(\"scRNAtoolVis\", quietly = TRUE)) {\n  install_github('junjunlab/scRNAtoolVis')\n}\nif (!requireNamespace(\"corrplot\", quietly = TRUE)) {\n  install.packages(\"corrplot\")\n}\n\n# Load packages\nlibrary(scRNAtoolVis)\nlibrary(corrplot)"
  },
  {
    "objectID": "Omics/MultiVolcanoPlot.html#data-preparation",
    "href": "Omics/MultiVolcanoPlot.html#data-preparation",
    "title": "Multiple Volcano Plot",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe data uses the pbmc.markers single-cell sequencing differentially expressed gene dataset provided by the scRNAtoolVis package.\n\n# Load data\ndata('pbmc.markers')\n# View data\nhead(pbmc.markers)\n\n              p_val avg_log2FC pct.1 pct.2     p_val_adj     cluster  gene\nRPS12 2.008629e-140  0.7256738 1.000 0.991 2.754633e-136 Naive CD4 T RPS12\nRPS27 2.624075e-140  0.7242847 0.999 0.992 3.598656e-136 Naive CD4 T RPS27\nRPS6  1.280169e-138  0.6742630 1.000 0.995 1.755623e-134 Naive CD4 T  RPS6\nRPL32 4.358823e-135  0.6121027 0.999 0.995 5.977689e-131 Naive CD4 T RPL32\nRPS14 3.618793e-128  0.6179756 1.000 0.994 4.962812e-124 Naive CD4 T RPS14\nCYBA  1.090337e-124 -1.5739355 0.661 0.914 1.495288e-120 Naive CD4 T  CYBA\n\n\nNote: The dataset should include at least the following five columns: p_val, avg_log2FC, p_val_adj, cluster, and gene. The column names cannot be changed, but the order of the columns can be changed. The names of the grouping blocks shown in the plot are the names in the cluster column content."
  },
  {
    "objectID": "Omics/MultiVolcanoPlot.html#visualization",
    "href": "Omics/MultiVolcanoPlot.html#visualization",
    "title": "Multiple Volcano Plot",
    "section": "Visualization",
    "text": "Visualization\n\n1. Basic Plot\nMultiple volcano plots can be drawn using the jjVolcano function provided in the scRNAtoolVis package.\n\n# Basic Multiple Volcano Plot\np &lt;- jjVolcano(\n  diffData = pbmc.markers,\n  topGeneN = 5,\n  log2FC.cutoff = 0.5,\n  col.type = \"updown\",\n  aesCol = c('#0099CC','#CC3333'),\n  tile.col = corrplot::COL2('PuOr', 15)[4:12],\n  cluster.order = rev(unique(pbmc.markers$cluster)),\n  size  = 3.5,\n  fontface = 'italic'\n  )\n\np\n\n\n\n\n\n\n\nFigure 1: Basic Multiple Volcano Plot\n\n\n\n\n\nFigure 1 plots the up-regulated and down-regulated differentially expressed genes in the nine single-cell populations.\n\n\n\n\n\n\nTip\n\n\n\nKey Parameters: \n\ndiffData: The input differential gene table, the data structure is shown in pbmc.markers.\nmyMarkers: Customize the genes to display text labels, for example: myMarkers = c('PPBP', 'PF4') customizes the text labels for two genes.\n\n\n\n\n# Set myMarkers = c('PPBP', 'PF4')\np &lt;- jjVolcano(\n  diffData = pbmc.markers,\n  myMarkers = c('PPBP', 'PF4'),\n  log2FC.cutoff = 0.5,\n  col.type = \"updown\",\n  aesCol = c('#0099CC','#CC3333'),\n  tile.col = corrplot::COL2('PuOr', 15)[4:12],\n  cluster.order = rev(unique(pbmc.markers$cluster)),\n  size  = 3.5,\n  fontface = 'italic',\n  legend.position = c(0.7,0.9)\n  )\n\np\n\n\n\n\n\n\n\nFigure 2: Key Parameters：myMarkers\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nKey Parameters: \n\ntopGeneN: How many top gene text labels are displayed? In the example of Figure 1, topGeneN = 5 displays the text labels of the top 5 up-regulated and down-regulated genes in each cluster. The topGeneN and myMarkers parameters cannot be used at the same time.\nlog2FC.cutoff: Set the threshold of log2FoldChange, which determines the upper and lower boundaries of the grouping box.\n\n\n\n\n# Set log2FC.cutoff=0.5\np1 &lt;- jjVolcano(\n  diffData = pbmc.markers,\n  topGeneN = 0,\n  log2FC.cutoff = 0.5,\n  col.type = \"updown\",\n  aesCol = c('#0099CC','#CC3333'),\n  tile.col = corrplot::COL2('PuOr', 15)[4:12],\n  cluster.order = rev(unique(pbmc.markers$cluster)),\n  size  = 3.5,\n  fontface = 'italic',\n  legend.position = c(0.7,0.9)\n  )\n\n# Set log2FC.cutoff=2.5\np2 &lt;- jjVolcano(\n  diffData = pbmc.markers,\n  topGeneN = 0,\n  log2FC.cutoff = 2.5,\n  col.type = \"updown\",\n  aesCol = c('#0099CC','#CC3333'),\n  tile.col = corrplot::COL2('PuOr', 15)[4:12],\n  cluster.order = rev(unique(pbmc.markers$cluster)),\n  size  = 3.5,\n  fontface = 'italic',\n  legend.position = c(0.7,0.9)\n  )\n\np1 + p2\n\n\n\n\n\n\n\nFigure 3: Key Parameters：log2FC.cutoff\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nKey Parameters: \n\ncol.type: Scatter point color grouping method, Figure 1 example is grouped by “updown”, and can also be grouped by “adjustP”.\n\n\n\n\n# Set col.type=\"adjustP\"\np &lt;- jjVolcano(\n  diffData = pbmc.markers,\n  topGeneN = 5,\n  log2FC.cutoff = 0.5,\n  col.type = \"adjustP\",\n  aesCol = c('#0099CC','#CC3333'),\n  tile.col = corrplot::COL2('PuOr', 15)[4:12],\n  cluster.order = rev(unique(pbmc.markers$cluster)),\n  size  = 3.5,\n  fontface = 'italic',\n  legend.position = c(0.7,0.9)\n  )\n\np\n\n\n\n\n\n\n\nFigure 4: Key Parameters：col.type\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nKey Parameters: \n\naesCol：Set the color of the scatter points.\ntile.col：Set the color of the grouped blocks.\ncluster.order：Sets the order of grouping blocks.\nsize：Set the font size for gene text labels.\nfontface：Set the font style for gene text labels.\nlegend.position：Set the position of the legend.\n\n\n\n\n\n2. Direction of rotation\nUse the flip parameter in the jjVolcano function to rotate the orientation of the heatmap.\n\n# Horizontal multiple volcano plot\np &lt;- \n  jjVolcano(\n    diffData = pbmc.markers,\n    tile.col = corrplot::COL2('PiYG', 15)[4:12],\n    size  = 3.5,\n    fontface = 'italic',\n    legend.position = c(0.8,0.2),\n    flip = T)\n\np\n\n\n\n\n\n\n\nFigure 5: Key Parameters：flip\n\n\n\n\n\nFigure 5. Multiple volcano plots are rotated to horizontal orientation by setting the parameter flip = T.\n\n\n3. Polar Coordinates\n\n# Polar coordinates Multiple volcano plot\np &lt;- jjVolcano(\n  diffData = pbmc.markers,\n  tile.col = corrplot::COL2('RdBu', 15)[4:12],\n  size  = 3.5,\n  fontface = 'italic',\n  polar = T)\n\np\n\n\n\n\n\n\n\nFigure 6: Key Parameters：polar\n\n\n\n\n\nFigure 6 Convert multiple volcano plots to polar coordinates by setting the parameter polar = T."
  },
  {
    "objectID": "Omics/MultiVolcanoPlot.html#applications",
    "href": "Omics/MultiVolcanoPlot.html#applications",
    "title": "Multiple Volcano Plot",
    "section": "Applications",
    "text": "Applications\n\n\n\n\n\n\nFigure 7: Applications of Multiple Volcano Plot\n\n\n\nFigure 7H shows the differential gene expression analysis of up- and down-regulated genes in all ten single-cell clusters. Adjusted P values &lt; 0.01 are indicated in red, while adjusted P values ≥ 0.01 are indicated in black. [1]。"
  },
  {
    "objectID": "Omics/MultiVolcanoPlot.html#reference",
    "href": "Omics/MultiVolcanoPlot.html#reference",
    "title": "Multiple Volcano Plot",
    "section": "Reference",
    "text": "Reference\n[1] Asp M, Giacomello S, Larsson L, et al. A Spatiotemporal Organ-Wide Gene Expression and Cell Atlas of the Developing Human Heart. Cell. 2019;179(7):1647-1660.e19. doi:10.1016/j.cell.2019.11.025."
  },
  {
    "objectID": "Distribution/BoxPlot.html",
    "href": "Distribution/BoxPlot.html",
    "title": "Box Plot",
    "section": "",
    "text": "Boxplots visualize the central tendency and dispersion of one or more sets of continuous quantitative data. They incorporate statistical measures that not only compare differences across categories but also reveal dispersion, outliers, and distribution patterns.\nA boxplot is defined by five key lines: the upper boundary, upper quartile, median, lower quartile, and lower boundary. Points beyond the upper or lower boundary are considered outliers.",
    "crumbs": [
      "Distribution",
      "Box Plot"
    ]
  },
  {
    "objectID": "Distribution/BoxPlot.html#example",
    "href": "Distribution/BoxPlot.html#example",
    "title": "Box Plot",
    "section": "Example",
    "text": "Example",
    "crumbs": [
      "Distribution",
      "Box Plot"
    ]
  },
  {
    "objectID": "Distribution/BoxPlot.html#setup",
    "href": "Distribution/BoxPlot.html#setup",
    "title": "Box Plot",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming Language: R\nPackages: ggplot2, dplyr, hrbrthemes, viridis, ggExtra, ggpubr, rstatix, ggtext, ggpmisc\n\n\n# Installing necessary packages\nif (!requireNamespace(\"readr\", quietly = TRUE)) {\n  install.packages(\"readr\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"dplyr\", quietly = TRUE)) {\n  install.packages(\"dplyr\")\n}\nif (!requireNamespace(\"hrbrthemes\", quietly = TRUE)) {\n  install.packages(\"hrbrthemes\")\n}\nif (!requireNamespace(\"viridis\", quietly = TRUE)) {\n  install.packages(\"viridis\")\n}\nif (!requireNamespace(\"ggExtra\", quietly = TRUE)) {\n  install.packages(\"ggExtra\")\n}\nif (!requireNamespace(\"ggpubr\", quietly = TRUE)) {\n  install.packages(\"ggpubr\")\n}\nif (!requireNamespace(\"rstatix\", quietly = TRUE)) {\n  install.packages(\"rstatix\")\n}\nif (!requireNamespace(\"ggtext\", quietly = TRUE)) {\n  install.packages(\"ggtext\")\n}\nif (!requireNamespace(\"ggpmisc\", quietly = TRUE)) {\n  install.packages(\"ggpmisc\")\n}\n\n# Loading the libraries\nlibrary(readr)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(hrbrthemes)\nlibrary(viridis)\nlibrary(ggpubr)\nlibrary(rstatix)\nlibrary(ggtext)\nlibrary(ggpmisc)\nlibrary(ggExtra)",
    "crumbs": [
      "Distribution",
      "Box Plot"
    ]
  },
  {
    "objectID": "Distribution/BoxPlot.html#data-preparation",
    "href": "Distribution/BoxPlot.html#data-preparation",
    "title": "Box Plot",
    "section": "Data Preparation",
    "text": "Data Preparation\nWe used the built-in R datasets (mtcars), data from ggplot2 package (mpg, diamonds) and the TCGA-BRCA.htseq_counts.tsv dataset from UCSC Xena DATASETS. Selected genes were chosen for demonstration purposes.\n\n# Load mtcars dataset\ndata(\"mtcars\")\ndata_mtcars &lt;- mtcars\n\n# Load mpg dataset from ggplot2 package\ndata_mpg &lt;- ggplot2::mpg\n\n# Load diamonds dataset from ggplot2 package\ndata_diamonds &lt;- ggplot2::diamonds\n\n# Load the TCGA-BRCA gene expression dataset from a processed CSV file  \ndata_TCGA &lt;- readr::read_csv(\"https://bizard-1301043367.cos.ap-guangzhou.myqcloud.com/TCGA-BRCA.htseq_counts_processed.csv\")\ndata_TCGA1 &lt;- data_TCGA[1:5,] %&gt;%\n  gather(key = \"sample\",value = \"gene_expression\",3:1219)",
    "crumbs": [
      "Distribution",
      "Box Plot"
    ]
  },
  {
    "objectID": "Distribution/BoxPlot.html#visualization",
    "href": "Distribution/BoxPlot.html#visualization",
    "title": "Box Plot",
    "section": "Visualization",
    "text": "Visualization\n\n1. Basic Plotting\n\nBasic Plotting\nThe ggplot2 package allows the use of geom_boxplot() to create a basic boxplot.\nTaking the TCGA-BRCA.htseq_counts.tsv dataset as an example:\n\nggplot(data_TCGA1, aes(x=as.factor(gene_name), y=gene_expression)) + \n  geom_boxplot(fill=\"slateblue\", alpha=0.2) + # color fill and font size\n  xlab(\"gene_name\") # x-axis label\n\n\n\n\n\n\n\n\n\n\nParameter Adjustment\nTaking the mtcars dataset as an example:\n\nggplot(data_mtcars, aes(x=as.factor(cyl), y=mpg)) + \n  geom_boxplot(\n    # box\n    color=\"blue\",\n    fill=\"blue\",\n    alpha=0.2,\n    # notch\n    notch=TRUE,\n    notchwidth = 0.8,\n    # outliers\n    outlier.colour=\"red\",\n    outlier.fill=\"red\",\n    outlier.size=3\n  ) + \n  xlab(\"cyl\")\n\n\n\n\n\n\n\n\n\n\nColor Settings\nTaking the mpg dataset as an example, several common color scales for boxplots are demonstrated:\n\nggplot(data_mpg, aes(x=class, y=hwy)) + \n  geom_boxplot(color=\"red\", fill=\"orange\", alpha=0.2)\n\n\n\n\n\n\n\n\n\n\nggplot(data_mpg, aes(x=class, y=hwy, fill=class)) + \n  geom_boxplot(alpha=0.3) +\n  theme(legend.position=\"none\")\n\n\n\n\n\n\n\n\n\n\nggplot(data_mpg, aes(x=class, y=hwy, fill=class)) + \n  geom_boxplot(alpha=0.3) +\n  theme(legend.position=\"none\") +\n  scale_fill_brewer(palette=\"Dark2\")\n\n\n\n\n\n\n\n\n\n\nGroup Highlighting\nTaking the mpg dataset as an example, different colors are set for groups that need to be highlighted:\n\ndata_mpg %&gt;% \n  # add highlighted group, create color vector\n  mutate(type=ifelse(class==\"subcompact\",\"Highlighted\",\"Normal\")) %&gt;%\n  # fill=type, map the color vector to the boxplot\n  ggplot(aes(x=class, y=hwy, fill=type, alpha=type)) + \n  geom_boxplot() +\n  scale_fill_manual(values=c(\"#69b3a2\", \"grey\")) +\n  scale_alpha_manual(values=c(1,0.1)) +\n  theme_ipsum() +\n  theme(legend.position = \"none\") +\n  xlab(\"\")\n\n\n\n\n\n\n\n\n\n\n\n2. Variable Width Boxplot\nThe basic boxplot does not display the sample size information of categories. We can draw a variable width boxplot where the box width is proportional to the sample size by using the varwidth parameter.\n\nnames &lt;- c(rep(\"A\", 20) , rep(\"B\", 5) , rep(\"C\", 30), rep(\"D\", 100))\nvalue &lt;- c(sample(2:5, 20 , replace=T) , sample(4:10, 5 , replace=T), sample(1:7, 30 , replace=T), sample(3:8, 100 , replace=T))\ndata &lt;- data.frame(names,value)\n# create corresponding x-axis labels\nmy_xlab &lt;- paste(levels(data$names),\"\\n(N=\",table(data$names),\")\",sep=\"\")\n\n# plotting\nggplot(data, aes(x=names, y=value, fill=names)) +\n  geom_boxplot(varwidth = TRUE, alpha=0.2) + # varwidth = TRUE achieves width proportional to sample size\n  theme(legend.position=\"none\") +\n  scale_x_discrete(labels=my_xlab)\n\n\n\n\n\n\n\n\nTaking the mpg dataset as an example again:\n\nggplot(data_mpg, aes(x=class, y=hwy, fill=class)) + \n  geom_boxplot(varwidth = TRUE,alpha=0.3) +\n  theme(legend.position=\"none\") +\n  scale_fill_brewer(palette=\"Dark2\")\n\n\n\n\n\n\n\n\n\n\n3. Boxplot for Continuous Variables\nFor continuous variables, we can use the cut_width() function to divide the continuous variable into intervals and then draw the boxplot.\nTaking the diamonds dataset as an example:\n\ndata_diamonds %&gt;%\n  # create a new variable, divide the continuous variable into intervals (0.5 as one interval)\n  mutate(bin=cut_width(carat, width=0.5, boundary=0)) %&gt;%\n  # plotting, use the divided intervals as x\n  ggplot(aes(x=bin, y=price)) +\n  geom_boxplot(fill=\"#69b3a2\") +\n  theme_ipsum() +\n  xlab(\"Carat\")\n\n\n\n\n\n\n\n\n\n\n4. Boxplot with Mean Values\nThe basic boxplot displays the median for each group. We can also use the stat_summary() function to add the mean value for each group to the boxplot.\n\nnames=c(rep(\"A\", 20) , rep(\"B\", 8) , rep(\"C\", 30), rep(\"D\", 80))\nvalue=c( sample(2:5, 20 , replace=T) , sample(4:10, 8 , replace=T), sample(1:7, 30 , replace=T), sample(3:8, 80 , replace=T) )\ndata=data.frame(names,value)\n# Plotting\np &lt;- ggplot(data, aes(x=names, y=value, fill=names)) +\n  geom_boxplot(alpha=0.7) +\n  stat_summary(fun.y=mean, geom=\"point\", shape=20, size=14, color=\"white\", fill=\"white\") +\n  theme(legend.position=\"none\") +\n  scale_fill_brewer(palette=\"Set1\")\np\n\n\n\n\n\n\n\n\nUsing the mpg dataset as an example again\n\nggplot(data_mpg, aes(x=class, y=hwy, fill=class)) + \n  geom_boxplot(varwidth = TRUE,alpha=0.3) +\n  stat_summary(fun.y=mean, geom=\"point\", shape=10, size=5, color=\"black\", fill=\"black\") +\n  # fun.y specifies the type of statistic to add, geom specifies the type of geometric object, shape specifies the shape of the point, and size specifies the size\n\n  theme(legend.position=\"none\") +\n  scale_fill_brewer(palette=\"Dark2\")\n\n\n\n\n\n\n\n\n\n\n5. Scatter Boxplot & Violin Plot\n\nScatter Boxplot\nBoxplots are often used to compare the distributions of multiple groups, but they do not show the specific distribution of the data (for example, it is impossible to determine whether the distribution is normal or bimodal from a boxplot). We can use the geom_jitter() function to add individual observations, allowing us to see the specific distribution of each group.\n\ndata &lt;- data.frame(\n  name=c( rep(\"A\",500), rep(\"B\",500), rep(\"B\",500), rep(\"C\",20), rep('D', 100)  ),\n  value=c( rnorm(500, 10, 5), rnorm(500, 13, 1), rnorm(500, 18, 1), rnorm(20, 25, 4), rnorm(100, 12, 1) )\n)\n\n\ndata %&gt;%\n  ggplot( aes(x=name, y=value, fill=name)) +\n  geom_boxplot() +\n  scale_fill_viridis(discrete = TRUE, alpha=0.6) +\n  geom_jitter(color=\"black\", size=0.4, alpha=0.9) + # Plotting scatter points\n  theme_ipsum() +\n  theme(\n    legend.position=\"none\",\n    plot.title = element_text(size=11)\n  ) +\n  ggtitle(\"A boxplot with jitter\") +\n  xlab(\"\")\n\n\n\n\n\n\n\n\n\n\n\nViolin Plot\nViolin plots combine the features of boxplots and density distribution plots, also showing the specific distribution of observations within groups.\n\ndata &lt;- data.frame(\n  name=c( rep(\"A\",500), rep(\"B\",500), rep(\"B\",500), rep(\"C\",20), rep('D', 100)  ),\n  value=c( rnorm(500, 10, 5), rnorm(500, 13, 1), rnorm(500, 18, 1), rnorm(20, 25, 4), rnorm(100, 12, 1) )\n)\n\ndata %&gt;%\n  ggplot( aes(x=name, y=value, fill=name)) +\n  geom_violin() +\n  scale_fill_viridis(discrete = TRUE, alpha=0.6, option=\"A\") +\n  theme_ipsum() +\n  theme(\n    legend.position=\"none\",\n    plot.title = element_text(size=11)\n  ) +\n  ggtitle(\"Violin chart\") +\n  xlab(\"\")\n\n\n\n\n\n\n\n\n\n\n\n6. Grouped Boxplot\nOn the basis of single-group comparison, we can use the fill parameter to draw grouped boxplots, which facilitates comparisons both between and within groups.\n\nvariety=rep(LETTERS[1:4], each=40)\ntreatment=rep(c(\"high\",\"low\"),each=20)\nnote=seq(1:160)+sample(1:150, 160, replace=T)\ndata=data.frame(variety, treatment ,  note)\n\n# Plotting\nggplot(data, aes(x=variety, y=note, fill=treatment)) + # The fill parameter adds grouping\n  geom_boxplot()\n\n\n\n\n\n\n\n\nAdding statistics analysis:\n\nvariety=rep(LETTERS[1:4], each=40)\ntreatment=rep(c(\"high\",\"low\"),each=20)\nnote=seq(1:160)+sample(1:150, 160, replace=T)\ndata=data.frame(variety, treatment ,  note)\n\n# Difference test\n# Within groups\ndf &lt;- data\ndf$variety &lt;- factor(df$variety)\ndf_p_val1 &lt;- df %&gt;% \n  group_by(variety) %&gt;% \n  wilcox_test(formula = note~treatment) %&gt;% \n  add_significance(p.col = 'p',cutpoints = c(0,0.001,0.01,0.05,1),symbols = c('***','**','*','ns')) %&gt;% \n  add_xy_position(x='variety')\n# Between groups\ndf_p_val2 &lt;- df %&gt;% \n  wilcox_test(formula = note~variety) %&gt;% \n  add_significance(p.col = 'p',cutpoints = c(0,0.001,0.01,0.05,1),symbols = c('***','**','*','ns')) %&gt;% \n  add_xy_position()\n\n\n# Plotting\nggplot()+\n  geom_boxplot(data = df,mapping = aes(x=variety, y=note, fill=treatment),width=0.5)+\n  stat_pvalue_manual(df_p_val1,label = '{p.signif}',\n                     tip.length = 0)+\n  stat_pvalue_manual(df_p_val2,label = '{p.signif}',\n                     tip.length = 0.01,\n                     y.position = df_p_val2$y.position+0.5)+\n  labs(x='variety',y='note')+\n  guides(fill=guide_legend(title = 'treatment'))+\n  theme_test()+\n  theme(axis.text = element_text(color = 'black'),\n        plot.caption = element_markdown(face = 'bold'),\n        legend.position = c(0.7,0.1),\n        legend.direction = 'horizontal')\n\n\n\n\n\n\n\n\n\nIn addition to grouped boxplots, we can also draw boxplots for each subgroup separately for comparison.\n\nvariety=rep(LETTERS[1:7], each=40)\ntreatment=rep(c(\"high\",\"low\"),each=20)\nnote=seq(1:280)+sample(1:150, 280, replace=T)\ndata1=data.frame(variety, treatment ,  note)\n# treatment as the basis\np1 &lt;- ggplot(data1, aes(x=variety, y=note, fill=treatment)) + \n  geom_boxplot() +\n    facet_wrap(~treatment, scale=\"free\")+\n  labs(x='variety',y='note')+\n  guides(fill=guide_legend(title = 'treatment'))+\n  theme_test()+\n  theme(axis.text = element_text(color = 'black'),\n        plot.caption = element_markdown(face = 'bold'),\n        legend.position = c(0.9,0.1),\n        legend.direction = 'horizontal')\np1\n\n\n\n\n\n\n\n\n\n# variety as the basis\np2 &lt;- ggplot(data1, aes(x=variety, y=note, fill=treatment)) + \n  geom_boxplot() +\n  facet_wrap(~variety, scale=\"free\")+\n  labs(x='variety',y='note')+\n  guides(fill=guide_legend(title = 'treatment'))+\n  theme_test()+\n  theme(axis.text = element_text(color = 'black'),\n        plot.caption = element_markdown(face = 'bold'),\n        legend.position = c(0.9,-0.05),\n        legend.direction = 'horizontal')\np2\n\n\n\n\n\n\n\n\n\n\n7. Adding Marginal Distributions to Boxplots\nAdding marginal distributions on the X and Y axes is a common visualization method. We can achieve this using the ggExtra package. Here, we mainly introduce the addition of marginal distributions to boxplots.\nTaking the mtcars dataset as an example:\n\n# Original scatter plot\np1&lt;-ggplot(data_mtcars, aes(x=wt, y=mpg, color=cyl, size=cyl))+\n  geom_point()+\n  theme_bw()+ \n  geom_smooth(method = 'lm', formula = y~x, se = TRUE, show.legend = FALSE) + \n  stat_poly_eq(aes(label = paste(..eq.label.., ..rr.label.., stat(p.value.label), sep = '~`,`~')),\n               formula = y~x, parse = TRUE, npcx= 'left', npcy= 'bottom', size = 4)\n\np1\n\n\n\n\n\n\n\n\n\n# Adding marginal boxplot distributions\np1 &lt;- ggMarginal(p1, type=\"boxplot\")\np1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nThe main customizable parameters of ggMarginal() are:\n\nsize to change the size of the marginal plot\nAll common appearance customization parameters\nmargins = 'x' or margins = 'y' to display only one marginal plot",
    "crumbs": [
      "Distribution",
      "Box Plot"
    ]
  },
  {
    "objectID": "Distribution/BoxPlot.html#application",
    "href": "Distribution/BoxPlot.html#application",
    "title": "Box Plot",
    "section": "Application",
    "text": "Application\n\n1. Basic Boxplot\n\n\n\n\n\n\nFigure 1: Applications of Basic Boxplot\n\n\n\nFigure E: Fab-PLA results quantified using BlobFinder software and presented in the form of a boxplot. The median is highlighted with a thick line, and the whiskers represent the minimum and maximum values. It shows the distribution of PLA signal quantification data for each group of cells.[1]\n\n\n2. Highlighted Boxplot\n\n\n\n\n\n\nFigure 2: Applications of Highlighted Boxplot\n\n\n\nFigure B: Boxplot of probe distance distribution.\nFigure D & Figure F: Boxplots of the maximum nuclear cross-sectional area distribution in H2A-overexpressing cells in MDA-MB-453 (D) or HEK293 (F). Groups with significant differences are highlighted.[2]\n\n\n3. Grouped Boxplot\n\n\n\n\n\n\nFigure 3: Applications of Grouped Boxplot\n\n\n\nFigure C: Boxplot of genome size for organisms with H2A that does or does not contain the shown residues.[2]",
    "crumbs": [
      "Distribution",
      "Box Plot"
    ]
  },
  {
    "objectID": "Distribution/BoxPlot.html#reference",
    "href": "Distribution/BoxPlot.html#reference",
    "title": "Box Plot",
    "section": "Reference",
    "text": "Reference\n[1] Volkmann C, Brings N, Becker M, Hobeika E, Yang J, Reth M. Molecular requirements of the B-cell antigen receptor for sensing monovalent antigens. EMBO J. 2016 Nov 2;35(21):2371-2381. doi: 10.15252/embj.201694177. Epub 2016 Sep 15. PMID: 27634959; PMCID: PMC5090217.\n[2] Macadangdang BR, Oberai A, Spektor T, Campos OA, Sheng F, Carey MF, Vogelauer M, Kurdistani SK. Evolution of histone 2A for chromatin compaction in eukaryotes. Elife. 2014 Jun 17;3:e02792. doi: 10.7554/eLife.02792. PMID: 24939988; PMCID: PMC4098067.\n[3] H. Wickham. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York, 2016.\n[4] Wickham H, François R, Henry L, Müller K, Vaughan D (2023). dplyr: A Grammar of Data Manipulation. R package version 1.1.4, https://CRAN.R-project.org/package=dplyr.\n[5] Rudis B (2024). hrbrthemes: Additional Themes, Theme Components and Utilities for ‘ggplot2’. R package version 0.8.7, https://CRAN.R-project.org/package=hrbrthemes.\n[6] Wickham H, Averick M, Bryan J, Chang W, McGowan LD, François R, Grolemund G, Hayes A, Henry L, Hester J, Kuhn M, Pedersen TL, Miller E, Bache SM, Müller K, Ooms J, Robinson D, Seidel DP, Spinu V, Takahashi K, Vaughan D, Wilke C, Woo K, Yutani H (2019). “Welcome to the tidyverse.” Journal of Open Source Software, 4(43), 1686. doi:10.21105/joss.01686 https://doi.org/10.21105/joss.01686.\n[7] Simon Garnier, Noam Ross, Robert Rudis, Antônio P. Camargo, Marco Sciaini, and Cédric Scherer (2024). viridis(Lite) - Colorblind-Friendly Color Maps for R. viridis package version 0.6.5.\n[8] Attali D, Baker C (2023). ggExtra: Add Marginal Histograms to ‘ggplot2’, and More ‘ggplot2’ Enhancements. R package version 0.10.1, https://CRAN.R-project.org/package=ggExtra.",
    "crumbs": [
      "Distribution",
      "Box Plot"
    ]
  },
  {
    "objectID": "Distribution/ViolinPlot.html",
    "href": "Distribution/ViolinPlot.html",
    "title": "Violin Plot",
    "section": "",
    "text": "A violin plot combines elements of a density plot and a box plot to visualize data distribution. It displays key statistical information, including the median, quartiles, minimum, and maximum values. Violin plots are particularly useful for comparing distributions across different groups, offering a more intuitive representation than traditional box plots by revealing the shape of the data distribution.",
    "crumbs": [
      "Distribution",
      "Violin Plot"
    ]
  },
  {
    "objectID": "Distribution/ViolinPlot.html#example",
    "href": "Distribution/ViolinPlot.html#example",
    "title": "Violin Plot",
    "section": "Example",
    "text": "Example",
    "crumbs": [
      "Distribution",
      "Violin Plot"
    ]
  },
  {
    "objectID": "Distribution/ViolinPlot.html#setup",
    "href": "Distribution/ViolinPlot.html#setup",
    "title": "Violin Plot",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: readr; tidyr; ggplot2; dplyr; gghalves; forcats; hrbrthemes; viridis; ggstatsplot; palmerpenguins\n\n\n# Installing necessary packages\nif (!requireNamespace(\"readr\", quietly = TRUE)) {\n  install.packages(\"readr\")\n}\nif (!requireNamespace(\"tidyr\", quietly = TRUE)) {\n  install.packages(\"tidyr\")\n}\nif (!requireNamespace(\"gghalves\", quietly = TRUE)) {\n  install.packages(\"gghalves\")\n}\nif (!requireNamespace(\"dplyr\", quietly = TRUE)) {\n  install.packages(\"dplyr\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"forcats\", quietly = TRUE)) {\n  install.packages(\"forcats\")\n}\nif (!requireNamespace(\"hrbrthemes\", quietly = TRUE)) {\n  install.packages(\"hrbrthemes\")\n}\nif (!requireNamespace(\"viridis\", quietly = TRUE)) {\n  install.packages(\"viridis\")\n}\nif (!requireNamespace(\"ggstatsplot\", quietly = TRUE)) {\n  install.packages(\"ggstatsplot\")\n}\nif (!requireNamespace(\"palmerpenguins\", quietly = TRUE)) {\n  install.packages(\"palmerpenguins\")\n}\n\n# Load packages\nlibrary(readr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(gghalves)\nlibrary(forcats)\nlibrary(hrbrthemes)\nlibrary(viridis)\nlibrary(ggstatsplot)\nlibrary(palmerpenguins)",
    "crumbs": [
      "Distribution",
      "Violin Plot"
    ]
  },
  {
    "objectID": "Distribution/ViolinPlot.html#data-preparation",
    "href": "Distribution/ViolinPlot.html#data-preparation",
    "title": "Violin Plot",
    "section": "Data Preparation",
    "text": "Data Preparation\nWe used the built-in R datasets (iris, penguins) and the TCGA-BRCA.htseq_counts.tsv dataset from UCSC Xena DATASETS. Selected genes were chosen for demonstration purposes.\n\n# Load the TCGA-BRCA gene expression dataset from a processed CSV file  \ndata_counts &lt;- readr::read_csv(\"https://bizard-1301043367.cos.ap-guangzhou.myqcloud.com/TCGA-BRCA.htseq_counts_processed.csv\")\n\n# Load built-in R dataset iris\ndata_wide &lt;- iris[ , 1:4] # Take the data in columns 1-4 of the iris database as an example\n\n# Load built-in R dataset penguins\ndata(\"penguins\", package = \"palmerpenguins\")\ndata_penguins &lt;- drop_na(penguins) # Remove missing values\n\n# Manually create a demonstration dataset with grouped values \ndata &lt;- data.frame(\n  name=c( rep(\"A\",500), rep(\"B\",500), rep(\"B\",500), rep(\"C\",20), rep('D', 100)  ),\n  value=c( rnorm(500, 10, 5), rnorm(500, 13, 1), rnorm(500, 18, 1), rnorm(20, 25, 4), rnorm(100, 12, 1) )\n  )\nsample_size &lt;- data %&gt;% \n  group_by(name) %&gt;% \n  summarize(num=n()) # Compute the sample size for each group",
    "crumbs": [
      "Distribution",
      "Violin Plot"
    ]
  },
  {
    "objectID": "Distribution/ViolinPlot.html#visualization",
    "href": "Distribution/ViolinPlot.html#visualization",
    "title": "Violin Plot",
    "section": "Visualization",
    "text": "Visualization\n\n1. Basic Violin Plot\nExample 1: Basic Violin Plot with Manually Created Data\n\n# Basic Violin Plot\np &lt;- ggplot(data, aes(x=name, y=value, fill=name)) + \n  geom_violin()\n\np\n\n\n\n\n\n\n\nFigure 1: Basic Violin Plot\n\n\n\n\n\nExample 2: Basic Violin Plot with the iris Dataset\n\n# Transform the `iris` dataset from wide format to long format. Use the gather function to collect the data in each column into two new columns named \"MesureType\" and \"Val\", so that one row represents one observation.\ndata_long_iris &lt;- data_wide %&gt;%  \n  gather(key = \"MeasureType\", value = \"Value\")  \n\nggplot(data_long_iris, aes(x = MeasureType, y = Value, fill = MeasureType)) +  \n  geom_violin()  \n\n\n\n\n\n\n\nFigure 2: Basic Violin Plot Using the iris Dataset\n\n\n\n\n\nExample 3: Violin Plot with TCGA-BRCA Gene Expression Data\n\nexample_counts1 &lt;- data_counts[1:5,] %&gt;%\n  gather(key = \"sample\",value = \"gene_expression\",3:1219) # Select five example genes for visualization: A1BG, A1BG-AS1, A1CF, A2M, and A2M-AS1.\n\nggplot(example_counts1, aes(x=gene_name, y=gene_expression, fill=gene_name)) +\n  geom_violin()\n\n\n\n\n\n\n\nFigure 3: Basic Violin Plot Using the TCGA-BRCA dataset\n\n\n\n\n\n\n\n2. Horizontal Violin Plot\nThe x and y axes can be flipped using coord_flip().\n\nexample_counts2 &lt;- data_counts[1:6,] %&gt;% \n  gather(key = \"sample\",value = \"gene_expression\",3:1219) %&gt;% \n  mutate(gene_name= fct_reorder(gene_name,gene_expression ))\n\nggplot(example_counts2, aes(x=gene_name, y=gene_expression, fill=gene_name, color=gene_name)) +\n  geom_violin() +\n  scale_fill_viridis(discrete=TRUE) +\n  scale_color_viridis(discrete=TRUE) +\n  theme_ipsum() + # Improve plot appearance\n  theme(legend.position=\"none\" ) +\n  coord_flip() + # flip the x and y axes\n  xlab(\"\") +\n  ylab(\"Assigned Probability (%)\")\n\n\n\n\n\n\n\nFigure 4: Horizontal Violin Plot Using the TCGA-BRCA dataset\n\n\n\n\n\n\n\n3. Violin Plot with Boxplot\nIn practical visualization applications, a box plot can be added to a violin plot using geom_boxplot(), which helps in visually comparing the distribution of the data.\n\nexample_data &lt;- data %&gt;% \n  left_join(sample_size) %&gt;%\n  mutate(myaxis = paste0(name, \"\\n\", \"n=\", num)) # The `myaxis` variable is created to display sample size on the x-axis.  \n\nggplot(example_data, aes(x=myaxis, y=value, fill=name)) +\n  geom_violin(width=1.4) +\ngeom_boxplot( width=0.1,color=\"grey\", alpha=0.2) + # Draw a box plot. A small width value makes the box plot inside the violin plot.\nscale_fill_viridis(discrete = TRUE) +\n  theme_ipsum() + # Beautify the graph\n  theme(\n   legend.position=\"none\",\n   plot.title = element_text(size=11)\n  ) +\n  ggtitle(\"A Violin plot wrapping a boxplot\") +  # Set the title\n  xlab(\"\")\n\n\n\n\n\n\n\nFigure 5: Violin Plot with Boxplot\n\n\n\n\n\nAnother Violin Plot with Box Plot using the TCGA-BRCA Gene Expression Data\n\nexample_counts3 &lt;- data_counts[1:5,] %&gt;%\n  gather(key = \"sample\", value = \"gene_expression\",3:1219) %&gt;%\n  mutate(gene_name= fct_reorder(gene_name,gene_expression ))\n\nggplot(example_counts3, aes(x=gene_name, y=gene_expression, fill=gene_name, color=gene_name)) +\n  geom_violin() +\n  geom_boxplot( width=0.1,color=\"grey\", alpha=0.2)+\n  scale_fill_viridis(discrete=TRUE) +\n  scale_color_viridis(discrete=TRUE) +\n  theme_ipsum() + # Beautify the graph\n  theme(legend.position=\"none\" ) \n\n\n\n\n\n\n\nFigure 6: Violin Plot with Boxplot Using the TCGA-BRCA dataset\n\n\n\n\n\n\n\n4. Grouped Violin Plot\nOn the basis of the basic violin plot, we can achieve intra-group comparison by setting the fill value.\nThe example below demonstrates intra-group comparison using the fill aesthetic. In this case, the penguins dataset is used. The x variable represents the species, and fill=sex creates an intra-group classification to visualize the comparison of flipper lengths within each species, grouped by gender.\n\nggplot(data_penguins, aes(fill=sex, y=flipper_length_mm, x=species)) + # Use X as the major classification and fill as the intra-group classification\n  geom_violin(position=\"dodge\", alpha=0.5, outlier.colour=\"transparent\") +\n  scale_fill_viridis(discrete=T, name=\"\") +\n  theme_ipsum()  \n\n\n\n\n\n\n\nFigure 7: Grouped Violin Plot Using the penguins dataset\n\n\n\n\n\n\n\n5. Half-Violin Plot\nA half-violin plot is useful for visualizing a large amount of data in a compact form. We can use the geom_half_violin function to display two groups separately.\nIn the following example, we visualize the flipper lengths of penguins for both species and genders, by plotting female and male penguins on opposite sides of the plot.\n\n# Separate the data for female and male penguins\ndata_female &lt;- data_penguins %&gt;% filter(sex == \"female\")\ndata_male &lt;- data_penguins %&gt;% filter(sex == \"male\")\n\n# Plot the half-violin plot for both groups (females on the right and males on the left)\nggplot() +\n  geom_half_violin(\n    data = data_female,\n    aes(y = flipper_length_mm, x = species),\n    position = position_dodge(width = 1),\n    scale = 'width',\n    colour = NA,\n    fill = \"#9370DB\",\n    alpha = 0.8,  ## Set transparency\n    side = \"r\"\n  ) +\n  geom_half_violin(\n    data = data_male,\n    aes(y = flipper_length_mm, x = species),\n    position = position_dodge(width = 1),\n    scale = 'width',\n    colour = NA,\n    fill = \"#FFFF00\",\n    alpha = 0.6,\n    side = \"l\"\n  )\n\n\n\n\n\n\n\nFigure 8: Half-Violin Plot Using the penguins dataset\n\n\n\n\n\n\n\n6. Violin Plot Using the ggstatsplot Package\nThe ggstatsplot package extends ggplot2 by adding powerful statistical visualizations. The ggbetweenstats() function allows the creation of combined violin plots, box plots, and scatter plots.\nIn the following example, we visualize the distribution of bill lengths across different penguin species using the penguins dataset. We further enhance the plot’s aesthetics using the theme() function.\n\nplt &lt;- ggbetweenstats(\n  data = data_penguins,\n  x = species,\n  y = bill_length_mm\n) +\n# Beautification\n  labs(  ## Add labels and title\n    x = \"Penguins Species\",\n    y = \"Bill Length\",\n    title = \"Distribution of bill length across penguins species\"\n  ) +\n  theme(\n    axis.ticks = element_blank(),\n    axis.line = element_line(colour = \"grey50\"),\n    panel.grid = element_line(color = \"#b4aea9\"),\n    panel.grid.minor = element_blank(),\n    panel.grid.major.x = element_blank(),\n    panel.grid.major.y = element_line(linetype = \"dashed\"),\n    panel.background = element_rect(fill = \"#fbf9f4\", color = \"#fbf9f4\"),\n    plot.background = element_rect(fill = \"#fbf9f4\", color = \"#fbf9f4\")\n  )\n\nplt\n\n\n\n\n\n\n\nFigure 9: Violin Plot Using the ggstatsplot Package",
    "crumbs": [
      "Distribution",
      "Violin Plot"
    ]
  },
  {
    "objectID": "Distribution/ViolinPlot.html#application",
    "href": "Distribution/ViolinPlot.html#application",
    "title": "Violin Plot",
    "section": "Application",
    "text": "Application\n\n1. Basic Violin Plot\n\n\n\n\n\n\nFigure 10: Applications of Basic Violin Plot\n\n\n\nFigure 10 e is a violin plot of the relative abundances of circRNAs in seven types of cancer tissues and their corresponding normal tissues [1].\n\n\n2. Grouped Violin Plot\n\n\n\n\n\n\nFigure 11: Applications of Grouped Violin Plot\n\n\n\nThe above violin plot analyzes and compares the levels and distributions of 31 proteins and mRNAs in single A549 cells [2].\n\n\n3. Half-Violin Plot\n\n\n\n\n\n\nFigure 12: Applications of Half-Violin Plot\n\n\n\nFigure 12 E uses a half-violin plot to analyze the clone size distribution of WT clones in WT intestines (left) or M−/+ intestines (middle and right figures) [3].\n\n\n4. Violin Plot with Boxplot\n\n\n\n\n\n\nFigure 13: Applications of Violin Plot with Boxplot\n\n\n\nFigure 13 D shows the expected median MSD and distribution of droplets attached to the substrate (noise) and in water (stimulation), as well as the nanoscale RMS displacement [4].",
    "crumbs": [
      "Distribution",
      "Violin Plot"
    ]
  },
  {
    "objectID": "Distribution/ViolinPlot.html#reference",
    "href": "Distribution/ViolinPlot.html#reference",
    "title": "Violin Plot",
    "section": "Reference",
    "text": "Reference\n[1] Zheng Q, Bao C, Guo W, Li S, Chen J, Chen B, Luo Y, Lyu D, Li Y, Shi G, Liang L, Gu J, He X, Huang S. Circular RNA profiling reveals an abundant circHIPK3 that regulates cell growth by sponging multiple miRNAs. Nat Commun. 2016 Apr 6;7:11215. doi: 10.1038/ncomms11215. PMID: 27050392; PMCID: PMC4823868.\n[2] Gong H, Wang X, Liu B, Boutet S, Holcomb I, Dakshinamoorthy G, Ooi A, Sanada C, Sun G, Ramakrishnan R. Single-cell protein-mRNA correlation analysis enabled by multiplexed dual-analyte co-detection. Sci Rep. 2017 Jun 5;7(1):2776. doi: 10.1038/s41598-017-03057-5. PMID: 28584233; PMCID: PMC5459813.\n[3] Kolahgar G, Suijkerbuijk SJ, Kucinski I, Poirier EZ, Mansour S, Simons BD, Piddini E. Cell Competition Modifies Adult Stem Cell and Tissue Population Dynamics in a JAK-STAT-Dependent Manner. Dev Cell. 2015 Aug 10;34(3):297-309. doi: 10.1016/j.devcel.2015.06.010. Epub 2015 Jul 23. PMID: 26212135; PMCID: PMC4537514.\n[4] Cribb JA, Osborne LD, Beicker K, Psioda M, Chen J, O’Brien ET, Taylor Ii RM, Vicci L, Hsiao JP, Shao C, Falvo M, Ibrahim JG, Wood KC, Blobe GC, Superfine R. An Automated High-throughput Array Microscope for Cancer Cell Mechanics. Sci Rep. 2016 Jun 6;6:27371. doi: 10.1038/srep27371. PMID: 27265611; PMCID: PMC4893602.\n[5] Wickham H, Vaughan D, Girlich M (2024). tidyr: Tidy Messy Data. R package version 1.3.1, https://CRAN.R-project.org/package=tidyr.\n[6] H. Wickham. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York, 2016.\n[7] Wickham H, François R, Henry L, Müller K, Vaughan D (2023). dplyr: A Grammar of Data Manipulation. R package version 1.1.4, https://CRAN.R-project.org/package=dplyr.\n[8] Tiedemann F (2022). gghalves: Compose Half-Half Plots Using Your Favourite Geoms. R package version 0.1.4, https://CRAN.R-project.org/package=gghalves.\n[9] Wickham H (2023). forcats: Tools for Working with Categorical Variables (Factors). R package version 1.0.0, https://CRAN.R-project.org/package=forcats.\n[10] Rudis B (2024). hrbrthemes: Additional Themes, Theme Components and Utilities for ‘ggplot2’. R package version 0.8.7, https://CRAN.R-project.org/package=hrbrthemes.\n[11] Simon Garnier, Noam Ross, Robert Rudis, Antônio P. Camargo, Marco Sciaini, and Cédric Scherer (2024). viridis(Lite) - Colorblind-Friendly Color Maps for R. viridis package version 0.6.5.\n[12] Patil, I. (2021). Visualizations with statistical details: The ‘ggstatsplot’ approach. Journal of Open Source Software, 6(61), 3167, doi:10.21105/joss.03167\n[13] Horst AM, Hill AP, Gorman KB (2020). palmerpenguins: Palmer Archipelago (Antarctica) penguin data. R package version 0.1.0. https://allisonhorst.github.io/palmerpenguins/. doi: 10.5281/zenodo.3960218.",
    "crumbs": [
      "Distribution",
      "Violin Plot"
    ]
  },
  {
    "objectID": "Distribution/Beeswarm.html",
    "href": "Distribution/Beeswarm.html",
    "title": "Beeswarm Plot",
    "section": "",
    "text": "A beeswarm plot disperses data points slightly to prevent overlap, making distribution density and trends clearer. It is especially useful for visualizing categorical data in small datasets. This section presents examples using R and the beeswarm and ggbeeswarm packages.",
    "crumbs": [
      "Distribution",
      "Beeswarm Plot"
    ]
  },
  {
    "objectID": "Distribution/Beeswarm.html#example",
    "href": "Distribution/Beeswarm.html#example",
    "title": "Beeswarm Plot",
    "section": "Example",
    "text": "Example",
    "crumbs": [
      "Distribution",
      "Beeswarm Plot"
    ]
  },
  {
    "objectID": "Distribution/Beeswarm.html#setup",
    "href": "Distribution/Beeswarm.html#setup",
    "title": "Beeswarm Plot",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming Language: R\nDependencies: readr, beeswarm, ggbeeswarm, ggsignif, plyr ,tidyverse\n\n\n# Installing necessary packages\nif (!requireNamespace(\"readr\", quietly = TRUE)) {\n  install.packages(\"readr\")\n}\nif (!requireNamespace(\"beeswarm\", quietly = TRUE)) {\n  install.packages(\"beeswarm\")\n}\nif (!requireNamespace(\"ggbeeswarm\", quietly = TRUE)) {\n  install.packages(\"ggbeeswarm\")\n}\nif (!requireNamespace(\"ggsignif\", quietly = TRUE)) {\n  install.packages(\"ggsignif\")\n}\nif (!requireNamespace(\"plyr\", quietly = TRUE)) {\n  install.packages(\"plyr\")\n}\nif (!requireNamespace(\"tidyverse\", quietly = TRUE)) {\n  install.packages(\"tidyverse\")\n}\n\n\n# Loading the libraries\nlibrary(readr)\nlibrary(beeswarm) # This simple and easy-to-use package allows the construction of bee swarm plots in R with just one or two lines of code.\nlibrary(ggbeeswarm) # This package is an extension of ggplot2, allowing direct construction of bee swarm plots from the ggplot2 package, with more adjustable options and greater flexibility, facilitating statistical difference analysis.\nlibrary(ggsignif)\nlibrary(plyr)\nlibrary(tidyverse)",
    "crumbs": [
      "Distribution",
      "Beeswarm Plot"
    ]
  },
  {
    "objectID": "Distribution/Beeswarm.html#data-preparation",
    "href": "Distribution/Beeswarm.html#data-preparation",
    "title": "Beeswarm Plot",
    "section": "Data Preparation",
    "text": "Data Preparation\nWe used the built-in R dataset (iris), along with the TCGA.LIHC.clinicalMatrix and TCGA-LIHC.star_fpkm datasets from UCSC Xena DATASETS. Selected genes were chosen for demonstration purposes.\n\n# Load iris dataset\ndata(\"iris\")\n\n# Load the TCGA-LIHC gene expression dataset from a processed CSV file  \nTCGA_gene_expression &lt;- read.csv(\"https://bizard-1301043367.cos.ap-guangzhou.myqcloud.com/TCGA-LIHC.star_fpkm_processed.csv\")\n\n# Load the TCGA-LIHC clinical info dataset\nTCGA_clinic &lt;- read.csv(\"https://bizard-1301043367.cos.ap-guangzhou.myqcloud.com/TCGA.LIHC.clinicalMatrix.csv\") %&gt;%\n  mutate(T = as.factor(T))\n\n#Prepare Statistics data\ndata_summary &lt;- function(data, varname, groupnames) {\n  summary_func &lt;- function(x, col) {\n    c(mean = mean(x[[col]], na.rm = TRUE),\n      sd = sd(x[[col]], na.rm = TRUE))\n  }\n  data_sum &lt;- ddply(data, groupnames, .fun = summary_func, varname)\n  \n  data_sum &lt;- rename_with(data_sum, ~ varname, \"mean\")\n  \n  return(data_sum)\n}\niris_sum &lt;- data_summary(iris, varname=\"Sepal.Length\", groupnames=\"Species\")\nTCGA_gene_sum &lt;- data_summary(TCGA_gene_expression, varname=\"gene_expression\", groupnames=\"sample\")",
    "crumbs": [
      "Distribution",
      "Beeswarm Plot"
    ]
  },
  {
    "objectID": "Distribution/Beeswarm.html#visualization",
    "href": "Distribution/Beeswarm.html#visualization",
    "title": "Beeswarm Plot",
    "section": "Visualization",
    "text": "Visualization\n\n1. Basic Beeswarm Plot (beeswarm package)\nFigure 1 illustrates the distribution of the Sepal.Length variable in the iris dataset.\n\np1 &lt;- beeswarm(iris$Sepal.Length)\n\n\n\n\n\n\n\nFigure 1: Basic Beeswarm\n\n\n\n\n\nFigure 2 illustrates the distribution of the expression levels of the RAB4B gene in the LICH database.\n\nTCGA_gene_expression_RAB4B &lt;- subset(TCGA_gene_expression, sample == \"RAB4B\")\np1_2 &lt;- beeswarm(TCGA_gene_expression_RAB4B$gene_expression)\n\n\n\n\n\n\n\nFigure 2: Basic Beeswarm\n\n\n\n\n\n\n\n2. Flipping the Beeswarm Plot (beeswarm package)\nFigure 3 illustrates the distribution of the OS.time variable in TCGA dataset.\n\np2 &lt;- beeswarm(TCGA_clinic$OS.time, horizontal=TRUE)\n\n\n\n\n\n\n\nFigure 3: Flipping the Beeswarm\n\n\n\n\n\n\n\n3. Changing Basic Features of the Beeswarm Plot (beeswarm package)\n\n\n\n\n\n\nTip\n\n\n\nKey Parameters:\n(1) Color\nBy modifying the col parameter, we can change the color of the points.\n(2) the Symbol of Points\nThe pch parameter allows the symbol of the points to be changed.\n(3) the Size of Points\nThe cex parameter allows the size of the points to be changed.\n(4) the Position of Points\nThe method parameter allows the position of the points to be changed. The available options are:\n\nswarm (default): Points are randomly placed but do not overlap.\ncenter: Points are symmetrically distributed around the center of the chart.\nhex: Points are placed on a hexagonal grid.\nsquare: Points are located on a square grid.\n\n\n\nFigure 4 illustrates the distribution of the Sepal.Length variable in the iris dataset.\n\np3_1 &lt;- beeswarm(iris$Sepal.Length,col= \"blue\",pch=16,\n         cex=1.5,method=\"center\" )\n\n\n\n\n\n\n\nFigure 4: Basic Features\n\n\n\n\n\nFigure 5 illustrates the distribution of the OS.time variable in TCGA dataset.\n\np3_2 &lt;- beeswarm(TCGA_clinic$OS.time,col= \"blue\",pch=16,\n         cex=1.5,method=\"center\" )\n\n\n\n\n\n\n\nFigure 5: Basic Features\n\n\n\n\n\n\n\n4. Grouping (beeswarm package)\nUsing the ~ operator, we can easily create a grouped bee swarm plot.\nFigure 6 illustrates the distribution of the Sepal.Length variable across different Species.\n\np4_1 &lt;- beeswarm( Sepal.Length ~ Species, data=iris, \n         col=c(\"orange\", \"lightblue\", \"magenta\"), pch =19)\n\n\n\n\n\n\n\nFigure 6: grouping\n\n\n\n\n\nFigure 7 illustrates the distribution of the OS.time variable across different tumor stages.\n\np4_2 &lt;- beeswarm(OS.time ~ T, data=TCGA_clinic, \n         col=c(\"orange\", \"lightblue\", \"magenta\"), pch =19)\n\n\n\n\n\n\n\nFigure 7: grouping\n\n\n\n\n\n\n\n5. Custom Position Behavior (beeswarm package)\n\n\n\n\n\n\nTip\n\n\n\nWhen there are many data points, changing the position behavior of the points can prevent overlap between groups.\nThe available options are:\n\nnone (default): No correction is applied.\ngutter: Sets higher and lower limits for each group.\nwrap: Similar to gutter, but adds random noise to the position of the points.\nrandom: Randomly positions the points.\nomit: Omits overlapping points.\n\n\n\nFigure 8 illustrates the distribution of the Sepal.Length variable across different Species.\n\np5_1 &lt;- beeswarm( Sepal.Length ~ Species, data=iris,\n         col=c(\"orange\", \"lightblue\", \"magenta\"), pch =19,corral =\"gutter\")\n\n\n\n\n\n\n\nFigure 8: Custom Position Behavior\n\n\n\n\n\nFigure 9 illustrates the distribution of the OS.time variable across different tumor stages.\n\np5_2 &lt;- beeswarm( OS.time ~ T, data=TCGA_clinic, \n         col=c(\"orange\", \"lightblue\", \"magenta\"), pch =15,corral = \"gutter\")\n\n\n\n\n\n\n\nFigure 9: Custom Position Behavior\n\n\n\n\n\n\n\n6. Basic Beeswarm (ggbeeswarm package)\nFigure 10 illustrates the distribution of the Sepal.Length variable in the iris dataset.\n\np6_1 &lt;- ggplot(iris,aes(y=Sepal.Length,x='')) + \n  geom_beeswarm()\np6_1\n\n\n\n\n\n\n\nFigure 10: Basic Beeswarm\n\n\n\n\n\nFigure 11 illustrates the distribution of the OS.time variable in TCGA dataset.\n\np6_2 &lt;- ggplot(TCGA_clinic,aes(y=OS.time,x='')) + \n  geom_beeswarm()\np6_2\n\n\n\n\n\n\n\nFigure 11: Basic Beeswarm\n\n\n\n\n\n\n\n7. Flipping the Beeswarm Plot (ggbeeswarm package)\nFigure 12 illustrates the distribution of the Sepal.Length variable in the iris dataset.\n\np7_1 &lt;- ggplot(iris,aes(x=Sepal.Length,y='')) +\n  geom_beeswarm()\np7_1\n\n\n\n\n\n\n\nFigure 12: Flipping the Beeswarm\n\n\n\n\n\nFigure 13 illustrates the distribution of the OS.time variable in TCGA dataset.\n\np7_2 &lt;- ggplot(TCGA_clinic,aes(x=OS.time,y='')) + \n  geom_beeswarm()\np7_2\n\n\n\n\n\n\n\nFigure 13: Flipping the Beeswarm\n\n\n\n\n\n\n\n8. Customization of the Beeswarm Plot (ggbeeswarm package)\n\n\n\n\n\n\nTip\n\n\n\nKey Parameters:\nWe can use the theme() function to change the color of the points and the overall theme of the chart.\n\n\nFigure 14 illustrates the distribution of the Sepal.Length variable in the iris dataset.\n\np8_1 &lt;- ggplot(iris,aes(y=Sepal.Length,x='')) +  \n  geom_beeswarm(color='blue') +    \n  theme_minimal()\np8_1\n\n\n\n\n\n\n\nFigure 14: Changing Basic Features\n\n\n\n\n\nFigure 15 illustrates the distribution of the OS.time variable in TCGA dataset.\n\np8_2 &lt;- ggplot(TCGA_clinic,aes(y=OS.time,x='')) + \n  geom_beeswarm(color='blue') +    \n  theme_minimal()\np8_2\n\n\n\n\n\n\n\nFigure 15: Changing Basic Features\n\n\n\n\n\n\n\n9. Changing the Position of Points (ggbeeswarm package)\nBy default, the geom_beeswarm() function uses the swarm method to position the points. We can change this behavior using the method parameter. The available options are:\n\nswarm: The default method.\ncompactswarm: Similar to swarm, but the points are more compact.\ncenter: Points are centered on the x-axis.\nhex: Points are located within hexagons.\nsquare: Points are located within squares.\n\nFigure 16 illustrates the distribution of the Sepal.Length variable across different Species.\n\np9_1 &lt;- ggplot(iris,aes(y=Sepal.Length,x='')) +\n   geom_beeswarm(method='center')\np9_1\n\n\n\n\n\n\n\nFigure 16: Changing the Position of Points\n\n\n\n\n\n\n\n10. Customizing the Color of Points (ggbeeswarm package)\nWe can also use the scale_color_manual() function to customize the colors. Additionally, the theme_minimal() function can make the chart look more elegant.\nFigure 17 illustrates the distribution of the OS.time variable across different tumor stages.\n\np10_1 &lt;- ggplot(TCGA_clinic,aes(x=T, y=OS.time, colour=T)) +\n  geom_beeswarm() + \n  scale_color_manual(values=c(\"#999999\", \"#E69F00\", \"#56B4E9\",\"blue\")) +  \n  theme_minimal()\np10_1\n\n\n\n\n\n\n\nFigure 17: Customizing the Color of Points\n\n\n\n\n\n\n\n11. Grouping and Adding Statistical Analysis (ggbeeswarm package)\nFigure 18 illustrates the distribution of the Sepal.Length variable in the iris dataset.\n\np11_1 &lt;- ggplot()+\n  geom_bar(iris_sum,\n           mapping=aes(x=Species,y=Sepal.Length,fill=Species),\n           stat=\"identity\",width=.6,\n           alpha=0.5,position=position_dodge())+\n  geom_errorbar(iris_sum,\n                mapping=aes(x=Species,y=Sepal.Length,\n                            ymin=Sepal.Length-sd,\n                            ymax=Sepal.Length+sd),\n                width=.4,position=position_dodge(.8))+\n  geom_beeswarm(iris,\n                mapping=aes(x=Species,y=Sepal.Length,fill=Species),\n                shape=21,color='black',size=3.5,cex=1.2,stroke=0.6)+\n  geom_signif(iris,\n              mapping=aes(x=Species,y=Sepal.Length),\n              comparisons=list(c(\"setosa\",\"versicolor\"),c(\"setosa\",\"virginica\")),\n              test=\"t.test\",step_increase=0.2,tip_length=0,textsize=6,size=1,\n              map_signif_level=T)\np11_1\n\n\n\n\n\n\n\nFigure 18: Grouping\n\n\n\n\n\nFigure 19 illustrates the gene expression data of three genes in liver cancer.\n\np11_2 &lt;- ggplot()+\n  geom_bar(TCGA_gene_sum,\n           mapping=aes(x=sample,y=gene_expression,fill=sample),\n           stat=\"identity\",width=.6,alpha=0.5,position=position_dodge())+\n geom_errorbar(TCGA_gene_sum,\n               mapping=aes(x=sample,y=gene_expression,\n                           ymin=gene_expression-sd,ymax=gene_expression+sd),\n                          width=.4,position=position_dodge(.8))+\n geom_beeswarm(TCGA_gene_expression,\n               mapping=aes(x=sample,y=gene_expression,fill=sample),\n               shape=21,color='black',size=3.5,cex=1.2,stroke=0.6)+\n  geom_signif(TCGA_gene_expression,\n              mapping=aes(x=sample,y=gene_expression),\n              comparisons=list(c(\"RAB4B\",\"TIGAR\"),c(\"RAB4B\",\"RNF44\"),c(\"TIGAR\",\"RNF44\")),\n              test=\"t.test\",step_increase=0.2, tip_length=0,textsize=6,\n              size=1,map_signif_level=T)\np11_2\n\n\n\n\n\n\n\nFigure 19: Grouping",
    "crumbs": [
      "Distribution",
      "Beeswarm Plot"
    ]
  },
  {
    "objectID": "Distribution/Beeswarm.html#applications",
    "href": "Distribution/Beeswarm.html#applications",
    "title": "Beeswarm Plot",
    "section": "Applications",
    "text": "Applications\n\n1. Display Cell Density\n\n\n\n\n\n\nFigure 20: Applications of Beeswarm Plot\n\n\n\nThe beeswarm plot shows the density of CD8+T cells in tumors with high or low FOLR2+cell density.[1]\n\n\n2.Displaying Gene Expression Data Across Different Samples\n\n\n\n\n\n\nFigure 21: Applications of Beeswarm Plot\n\n\n\nThe beeswarm plot shows the distribution of gene expression levels at different structural variation (SV) sites.[2]",
    "crumbs": [
      "Distribution",
      "Beeswarm Plot"
    ]
  },
  {
    "objectID": "Distribution/Beeswarm.html#reference",
    "href": "Distribution/Beeswarm.html#reference",
    "title": "Beeswarm Plot",
    "section": "Reference",
    "text": "Reference\n1.Nalio Ramos R,Missolo-Koussou Y,Gerber-Ferder Y, et al. Tissue-resident FOLR2 + macrophages associate with CD8 + T cell infiltration in human breast cancer. Cell. 2022;185 (7):1189-1207.e25. doi:10.1016/j.cell.2022.02.021\n2.Zhou Y,Zhang Z,Bao Z, et al. Graph pangenome captures missing heritability and empowers tomato breeding. Nature. 2022;606 (7914):527-534. doi:10.1038/s41586-022-04808-9\n3.Wickham, H. (2009). ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. ISBN 978-0-387-98140-6 (Print) 978-0-387-98141-3 (E-Book). [DOI: 10.1007/978-0-387-98141-3] (https://doi.org/10.1007/978-0-387-98141-3)\n4.Erik Clarke, Scott Sherrill-Mix, Charlotte Dawson (2023). ggbeeswarm: Categorical Scatter (Violin Point) Plots. R package version 0.7.2. https://CRAN.R-project.org/package=ggbeeswarm\n5.Aron Eklund, James Trimble (2021). beeswarm: The Bee Swarm Plot, an Alternative to Stripchart. R package version 0.4.0. https://CRAN.R-project.org/package=beeswarm\n6.Wickham, H. (2017). dplyr: A Grammar of Data Manipulation (Version 0.7.4). Retrieved from https://CRAN.R-project.org/package=dplyr\n7.Huber, W., Carey, V. J., Gentleman, R., Anders, S., & Carlson, M. (2015). Bioconductor: Support for the analysis and comprehension of high-throughput genomic data. R package version 3.2. F1000Research, 4, 1-22. Retrieved from https://www.bioconductor.org/ 54^\n8.The R Graph Gallery – Help and inspiration for R charts (r-graph-gallery.com)",
    "crumbs": [
      "Distribution",
      "Beeswarm Plot"
    ]
  },
  {
    "objectID": "GraphGallery.html",
    "href": "GraphGallery.html",
    "title": "Graph Gallery",
    "section": "",
    "text": "👋 Bizard is a comprehensive repository of advanced visualization codes tailored for biomedical research.\nThe toolkit includes a diverse array of charting options, from variable distributions to interactive visualizations, systematically organized to meet the unique needs of biomedical data analysis. Built on a robust foundation, each example is paired with reproducible R code, detailed annotations, and real-world datasets to ensure accessibility and practical application.\nWith resources for both beginners and seasoned researchers, Bizard empowers users to create intuitive, scientifically rigorous, and visually compelling outputs, advancing data visualization standards in the biomedical field.",
    "crumbs": [
      "Graph Gallery"
    ]
  },
  {
    "objectID": "GraphGallery.html#under-construction-demo-only",
    "href": "GraphGallery.html#under-construction-demo-only",
    "title": "Graph Gallery",
    "section": "UNDER CONSTRUCTION [DEMO ONLY]",
    "text": "UNDER CONSTRUCTION [DEMO ONLY]",
    "crumbs": [
      "Graph Gallery"
    ]
  },
  {
    "objectID": "GraphGallery.html#distribution-gallery",
    "href": "GraphGallery.html#distribution-gallery",
    "title": "Graph Gallery",
    "section": "Distribution Gallery",
    "text": "Distribution Gallery",
    "crumbs": [
      "Graph Gallery"
    ]
  },
  {
    "objectID": "GraphGallery.html#correlation-gallery",
    "href": "GraphGallery.html#correlation-gallery",
    "title": "Graph Gallery",
    "section": "Correlation Gallery",
    "text": "Correlation Gallery\n\n\n\nCorrelation DEMO",
    "crumbs": [
      "Graph Gallery"
    ]
  },
  {
    "objectID": "GraphGallery.html#ranking-gallery",
    "href": "GraphGallery.html#ranking-gallery",
    "title": "Graph Gallery",
    "section": "Ranking Gallery",
    "text": "Ranking Gallery\n\n\n\nRanking DEMO",
    "crumbs": [
      "Graph Gallery"
    ]
  },
  {
    "objectID": "GraphGallery.html#others",
    "href": "GraphGallery.html#others",
    "title": "Graph Gallery",
    "section": "Others",
    "text": "Others",
    "crumbs": [
      "Graph Gallery"
    ]
  },
  {
    "objectID": "Template/contribution_0323.html",
    "href": "Template/contribution_0323.html",
    "title": "A Biomedical Visualization Atlas",
    "section": "",
    "text": "先建图表征集issue，进行审核确定：\n\n根据目标任务确定执行的可视化图表类型。\n\n分别按图表建issue让成员列资料\n\n确定创建可视化教程所需的生物医学数据类型；\n根据可视化应用场景优化教程撰写的侧重点（eg. 需要着重介绍的函数/参数、是否要加入常用统计学分析）。\n\n分配成员申领完成\n完成图文撰写需要遵循项目文档规范\n\n参考根据现有可视化教程制作的qmd文档撰写；\n主要模块：可视化图表及其应用场景介绍、环境配置、基础绘图代码、进阶绘图代码、生物医学领域应用（及复现）……\n\n翻译任务的申领和处理"
  },
  {
    "objectID": "Template/visualization_guidance_CH.html",
    "href": "Template/visualization_guidance_CH.html",
    "title": "Contribution_guidance",
    "section": "",
    "text": "对于可视化教程的示例指导"
  },
  {
    "objectID": "Template/visualization_guidance_CH.html#example",
    "href": "Template/visualization_guidance_CH.html#example",
    "title": "Contribution_guidance",
    "section": "Example",
    "text": "Example\n【Figure. 示例图】\n展示以上示例图的标题/图注，并对示例图xy轴或其他标识物的含义解读。"
  },
  {
    "objectID": "Template/visualization_guidance_CH.html#环境配置",
    "href": "Template/visualization_guidance_CH.html#环境配置",
    "title": "Contribution_guidance",
    "section": "环境配置",
    "text": "环境配置\n\n系统要求 跨平台（Linux/MacOS/Windows）\n编程语言: R\n依赖资源: （填充可视化教程依赖的R包或其他资源）\n\n\n#代码示例----- \n# Installing necessary packages\nif (!requireNamespace(\"readr\", quietly = TRUE)) {\n  install.packages(\"readr\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"tidyverse\", quietly = TRUE)) {\n  install.packages(\"tidyverse\")\n}\n\n# Loading the libraries\nlibrary(readr) \nlibrary(ggplot2) \nlibrary(tidyverse)"
  },
  {
    "objectID": "Template/visualization_guidance_CH.html#数据准备",
    "href": "Template/visualization_guidance_CH.html#数据准备",
    "title": "Contribution_guidance",
    "section": "数据准备",
    "text": "数据准备\n\n需包含R内置的数据集（如iris、penguins）和生物医学相关数据集（如组学数据、生存信息、临床指标等）。\n生物医学相关数据集需上传至Bizard腾讯云以便获取插入教程的链接，来自于公共数据集的数据最佳，若由个人/组织提供需确保数据能够被公开。数据集大小需小于1MB。\n\n\n# 数据读入和处理代码可以自由选择是否展示------\n# 读取 TSV 数据\ndata &lt;- readr::read_tsv(\"https://bizard-1301043367.cos.ap-guangzhou.myqcloud.com/TCGA-LIHC.htseq_counts.tsv.gz\")\n\n# 筛选并重塑第一个基因 TSPAN6 的数据(Ensembl ID: ENSG00000000003.13)\ndata1 &lt;- data %&gt;%\n  filter(Ensembl_ID == \"ENSG00000000003.13\") %&gt;%\n  pivot_longer(\n    cols = -Ensembl_ID, \n    names_to = \"sample\", \n    values_to = \"expression\"\n  ) %&gt;%\n  mutate(var = \"var1\")  # 添加一列来区分变量\n\n# 筛选和重塑第二个基因 SCYL3 的数据 (Ensembl ID: ENSG00000000457.12)\ndata2 &lt;- data %&gt;%\n  filter(Ensembl_ID == \"ENSG00000000457.12\") %&gt;%\n  pivot_longer(\n    cols = -Ensembl_ID, \n    names_to = \"sample\", \n    values_to = \"expression\"\n  ) %&gt;%\n  mutate(var = \"var2\")  # 添加一列来区分变量\n\n# 合并两个数据集\ndata12 &lt;- bind_rows(data1, data2)\n\n# 查看最终的合并数据集\nhead(data12)\n\n# A tibble: 0 × 4\n# ℹ 4 variables: Ensembl_ID &lt;chr&gt;, sample &lt;chr&gt;, expression &lt;chr&gt;, var &lt;chr&gt;"
  },
  {
    "objectID": "Template/visualization_guidance_CH.html#可视化",
    "href": "Template/visualization_guidance_CH.html#可视化",
    "title": "Contribution_guidance",
    "section": "可视化",
    "text": "可视化\n\n1. 基础绘图\n使用基础函数绘制图片的图注和简介。\n例：@fig-BasicHist 显示了 TSPAN6基因在不同样本中的表达水平分布。\n\n# 基础绘图代码示例-----\n#| label: fig-BasicHist\n#| fig-cap: \"Basic Histogram\"\n#| out.width: \"95%\"\n#| warning: false\n\n# 基础柱状图\np1 &lt;- ggplot(data1, aes(x = expression)) +\n  geom_histogram() + \n  labs(x = \"Gene Expression\", y = \"Count\")\n\np1\n\n\n\n\n\n\n\n\n补充基础代码可以扩展的重要参数，并提供对应的绘图代码。 例： ::: callout-tip 关键参数: binwidth / bins\nbinwidth 或 bin参数决定了每个分区包含多少数据。修改这些值会极大地影响直方图的外观和传递的信息。 :::\n\n# 代码示例（以补充参数bins为例）-----\n#| label: fig-bins\n#| fig-cap: \"Key Parameters: `binwidth` / `bins`\"\n#| fig.width: 8\n#| fig.heright: 2\n#| out.width: \"95%\"\n#| warning: false\n\np2_1 &lt;- ggplot(data1, aes(x = expression)) +\n  geom_histogram(bins = 30, fill = \"skyblue\", color = \"white\") +\n  ggtitle(\"Bins = 30\") + \n  labs(x = \"Gene Expression\", y = \"Count\")\n\np2_2 &lt;- ggplot(data1, aes(x = expression)) +\n  geom_histogram(bins = 50, fill = \"skyblue\", color = \"white\") +\n  ggtitle(\"Bins = 50\") + \n  labs(x = \"Gene Expression\", y = \"Count\")\n\ncowplot::plot_grid(p2_1, p2_2)\n\n\n\n\n\n\n\n\n\n\n2. 更多进阶图表 (例：密度曲线和柱状图结合)\n介绍复杂的可视化类型，例如使用包含更多自定义参数的函数、使用多种基础图表叠加、添加统计学检验等。 例：密度曲线可以平滑地表示数据分布。直方图依赖于分位数，而密度曲线则不同，它使用核密度估计(KDE)来平滑分布。这样就能更清楚地了解数据的整体趋势和形状。\n\n# 进阶绘图代码示例-----\n#| label: fig-DensityCurve\n#| fig-cap: \"Histogram with Density Curve\"\n#| out.width: \"95%\"\n#| warning: false\n\np1 &lt;- ggplot(data1, aes(x = expression)) +\n  geom_histogram(aes(y = after_stat(density)), bins = 30, fill = \"skyblue\", color = \"white\") +\n  geom_density(alpha = 0.2, fill = \"#FF6666\") + \n  labs(x = \"Gene Expression\", y = \"Density\")\n\np1\n\n\n\n\n\n\n\n\n如果你有需要的话可以选择使用callout-tip添加对参数的详细描述。"
  },
  {
    "objectID": "Template/visualization_guidance_CH.html#应用",
    "href": "Template/visualization_guidance_CH.html#应用",
    "title": "Contribution_guidance",
    "section": "应用",
    "text": "应用\n展示可视化图表在生物医学文献中的实际应用，如果基础图表/进阶图表被广泛应用在各类生物医学文献，则可以选择分别展示。\n例： ### 1. 基础柱状图的应用\n\n\n\n\n\n\nFigure 1: 基础柱状图的应用\n\n\n\n图 9 显示了 n = 6时人类X染色体和人类Y染色体直方图相对频率的差异。 [1]\n需补充图片图注和来源文献信息。可视作者意愿补充对该图的代码复现。"
  },
  {
    "objectID": "Template/visualization_guidance_CH.html#参考文献",
    "href": "Template/visualization_guidance_CH.html#参考文献",
    "title": "Contribution_guidance",
    "section": "参考文献",
    "text": "参考文献\n例： 1. Costa, A. M., Machado, J. T., & Quelhas, M. D. (2011). Histogram-based DNA analysis for the visualization of chromosome, genome, and species information. Bioinformatics, 27(9), 1207–1214. https://doi.org/10.1093/bioinformatics/btr131"
  },
  {
    "objectID": "Template/visualization_guidance_CH.html#共享者",
    "href": "Template/visualization_guidance_CH.html#共享者",
    "title": "Contribution_guidance",
    "section": "共享者",
    "text": "共享者\n\n编辑: 您的姓名。\n审阅: 审阅者姓名。"
  },
  {
    "objectID": "Correlation/Correlogram.html",
    "href": "Correlation/Correlogram.html",
    "title": "Correlogram",
    "section": "",
    "text": "Correlogram or Correlation diagrams are often used to summarize the correlation information of various groups of data in the entire dataset.",
    "crumbs": [
      "Correlation",
      "Correlogram"
    ]
  },
  {
    "objectID": "Correlation/Correlogram.html#example",
    "href": "Correlation/Correlogram.html#example",
    "title": "Correlogram",
    "section": "Example",
    "text": "Example\n\n\n\n\n\nFor example, the above diagram is a correlation heatmap of various groups of data in the mtcars dataset. Colors are used to represent the pairwise correlations of data in different groups, and the shade of the color represents the magnitude of the P-value.",
    "crumbs": [
      "Correlation",
      "Correlogram"
    ]
  },
  {
    "objectID": "Correlation/Correlogram.html#setup",
    "href": "Correlation/Correlogram.html#setup",
    "title": "Correlogram",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming Language: R\nDependencies: GGally; corrplot; ggcorrplot; corrgram\n\n\n# Install packages\nif (!requireNamespace(\"GGally\", quietly = TRUE)) {\n  install.packages(\"GGally\")\n}\nif (!requireNamespace(\"corrplot\", quietly = TRUE)) {\n  install.packages(\"corrplot\")\n}\nif (!requireNamespace(\"ggcorrplot\", quietly = TRUE)) {\n  install.packages(\"ggcorrplot\")\n}\nif (!requireNamespace(\"corrgram\", quietly = TRUE)) {\n  install.packages(\"corrgram\")\n}\n\n# Load packages\nlibrary(GGally)\nlibrary(corrplot)\nlibrary(ggcorrplot)\nlibrary(corrgram)",
    "crumbs": [
      "Correlation",
      "Correlogram"
    ]
  },
  {
    "objectID": "Correlation/Correlogram.html#data-preparation",
    "href": "Correlation/Correlogram.html#data-preparation",
    "title": "Correlogram",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe correlation heatmap is mainly drawn using the built-in datasets in R.\n\ndata(\"flea\", package = \"GGally\")\ndata_flea &lt;- flea\n\ndata(\"mtcars\", package = \"datasets\")\ndata_mtcars &lt;- mtcars\n\ndata(\"tips\", package = \"GGally\")\ndata_tips &lt;- tips",
    "crumbs": [
      "Correlation",
      "Correlogram"
    ]
  },
  {
    "objectID": "Correlation/Correlogram.html#visualization",
    "href": "Correlation/Correlogram.html#visualization",
    "title": "Correlogram",
    "section": "Visualization",
    "text": "Visualization\n\n1. GGally Package\n\nGGally is a commonly used tool for drawing correlation diagrams. It allows the injection of ggplot2 code but does not have a sorting function.\n\n\nDrawing of Basic Correlation Diagram\n\nggpairs(data_flea, columns = 2:5)\n\n\n\n\n\n\n\n\n\nThe above diagram shows the correlation visualization of each group of data in the flea dataset. The picture consists of three parts: the scatter plot of the correlation between the corresponding two groups of data in the lower part; the density plot of a single group of data on the diagonal; and the Pearson correlation coefficient values of the corresponding two groups of data in the upper part.\n\n\n\nIntroducing ggplot2 Codes to Color Each Category\n\nggpairs(data_flea, columns = 2:4, ggplot2::aes(colour=species,alpha=0.7)) \n\n\n\n\n\n\n\n\n\nThe above diagram, on the basis of correlation visualization, classifies each category by color.\n\n\n\nCustomizing the Plotting Type\n\nggpairs(data_tips[, c(1, 3, 4, 2)])\n\n\n\n\n\n\n\nsummary(data_tips)\n\n   total_bill         tip             sex      smoker      day         time    \n Min.   : 3.07   Min.   : 1.000   Female: 87   No :151   Fri :19   Dinner:176  \n 1st Qu.:13.35   1st Qu.: 2.000   Male  :157   Yes: 93   Sat :87   Lunch : 68  \n Median :17.80   Median : 2.900                          Sun :76               \n Mean   :19.79   Mean   : 2.998                          Thur:62               \n 3rd Qu.:24.13   3rd Qu.: 3.562                                                \n Max.   :50.81   Max.   :10.000                                                \n      size     \n Min.   :1.00  \n 1st Qu.:2.00  \n Median :2.00  \n Mean   :2.57  \n 3rd Qu.:3.00  \n Max.   :6.00  \n\n\n\nIn the above diagram, tatal_bill and tip are quantitative data, while sex and smoker are qualitative data. In the lower part, scatter plots, histograms, and bar charts of pairwise correlations are mainly drawn according to different data types; in the diagonal part, the distribution diagrams of each group of data are shown; in the upper part, pairwise correlation line charts are drawn according to different data types, and for two quantitative data, the Pearson correlation coefficient values are given.\n\n\n# Changing the plotting type\nggpairs(\n  data_tips[, c(1, 3, 4, 2)],\n  upper = list(continuous = \"density\",\n               combo = \"box_no_facet\"),\n  lower = list(continuous = \"points\",\n               combo = \"dot_no_facet\")\n)\n\n\n\n\n\n\n\n\n\nThrough customization, the histogram in the lower part is modified into a scatter plot, and the correlation coefficient values in the upper part are modified into a density plot.\n\n\n\nCorrelation Visualization\nVisualize the correlation coefficients.\n\nggcorr(data_mtcars) # Draw a correlation coefficient heatmap, with Pearson as the default\n\n\n\n\n\n\n\n\n\nThe above diagram visualizes the correlation coefficients through the ggcorr（） function.\nThe method parameter of ggcorr:\nThe default is in the form of c(\"pairwise\", \"pearson\"). The first parameter is to determine the handling of missing values when calculating the covariance, and the second parameter is used to determine the type of correlation coefficient, such as \"pearson\", \"kendall\" or \"spearman\".\n\n\n\n\n2. corrplot Package\n\nThe corrplot package is a commonly used tool for correlation visualization, which has powerful customization functions and a sorting function.\n\n\nBasic Plotting\n\ncorr &lt;- cor(data_mtcars)\ncorrplot(corr)\n\n\n\n\n\n\n\n\n\n\nParameter Customization\n\nThe main key parameters of corrplot():\ncorr The correlation coefficient matrix to be visualized\nmethod The shape of the visualization\ntype The display range (full, lower, upper)\ncol The color of the graph display\naddCoef.col The color of the correlation coefficient values\norder The sorting method of the correlation coefficients\nis.corr Whether to draw a correlation coefficient plot, which is TRUE by default. It can also achieve the visualization of non-correlation coefficients. Just set this parameter to FALSE.\n……\n\n\ncorrplot(corr,method = \"ellipse\" ,#method, specify the visualization shape\n         order = \"AOE\", #order, the sorting method of the correlation coefficients\n         addCoef.col=\"black\", # Specify the color of the correlation coefficients\n         type=\"lower\") # Specify the display part\n\n\n\n\n\n\n\n\n\nThe above diagram is a correlation coefficient heatmap of the mtcars dataset.\n\ntype=\"lower\" specifies to display the lower part of the heatmap.\nThe shade of the color represents the magnitude of the correlation coefficient.\nThe shape of the ellipse represents the correlation coefficient: the greater the eccentricity, the flatter the ellipse, and the larger the absolute value of the correlation coefficient; the smaller the eccentricity, the rounder the ellipse, and the smaller the absolute value of the correlation coefficient. The direction of the long axis of the ellipse represents the positive or negative of the correlation coefficient. The upper right - lower left direction corresponds to a positive value, and the upper left - lower right direction corresponds to a negative value.\n\n\n\n\nAdding Significance Labels\n\nres1 &lt;-cor.mtest(data_mtcars, conf.level= .95)\ncorrplot(corr, method= \"circle\",\n         p.mat= res1$p, sig.level= 0.01, # P-values greater than 0.01 are considered to have no statistical significance\n         mar= c(1,1,1,1))\n\n\n\n\n\n\n\n\n\nThe above diagram adds significance labels on the basis of the correlation coefficient heatmap. P-values greater than 0.01 are regarded as having no statistical significance.\n\n\n\n\n3. ggcorrplot Package\n\nThe ggcorrplot package is equivalent to a simplified version of the corrplot package, mainly including the calculation function of cor_pmat and the plotting function of ggcorrplot.\n\n\nCalculating P-values with cor_pmat\n\np.mat &lt;- cor_pmat(data_mtcars)\nhead(p.mat[, 1:6])\n\n              mpg          cyl         disp           hp         drat\nmpg  0.000000e+00 6.112687e-10 9.380327e-10 1.787835e-07 1.776240e-05\ncyl  6.112687e-10 0.000000e+00 1.802838e-12 3.477861e-09 8.244636e-06\ndisp 9.380327e-10 1.802838e-12 0.000000e+00 7.142679e-08 5.282022e-06\nhp   1.787835e-07 3.477861e-09 7.142679e-08 0.000000e+00 9.988772e-03\ndrat 1.776240e-05 8.244636e-06 5.282022e-06 9.988772e-03 0.000000e+00\nwt   1.293959e-10 1.217567e-07 1.222320e-11 4.145827e-05 4.784260e-06\n               wt\nmpg  1.293959e-10\ncyl  1.217567e-07\ndisp 1.222320e-11\nhp   4.145827e-05\ndrat 4.784260e-06\nwt   0.000000e+00\n\n\n\n\nPlotting with ggcorrplot\n\nggcorrplot(corr, method = \"square\" )\n\n\n\n\n\n\n\n\n\nThe above diagram is a color heatmap of the correlation coefficients of the mtcar dataset.\n\n\nggcorrplot(corr, method = \"circle\" )\n\n\n\n\n\n\n\n\n\nHere we have changed the plotting type to a circle.\n\n\n\n\n4. corrgram Package\n\nThe corrgram package is also a good choice for drawing correlation diagrams. It can select the content to be displayed in the upper, lower, and diagonal parts.\nWe mainly use the corrgram() function to draw the correlation diagram:\n\ncor.method determines the type of correlation coefficient, pearson (default), spearman, kendall\n\nDifferent methods can be used for visualization:\n\npanel.ellipse displays an ellipse\npanel.shade is used for color blocks\npanel.pie is used for pie charts\npanel.pts is used for scatter plots\n\n\n\ncorrgram(data_mtcars, order=TRUE, \n         lower.panel=panel.shade, # Color blocks\n         upper.panel=panel.pie, # Pie chart\n         text.panel=panel.txt, \n         main=\"Car Milage Data in PC2/PC1 Order\") \n\n\n\n\n\n\n\n\n\nBy setting lower.panel=panel.shade and upper.panel=panel.pie, the upper part is set as a pie chart, and the lower part is set as a color diagram.\n\n\ncorrgram(data_mtcars, order=TRUE, \n         lower.panel=panel.ellipse, # Display an ellipse\n         upper.panel=panel.pts,  # Scatter plot\n         text.panel=panel.txt, \n         diag.panel=panel.minmax, \n         main=\"Car Milage Data in PC2/PC1 Order\") \n\n\n\n\n\n\n\n\n\nBy setting lower.panel=panel.ellipse and upper.panel=panel.pts, the upper part is set as a scatter plot, and the lower part is set as an ellipse diagram (where the red line is the fitted curve).\n\n\ncorrgram(data_mtcars, order=NULL, \n         lower.panel=panel.shade, # Color blocks\n         upper.panel=NULL, \n         text.panel=panel.txt, \n         main=\"Car Milage Data (unsorted)\")\n\n\n\n\n\n\n\n\n\nBy setting lower.panel=panel.shade and upper.panel=NULL, only the color diagram in the lower part is displayed.",
    "crumbs": [
      "Correlation",
      "Correlogram"
    ]
  },
  {
    "objectID": "Correlation/Correlogram.html#applications",
    "href": "Correlation/Correlogram.html#applications",
    "title": "Correlogram",
    "section": "Applications",
    "text": "Applications\n\n\n\n\n\n\nFigure 1: Applications of Correlogram\n\n\n\n\nThe above diagram is a correlation diagram based on the ANI values of strains. The ANI values between each indicator strain are calculated using the JSpecies software and used for the construction of the Pearson correlation matrix. This diagram shows the correlations constructed and sorted by hierarchical clustering using the corrplot package. [1]\n\n\n\n\n\n\n\nFigure 2: Applications of Correlogram\n\n\n\n\nThe above diagram shows the correlations between Gain [FF], ILP, wpm, RR, R r-words, R p-words, RN, and VA. The left diagram shows the correlations without excluding the influence of children’s grades; the right diagram shows the correlations after differentiating the grades. The magnitude of the correlation is represented by the size (and color) of the circle. The corrplot package was used for drawing. [2]",
    "crumbs": [
      "Correlation",
      "Correlogram"
    ]
  },
  {
    "objectID": "Correlation/Correlogram.html#reference",
    "href": "Correlation/Correlogram.html#reference",
    "title": "Correlogram",
    "section": "Reference",
    "text": "Reference\n[1] Espariz M, Zuljan FA, Esteban L, Magni C. Taxonomic Identity Resolution of Highly Phylogenetically Related Strains and Selection of Phylogenetic Markers by Using Genome-Scale Methods: The Bacillus pumilus Group Case. PLoS One. 2016 Sep 22;11(9):e0163098. doi: 10.1371/journal.pone.0163098. PMID: 27658251; PMCID: PMC5033322.\n[2] Marx C, Hutzler F, Schuster S, Hawelka S. On the Development of Parafoveal Preprocessing: Evidence from the Incremental Boundary Paradigm. Front Psychol. 2016 Apr 14;7:514. doi: 10.3389/fpsyg.2016.00514. PMID: 27148123; PMCID: PMC4830847.\n[3] Schloerke B, Cook D, Larmarange J, Briatte F, Marbach M, Thoen E, Elberg A, Crowley J (2024). GGally: Extension to ‘ggplot2’. R package version 2.2.1, CRAN: Package GGally.\n[4] Taiyun Wei and Viliam Simko (2024). R package ‘corrplot’: Visualization of a Correlation Matrix (Version 0.94). Available from GitHub - taiyun/corrplot: A visual exploratory tool on correlation matrix\n[5] Kassambara A (2023). ggcorrplot: Visualization of a Correlation Matrix using ‘ggplot2’. R package version 0.1.4.1, CRAN: Package ggcorrplot.\n[6] Wright K (2021). corrgram: Plot a Correlogram. R package version 1.14, CRAN: Package corrgram.",
    "crumbs": [
      "Correlation",
      "Correlogram"
    ]
  },
  {
    "objectID": "Hiplot/094-line-regression.html",
    "href": "Hiplot/094-line-regression.html",
    "title": "Line Regression",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Line Regression plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/line-regression?lang=en\nLinear regression is a regression method for linear modeling of the relationship between independent variables and dependent variables.If there is only one independent variable, it is called simple regression, and if there is more than one independent variable, it is called multiple regression.",
    "crumbs": [
      "HIPLOT",
      "Line Regression"
    ]
  },
  {
    "objectID": "Hiplot/094-line-regression.html#setup",
    "href": "Hiplot/094-line-regression.html#setup",
    "title": "Line Regression",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggrepel; ggplot2\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggrepel\", quietly = TRUE)) {\n  install.packages(\"ggrepel\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggrepel)\nlibrary(ggplot2)",
    "crumbs": [
      "HIPLOT",
      "Line Regression"
    ]
  },
  {
    "objectID": "Hiplot/094-line-regression.html#data-preparation",
    "href": "Hiplot/094-line-regression.html#data-preparation",
    "title": "Line Regression",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data are independent variables, dependent variables and groups.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/line-regression/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\ndata$group &lt;- factor(data$group, levels = unique(data$group))\n\n# View data\nhead(data)\n\n  value1 value2 group\n1   36.8  29.44    G1\n2   54.0  43.20    G1\n3   26.0  26.00    G1\n4   39.0  31.20    G1\n5   33.0  29.70    G1\n6   29.0  34.80    G1",
    "crumbs": [
      "HIPLOT",
      "Line Regression"
    ]
  },
  {
    "objectID": "Hiplot/094-line-regression.html#visualization",
    "href": "Hiplot/094-line-regression.html#visualization",
    "title": "Line Regression",
    "section": "Visualization",
    "text": "Visualization\n\n# Line Regression\n## Defining the equation\nequation &lt;- function(x, add_p = FALSE) {\n  xs &lt;- summary(x)\n  lm_coef &lt;- list(\n    a = as.numeric(round(coef(x)[1], digits = 2)),\n    b = as.numeric(round(coef(x)[2], digits = 2)),\n    r2 = round(xs$r.squared, digits = 2),\n    pval = xs$coef[2, 4] \n  )\n  if (add_p) {\n    lm_eq &lt;- substitute(italic(y) == a + b %.% italic(x) * \",\" ~ ~\n  italic(R)^2 ~ \"=\" ~ r2 * \",\" ~ ~ italic(p) ~ \"=\" ~ pval, lm_coef)\n  } else {\n    lm_eq &lt;- substitute(italic(y) == a + b %.% italic(x) * \",\" ~ ~\n  italic(R)^2 ~ \"=\" ~ r2, lm_coef)\n  }\n  as.expression(lm_eq)\n}\n## Plot\np &lt;- ggplot(data, aes(x = value1, y = value2, colour = group)) +\n  geom_point(show.legend = TRUE) +\n  geom_smooth(method = \"lm\", se = T, show.legend = F) +\n  geom_rug(sides = \"bl\", size = 1, show.legend = F) +\n  scale_color_manual(values = c(\"#00468BFF\",\"#ED0000FF\")) +\n  ggtitle(\"Line Reguression Plot\") +\n  theme_bw() +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12, hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n  \n## Add annotations for each group using ggrepel\nrepels &lt;- rep(\"\", nrow(data))\nfor (g in unique(data$group)) {\n  fit &lt;- lm(value2 ~ value1, data = data[data$group == g, ])\n  v &lt;- max(data[data$group == g, \"value2\"])\n  repels[which(data$value2 == v)[1]] &lt;- equation(fit, add_p = F)\n}\np &lt;- p + geom_text_repel(\n  data = data,\n  label = repels,\n  size = 4,\n  force = 5,\n  label.padding = 5,\n  na.rm = TRUE,\n  min.segment.length = 100,\n  show.legend = FALSE,\n  nudge_x = 0,\n  nudge_y = 0\n  )\n\np\n\n\n\n\n\n\n\nFigure 1: Line Regression\n\n\n\n\n\nDifferent colors represent different groups, and linear regression equations can be added. The closer R squared is to 1, the closer the fitted curve is to the actual curve.",
    "crumbs": [
      "HIPLOT",
      "Line Regression"
    ]
  },
  {
    "objectID": "Hiplot/184-waffle.html",
    "href": "Hiplot/184-waffle.html",
    "title": "Waffle Plot",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Waffle Plot plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/waffle?lang=en",
    "crumbs": [
      "HIPLOT",
      "Waffle Plot"
    ]
  },
  {
    "objectID": "Hiplot/184-waffle.html#setup",
    "href": "Hiplot/184-waffle.html#setup",
    "title": "Waffle Plot",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; waffle\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"waffle\", quietly = TRUE)) {\n  install.packages(\"waffle\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(waffle)",
    "crumbs": [
      "HIPLOT",
      "Waffle Plot"
    ]
  },
  {
    "objectID": "Hiplot/184-waffle.html#data-preparation",
    "href": "Hiplot/184-waffle.html#data-preparation",
    "title": "Waffle Plot",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/waffle/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# convert data structure\nparts &lt;- data[,2]\n\n# View data\nhead(data)\n\n                      label value\n1 Un-breached US Population   230\n2                   Premera    11\n3                    Anthem    79",
    "crumbs": [
      "HIPLOT",
      "Waffle Plot"
    ]
  },
  {
    "objectID": "Hiplot/184-waffle.html#visualization",
    "href": "Hiplot/184-waffle.html#visualization",
    "title": "Waffle Plot",
    "section": "Visualization",
    "text": "Visualization\n\n# Waffle Plot\np &lt;- waffle(parts, rows = 8, size = 1, legend_pos = \"right\") +\n  ggtitle(\"Waffle Plot\") +\n  scale_fill_manual(values = c(\"#e04d39\",\"#5bbad6\",\"#1e9f86\")) +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n\np\n\n\n\n\n\n\n\nFigure 1: Waffle Plot",
    "crumbs": [
      "HIPLOT",
      "Waffle Plot"
    ]
  },
  {
    "objectID": "Hiplot/069-ggpiestats-group.html",
    "href": "Hiplot/069-ggpiestats-group.html",
    "title": "Piestats Group",
    "section": "",
    "text": "System Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggstatsplot; ggplot2; cowplot\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggstatsplot\", quietly = TRUE)) {\n  install.packages(\"ggstatsplot\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"cowplot\", quietly = TRUE)) {\n  install.packages(\"cowplot\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggstatsplot)\nlibrary(ggplot2)\nlibrary(cowplot)",
    "crumbs": [
      "HIPLOT",
      "Piestats Group"
    ]
  },
  {
    "objectID": "Hiplot/069-ggpiestats-group.html#setup",
    "href": "Hiplot/069-ggpiestats-group.html#setup",
    "title": "Piestats Group",
    "section": "",
    "text": "System Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggstatsplot; ggplot2; cowplot\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggstatsplot\", quietly = TRUE)) {\n  install.packages(\"ggstatsplot\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"cowplot\", quietly = TRUE)) {\n  install.packages(\"cowplot\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggstatsplot)\nlibrary(ggplot2)\nlibrary(cowplot)",
    "crumbs": [
      "HIPLOT",
      "Piestats Group"
    ]
  },
  {
    "objectID": "Hiplot/069-ggpiestats-group.html#data-preparation",
    "href": "Hiplot/069-ggpiestats-group.html#data-preparation",
    "title": "Piestats Group",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/ggpiestats-group/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\naxis &lt;- c(\"genre\", \"mpaa\")\ndata[, axis[1]] &lt;- factor(data[, axis[1]], levels = unique(data[, axis[1]]))\ndata[, axis[2]] &lt;- factor(data[, axis[2]], levels = unique(data[, axis[2]]))\n\n# View data\nhead(data)\n\n                                               title year length budget rating\n1                          Shawshank Redemption, The 1994    142     25    9.1\n2     Lord of the Rings: The Return of the King, The 2003    251     94    9.0\n3 Lord of the Rings: The Fellowship of the Ring, The 2001    208     93    8.8\n4             Lord of the Rings: The Two Towers, The 2002    223     94    8.8\n5                                       Pulp Fiction 1994    168      8    8.8\n6                                   Schindler's List 1993    195     25    8.8\n   votes  mpaa  genre\n1 149494     R  Drama\n2 103631 PG-13 Action\n3 157608 PG-13 Action\n4 114797 PG-13 Action\n5 132745     R  Drama\n6  97667     R  Drama",
    "crumbs": [
      "HIPLOT",
      "Piestats Group"
    ]
  },
  {
    "objectID": "Hiplot/069-ggpiestats-group.html#visualization",
    "href": "Hiplot/069-ggpiestats-group.html#visualization",
    "title": "Piestats Group",
    "section": "Visualization",
    "text": "Visualization\n\n# Piestats Group\ng &lt;- unique(data[,axis[2]])\nplist &lt;- list()\nfor (i in 1:length(g)) {\n  fil &lt;- data[,axis[2]] == g[i]\n  plist[[i]] &lt;- \n    ggpiestats(\n      data = data[fil,], x = genre, \n      title= paste('', axis[2], g[i], sep = ':'),\n      plotgrid.args = list(ncol = 3),\n      label.repel = TRUE,\n      k = 2\n    ) +\n    scale_fill_manual(values = c(\"#3B4992FF\",\"#EE0000FF\",\"#008B45FF\",\"#631879FF\",\n                                 \"#008280FF\",\"#BB0021FF\",\"#5F559BFF\",\"#A20056FF\",\n                                 \"#808180FF\"))\n}\n\nplot_grid(plotlist = plist, ncol = 3)\n\n\n\n\n\n\n\nFigure 1: Piestats Group",
    "crumbs": [
      "HIPLOT",
      "Piestats Group"
    ]
  },
  {
    "objectID": "Hiplot/013-big-corrplot.html",
    "href": "Hiplot/013-big-corrplot.html",
    "title": "Corrplot Big Data",
    "section": "",
    "text": "The correlation heat map is a graph that analyzes the correlation between two or more variables.",
    "crumbs": [
      "HIPLOT",
      "Corrplot Big Data"
    ]
  },
  {
    "objectID": "Hiplot/013-big-corrplot.html#setup",
    "href": "Hiplot/013-big-corrplot.html#setup",
    "title": "Corrplot Big Data",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ComplexHeatmap\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ComplexHeatmap\", quietly = TRUE)) {\n  install.packages(\"ComplexHeatmap\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ComplexHeatmap)",
    "crumbs": [
      "HIPLOT",
      "Corrplot Big Data"
    ]
  },
  {
    "objectID": "Hiplot/013-big-corrplot.html#data-preparation",
    "href": "Hiplot/013-big-corrplot.html#data-preparation",
    "title": "Corrplot Big Data",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data are the gene names and the expression of each sample.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/big-corrplot/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# convert data structure\ndata &lt;- data[!is.na(data[, 1]), ]\nidx &lt;- duplicated(data[, 1])\ndata[idx, 1] &lt;- paste0(data[idx, 1], \"--dup-\", cumsum(idx)[idx])\nrownames(data) &lt;- data[, 1]\ndata &lt;- data[, -1]\nstr2num_df &lt;- function(x) {\n  x[] &lt;- lapply(x, function(l) as.numeric(l))\n  x\n}\ntmp &lt;- t(str2num_df(data))\ncorr &lt;- round(cor(tmp, use = \"na.or.complete\", method = \"pearson\"), 3)\n\n# View data\nhead(corr[,1:5])\n\n         RGL4   MPP7   UGCG CYSTM1  ANXA2\nRGL4    1.000  0.914  0.929  0.936 -0.592\nMPP7    0.914  1.000  0.852  0.907 -0.543\nUGCG    0.929  0.852  1.000  0.956 -0.440\nCYSTM1  0.936  0.907  0.956  1.000 -0.358\nANXA2  -0.592 -0.543 -0.440 -0.358  1.000\nENDOD1 -0.908 -0.862 -0.791 -0.762  0.826",
    "crumbs": [
      "HIPLOT",
      "Corrplot Big Data"
    ]
  },
  {
    "objectID": "Hiplot/013-big-corrplot.html#visualization",
    "href": "Hiplot/013-big-corrplot.html#visualization",
    "title": "Corrplot Big Data",
    "section": "Visualization",
    "text": "Visualization\n\n# Corrplot Big Data\np &lt;- ComplexHeatmap::Heatmap(\n  corr, col = colorRampPalette(c(\"#4477AA\",\"#FFFFFF\",\"#BB4444\"))(50),\n  clustering_distance_rows = \"euclidean\",\n  clustering_method_rows = \"ward.D2\",\n  clustering_distance_columns = \"euclidean\",\n  clustering_method_columns = \"ward.D2\",\n  show_column_dend = FALSE, show_row_dend = FALSE,\n  column_names_gp = gpar(fontsize = 8),\n  row_names_gp = gpar(fontsize = 8)\n)\n\np\n\n\n\n\n\n\n\nFigure 1: Corrplot Big Data\n\n\n\n\n\nRed indicates positive correlation between two genes, blue indicates negative correlation between two genes, and the number in each cell indicates correlation coefficient.",
    "crumbs": [
      "HIPLOT",
      "Corrplot Big Data"
    ]
  },
  {
    "objectID": "Hiplot/114-map-usa-county.html",
    "href": "Hiplot/114-map-usa-county.html",
    "title": "USA Map (County)",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot USA Map (County) plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/map-usa-county?lang=en",
    "crumbs": [
      "HIPLOT",
      "Oceania/Antarc Map"
    ]
  },
  {
    "objectID": "Hiplot/114-map-usa-county.html#setup",
    "href": "Hiplot/114-map-usa-county.html#setup",
    "title": "USA Map (County)",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2; RColorBrewer\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"RColorBrewer\", quietly = TRUE)) {\n  install.packages(\"RColorBrewer\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(RColorBrewer)",
    "crumbs": [
      "HIPLOT",
      "Oceania/Antarc Map"
    ]
  },
  {
    "objectID": "Hiplot/114-map-usa-county.html#data-preparation",
    "href": "Hiplot/114-map-usa-county.html#data-preparation",
    "title": "USA Map (County)",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/map-usa-county/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\ndt_map &lt;- readRDS(url(\"https://download.hiplot.cn/ui/basic/map-usa-county/usa.county.rds\"))\n\n# Convert data structure\ndt_map$Value &lt;- data$value[match(dt_map$county, data$name)]\n\n# View data\nhead(data)\n\n               name value\n1 Lake of the Woods   167\n2             Ferry   801\n3           Stevens   785\n4          Okanogan   783\n5      Pend Oreille   796\n6          Boundary   126",
    "crumbs": [
      "HIPLOT",
      "Oceania/Antarc Map"
    ]
  },
  {
    "objectID": "Hiplot/114-map-usa-county.html#visualization",
    "href": "Hiplot/114-map-usa-county.html#visualization",
    "title": "USA Map (County)",
    "section": "Visualization",
    "text": "Visualization\n\n# USA Map (County)\np &lt;- ggplot(dt_map) +\n  geom_polygon(aes(x = long, y = lat, group = group, fill = Value),\n               alpha = 0.9, size = 0.5) +\n  geom_path(aes(x = long, y = lat, group = group), color = \"black\", size = 0.2) +\n  coord_fixed() +\n  scale_fill_gradientn(\n    colours = colorRampPalette(rev(brewer.pal(11,\"RdYlBu\")))(500),\n    breaks = seq(min(data$value), max(data$value), \n                 round((max(data$value)-min(data$value))/7)),\n    name = \"Color Key\",\n    guide = guide_legend(\n      direction = \"vertical\", keyheight = unit(1, units = \"mm\"),\n      keywidth = unit(8, units = \"mm\"),\n      title.position = \"top\", title.hjust = 0.5, label.hjust = 0.5,\n      nrow = 1, byrow = T, reverse = F, label.position = \"bottom\")) +\n  theme(text = element_text(color = \"#3A3F4A\"),\n        axis.text = element_blank(),\n        axis.ticks = element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        legend.position = \"top\",\n        legend.text = element_text(size = 4 * 1.5, color = \"black\"),\n        legend.title = element_text(size = 5 * 1.5, color = \"black\"),\n        plot.title = element_text(\n          face = \"bold\", size = 5 * 1.5, hjust = 0.5, \n          margin = margin(t = 4, b = 5), color = \"black\"),\n        plot.background = element_rect(fill = \"#FFFFFF\", color = \"#FFFFFF\"),\n        panel.background = element_rect(fill = \"#FFFFFF\", color = NA),\n        legend.background = element_rect(fill = \"#FFFFFF\", color = NA),\n        plot.margin = unit(c(1.5, 1.5, 1.5, 1.5), \"cm\")) +\n  labs(x = NULL, y = NULL, title = \"USA County Map\")\n\np\n\n\n\n\n\n\n\nFigure 1: USA Map (County)",
    "crumbs": [
      "HIPLOT",
      "Oceania/Antarc Map"
    ]
  },
  {
    "objectID": "Hiplot/085-half-violin.html",
    "href": "Hiplot/085-half-violin.html",
    "title": "Half Violin",
    "section": "",
    "text": "The half violin plot is a statistical graph used to display the distribution and probability density of data by replacing the left part with the data frequency count graph on the basis of keeping the right part of violin graph.",
    "crumbs": [
      "HIPLOT",
      "Half Violin"
    ]
  },
  {
    "objectID": "Hiplot/085-half-violin.html#setup",
    "href": "Hiplot/085-half-violin.html#setup",
    "title": "Half Violin",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2; dplyr; ggpubr; ggthemes\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"dplyr\", quietly = TRUE)) {\n  install.packages(\"dplyr\")\n}\nif (!requireNamespace(\"ggpubr\", quietly = TRUE)) {\n  install.packages(\"ggpubr\")\n}\nif (!requireNamespace(\"ggthemes\", quietly = TRUE)) {\n  install.packages(\"ggthemes\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(ggpubr)\nlibrary(ggthemes)",
    "crumbs": [
      "HIPLOT",
      "Half Violin"
    ]
  },
  {
    "objectID": "Hiplot/085-half-violin.html#data-preparation",
    "href": "Hiplot/085-half-violin.html#data-preparation",
    "title": "Half Violin",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data is data set (gene names and expression levels in different tumors).\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/half-violin/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\ncolnames(data) &lt;- c(\"Value\", \"Group\")\ndata[, 2] &lt;- factor(data[, 2], levels = unique(data[, 2]))\n\n# View data\nhead(data)\n\n     Value Group\n1 12.10228   AML\n2 12.61382   AML\n3 12.52741   AML\n4 12.67990   AML\n5 12.64837   AML\n6 12.12146   AML",
    "crumbs": [
      "HIPLOT",
      "Half Violin"
    ]
  },
  {
    "objectID": "Hiplot/085-half-violin.html#visualization",
    "href": "Hiplot/085-half-violin.html#visualization",
    "title": "Half Violin",
    "section": "Visualization",
    "text": "Visualization\n\n# Half Violin\ngeom_flat_violin &lt;- function(\n  mapping = NULL, data = NULL, stat = \"ydensity\", position = \"dodge\", \n  trim = TRUE, scale = \"area\", show.legend = NA, inherit.aes = TRUE, ...) {\n  ggplot2::layer(data = data, mapping = mapping, stat = stat, \n                 geom = geom_flat_violin_proto, position = position,\n                 show.legend = show.legend, inherit.aes = inherit.aes,\n                 params = list(trim = trim, scale = scale, ...))\n}\n\n\"%||%\" &lt;- function(a, b) {\n  if (!is.null(a)) {\n    a\n  } else {\n    b\n  }\n}\n\ngeom_flat_violin_proto &lt;-\n  ggproto(\"geom_flat_violin_proto\", Geom,\n          setup_data = function(data, params) {\n            data$width &lt;- data$width %||%\n              params$width %||% (resolution(data$x, FALSE) * 0.9)\n            \n            data %&gt;%\n              dplyr::group_by(.data = ., group) %&gt;%\n              dplyr::mutate(.data = ., ymin = min(y), ymax = max(y), xmin = x,\n                            xmax = x + width / 2)\n          },\n          \n          draw_group = function(data, panel_scales, coord) {\n            data &lt;- base::transform(data, xminv = x, \n                                    xmaxv = x + violinwidth * (xmax - x))\n            \n            newdata &lt;- base::rbind(\n              dplyr::arrange(.data = base::transform(data, x = xminv), y),\n              dplyr::arrange(.data = base::transform(data, x = xmaxv), -y))\n            \n            newdata &lt;- rbind(newdata, newdata[1, ])\n            \n            ggplot2:::ggname(\"geom_flat_violin\",\n                             GeomPolygon$draw_panel(newdata, panel_scales, coord))\n          },\n          \n          draw_key = draw_key_polygon,\n          \n          default_aes = ggplot2::aes(weight = 1, colour = \"grey20\", fill = \"white\",\n                                     size = 0.5, alpha = NA, linetype = \"solid\"),\n          required_aes = c(\"x\", \"y\")\n        )\n\np &lt;- ggplot(data = data, aes(Group, Value, fill = Group)) +\n  geom_flat_violin(alpha = 1, scale = \"count\", trim = FALSE) +\n  geom_boxplot(width = 0.05, fill = \"white\", alpha = 1, \n               outlier.colour = NA, position = position_nudge(0.05)) +\n  stat_summary(fun = mean, geom = \"point\", fill = \"white\", shape = 21, size = 2,\n               position = position_nudge(0.05)) +\n  geom_dotplot(alpha = 1, binaxis = \"y\", dotsize = 0.5, stackdir = \"down\", \n               binwidth = 0.1, position = position_nudge(-0.025)) +\n  theme(legend.position = \"none\") +\n  xlab(colnames(data)[2]) +\n  ylab(colnames(data)[1]) +\n  guides(fill = F) +\n  ggtitle(\"Half Violin Plot\") +\n  scale_fill_manual(values = c(\"#e04d39\",\"#5bbad6\",\"#1e9f86\")) +\n  theme_stata() +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n\np\n\n\n\n\n\n\n\nFigure 1: Half Violin\n\n\n\n\n\nThe half violin plot can reflect the data distribution, which is similar to the box diagram. The black horizontal line in the box shows the median gene expression level in each tumor, and the upper and lower edges in the white box represent the upper and lower quartiles in the data set. The distribution of observable numerical points on the left half; The violin graph can also reflect the data density, and the more concentrated the data set, the fatter the graph. The gene expression distribution in the BLGG group is more concentrated, followed by BIC group and AML group.",
    "crumbs": [
      "HIPLOT",
      "Half Violin"
    ]
  },
  {
    "objectID": "Hiplot/030-cor-heatmap.html",
    "href": "Hiplot/030-cor-heatmap.html",
    "title": "Correlation Heatmap",
    "section": "",
    "text": "The correlation heat map is a graph that analyzes the correlation between two or more variables.",
    "crumbs": [
      "HIPLOT",
      "Correlation Heatmap"
    ]
  },
  {
    "objectID": "Hiplot/030-cor-heatmap.html#setup",
    "href": "Hiplot/030-cor-heatmap.html#setup",
    "title": "Correlation Heatmap",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggcorrplot\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggcorrplot\", quietly = TRUE)) {\n  install.packages(\"ggcorrplot\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggcorrplot)",
    "crumbs": [
      "HIPLOT",
      "Correlation Heatmap"
    ]
  },
  {
    "objectID": "Hiplot/030-cor-heatmap.html#data-preparation",
    "href": "Hiplot/030-cor-heatmap.html#data-preparation",
    "title": "Correlation Heatmap",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data are the gene names and the expression of each sample.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/cor-heatmap/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# convert data structure\ndata &lt;- data[!is.na(data[, 1]), ]\nidx &lt;- duplicated(data[, 1])\ndata[idx, 1] &lt;- paste0(data[idx, 1], \"--dup-\", cumsum(idx)[idx])\nrownames(data) &lt;- data[, 1]\ndata &lt;- data[, -1]\nstr2num_df &lt;- function(x) {\n  final &lt;- NULL\n  for (i in seq_len(ncol(x))) {\n    final &lt;- cbind(final, as.numeric(x[, i]))\n  }\n  colnames(final) &lt;- colnames(x)\n  return(final)\n}\ntmp &lt;- str2num_df(t(data))\ncorr &lt;- round(cor(tmp, use = \"na.or.complete\", method = \"pearson\"), 3)\np_mat &lt;- round(cor_pmat(tmp, method = \"pearson\"), 3)\n\n# View data\nhead(data)\n\n             M1       M2       M3       M4       M5       M6        M7       M8\nRGL4   8.454808 8.019389 8.990836 9.718631 7.908075 4.147051  4.985084 4.576711\nMPP7   8.690520 8.630346 7.080873 9.838476 8.271824 5.179200  5.200868 3.266993\nUGCG   8.648366 8.600555 9.431046 7.923021 8.309214 4.902510  5.750804 4.492856\nCYSTM1 8.628884 9.238677 8.487243 8.958537 7.357109 4.541605  6.370533 4.246651\nANXA2  4.983769 6.748022 6.220791 4.719403 3.284346 8.089850 10.637472 7.214912\nENDOD1 5.551640 5.406465 4.663785 3.550765 4.103507 8.393991  9.538503 9.069923\n             M9      M10\nRGL4   4.930349 4.293700\nMPP7   5.565226 4.300309\nUGCG   4.659987 3.306275\nCYSTM1 4.745769 3.449627\nANXA2  9.002710 5.123359\nENDOD1 8.639664 7.106392",
    "crumbs": [
      "HIPLOT",
      "Correlation Heatmap"
    ]
  },
  {
    "objectID": "Hiplot/030-cor-heatmap.html#visualization",
    "href": "Hiplot/030-cor-heatmap.html#visualization",
    "title": "Correlation Heatmap",
    "section": "Visualization",
    "text": "Visualization\n\n# Correlation Heatmap\np &lt;- ggcorrplot(\n  corr,\n  colors = c(\"#4477AA\", \"#FFFFFF\", \"#BB4444\"),\n  method = \"circle\",\n  hc.order = T,\n  hc.method = \"ward.D2\",\n  outline.col = \"white\",\n  ggtheme = theme_bw(),\n  type = \"upper\",\n  lab = F,\n  lab_size = 3,\n  legend.title = \"Correlation\"\n  ) +\n  ggtitle(\"Cor Heatmap Plot\") +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\np\n\n\n\n\n\n\n\nFigure 1: Correlation Heatmap\n\n\n\n\n\nRed indicates positive correlation between two genes, blue indicates negative correlation between two genes, and the number in each cell indicates correlation coefficient.",
    "crumbs": [
      "HIPLOT",
      "Correlation Heatmap"
    ]
  },
  {
    "objectID": "Hiplot/133-pareto-chart.html",
    "href": "Hiplot/133-pareto-chart.html",
    "title": "Pareto Chart",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Pareto Chart plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/pareto-chart?lang=en",
    "crumbs": [
      "HIPLOT",
      "Pareto Chart"
    ]
  },
  {
    "objectID": "Hiplot/133-pareto-chart.html#setup",
    "href": "Hiplot/133-pareto-chart.html#setup",
    "title": "Pareto Chart",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)",
    "crumbs": [
      "HIPLOT",
      "Pareto Chart"
    ]
  },
  {
    "objectID": "Hiplot/133-pareto-chart.html#data-preparation",
    "href": "Hiplot/133-pareto-chart.html#data-preparation",
    "title": "Pareto Chart",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe case data represents the sales data of a product on multiple platforms. The plugin will automatically plot a bar chart with sales data in descending order and simultaneously calculate the cumulative sales to draw the cumulative line chart.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/pareto-chart/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\ndata &lt;- data[order(-data[[\"sales\"]]), ]\ndata[[\"channel\"]] &lt;- factor(data[[\"channel\"]], levels = data[[\"channel\"]])\n## Calculate percentage number\ndata$accumulating &lt;- cumsum(data[[\"sales\"]])\nmax_y &lt;- max(data[[\"sales\"]])\ncal_num &lt;- sum(data[[\"sales\"]]) / max_y\ndata$accumulating &lt;- data$accumulating / cal_num\n\n# View data\nhead(data)\n\n    channel sales accumulating\n2        JD   500     132.9787\n5     Tmall   400     239.3617\n4 Pinduoduo   300     319.1489\n3    Amazon   230     380.3191\n6    Shopee   200     433.5106\n1    TaoBao   100     460.1064",
    "crumbs": [
      "HIPLOT",
      "Pareto Chart"
    ]
  },
  {
    "objectID": "Hiplot/133-pareto-chart.html#visualization",
    "href": "Hiplot/133-pareto-chart.html#visualization",
    "title": "Pareto Chart",
    "section": "Visualization",
    "text": "Visualization\n\n# Pareto Chart\np &lt;- ggplot(data, aes(x = channel, y = sales, fill = channel)) +\n  geom_bar(stat = \"identity\") +\n  geom_line(aes(y = accumulating), group = 1) +\n  geom_point(aes(y = accumulating), show.legend = FALSE) +\n  scale_y_continuous(sec.axis = sec_axis(trans = ~ . / max_y * 100, name = \"Percentage\")) +\n  scale_fill_manual(values = c(\"#E64B35FF\",\"#4DBBD5FF\",\"#00A087FF\",\"#3C5488FF\",\n                               \"#F39B7FFF\",\"#8491B4FF\",\"#91D1C2FF\",\"#DC0000FF\")) +\n  theme_bw()\n\np\n\n\n\n\n\n\n\nFigure 1: Pareto Chart",
    "crumbs": [
      "HIPLOT",
      "Pareto Chart"
    ]
  },
  {
    "objectID": "Hiplot/134-parliament.html",
    "href": "Hiplot/134-parliament.html",
    "title": "Parliament",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Parliament plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/parliament?lang=en\nThe parliamentary chart is a data processing method that looks like a parliamentary seat, with points representing a data set to show the share ratio of each group more flexibly.",
    "crumbs": [
      "HIPLOT",
      "Parliament"
    ]
  },
  {
    "objectID": "Hiplot/134-parliament.html#setup",
    "href": "Hiplot/134-parliament.html#setup",
    "title": "Parliament",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggpol; ggplot2\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggpol\", quietly = TRUE)) {\n  install.packages(\"ggpol\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggpol)\nlibrary(ggplot2)",
    "crumbs": [
      "HIPLOT",
      "Parliament"
    ]
  },
  {
    "objectID": "Hiplot/134-parliament.html#data-preparation",
    "href": "Hiplot/134-parliament.html#data-preparation",
    "title": "Parliament",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data are groups and their corresponding values.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/parliament/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# View data\nhead(data)\n\n  group value\n1    G1   200\n2    G2    46\n3    G3    92\n4    G4    80\n5    G5   150",
    "crumbs": [
      "HIPLOT",
      "Parliament"
    ]
  },
  {
    "objectID": "Hiplot/134-parliament.html#visualization",
    "href": "Hiplot/134-parliament.html#visualization",
    "title": "Parliament",
    "section": "Visualization",
    "text": "Visualization\n\n# Parliament\np &lt;- ggplot(data) +\n  geom_parliament(alpha = 1, aes(seats = value, fill = group), color = \"black\") +\n  coord_fixed() +\n  scale_fill_discrete(name = \"group\", labels = unique(data$group)) +\n  scale_fill_manual(values = c(\"#E64B35FF\",\"#4DBBD5FF\",\"#00A087FF\",\"#3C5488FF\",\n                                \"#F39B7FFF\")) +\n  ggtitle(\"Parliament Plot\") +\n  theme_void() +\n  theme(legend.position = \"bottom\",\n        plot.title = element_text(hjust = 0.5))\n\np\n\n\n\n\n\n\n\nFigure 1: Parliament\n\n\n\n\n\nDifferent colors represent different groups, and each dot represents one data point. It’s a semicircle of points, the smallest fraction of which can be represented by a single point in a parliamentary diagram.",
    "crumbs": [
      "HIPLOT",
      "Parliament"
    ]
  },
  {
    "objectID": "Hiplot/179-venn2.html",
    "href": "Hiplot/179-venn2.html",
    "title": "Venn2",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Venn2 plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/venn2?lang=en\nA Venn diagram is a diagramthat shows all possible logical relations between a finite collection of different sets. These diagrams depict elements as points in the plane, and sets as regions inside closed curves. A Venn diagram consists of multiple overlapping closed curves, usually circles, each representing a set. The points inside a curve labelled S represent elements of the set S, while points outside the boundary represent elements not in the set S. This lends to easily read visualizations; for example, the set of all elements that are members of both sets Sand T, S ∩ T, is represented visually by the area of overlap of the regions S and T. In Venn diagrams the curves are overlapped in every possible way, showing all possible relations between the sets.",
    "crumbs": [
      "HIPLOT",
      "Venn2"
    ]
  },
  {
    "objectID": "Hiplot/179-venn2.html#setup",
    "href": "Hiplot/179-venn2.html#setup",
    "title": "Venn2",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; venn\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"venn\", quietly = TRUE)) {\n  install.packages(\"venn\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(venn)",
    "crumbs": [
      "HIPLOT",
      "Venn2"
    ]
  },
  {
    "objectID": "Hiplot/179-venn2.html#data-preparation",
    "href": "Hiplot/179-venn2.html#data-preparation",
    "title": "Venn2",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data is a collection of five gene names.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/venn2/data.json\")$exampleData[[1]]$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# convert data structure\ndata_venn &lt;- as.list(data)\ndata_venn &lt;- lapply(data_venn, function(x) {\n  x[is.na(x)] &lt;- \"\"\n  x &lt;- x[x != \"\"]\n  return(x)\n})\n\n# View data\nhead(data)\n\n     Set1      Set2     Set3      Set4    Set5\n1   ISG15      HES5     DVL1   MATP6P1 FAM132A\n2  TTLL10  AURKAIP1 ARHGEF16   MIR551A    AGRN\n3    HES4 LINC00982   OR4F16  C1orf222 WBP1LP6\n4  OR4G4P    FAM87B      SKI   MIR200B  KLHL17\n5 MND2P28       SKI   WASH7P LINC00115  FAM41C\n6  FAM87B     GABRD    MEGF6    ATAD3B   PANK4",
    "crumbs": [
      "HIPLOT",
      "Venn2"
    ]
  },
  {
    "objectID": "Hiplot/179-venn2.html#visualization",
    "href": "Hiplot/179-venn2.html#visualization",
    "title": "Venn2",
    "section": "Visualization",
    "text": "Visualization\n\n# Venn2\ncol &lt;- c(\"#E64B35FF\",\"#4DBBD5FF\",\"#00A087FF\",\"#3C5488FF\",\"#F39B7FFF\")\nvenn(x=data_venn, opacity=0.8, ggplot=F, ilabels = TRUE, zcolor=col, box=F)\ntitle(main = \"Vene Plot (5 sets)\", line = -1)\n\n\n\n\n\n\n\nFigure 1: Venn2\n\n\n\n\n\nThe closed curve of 5 colors represents 5 sets, and the number represents the number of overlapping or non-overlapping genes in multiple sets. For example, 8 in the sample figure represents 8 identical gene names in 5 sample sets.",
    "crumbs": [
      "HIPLOT",
      "Venn2"
    ]
  },
  {
    "objectID": "Hiplot/027-contour-matrix.html",
    "href": "Hiplot/027-contour-matrix.html",
    "title": "Contour (Matrix)",
    "section": "",
    "text": "The contour map (matrix) is a graph that displays three-dimensional data in a two-dimensional form",
    "crumbs": [
      "HIPLOT",
      "Contour (Matrix)"
    ]
  },
  {
    "objectID": "Hiplot/027-contour-matrix.html#setup",
    "href": "Hiplot/027-contour-matrix.html#setup",
    "title": "Contour (Matrix)",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2; reshape2; ggisoband; cowplot\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"reshape2\", quietly = TRUE)) {\n  install.packages(\"reshape2\")\n}\nif (!requireNamespace(\"ggisoband\", quietly = TRUE)) {\n  install.packages(\"ggisoband\")\n}\nif (!requireNamespace(\"cowplot\", quietly = TRUE)) {\n  install.packages(\"cowplot\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(reshape2)\nlibrary(ggisoband)\nlibrary(cowplot)",
    "crumbs": [
      "HIPLOT",
      "Contour (Matrix)"
    ]
  },
  {
    "objectID": "Hiplot/027-contour-matrix.html#data-preparation",
    "href": "Hiplot/027-contour-matrix.html#data-preparation",
    "title": "Contour (Matrix)",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data is a matrix.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/contour-matrix/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# convert data structure\ndata &lt;- as.matrix(data)\ncolnames(data) &lt;- NULL\ndata3d &lt;- reshape2::melt(data)\nnames(data3d) &lt;- c(\"x\", \"y\", \"z\")\n\n# View data\nhead(data3d)\n\n  x y   z\n1 1 1 100\n2 2 1 101\n3 3 1 102\n4 4 1 103\n5 5 1 104\n6 6 1 105",
    "crumbs": [
      "HIPLOT",
      "Contour (Matrix)"
    ]
  },
  {
    "objectID": "Hiplot/027-contour-matrix.html#visualization",
    "href": "Hiplot/027-contour-matrix.html#visualization",
    "title": "Contour (Matrix)",
    "section": "Visualization",
    "text": "Visualization\n\n# Contour (Matrix)\ncomplex_general_theme &lt;- \n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n\np1 &lt;- ggplot(data3d, aes(x, y, z = z)) +\n  geom_isobands(\n    alpha = 1,\n    aes(color = stat(zmin)), fill = NA\n  ) +\n  scale_color_viridis_c() +\n  coord_cartesian(expand = FALSE) +\n  theme_bw() +\n  complex_general_theme\n\np2 &lt;- ggplot(data3d, aes(x, y, z = z)) +\n  geom_isobands(\n    alpha = 1,\n    aes(fill = stat(zmin)), color = NA\n  ) +\n  scale_fill_viridis_c(guide = \"legend\") +\n  coord_cartesian(expand = FALSE) +\n  theme_bw() +\n  complex_general_theme\n\nplot_grid(p1, p2, labels = c(\"A\", \"B\"), label_size = 12)\n\n\n\n\n\n\n\nFigure 1: Contour (Matrix)\n\n\n\n\n\nYellow represents the highest, dark purple represents the lowest, the height scale range is 90-190.",
    "crumbs": [
      "HIPLOT",
      "Contour (Matrix)"
    ]
  },
  {
    "objectID": "Hiplot/170-taylor-diagram.html",
    "href": "Hiplot/170-taylor-diagram.html",
    "title": "Taylor Diagram",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Taylor Diagram plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/taylor-diagram?lang=en\nIt can be used to display the standard deviation (SD), root mean square (RMS) error and correlation coefficient of the models simultaneously.",
    "crumbs": [
      "HIPLOT",
      "Taylor Diagram"
    ]
  },
  {
    "objectID": "Hiplot/170-taylor-diagram.html#setup",
    "href": "Hiplot/170-taylor-diagram.html#setup",
    "title": "Taylor Diagram",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: openair\n\n\n# Install packages\nif (!requireNamespace(\"openair\", quietly = TRUE)) {\n  install.packages(\"openair\")\n}\n\n# Load packages\nlibrary(openair)",
    "crumbs": [
      "HIPLOT",
      "Taylor Diagram"
    ]
  },
  {
    "objectID": "Hiplot/170-taylor-diagram.html#data-preparation",
    "href": "Hiplot/170-taylor-diagram.html#data-preparation",
    "title": "Taylor Diagram",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndat &lt;- selectByDate(mydata, year = 2003)\n\n# convert data structure\ndat &lt;- data.frame(date = mydata$date, obs = mydata$nox, mod = mydata$nox)\ndat &lt;- transform(dat, month = as.numeric(format(date, \"%m\")))\nmod1 &lt;- transform(dat, mod = mod + 10 * month + 10 * month * rnorm(nrow(dat)),\nmodel = \"model 1\")\nmod1 &lt;- transform(mod1, mod = c(mod[5:length(mod)], mod[(length(mod) - 3) :\nlength(mod)]))\nmod2 &lt;- transform(dat, mod = mod + 7 * month + 7 * month * rnorm(nrow(dat)),\nmodel = \"model 2\")\nmod3 &lt;- transform(dat, mod = mod + 3 * month + 3 * month * rnorm(nrow(dat)),\nmodel = \"model 3\")\nmod.dat &lt;- rbind(mod1, mod2, mod3)\n\n# View data\nhead(mod.dat)\n\n                 date obs      mod month   model\n1 1998-01-01 00:00:00 285 469.7344     1 model 1\n2 1998-01-01 01:00:00  NA 268.4140     1 model 1\n3 1998-01-01 02:00:00  NA 172.4970     1 model 1\n4 1998-01-01 03:00:00 493 208.5197     1 model 1\n5 1998-01-01 04:00:00 468 150.9542     1 model 1\n6 1998-01-01 05:00:00 264 131.5189     1 model 1",
    "crumbs": [
      "HIPLOT",
      "Taylor Diagram"
    ]
  },
  {
    "objectID": "Hiplot/170-taylor-diagram.html#visualization",
    "href": "Hiplot/170-taylor-diagram.html#visualization",
    "title": "Taylor Diagram",
    "section": "Visualization",
    "text": "Visualization\n\n# Taylor Diagram\nTaylorDiagram(mod.dat, obs = \"obs\", mod = \"mod\", group = \"model\",\n              main = \"Taylor diagram\", \n              cols = c(\"#00468BFF\",\"#8e6097\",\"#BFACF0FF\"))\n\n\n\n\n\n\n\nFigure 1: Taylor Diagram",
    "crumbs": [
      "HIPLOT",
      "Taylor Diagram"
    ]
  },
  {
    "objectID": "Hiplot/041-deviation-plot.html",
    "href": "Hiplot/041-deviation-plot.html",
    "title": "Deviation Plot",
    "section": "",
    "text": "Deviation plot provides a visual representation of the differences between data points.",
    "crumbs": [
      "HIPLOT",
      "Deviation Plot"
    ]
  },
  {
    "objectID": "Hiplot/041-deviation-plot.html#setup",
    "href": "Hiplot/041-deviation-plot.html#setup",
    "title": "Deviation Plot",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggpubr\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggpubr\", quietly = TRUE)) {\n  install.packages(\"ggpubr\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggpubr)",
    "crumbs": [
      "HIPLOT",
      "Deviation Plot"
    ]
  },
  {
    "objectID": "Hiplot/041-deviation-plot.html#data-preparation",
    "href": "Hiplot/041-deviation-plot.html#data-preparation",
    "title": "Deviation Plot",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/deviation-plot/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# convert data structure\ndata[[\"z_score\"]] &lt;- (data[[\"mpg\"]] - mean(data[[\"mpg\"]])) / sd(data[[\"mpg\"]])\ndata[[\"Group\"]] &lt;- factor(ifelse(data[[\"z_score\"]] &lt; 0, \"low\", \"high\"),\n                          levels = c(\"low\", \"high\")\n                          )\n\n# View data\nhead(data)\n\n   mpg cyl disp  hp drat    wt  qsec vs am gear carb              name\n1 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4         Mazda RX4\n2 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4     Mazda RX4 Wag\n3 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1        Datsun 710\n4 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1    Hornet 4 Drive\n5 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2 Hornet Sportabout\n6 18.1   6  225 105 2.76 3.460 20.22  1  0    3    1           Valiant\n     z_score Group\n1  0.1508848  high\n2  0.1508848  high\n3  0.4495434  high\n4  0.2172534  high\n5 -0.2307345   low\n6 -0.3302874   low",
    "crumbs": [
      "HIPLOT",
      "Deviation Plot"
    ]
  },
  {
    "objectID": "Hiplot/041-deviation-plot.html#visualization",
    "href": "Hiplot/041-deviation-plot.html#visualization",
    "title": "Deviation Plot",
    "section": "Visualization",
    "text": "Visualization\n\n# Deviation Plot\np &lt;- ggbarplot(data,\n    x = \"name\",\n    y = \"z_score\",\n    fill = \"Group\",\n    color = \"white\",\n    sort.val = \"desc\",\n    sort.by.groups = FALSE,\n    x.text.angle = 90,\n    xlab = \"name\",\n    ylab = \"mpg\",\n    rotate = TRUE\n  ) +\n  scale_fill_manual(values = c(\"#e04d39\",\"#5bbad6\")) +\n  theme_bw() +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n\np\n\n\n\n\n\n\n\nFigure 1: Deviation Plot",
    "crumbs": [
      "HIPLOT",
      "Deviation Plot"
    ]
  },
  {
    "objectID": "Hiplot/058-funnel-plot.html",
    "href": "Hiplot/058-funnel-plot.html",
    "title": "Funnel Plot",
    "section": "",
    "text": "Can be used to show potential bias factors in Meta-analysis.",
    "crumbs": [
      "HIPLOT",
      "Funnel Plot"
    ]
  },
  {
    "objectID": "Hiplot/058-funnel-plot.html#setup",
    "href": "Hiplot/058-funnel-plot.html#setup",
    "title": "Funnel Plot",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; FunnelPlotR; gridExtra\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"FunnelPlotR\", quietly = TRUE)) {\n  install.packages(\"FunnelPlotR\")\n}\nif (!requireNamespace(\"gridExtra\", quietly = TRUE)) {\n  install.packages(\"gridExtra\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(FunnelPlotR)\nlibrary(gridExtra)",
    "crumbs": [
      "HIPLOT",
      "Funnel Plot"
    ]
  },
  {
    "objectID": "Hiplot/058-funnel-plot.html#data-preparation",
    "href": "Hiplot/058-funnel-plot.html#data-preparation",
    "title": "Funnel Plot",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/funnel-plot/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# View data\nhead(data)\n\n  los hmo white died age80 type type1 type2 type3 provnum     prds\n1   4   0     1    0     0    1     1     0     0   30001 9.667315\n2   9   1     1    0     0    1     1     0     0   30001 8.956472\n3   3   1     1    1     1    1     1     0     0   30001 6.856678\n4   9   0     1    0     0    1     1     0     0   30001 9.667315\n5   1   0     1    1     1    1     1     0     0   30001 7.400868\n6   4   0     1    1     0    1     1     0     0   30001 7.561051",
    "crumbs": [
      "HIPLOT",
      "Funnel Plot"
    ]
  },
  {
    "objectID": "Hiplot/058-funnel-plot.html#visualization",
    "href": "Hiplot/058-funnel-plot.html#visualization",
    "title": "Funnel Plot",
    "section": "Visualization",
    "text": "Visualization\n\n# Funnel Plot\np &lt;- funnel_plot(\n  data, numerator = los, denominator = prds,  group = provnum, data_type = \"SR\",\n  limit = 99, label = \"outlier\", sr_method = \"SHMI\", trim_by=0.1, \n  title = \"Funnel Plot\", x_range = \"auto\", y_range = \"auto\"\n  )\n\np\n\nA funnel plot object with 54 points of which 9 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n\n\n\nFigure 1: Funnel Plot",
    "crumbs": [
      "HIPLOT",
      "Funnel Plot"
    ]
  },
  {
    "objectID": "Hiplot/092-line-color-dot.html",
    "href": "Hiplot/092-line-color-dot.html",
    "title": "Line (Color Dot)",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Line (Color Dot) plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/line-color-dot?lang=en",
    "crumbs": [
      "HIPLOT",
      "Line (Color Dot)"
    ]
  },
  {
    "objectID": "Hiplot/092-line-color-dot.html#setup",
    "href": "Hiplot/092-line-color-dot.html#setup",
    "title": "Line (Color Dot)",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; grafify\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"grafify\", quietly = TRUE)) {\n  install.packages(\"grafify\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(grafify)",
    "crumbs": [
      "HIPLOT",
      "Line (Color Dot)"
    ]
  },
  {
    "objectID": "Hiplot/092-line-color-dot.html#data-preparation",
    "href": "Hiplot/092-line-color-dot.html#data-preparation",
    "title": "Line (Color Dot)",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/line-color-dot/data.json\")$exampleData[[1]]$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\nx &lt;- \"Time\"\ny &lt;- \"PI\"\ngroup &lt;- \"Experiment\"\nfacet &lt;- \"Genotype\"\ndata[, x] &lt;- factor(data[, x], levels = unique(data[, x]))\ndata[, group] &lt;- factor(data[, group], levels = unique(data[, group]))\ndata[, facet] &lt;- factor(data[, facet], levels = unique(data[, facet]))\n\n# View data\nhead(data)\n\n  Experiment Time Subject Genotype       PI Time2\n1         e1 t100      s1       WT 20.47120   100\n2         e2 t100      s2       WT 28.88967   100\n3         e3 t100      s3       WT 11.55061   100\n4         e4 t100      s4       WT 23.24516   100\n5         e5 t100      s5       WT 30.20904   100\n6         e6 t100      s6       WT 28.68300   100",
    "crumbs": [
      "HIPLOT",
      "Line (Color Dot)"
    ]
  },
  {
    "objectID": "Hiplot/092-line-color-dot.html#visualization",
    "href": "Hiplot/092-line-color-dot.html#visualization",
    "title": "Line (Color Dot)",
    "section": "Visualization",
    "text": "Visualization\n\n# Line (Color Dot)\np &lt;- plot_befafter_colours(\n  data = data, xcol = get(x), ycol = get(y), match = get(group),\n  symsize = 5, symthick = 1, s_alpha = 1) +\n  facet_wrap(facet) +\n  guides(fill = guide_legend(title = group)) +\n  scale_fill_grafify() +\n  xlab(x) + ylab(y) +\n  ggtitle(\"Two-way repeated measures\") +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12, hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n\np\n\n\n\n\n\n\n\nFigure 1: Line (Color Dot)",
    "crumbs": [
      "HIPLOT",
      "Line (Color Dot)"
    ]
  },
  {
    "objectID": "Hiplot/101-map-china2.html",
    "href": "Hiplot/101-map-china2.html",
    "title": "China Map 2",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot China Map 2 plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/map-china2?lang=en",
    "crumbs": [
      "HIPLOT",
      "China Map 2"
    ]
  },
  {
    "objectID": "Hiplot/101-map-china2.html#setup",
    "href": "Hiplot/101-map-china2.html#setup",
    "title": "China Map 2",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2; RColorBrewer\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"RColorBrewer\", quietly = TRUE)) {\n  install.packages(\"RColorBrewer\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(RColorBrewer)",
    "crumbs": [
      "HIPLOT",
      "China Map 2"
    ]
  },
  {
    "objectID": "Hiplot/101-map-china2.html#data-preparation",
    "href": "Hiplot/101-map-china2.html#data-preparation",
    "title": "China Map 2",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/map-china2/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\ndt_map &lt;- readRDS(url(\"https://download.hiplot.cn/ui/basic/map-china/china.rds\"))\n\n# Convert data structure\ndt_map$Value &lt;- data$value[match(dt_map$FCNAME, data$name)]\n\n# View data\nhead(data)\n\n    name value\n1 安徽省  6118\n2 福建省  3581\n3 甘肃省  2617\n4 广东省  9449\n5 贵州省  3762\n6 海南省   845",
    "crumbs": [
      "HIPLOT",
      "China Map 2"
    ]
  },
  {
    "objectID": "Hiplot/101-map-china2.html#visualization",
    "href": "Hiplot/101-map-china2.html#visualization",
    "title": "China Map 2",
    "section": "Visualization",
    "text": "Visualization\n\n# China Map 2\np &lt;- ggplot(dt_map) +\n  geom_polygon(aes(x = long, y = lat, group = group, fill = Value),\n               alpha = 0.9, size = 0.5) +\n  geom_path(aes(x = long, y = lat, group = group), color = \"black\", size = 0.2) +\n  coord_fixed() +\n  scale_fill_gradientn(\n    colours = colorRampPalette(rev(brewer.pal(11,\"RdYlBu\")))(500),\n    breaks = seq(min(data$value), max(data$value), \n                 round((max(data$value)-min(data$value))/7)),\n    name = \"Color Key\",\n    guide = guide_legend(\n      direction = \"vertical\", keyheight = unit(1, units = \"mm\"),\n      keywidth = unit(8, units = \"mm\"),\n      title.position = \"top\", title.hjust = 0.5, label.hjust = 0.5,\n      nrow = 1, byrow = T, reverse = F, label.position = \"bottom\")) +\n  theme(text = element_text(color = \"#3A3F4A\"),\n        axis.text = element_blank(),\n        axis.ticks = element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        legend.position = \"top\",\n        legend.text = element_text(size = 4 * 1.5, color = \"black\"),\n        legend.title = element_text(size = 5 * 1.5, color = \"black\"),\n        plot.title = element_text(\n          face = \"bold\", size = 5 * 1.5, hjust = 0.5, \n          margin = margin(t = 4, b = 5), color = \"black\"),\n        plot.background = element_rect(fill = \"#FFFFFF\", color = \"#FFFFFF\"),\n        panel.background = element_rect(fill = \"#FFFFFF\", color = NA),\n        legend.background = element_rect(fill = \"#FFFFFF\", color = NA),\n        plot.margin = unit(c(1.5, 1.5, 1.5, 1.5), \"cm\")) +\n  labs(x = NULL, y = NULL, title = \"China Map\")\n\np\n\n\n\n\n\n\n\nFigure 1: China Map 2",
    "crumbs": [
      "HIPLOT",
      "China Map 2"
    ]
  },
  {
    "objectID": "Hiplot/077-gobar.html",
    "href": "Hiplot/077-gobar.html",
    "title": "GOBar Plot",
    "section": "",
    "text": "The gobar plot is used to display Z-score coloured barplot of terms ordered alternatively by z-score or the negative logarithm of the adjusted p-value.",
    "crumbs": [
      "HIPLOT",
      "GOBar Plot"
    ]
  },
  {
    "objectID": "Hiplot/077-gobar.html#setup",
    "href": "Hiplot/077-gobar.html#setup",
    "title": "GOBar Plot",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; GOplot\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"GOplot\", quietly = TRUE)) {\n  install.packages(\"GOplot\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(GOplot)",
    "crumbs": [
      "HIPLOT",
      "GOBar Plot"
    ]
  },
  {
    "objectID": "Hiplot/077-gobar.html#data-preparation",
    "href": "Hiplot/077-gobar.html#data-preparation",
    "title": "GOBar Plot",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data are the results of GO enrichment with seven columns: category, GO id, GO term, gene count, gene name, logFC, adjust pvalue and zscore.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/gobar/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\ncolnames(data) &lt;- c(\"category\",\"ID\",\"term\",\"count\",\"genes\",\"logFC\",\"adj_pval\",\"zscore\")\ndata &lt;- data[data$category %in% c(\"BP\",\"CC\",\"MF\"),]\ndata &lt;- data[!is.na(data$adj_pval),]\ndata$adj_pval &lt;- as.numeric(data$adj_pval)\ndata$zscore &lt;- as.numeric(data$zscore)\n\n# View data\nhead(data)\n\n  category         ID              term count  genes      logFC adj_pval\n1       BP GO:0007507 heart development    54   DLC1 -0.9707875 2.17e-06\n2       BP GO:0007507 heart development    54   NRP2 -1.5153173 2.17e-06\n3       BP GO:0007507 heart development    54   NRP1 -1.1412315 2.17e-06\n4       BP GO:0007507 heart development    54   EDN1  1.3813006 2.17e-06\n5       BP GO:0007507 heart development    54 PDLIM3 -0.8876939 2.17e-06\n6       BP GO:0007507 heart development    54   GJA1 -0.8179480 2.17e-06\n      zscore\n1 -0.8164966\n2 -0.8164966\n3 -0.8164966\n4 -0.8164966\n5 -0.8164966\n6 -0.8164966",
    "crumbs": [
      "HIPLOT",
      "GOBar Plot"
    ]
  },
  {
    "objectID": "Hiplot/077-gobar.html#visualization",
    "href": "Hiplot/077-gobar.html#visualization",
    "title": "GOBar Plot",
    "section": "Visualization",
    "text": "Visualization\n\n# GOBar Plot\np &lt;- GOBar(data, display = \"multiple\", order.by.zscore = T,\n           title = \"GO Enrichment Barplot \", \n           zsc.col = c(\"#EF8A62\",\"#F7F7F7\",\"#67A9CF\")) + \n    theme(plot.title = element_text(hjust = 0.5),\n          axis.text.x = element_text(size = 8))\n\np\n\n\n\n\n\n\n\nFigure 1: GOBar Plot\n\n\n\n\n\nAs shown in the example figure, the x-axis represent each GO term, the y-axis represent the -log(adj_pvalue), each bar is colored by the z-score. If display is used to facet the plot the width of the panels will be proportional to the length of the x scale.",
    "crumbs": [
      "HIPLOT",
      "GOBar Plot"
    ]
  },
  {
    "objectID": "Hiplot/004-barplot-color-group.html",
    "href": "Hiplot/004-barplot-color-group.html",
    "title": "Barplot Color Group",
    "section": "",
    "text": "The color group barplot can be used to display data values in groups, and to label different colors in sequence.",
    "crumbs": [
      "HIPLOT",
      "Barplot Color Group"
    ]
  },
  {
    "objectID": "Hiplot/004-barplot-color-group.html#setup",
    "href": "Hiplot/004-barplot-color-group.html#setup",
    "title": "Barplot Color Group",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2; stringr\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"stringr\", quietly = TRUE)) {\n  install.packages(\"stringr\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(stringr)",
    "crumbs": [
      "HIPLOT",
      "Barplot Color Group"
    ]
  },
  {
    "objectID": "Hiplot/004-barplot-color-group.html#data-preparation",
    "href": "Hiplot/004-barplot-color-group.html#data-preparation",
    "title": "Barplot Color Group",
    "section": "Data Preparation",
    "text": "Data Preparation\nData table (three columns):\nTerm | Entry name, such as GO/KEGG channel name\nCount | The numerical size of the entry, such as the number of genes enriched in a pathway\nType | Category to which this channel belongs: such as BP/MF/CC/KEGG\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/barplot-color-group/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# convert data structure\ncolnames(data) &lt;- c(\"term\", \"count\", \"type\")\ndata[,\"term\"] &lt;- str_to_sentence(str_remove(data[,\"term\"], pattern = \"\\\\w+:\\\\d+\\\\W\"))\ndata[,\"term\"] &lt;- factor(data[,\"term\"], \n                        levels =  data[,\"term\"][length(data[,\"term\"]):1])\ndata[,\"type\"] &lt;- factor(data[,\"type\"], \n                        levels = data[!duplicated(data[,\"type\"]), \"type\"])\n\n# View data\ndata\n\n                                                  term count type\n1                                      Immune response    20   BP\n2                        Defense response to bacterium    11   BP\n3                                      Cell chemotaxis     8   BP\n4                                        Cell adhesion    17   BP\n5                                Complement activation     8   BP\n6                  Cytokine-mediated signaling pathway     8   MF\n7                             Phagocytosis, engulfment     5   MF\n8              Negative regulation of jak-stat cascade     5   MF\n9                             Epoxygenase p450 pathway     4   MF\n10                Chemokine-mediated signaling pathway     6   MF\n11  Negative regulation of leukocyte apoptotic process     3   MF\n12                   B cell receptor signaling pathway     5   MF\n13          Cellular response to tumor necrosis factor     6   CC\n14                   Positive regulation of chemotaxis     3   CC\n15                 Positive regulation of angiogenesis     6   CC\n16                        Collagen fibril organization     4   CC\n17 Positive regulation of homotypic cell-cell adhesion    20 KEGG\n18              Regulation of cell projection assembly    14 KEGG\n19                 Prostate epithelial cord elongation    10 KEGG\n20                         Bile acid catabolic process     8 KEGG\n21                           Cellular response to drug     7 KEGG\n22                 Glycosaminoglycan metabolic process     4 KEGG",
    "crumbs": [
      "HIPLOT",
      "Barplot Color Group"
    ]
  },
  {
    "objectID": "Hiplot/004-barplot-color-group.html#visualization",
    "href": "Hiplot/004-barplot-color-group.html#visualization",
    "title": "Barplot Color Group",
    "section": "Visualization",
    "text": "Visualization\n\n# Barplot Color Group\np &lt;- ggplot(data = data, aes(x = term, y = count, fill = type)) +\n  geom_bar(stat = \"identity\", width = 0.8) + \n  theme_bw() +\n  xlab(\"Count\") +\n  ylab(\"Term\") +\n  guides(fill = guide_legend(title=\"Type\")) +\n  ggtitle(\"Barplot Color Group\") + \n  coord_flip() +\n  theme_classic() +\n  scale_fill_manual(values = c(\"#E64B35FF\",\"#4DBBD5FF\",\"#00A087FF\",\"#3C5488FF\")) +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n\np\n\n\n\n\n\n\n\nFigure 1: Barplot Color Group\n\n\n\n\n\nThis plot visualizes the results of GO/KEGG pathway enrichment analysis.",
    "crumbs": [
      "HIPLOT",
      "Barplot Color Group"
    ]
  },
  {
    "objectID": "Hiplot/043-diverging-scale.html",
    "href": "Hiplot/043-diverging-scale.html",
    "title": "Diverging Scale",
    "section": "",
    "text": "The diverging scale is a graph that maps a continuous, quantitative input to a continuous fixed interpolator.",
    "crumbs": [
      "HIPLOT",
      "Diverging Scale"
    ]
  },
  {
    "objectID": "Hiplot/043-diverging-scale.html#setup",
    "href": "Hiplot/043-diverging-scale.html#setup",
    "title": "Diverging Scale",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggcharts\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggcharts\", quietly = TRUE)) {\n  install.packages(\"ggcharts\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggcharts)",
    "crumbs": [
      "HIPLOT",
      "Diverging Scale"
    ]
  },
  {
    "objectID": "Hiplot/043-diverging-scale.html#data-preparation",
    "href": "Hiplot/043-diverging-scale.html#data-preparation",
    "title": "Diverging Scale",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe first column is a list of model names, and the remaining columns enter the relevant indicators and corresponding values.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/diverging-scale/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# convert data structure\ndata &lt;- dplyr::transmute(.data = data, x = model, y = scale(hp))\n\n# View data\nhead(data)\n\n                  x          y\n1         Mazda RX4 -0.6130929\n2     Mazda RX4 Wag -0.6130929\n3        Datsun 710 -0.9123057\n4    Hornet 4 Drive -0.6130929\n5 Hornet Sportabout  0.5309561\n6           Valiant -0.7010967",
    "crumbs": [
      "HIPLOT",
      "Diverging Scale"
    ]
  },
  {
    "objectID": "Hiplot/043-diverging-scale.html#visualization",
    "href": "Hiplot/043-diverging-scale.html#visualization",
    "title": "Diverging Scale",
    "section": "Visualization",
    "text": "Visualization\n\n1.Barplot\n\n# Diverging Scale Barplot\nfill_colors &lt;- c(\"#C20B01\", \"#196ABD\")\nfill_colors &lt;- fill_colors[c(any(data[, \"y\"] &gt; 0), any(data[, \"y\"] &lt; 0))]\np &lt;- diverging_bar_chart(data = data, x = x, y = y, bar_colors = fill_colors,\n                         text_color = '#000000') + \n  theme(axis.text.x = element_text(color = \"#000000\"),\n        axis.title.x = element_text(colour = \"#000000\"),\n        axis.title.y = element_text(colour = \"#000000\"),\n        plot.background = element_blank()) + \n  labs(x = \"model\", y = \"scale(hp)\", title = \"\")\n\np\n\n\n\n\n\n\n\nFigure 1: Diverging Scale Barplot\n\n\n\n\n\nHp data is shown on the horizontal axis, model names (classification) are shown on the vertical axis, models above average are shown in red, and models below average are shown in blue. Data is assigned on a scale of 2 by size.\n\n\n2.Lollipop Plot\n\n# Diverging Scale Lollipop Plot\nfill_colors &lt;- c(\"#C20B01\", \"#196ABD\")\nfill_colors &lt;- fill_colors[c(any(data[, \"y\"] &gt; 0), any(data[, \"y\"] &lt; 0))]\np &lt;- diverging_lollipop_chart(\n  data = data, x = x, y = y, lollipop_colors = fill_colors,\n  line_size = 0.3, point_size = 1.9, text_color = '#000000') + \n  theme(axis.text.x = element_text(color = \"#000000\"),\n        axis.title.x = element_text(colour = \"#000000\"),\n        axis.title.y = element_text(colour = \"#000000\"),\n        plot.background = element_blank()) + \n  labs(x = \"model\", y = \"scale(hp)\", title = \"\")\n\np\n\n\n\n\n\n\n\nFigure 2: Diverging Scale Lollipop Plot",
    "crumbs": [
      "HIPLOT",
      "Diverging Scale"
    ]
  },
  {
    "objectID": "Hiplot/147-pyramid-stack2.html",
    "href": "Hiplot/147-pyramid-stack2.html",
    "title": "Pyramid Stack2",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Pyramid Stack2 plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/pyramid-stack2?lang=en\nThe pyramid stack is a pyramid-like figure that distributes data on both sides of a central axis.",
    "crumbs": [
      "HIPLOT",
      "Pyramid Stack2"
    ]
  },
  {
    "objectID": "Hiplot/147-pyramid-stack2.html#setup",
    "href": "Hiplot/147-pyramid-stack2.html#setup",
    "title": "Pyramid Stack2",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; plotrix; ggplotify\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"plotrix\", quietly = TRUE)) {\n  install.packages(\"plotrix\")\n}\nif (!requireNamespace(\"ggplotify\", quietly = TRUE)) {\n  install.packages(\"ggplotify\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(plotrix)\nlibrary(ggplotify)",
    "crumbs": [
      "HIPLOT",
      "Pyramid Stack2"
    ]
  },
  {
    "objectID": "Hiplot/147-pyramid-stack2.html#data-preparation",
    "href": "Hiplot/147-pyramid-stack2.html#data-preparation",
    "title": "Pyramid Stack2",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/pyramid-stack2/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\nagegrps &lt;- unique(data[,1])\nsplit_var &lt;- unique(data[,2])\ndat_left &lt;- as.matrix(data[data[,2] == split_var[1],-c(1,2)])\ndat_right &lt;- as.matrix(data[data[,2] == split_var[2],-c(1,2)])\n\n# View data\nhead(data)\n\n  Month Year Class1 Class2 Class3 Class4\n1     1 2019      8    6.0      8    6.0\n2     2 2019      4    2.0      4    2.0\n3     3 2019      4    4.5      1    4.5\n4     4 2019      6    8.0      1    9.0\n5     5 2019      8    6.0      8    6.0\n6     6 2019      4    2.0      4    2.0",
    "crumbs": [
      "HIPLOT",
      "Pyramid Stack2"
    ]
  },
  {
    "objectID": "Hiplot/147-pyramid-stack2.html#visualization",
    "href": "Hiplot/147-pyramid-stack2.html#visualization",
    "title": "Pyramid Stack2",
    "section": "Visualization",
    "text": "Visualization\n\n# Pyramid Stack2\np &lt;- as.ggplot(function() {\n  cols &lt;- c(\"#E64B35FF\",\"#4DBBD5FF\",\"#00A087FF\",\"#3C5488FF\")\n  names(cols) &lt;- colnames(dat_left)\n  cols &lt;- cols[1:ncol(dat_left)]\n  pyramid.plot(dat_left, dat_right, labels = agegrps, unit = \"Value\",\n               lxcol = cols, rxcol = cols,\n               laxlab=as.numeric(c(0,10,20,30)), raxlab=as.numeric(c(0,10,20,30)),\n               top.labels=c(split_var[1], colnames(data)[1], split_var[2]),\n               gap=4, ppmar=c(4,2,4,7), do.first=\"plot_bg(\\\"#FFFFFF\\\")\")\n  mtext(\"Porridge temperature by age and sex of bear\", 3, 2, cex=1)\n  legend(\"right\", inset=c(-0.25,0), legend = colnames(dat_left), fill = cols)\n  })\n\n32 32 \n\np\n\n\n\n\n\n\n\nFigure 1: Pyramid Stack2",
    "crumbs": [
      "HIPLOT",
      "Pyramid Stack2"
    ]
  },
  {
    "objectID": "Hiplot/104-map-france.html",
    "href": "Hiplot/104-map-france.html",
    "title": "France Map",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot France Map plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/map-france?lang=en",
    "crumbs": [
      "HIPLOT",
      "France Map"
    ]
  },
  {
    "objectID": "Hiplot/104-map-france.html#setup",
    "href": "Hiplot/104-map-france.html#setup",
    "title": "France Map",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2; RColorBrewer\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"RColorBrewer\", quietly = TRUE)) {\n  install.packages(\"RColorBrewer\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(RColorBrewer)",
    "crumbs": [
      "HIPLOT",
      "France Map"
    ]
  },
  {
    "objectID": "Hiplot/104-map-france.html#data-preparation",
    "href": "Hiplot/104-map-france.html#data-preparation",
    "title": "France Map",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/map-france/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\ndt_map &lt;- readRDS(url(\"https://download.hiplot.cn/ui/basic/map-france/france.rds\"))\n\n# Convert data structure\ndt_map$Value &lt;- data$value[match(dt_map$ENG_NAME, data$name)]\n\n# View data\nhead(data)\n\n            name value\n1       Bas-Rhin   338\n2      Haut-Rhin   353\n3       Dordogne   168\n4        Gironde   158\n5         Landes   221\n6 Lot-et-Garonne   658",
    "crumbs": [
      "HIPLOT",
      "France Map"
    ]
  },
  {
    "objectID": "Hiplot/104-map-france.html#visualization",
    "href": "Hiplot/104-map-france.html#visualization",
    "title": "France Map",
    "section": "Visualization",
    "text": "Visualization\n\n# France Map\np &lt;- ggplot(dt_map) +\n  geom_polygon(aes(x = long, y = lat, group = group, fill = Value),\n               alpha = 0.9, size = 0.5) +\n  geom_path(aes(x = long, y = lat, group = group), color = \"black\", size = 0.2) +\n  coord_fixed() +\n  scale_fill_gradientn(\n    colours = colorRampPalette(rev(brewer.pal(11,\"RdYlBu\")))(500),\n    breaks = seq(min(data$value), max(data$value), \n                 round((max(data$value)-min(data$value))/7)),\n    name = \"Color Key\",\n    guide = guide_legend(\n      direction = \"vertical\", keyheight = unit(1, units = \"mm\"),\n      keywidth = unit(8, units = \"mm\"),\n      title.position = \"top\", title.hjust = 0.5, label.hjust = 0.5,\n      nrow = 1, byrow = T, reverse = F, label.position = \"bottom\")) +\n  theme(text = element_text(color = \"#3A3F4A\"),\n        axis.text = element_blank(),\n        axis.ticks = element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        legend.position = \"top\",\n        legend.text = element_text(size = 4 * 1.5, color = \"black\"),\n        legend.title = element_text(size = 5 * 1.5, color = \"black\"),\n        plot.title = element_text(\n          face = \"bold\", size = 5 * 1.5, hjust = 0.5, \n          margin = margin(t = 4, b = 5), color = \"black\"),\n        plot.background = element_rect(fill = \"#FFFFFF\", color = \"#FFFFFF\"),\n        panel.background = element_rect(fill = \"#FFFFFF\", color = NA),\n        legend.background = element_rect(fill = \"#FFFFFF\", color = NA),\n        plot.margin = unit(c(1.5, 1.5, 1.5, 1.5), \"cm\")) +\n  labs(x = NULL, y = NULL, title = \"France Map\")\n\np\n\n\n\n\n\n\n\nFigure 1: France Map",
    "crumbs": [
      "HIPLOT",
      "France Map"
    ]
  },
  {
    "objectID": "Hiplot/157-rose-chart.html",
    "href": "Hiplot/157-rose-chart.html",
    "title": "Rose Chart",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Rose Chart plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/rose-chart?lang=en\nThe rose chart is a column chart drawn in polar coordinates. The radius of the arc is used to indicate the size of the data.",
    "crumbs": [
      "HIPLOT",
      "Rose Chart"
    ]
  },
  {
    "objectID": "Hiplot/157-rose-chart.html#setup",
    "href": "Hiplot/157-rose-chart.html#setup",
    "title": "Rose Chart",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)",
    "crumbs": [
      "HIPLOT",
      "Rose Chart"
    ]
  },
  {
    "objectID": "Hiplot/157-rose-chart.html#data-preparation",
    "href": "Hiplot/157-rose-chart.html#data-preparation",
    "title": "Rose Chart",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data is divided into three columns, the first column is the sample name, the second column is the grouping, and the third column is the value corresponding to the sample.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/rose-chart/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\ndata[, 2] &lt;- factor(data[, 2], levels = unique(data[, 2]))\n\n# View data\nhead(data)\n\n    Sample       Group Freq\n1    Brain Upregulated  142\n2    Colon Upregulated  270\n3   Kidney Upregulated  108\n4 Pancreas Upregulated  194\n5     Skin Upregulated  189\n6   Testis Upregulated   97",
    "crumbs": [
      "HIPLOT",
      "Rose Chart"
    ]
  },
  {
    "objectID": "Hiplot/157-rose-chart.html#visualization",
    "href": "Hiplot/157-rose-chart.html#visualization",
    "title": "Rose Chart",
    "section": "Visualization",
    "text": "Visualization\n\n# Rose Chart\np &lt;- ggplot(data, aes(x = Sample, y = Freq)) +\n  geom_col(aes(fill = Group), width = 0.9, size = 0, alpha = 0.8) +\n  coord_polar() +\n  ggtitle(\"Rose Chart\") +\n  scale_fill_manual(values = c(\"#E64B35FF\", \"#4DBBD5FF\")) +\n  theme_bw() +\n  theme(aspect.ratio = 1,\n        axis.text.x = element_text(colour = \"black\"),\n        axis.text.y = element_text(colour = \"black\"),\n        legend.title = element_blank(),\n        legend.position = \"bottom\",\n        plot.title = element_text(hjust = 0.5))\n\np\n\n\n\n\n\n\n\nFigure 1: Rose Chart\n\n\n\n\n\nThe case data is the distribution of up- and down-regulated genes in different organs after using scRNA-Seq to sequence different human organs.",
    "crumbs": [
      "HIPLOT",
      "Rose Chart"
    ]
  },
  {
    "objectID": "Hiplot/005-barplot-errorbar.html",
    "href": "Hiplot/005-barplot-errorbar.html",
    "title": "Barplot (errorbar)",
    "section": "",
    "text": "Bar plot with error-lines and groups.",
    "crumbs": [
      "HIPLOT",
      "Barplot (errorbar)"
    ]
  },
  {
    "objectID": "Hiplot/005-barplot-errorbar.html#环境配置",
    "href": "Hiplot/005-barplot-errorbar.html#环境配置",
    "title": "Barplot (errorbar)",
    "section": "环境配置",
    "text": "环境配置\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2; Rmisc; ggpubr\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"Rmisc\", quietly = TRUE)) {\n  install.packages(\"Rmisc\")\n}\nif (!requireNamespace(\"ggpubr\", quietly = TRUE)) {\n  install.packages(\"ggpubr\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(Rmisc)\nlibrary(ggpubr)",
    "crumbs": [
      "HIPLOT",
      "Barplot (errorbar)"
    ]
  },
  {
    "objectID": "Hiplot/005-barplot-errorbar.html#data-preparation",
    "href": "Hiplot/005-barplot-errorbar.html#data-preparation",
    "title": "Barplot (errorbar)",
    "section": "Data Preparation",
    "text": "Data Preparation\nData frame:\n&lt;1st-col&gt;: (Numeric) values as Y-axis.\n&lt;2nd-col&gt;: (Numeric or String) classes as X-axis.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/barplot-errorbar/data.json\")$exampleData[[1]]$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# convert data structure\ndata[, 2] &lt;- factor(data[, 2], levels = unique(data[, 2]))\ndata_sd &lt;- summarySE(data, measurevar = colnames(data)[1], groupvars = colnames(data)[2])\n\n# View data\nhead(data_sd)\n\n    class N score       sd       se       ci\n1    math 4 63.50 3.109126 1.554563 4.947314\n2 chinese 4 73.75 2.986079 1.493039 4.751518\n3 english 4 83.25 2.362908 1.181454 3.759914",
    "crumbs": [
      "HIPLOT",
      "Barplot (errorbar)"
    ]
  },
  {
    "objectID": "Hiplot/005-barplot-errorbar.html#visualization",
    "href": "Hiplot/005-barplot-errorbar.html#visualization",
    "title": "Barplot (errorbar)",
    "section": "Visualization",
    "text": "Visualization\n\n# Barplot (errorbar)\np &lt;- ggplot(data_sd, aes(x = data_sd[, 1], y = data_sd[, 3], fill = data_sd[, 1])) +\n  geom_bar(stat = \"identity\", color = \"black\", \n           position = position_dodge(), alpha = 1) +\n  geom_errorbar(aes(ymin = data_sd[, 3] - sd, ymax = data_sd[, 3] + sd),\n                width = 0.2,\n                position = position_dodge(0.9)) +\n  labs(title = \"Barplot (errorbar)\", x = colnames(data_sd)[1], \n       y = colnames(data_sd)[3], fill = colnames(data_sd)[1]) +\n  geom_jitter(data = data, aes(data[, 2], data[, 1], fill = data[, 2]), size = 2, fill = \"black\", pch = 19, width = 0.2) +\n  stat_compare_means(data = data, aes(data[, 2], data[, 1], fill = data[, 2]),\n                     label = \"p.format\", ref.group = \".all.\", vjust = 1, \n                     method = \"t.test\") +\n  scale_fill_manual(values = c(\"#E64B35FF\",\"#4DBBD5FF\",\"#00A087FF\",\"#3C5488FF\")) +\n  theme_bw() +\n  ylim(0,100) +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n\np\n\n\n\n\n\n\n\nFigure 1: Barplot (errorbar)",
    "crumbs": [
      "HIPLOT",
      "Barplot (errorbar)"
    ]
  },
  {
    "objectID": "Hiplot/060-gene-density.html",
    "href": "Hiplot/060-gene-density.html",
    "title": "Gene Density",
    "section": "",
    "text": "Chrosome data visualization.",
    "crumbs": [
      "HIPLOT",
      "Gene Density"
    ]
  },
  {
    "objectID": "Hiplot/060-gene-density.html#setup",
    "href": "Hiplot/060-gene-density.html#setup",
    "title": "Gene Density",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; circlize; ComplexHeatmap; gtrellis; tidyverse; ggplotify; RColorBrewer\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"circlize\", quietly = TRUE)) {\n  install.packages(\"circlize\")\n}\nif (!requireNamespace(\"ComplexHeatmap\", quietly = TRUE)) {\n  install_github(\"jokergoo/ComplexHeatmap\")\n}\nif (!requireNamespace(\"gtrellis\", quietly = TRUE)) {\n  install_github(\"jokergoo/gtrellis\")\n}\nif (!requireNamespace(\"tidyverse\", quietly = TRUE)) {\n  install.packages(\"tidyverse\")\n}\nif (!requireNamespace(\"ggplotify\", quietly = TRUE)) {\n  install.packages(\"ggplotify\")\n}\nif (!requireNamespace(\"RColorBrewer\", quietly = TRUE)) {\n  install.packages(\"RColorBrewer\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(circlize)\nlibrary(ComplexHeatmap)\nlibrary(gtrellis)\nlibrary(tidyverse)\nlibrary(ggplotify)\nlibrary(RColorBrewer)",
    "crumbs": [
      "HIPLOT",
      "Gene Density"
    ]
  },
  {
    "objectID": "Hiplot/060-gene-density.html#data-preparation",
    "href": "Hiplot/060-gene-density.html#data-preparation",
    "title": "Gene Density",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata1 &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/gene-density/data.json\")$exampleData$textarea[[1]])\ndata1 &lt;- as.data.frame(data1)\ndata2 &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/gene-density/data.json\")$exampleData$textarea[[2]])\ndata2 &lt;- as.data.frame(data2)\n\n# Convert data structure\nchrNum &lt;- str_replace(unique(data1$chr), \"Chr|chr\", \"\")\ndata1$chr &lt;- factor(data1$chr, levels = paste0(\"Chr\", chrNum))\ndata2$chr &lt;- factor(data2$chr, levels = paste0(\"Chr\", chrNum))\n# Set window to calculate gene density\nwindows &lt;- 100 * 1000 # default:100kb window size\ngene_density &lt;- genomicDensity(data2, window.size = windows)\ngene_density$chr &lt;- factor(gene_density$chr,\n  levels =  paste0(\"Chr\", chrNum)\n)\n\n# View data\nhead(data1)\n\n    chr start      end\n1  Chr5     0 29958434\n2  Chr8     0 28443022\n3  Chr9     0 23012720\n4 Chr10     0 23207287\n5 Chr12     0 27531856\n\nhead(data2)\n\n    chr start   end\n1 Chr10 38648 40060\n2 Chr10 45941 58338\n3 Chr10 67119 72971\n4 Chr10 75410 76305\n5 Chr10 80964 82250\n6 Chr10 94798 97746",
    "crumbs": [
      "HIPLOT",
      "Gene Density"
    ]
  },
  {
    "objectID": "Hiplot/060-gene-density.html#visualization",
    "href": "Hiplot/060-gene-density.html#visualization",
    "title": "Gene Density",
    "section": "Visualization",
    "text": "Visualization\n\n# Set the palettes\npalettes &lt;- c(\"#B2182B\",\"#EF8A62\",\"#FDDBC7\",\"#D1E5F0\",\"#67A9CF\",\"#2166AC\")\ncol_fun &lt;- colorRamp2(\n  seq(0, max(gene_density[[4]]), length = 6), rev(palettes)\n  )\ncm &lt;- ColorMapping(col_fun = col_fun)\n# Set the Legend\nlgd &lt;- color_mapping_legend(\n  cm, plot = F, title = \"density\", color_bar = \"continuous\"\n  )\n# Plot\np &lt;- as.ggplot(function() {\n  gtrellis_layout(\n    data1, n_track = 2, ncol = 1, byrow = FALSE,\n    track_axis = FALSE, add_name_track = FALSE,\n    xpadding = c(0.1, 0), gap = unit(1, \"mm\"),\n    track_height = unit.c(unit(1, \"null\"), unit(4, \"mm\")),\n    track_ylim = c(0, max(gene_density[[4]]), 0, 1),\n    border = FALSE, asist_ticks = FALSE,\n    legend = lgd\n    )\n  # Add gene area map track\n  add_lines_track(gene_density, gene_density[[4]],\n                  area = TRUE, gp = gpar(fill = \"pink\"))\n  # Add gene density heatmap track\n  add_heatmap_track(gene_density, gene_density[[4]], fill = col_fun)\n  add_track(track = 2, clip = FALSE, panel_fun = function(gr) {\n    chr &lt;- get_cell_meta_data(\"name\")\n    if (chr == paste(\"Chr\", length(chrNum), sep = \"\")) {\n      grid.lines(get_cell_meta_data(\"xlim\"), unit(c(0, 0), \"npc\"),\n                 default.units = \"native\")\n      }\n    grid.text(chr, x = 0.01, y = 0.38, just = c(\"left\", \"bottom\"))\n    })\n  circos.clear()\n  })\n\np\n\n\n\n\n\n\n\nFigure 1: Gene Density",
    "crumbs": [
      "HIPLOT",
      "Gene Density"
    ]
  },
  {
    "objectID": "Hiplot/115-map-usa.html",
    "href": "Hiplot/115-map-usa.html",
    "title": "USA Map (States)",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot USA Map (States) plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/map-usa?lang=en",
    "crumbs": [
      "HIPLOT",
      "USA Map (States)"
    ]
  },
  {
    "objectID": "Hiplot/115-map-usa.html#setup",
    "href": "Hiplot/115-map-usa.html#setup",
    "title": "USA Map (States)",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2; RColorBrewer\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"RColorBrewer\", quietly = TRUE)) {\n  install.packages(\"RColorBrewer\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(RColorBrewer)",
    "crumbs": [
      "HIPLOT",
      "USA Map (States)"
    ]
  },
  {
    "objectID": "Hiplot/115-map-usa.html#data-preparation",
    "href": "Hiplot/115-map-usa.html#data-preparation",
    "title": "USA Map (States)",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/map-usa/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\ndt_map &lt;- readRDS(url(\"https://download.hiplot.cn/ui/basic/map-usa/usa.rds\"))\n\n# Convert data structure\ndt_map$Value &lt;- data$value[match(dt_map$state, data$name)]\n\n# View data\nhead(data)\n\n          name value\n1   Washington   438\n2      Montana   103\n3        Maine   614\n4 North Dakota   256\n5 South Dakota   639\n6      Wyoming   599",
    "crumbs": [
      "HIPLOT",
      "USA Map (States)"
    ]
  },
  {
    "objectID": "Hiplot/115-map-usa.html#visualization",
    "href": "Hiplot/115-map-usa.html#visualization",
    "title": "USA Map (States)",
    "section": "Visualization",
    "text": "Visualization\n\n# USA Map (States)\np &lt;- ggplot(dt_map) +\n  geom_polygon(aes(x = long, y = lat, group = group, fill = Value),\n               alpha = 0.9, size = 0.5) +\n  geom_path(aes(x = long, y = lat, group = group), color = \"black\", size = 0.2) +\n  coord_fixed() +\n  scale_fill_gradientn(\n    colours = colorRampPalette(rev(brewer.pal(11,\"RdYlBu\")))(500),\n    breaks = seq(min(data$value), max(data$value), \n                 round((max(data$value)-min(data$value))/7)),\n    name = \"Color Key\",\n    guide = guide_legend(\n      direction = \"vertical\", keyheight = unit(1, units = \"mm\"),\n      keywidth = unit(8, units = \"mm\"),\n      title.position = \"top\", title.hjust = 0.5, label.hjust = 0.5,\n      nrow = 1, byrow = T, reverse = F, label.position = \"bottom\")) +\n  theme(text = element_text(color = \"#3A3F4A\"),\n        axis.text = element_blank(),\n        axis.ticks = element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        legend.position = \"top\",\n        legend.text = element_text(size = 4 * 1.5, color = \"black\"),\n        legend.title = element_text(size = 5 * 1.5, color = \"black\"),\n        plot.title = element_text(\n          face = \"bold\", size = 5 * 1.5, hjust = 0.5, \n          margin = margin(t = 4, b = 5), color = \"black\"),\n        plot.background = element_rect(fill = \"#FFFFFF\", color = \"#FFFFFF\"),\n        panel.background = element_rect(fill = \"#FFFFFF\", color = NA),\n        legend.background = element_rect(fill = \"#FFFFFF\", color = NA),\n        plot.margin = unit(c(1.5, 1.5, 1.5, 1.5), \"cm\")) +\n  labs(x = NULL, y = NULL, title = \"USA Map\")\n\np\n\n\n\n\n\n\n\nFigure 1: USA Map (States)",
    "crumbs": [
      "HIPLOT",
      "USA Map (States)"
    ]
  },
  {
    "objectID": "Hiplot/152-rcs-lrm.html",
    "href": "Hiplot/152-rcs-lrm.html",
    "title": "RCS-LRM",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot RCS-LRM plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/rcs-lrm?lang=en\nNonlinear regression analysis.",
    "crumbs": [
      "HIPLOT",
      "RCS-LRM"
    ]
  },
  {
    "objectID": "Hiplot/152-rcs-lrm.html#setup",
    "href": "Hiplot/152-rcs-lrm.html#setup",
    "title": "RCS-LRM",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; rms; survival; ggplot2; stringr\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"rms\", quietly = TRUE)) {\n  install.packages(\"rms\")\n}\nif (!requireNamespace(\"survival\", quietly = TRUE)) {\n  install.packages(\"survival\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"stringr\", quietly = TRUE)) {\n  install.packages(\"stringr\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(rms)\nlibrary(survival)\nlibrary(ggplot2)\nlibrary(stringr)",
    "crumbs": [
      "HIPLOT",
      "RCS-LRM"
    ]
  },
  {
    "objectID": "Hiplot/152-rcs-lrm.html#data-preparation",
    "href": "Hiplot/152-rcs-lrm.html#data-preparation",
    "title": "RCS-LRM",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/rcs-lrm/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\ndata &lt;- na.omit(data)\nex &lt;- set::not(colnames(data), c(\"main\", \"group\"))\nex &lt;- str_c(ex, collapse = \"+\")\ndd &lt;&lt;- datadist(data)\noptions(datadist = \"dd\")\nfor (i in 3:5) {\n  fit &lt;- lrm(as.formula(paste0(\"group~rcs(main,nk=i,inclx = T)+\", ex, collapse = \"+\")), data = data, x = TRUE)\n  tmp &lt;- AIC(fit)\n  if (i == 3) {\n    AIC &lt;- tmp\n    nk &lt;&lt;- 3\n  }\n  if (tmp &lt; AIC) {\n    AIC &lt;- tmp\n    nk &lt;&lt;- i\n  }\n}\nfit &lt;- lrm(as.formula(paste0(\"group~rcs(main,nk=nk,inclx = T)+\", ex, collapse = \"+\")), data = data, x = TRUE)\ndd$limits$main[2] &lt;- median(data$main)\nfit &lt;- update(fit)\norr &lt;- Predict(fit, main, fun = exp, ref.zero = TRUE)\n\n# View data\nhead(data)\n\n  main   X2 X3 group\n1  100 0.90  0     1\n2   90 0.65  1     1\n3  400 1.36  0     1\n4  200 0.83  0     1\n5  300 1.38  0     1\n6  200 0.69  0     1",
    "crumbs": [
      "HIPLOT",
      "RCS-LRM"
    ]
  },
  {
    "objectID": "Hiplot/152-rcs-lrm.html#visualization",
    "href": "Hiplot/152-rcs-lrm.html#visualization",
    "title": "RCS-LRM",
    "section": "Visualization",
    "text": "Visualization\n\n# RCS-LRM\np &lt;- ggplot() +\n  geom_line(data = orr, aes(main, yhat), linetype = \"solid\", size = 1, alpha = 1,\n            colour = \"#FF0000\") +\n  geom_ribbon(data = orr, aes(main, ymin = lower, ymax = upper), alpha = 0.6, \n              fill = \"#FFC0CB\") +\n  geom_hline(yintercept = 1, linetype = 2, size = 0.5) +\n  geom_vline(xintercept = dd$limits$main[2], linetype = 2, size = 0.5) +\n  labs(x = \"main\", y = \"Odds Ratio(95%CI)\") +\n  theme_bw() +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n \np\n\n\n\n\n\n\n\nFigure 1: RCS-LRM",
    "crumbs": [
      "HIPLOT",
      "RCS-LRM"
    ]
  },
  {
    "objectID": "Hiplot/061-gene-rank.html",
    "href": "Hiplot/061-gene-rank.html",
    "title": "Gene Ranking Dotplot",
    "section": "",
    "text": "Gene expression ranking visualization.",
    "crumbs": [
      "HIPLOT",
      "Gene Ranking Dotplot"
    ]
  },
  {
    "objectID": "Hiplot/061-gene-rank.html#setup",
    "href": "Hiplot/061-gene-rank.html#setup",
    "title": "Gene Ranking Dotplot",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggrepel; ggplot2; RColorBrewer\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggrepel\", quietly = TRUE)) {\n  install.packages(\"ggrepel\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"RColorBrewer\", quietly = TRUE)) {\n  install.packages(\"RColorBrewer\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggrepel)\nlibrary(ggplot2)\nlibrary(RColorBrewer)",
    "crumbs": [
      "HIPLOT",
      "Gene Ranking Dotplot"
    ]
  },
  {
    "objectID": "Hiplot/061-gene-rank.html#data-preparation",
    "href": "Hiplot/061-gene-rank.html#data-preparation",
    "title": "Gene Ranking Dotplot",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/gene-rank/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\n## ordered by log2FoldChange and pvalue\ndata &lt;- data[order(-data$log2FC, data$pvalue), ]\n## add the rank column\ndata$rank &lt;- 1:nrow(data)\n## get the top n up and down gene for labeling\ntop_n &lt;- 5\ntop_n_up &lt;- rownames(head(data, top_n))\ntop_n_down &lt;- rownames(tail(data, top_n))\ngenes_to_label &lt;- c(top_n_up, top_n_down)\ndata2 &lt;- data[genes_to_label, ]\n\n# View data\nhead(data)\n\n        gene   log2FC       pvalue rank\n514 LOC91370 3.889820 8.478310e-03    1\n293   LRRC25 3.492413 5.000000e-05    2\n470   BEGAIN 3.312996 3.347634e-03    3\n159   RDM1P5 3.125070 1.538852e-02    4\n194    CLDN1 3.096516 2.622163e-02    5\n626    KCNS1 2.949729 2.770000e-09    6",
    "crumbs": [
      "HIPLOT",
      "Gene Ranking Dotplot"
    ]
  },
  {
    "objectID": "Hiplot/061-gene-rank.html#visualization",
    "href": "Hiplot/061-gene-rank.html#visualization",
    "title": "Gene Ranking Dotplot",
    "section": "Visualization",
    "text": "Visualization\n\n# Gene Ranking Dotplot\np &lt;- \n  ggplot(data, aes(rank, log2FC, color = pvalue, size = abs(log2FC))) + \n  geom_point() + \n  scale_color_gradientn(colours = colorRampPalette(brewer.pal(11,'RdYlBu'))(100)) +\n  geom_hline(yintercept = c(-1, 1), linetype = 2, size = 0.3) +\n  geom_hline(yintercept = 0, linetype = 1, size = 0.5) +\n  geom_vline(xintercept = median(data$rank), linetype = 2, size = 0.3) + \n  geom_text_repel(data = data2, aes(rank, log2FC, label = gene),\n                  size = 3, color = \"red\") +\n  xlab(\"\") + ylab(\"\") + \n  ylim(c(-max(abs(data$log2FC)), max(abs(data$log2FC)))) +\n  labs(color = \"Pvalue\", size = \"Log2FoldChange\") +\n  theme_bw(base_size = 12) +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n\np\n\n\n\n\n\n\n\nFigure 1: Gene Ranking Dotplot",
    "crumbs": [
      "HIPLOT",
      "Gene Ranking Dotplot"
    ]
  },
  {
    "objectID": "Hiplot/120-meta-cont.html",
    "href": "Hiplot/120-meta-cont.html",
    "title": "Meta-analysis of Continuous Data",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Meta-analysis of Continuous Data plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/meta-cont?lang=en",
    "crumbs": [
      "HIPLOT",
      "Meta-analysis of Continuous Data"
    ]
  },
  {
    "objectID": "Hiplot/120-meta-cont.html#setup",
    "href": "Hiplot/120-meta-cont.html#setup",
    "title": "Meta-analysis of Continuous Data",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; meta; ggplotify\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"meta\", quietly = TRUE)) {\n  install.packages(\"meta\")\n}\nif (!requireNamespace(\"ggplotify\", quietly = TRUE)) {\n  install.packages(\"ggplotify\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(meta)\nlibrary(ggplotify)",
    "crumbs": [
      "HIPLOT",
      "Meta-analysis of Continuous Data"
    ]
  },
  {
    "objectID": "Hiplot/120-meta-cont.html#data-preparation",
    "href": "Hiplot/120-meta-cont.html#data-preparation",
    "title": "Meta-analysis of Continuous Data",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/meta-cont/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\nm1 &lt;- metacont(n.e, mean.e, sd.e, n.c, mean.c, sd.c, studlab = Study, data = data,\n              sm = \"SMD\")\n\n# View data\nhead(data)\n\n  Study n.e mean.e sd.e n.c mean.c  sd.c\n1     A  13    5.0 4.70  13   6.50  3.80\n2     B  30    4.9 1.71  50   6.10  2.30\n3     C  35   22.5 3.44  35  24.90 10.65\n4     D  20   12.5 1.47  20  12.30  1.66\n5     E   8    6.5 0.76   8   7.38  1.41",
    "crumbs": [
      "HIPLOT",
      "Meta-analysis of Continuous Data"
    ]
  },
  {
    "objectID": "Hiplot/120-meta-cont.html#visualization",
    "href": "Hiplot/120-meta-cont.html#visualization",
    "title": "Meta-analysis of Continuous Data",
    "section": "Visualization",
    "text": "Visualization\n\n# Meta-analysis of Continuous Data\np &lt;- as.ggplot(function(){\n  meta::forest(m1, layout = \"meta\")\n  })\n\np\n\n\n\n\n\n\n\nFigure 1: Meta-analysis of Continuous Data",
    "crumbs": [
      "HIPLOT",
      "Meta-analysis of Continuous Data"
    ]
  },
  {
    "objectID": "Hiplot/173-treemap.html",
    "href": "Hiplot/173-treemap.html",
    "title": "Treemap",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Treemap plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/treemap?lang=en\nTree map is a kind of tree structure diagram that graphical form to represent hierarchy structure.",
    "crumbs": [
      "HIPLOT",
      "Treemap"
    ]
  },
  {
    "objectID": "Hiplot/173-treemap.html#setup",
    "href": "Hiplot/173-treemap.html#setup",
    "title": "Treemap",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; treemap\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"treemap\", quietly = TRUE)) {\n  install.packages(\"treemap\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(treemap)",
    "crumbs": [
      "HIPLOT",
      "Treemap"
    ]
  },
  {
    "objectID": "Hiplot/173-treemap.html#data-preparation",
    "href": "Hiplot/173-treemap.html#data-preparation",
    "title": "Treemap",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data are different groups and their data.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/treemap/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# View data\nhead(data)\n\n   group value\n1 Group1    13\n2 Group2    34\n3 Group3    21\n4 Group4    43",
    "crumbs": [
      "HIPLOT",
      "Treemap"
    ]
  },
  {
    "objectID": "Hiplot/173-treemap.html#visualization",
    "href": "Hiplot/173-treemap.html#visualization",
    "title": "Treemap",
    "section": "Visualization",
    "text": "Visualization\n\n# Treemap\np &lt;- treemap(data, index = colnames(data)[1], vSize = colnames(data)[2],\n             vColor = colnames(data)[1], type = \"index\", title = \"\", \n             algorithm = \"pivotSize\", sortID = colnames(data)[1], border.lwds = 1,\n             fontcolor.labels = \"#000000\", inflate.labels = F, overlap.labels = 0.5,\n             fontfamily.title = \"Arial\", fontfamily.legend = \"Arial\",\n             fontfamily.labels = \"Arial\", \n             palette = c(\"#E64B35FF\",\"#4DBBD5FF\",\"#00A087FF\",\"#3C5488FF\",\n                         \"#F39B7FFF\"), \n             aspRatio = 6 / 6)\n\np\n\n$tm\n   group vSize vColor stdErr vColorValue level        x0        y0         w\n1 Group1    13      1     13          NA     1 0.0000000 0.8088235 0.6126126\n2 Group2    34      1     34          NA     1 0.0000000 0.3088235 0.6126126\n3 Group3    21      1     21          NA     1 0.0000000 0.0000000 0.6126126\n4 Group4    43      1     43          NA     1 0.6126126 0.0000000 0.3873874\n          h   color\n1 0.1911765 #E64B35\n2 0.5000000 #4DBBD5\n3 0.3088235 #00A087\n4 1.0000000 #3C5488\n\n$type\n[1] \"index\"\n\n$vSize\n[1] \"value\"\n\n$vColor\n[1] NA\n\n$stdErr\n[1] \"value\"\n\n$algorithm\n[1] \"pivotSize\"\n\n$vpCoorX\n[1] 0.2664042 0.7335958\n\n$vpCoorY\n[1] 0.0328084 0.9671916\n\n$aspRatio\n[1] 1\n\n$range\n[1] NA\n\n$mapping\n[1] NA NA NA\n\n$draw\n[1] TRUE\n\n\n\n\n\n\n\n\nFigure 1: Treemap\n\n\n\n\n\nDifferent colors represent different groups and different areas represent data and proportion.",
    "crumbs": [
      "HIPLOT",
      "Treemap"
    ]
  },
  {
    "objectID": "Hiplot/040-density.html",
    "href": "Hiplot/040-density.html",
    "title": "Density",
    "section": "",
    "text": "The kernel density map is a graph used to observe the distribution of continuous variables.",
    "crumbs": [
      "HIPLOT",
      "Density"
    ]
  },
  {
    "objectID": "Hiplot/040-density.html#setup",
    "href": "Hiplot/040-density.html#setup",
    "title": "Density",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2; ggthemes\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"ggthemes\", quietly = TRUE)) {\n  install.packages(\"ggthemes\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(ggthemes)",
    "crumbs": [
      "HIPLOT",
      "Density"
    ]
  },
  {
    "objectID": "Hiplot/040-density.html#data-preparation",
    "href": "Hiplot/040-density.html#data-preparation",
    "title": "Density",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/density/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# convert data structure\ndata[,2] &lt;- factor(data[,2], levels = unique(data[,2]))\n\n# View data\nhead(data)\n\n  Value Group2\n1   4.2 treat1\n2  11.5 treat1\n3   7.3 treat1\n4   5.8 treat1\n5   6.4 treat1\n6  10.0 treat1",
    "crumbs": [
      "HIPLOT",
      "Density"
    ]
  },
  {
    "objectID": "Hiplot/040-density.html#visualization",
    "href": "Hiplot/040-density.html#visualization",
    "title": "Density",
    "section": "Visualization",
    "text": "Visualization\n\n# Density\ndata[\"group_add_by_code\"] &lt;- \"g1\"\n\np &lt;- ggplot(data, aes_(as.name(colnames(data[1])))) +\n  geom_density(col = \"white\", alpha = 0.85,\n               aes_(fill = as.name(colnames(data[2])))) +\n  ggtitle(\"\") +\n  scale_fill_manual(values = c(\"#e04d39\",\"#5bbad6\")) +\n  theme_stata() +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n\np\n\n\n\n\n\n\n\nFigure 1: Density",
    "crumbs": [
      "HIPLOT",
      "Density"
    ]
  },
  {
    "objectID": "Hiplot/073-ggscatterstats.html",
    "href": "Hiplot/073-ggscatterstats.html",
    "title": "Scatterstats",
    "section": "",
    "text": "System Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggpubr; ggthemes\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggstatsplot\", quietly = TRUE)) {\n  install.packages(\"ggstatsplot\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggstatsplot)",
    "crumbs": [
      "HIPLOT",
      "Scatterstats"
    ]
  },
  {
    "objectID": "Hiplot/073-ggscatterstats.html#setup",
    "href": "Hiplot/073-ggscatterstats.html#setup",
    "title": "Scatterstats",
    "section": "",
    "text": "System Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggpubr; ggthemes\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggstatsplot\", quietly = TRUE)) {\n  install.packages(\"ggstatsplot\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggstatsplot)",
    "crumbs": [
      "HIPLOT",
      "Scatterstats"
    ]
  },
  {
    "objectID": "Hiplot/073-ggscatterstats.html#data-preparation",
    "href": "Hiplot/073-ggscatterstats.html#data-preparation",
    "title": "Scatterstats",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/ggscatterstats/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# View data\nhead(data)\n\n                                                                 title year\n1                       Lord of the Rings: The Return of the King, The 2003\n2                   Lord of the Rings: The Fellowship of the Ring, The 2001\n3                               Lord of the Rings: The Two Towers, The 2002\n4                                                            Star Wars 1977\n5                       Star Wars: Episode V - The Empire Strikes Back 1980\n6 Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb 1964\n  length budget rating  votes  mpaa  genre\n1    251   94.0    9.0 103631 PG-13 Action\n2    208   93.0    8.8 157608 PG-13 Action\n3    223   94.0    8.8 114797 PG-13 Action\n4    125   11.0    8.8 134640    PG Action\n5    129   18.0    8.8 103706    PG Action\n6     93    1.8    8.7  63471    PG Comedy",
    "crumbs": [
      "HIPLOT",
      "Scatterstats"
    ]
  },
  {
    "objectID": "Hiplot/073-ggscatterstats.html#visualization",
    "href": "Hiplot/073-ggscatterstats.html#visualization",
    "title": "Scatterstats",
    "section": "Visualization",
    "text": "Visualization\n\n# Scatterstats\np &lt;- ggscatterstats(\n  data = data, x = rating, y = budget\n)\n\np\n\n\n\n\n\n\n\nFigure 1: Scatterstats",
    "crumbs": [
      "HIPLOT",
      "Scatterstats"
    ]
  },
  {
    "objectID": "Hiplot/119-meta-bin.html",
    "href": "Hiplot/119-meta-bin.html",
    "title": "Meta-analysis of Binary Data",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Meta-analysis of Binary Data plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/meta-bin?lang=en",
    "crumbs": [
      "HIPLOT",
      "Meta-analysis of Binary Data"
    ]
  },
  {
    "objectID": "Hiplot/119-meta-bin.html#setup",
    "href": "Hiplot/119-meta-bin.html#setup",
    "title": "Meta-analysis of Binary Data",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; meta; ggplotify\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"meta\", quietly = TRUE)) {\n  install.packages(\"meta\")\n}\nif (!requireNamespace(\"ggplotify\", quietly = TRUE)) {\n  install.packages(\"ggplotify\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(meta)\nlibrary(ggplotify)",
    "crumbs": [
      "HIPLOT",
      "Meta-analysis of Binary Data"
    ]
  },
  {
    "objectID": "Hiplot/119-meta-bin.html#data-preparation",
    "href": "Hiplot/119-meta-bin.html#data-preparation",
    "title": "Meta-analysis of Binary Data",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/meta-bin/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\nm1 &lt;- metabin(ev.exp, n.exp, ev.cont, n.cont, studlab = Study, data = data)\n\n# View data\nhead(data)\n\n       Study ev.exp n.exp ev.cont n.cont\n1   Fletcher      1    12       4     11\n2      Dewar      4    21       7     21\n3 Lippschutz      6    43       7     41\n4 European_1     20    83      15     84\n5 European_2     69   373      94    357",
    "crumbs": [
      "HIPLOT",
      "Meta-analysis of Binary Data"
    ]
  },
  {
    "objectID": "Hiplot/119-meta-bin.html#visualization",
    "href": "Hiplot/119-meta-bin.html#visualization",
    "title": "Meta-analysis of Binary Data",
    "section": "Visualization",
    "text": "Visualization\n\n# Meta-analysis of Binary Data\np &lt;- as.ggplot(function(){\n  meta::forest(m1, layout = \"meta\")\n  })\n\np\n\n\n\n\n\n\n\nFigure 1: Meta-analysis of Binary Data",
    "crumbs": [
      "HIPLOT",
      "Meta-analysis of Binary Data"
    ]
  },
  {
    "objectID": "Hiplot/136-pcatools.html",
    "href": "Hiplot/136-pcatools.html",
    "title": "PCAtools",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot PCAtools plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/pcatools?lang=en\nPCAtools can reduce the dimensionality of data through principal component analysis, and view principal component related features at a two-dimensional level",
    "crumbs": [
      "HIPLOT",
      "PCAtools"
    ]
  },
  {
    "objectID": "Hiplot/136-pcatools.html#setup",
    "href": "Hiplot/136-pcatools.html#setup",
    "title": "PCAtools",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; PCAtools; ggplotify; cowplot\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"PCAtools\", quietly = TRUE)) {\n  install.packages('PCAtools', repos = c('https://bioc.r-universe.dev', 'https://cloud.r-project.org'))\n\n}\nif (!requireNamespace(\"ggplotify\", quietly = TRUE)) {\n  install.packages(\"ggplotify\")\n}\nif (!requireNamespace(\"cowplot\", quietly = TRUE)) {\n  install.packages(\"cowplot\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(PCAtools)\nlibrary(ggplotify)\nlibrary(cowplot)",
    "crumbs": [
      "HIPLOT",
      "PCAtools"
    ]
  },
  {
    "objectID": "Hiplot/136-pcatools.html#data-preparation",
    "href": "Hiplot/136-pcatools.html#data-preparation",
    "title": "PCAtools",
    "section": "Data Preparation",
    "text": "Data Preparation\n\nData table 1 (numerical matrix):\n\nEach column is a sample, and each row is a feature (such as gene, chip probe).\n\nData sheet 2 (sample information):\n\nThe first column is the sample, and the other columns are the phenotypic characteristics of the sample, which can be used to mark the color and shape of the point and perform correlation analysis with the principal component.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/pcatools/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\ndata2 &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/pcatools/data.json\")$exampleData$textarea[[2]])\ndata2 &lt;- as.data.frame(data2)\n\n# View data\nhead(data[,1:5])\n\n       Probes GSM65752 GSM65753 GSM65755 GSM65757\n1   220050_at 6.566843 5.902831 5.185271 5.474453\n2 213944_x_at 8.722271 9.088407 9.106401 8.900869\n3   215441_at 3.812778 3.852745 3.846690 3.842543\n4 214792_x_at 6.499815 6.731196 5.951202 6.578830\n5 217251_x_at 6.607354 6.555413 6.715821 6.628053\n6   207406_at 3.997302 3.964112 3.836560 3.833057\n\nhead(data2[,1:5])\n\n  Samplename    Study Age Distant.RFS  ER\n1   GSM65752 GSE47561  40           0 ER-\n2   GSM65753 GSE47561  46           0 ER+\n3   GSM65755 GSE47561  41           1 ER+\n4   GSM65757 GSE47561  34           0 ER+\n5   GSM65758 GSE47561  46           1 ER+\n6   GSM65760 GSE47561  57           1 ER+",
    "crumbs": [
      "HIPLOT",
      "PCAtools"
    ]
  },
  {
    "objectID": "Hiplot/136-pcatools.html#visualization",
    "href": "Hiplot/136-pcatools.html#visualization",
    "title": "PCAtools",
    "section": "Visualization",
    "text": "Visualization\n\n# PCAtools\n## Define the plot function\ncall_pcatools &lt;- function(datTable, sampleInfo,\n                          top_var,\n                          screeplotComponents, screeplotColBar,\n                          pairsplotComponents,\n                          biplotShapeBy, biplotColBy,\n                          plotloadingsComponents,\n                          plotloadingsLowCol,\n                          plotloadingsMidCol,\n                          plotloadingsHighCol,\n                          eigencorplotMetavars,\n                          eigencorplotComponents) {\n  row.names(datTable) &lt;- datTable[, 1]\n  datTable &lt;- datTable[, -1]\n  row.names(sampleInfo) &lt;- sampleInfo[, 1]\n  data3 &lt;&lt;- pca(datTable, metadata = sampleInfo, removeVar = (100 - top_var) / 100)\n\n  for (i in c(\"screeplotComponents\", \"pairsplotComponents\",\n              \"plotloadingsComponents\", \"eigencorplotComponents\")) {\n    if (ncol(data3$rotated) &lt; get(i)) {\n      assign(i, ncol(data3$rotated))\n    }\n  }\n\n  p1 &lt;- PCAtools::screeplot(\n    data3,\n    components = getComponents(data3, 1:screeplotComponents),\n    axisLabSize = 14, titleLabSize = 20,\n    colBar = screeplotColBar,\n    gridlines.major = FALSE, gridlines.minor = FALSE,\n    returnPlot = TRUE\n  )\n\n  params_pairsplot &lt;- list(\n    data3,\n    components = getComponents(data3, c(1:pairsplotComponents)),\n    triangle = TRUE, trianglelabSize = 12,\n    hline = 0, vline = 0,\n    pointSize = 0.8, gridlines.major = FALSE, gridlines.minor = FALSE,\n    title = \"\", plotaxes = FALSE,\n    margingaps = unit(c(0.01, 0.01, 0.01, 0.01), \"cm\"),\n    returnPlot = TRUE,\n    colkey = c(\"#00468BFF\",\"#ED0000FF\"),\n    legendPosition = \"none\"\n  )\n  params_biplot &lt;- list(data3,\n    showLoadings = TRUE,\n    lengthLoadingsArrowsFactor = 1.5,\n    sizeLoadingsNames = 4,\n    colLoadingsNames = \"red4\",\n    # other parameters\n    lab = NULL,\n    hline = 0, vline = c(-25, 0, 25),\n    vlineType = c(\"dotdash\", \"solid\", \"dashed\"),\n    gridlines.major = FALSE, gridlines.minor = FALSE,\n    pointSize = 5,\n    legendLabSize = 16, legendIconSize = 8.0,\n    drawConnectors = FALSE,\n    title = \"PCA bi-plot\",\n    subtitle = \"PC1 versus PC2\",\n    caption = \"27 PCs ≈ 80%\",\n    returnPlot = TRUE,\n    legendPosition = \"bottom\"\n  )\n  if (!is.null(biplotShapeBy) && biplotShapeBy != \"\") {\n    params_biplot$shape &lt;- biplotShapeBy\n    params_pairsplot$shape &lt;- biplotShapeBy\n    t &lt;- params_biplot[[1]]$metadata[,biplotShapeBy]\n    params_biplot[[1]]$metadata[,biplotShapeBy] &lt;- factor(t,\n      levels = t[!duplicated(t)]\n    )\n    params_pairsplot[[1]]$metadata[,biplotShapeBy] &lt;- factor(t,\n      levels = t[!duplicated(t)]\n    )\n  }\n  if (!is.null(biplotColBy) && biplotColBy != \"\") {\n    params_pairsplot$colby &lt;- biplotColBy\n    params_pairsplot$colkey &lt;- c(\"#00468BFF\",\"#ED0000FF\")\n    params_biplot$colby &lt;- biplotColBy\n    params_biplot$colkey &lt;- c(\"#00468BFF\",\"#ED0000FF\")\n    t1 &lt;- params_biplot[[1]]$metadata[,biplotColBy]\n    params_biplot[[1]]$metadata[,biplotColBy] &lt;- factor(t1,\n      levels = t1[!duplicated(t1)]\n    )\n    params_pairsplot[[1]]$metadata[,biplotColBy] &lt;- factor(t1,\n      levels = t1[!duplicated(t1)]\n    )\n  }\n\n  p2 &lt;- do.call(PCAtools::pairsplot, params_pairsplot)\n  p3 &lt;- do.call(PCAtools::biplot, params_biplot)\n\n  p4 &lt;- PCAtools::plotloadings(\n    data3,\n    rangeRetain = 0.01, labSize = 4,\n    components = getComponents(data3, c(1:plotloadingsComponents)),\n    title = \"Loadings plot\", axisLabSize = 12,\n    subtitle = \"PC1, PC2, PC3, PC4, PC5\",\n    caption = \"Top 1% variables\",\n    gridlines.major = FALSE, gridlines.minor = FALSE,\n    shape = 24, shapeSizeRange = c(4, 8),\n    col = c(plotloadingsLowCol, plotloadingsMidCol, plotloadingsHighCol),\n    legendPosition = \"none\",\n    drawConnectors = FALSE,\n    returnPlot = TRUE\n  )\n\n  if (length(eigencorplotMetavars) &gt; 0 && all(eigencorplotMetavars != \"\")) {\n    metavars &lt;- eigencorplotMetavars\n  } else {\n    metavars &lt;- colnames(sampleInfo)[2:ncol(sampleInfo)]\n  }\n  if (length(metavars) == 1 && metavars != colnames(sampleInfo)[1]) {\n    metavars &lt;- c(colnames(sampleInfo)[1], metavars)\n  } else if (length(metavars) == 1 && metavars == colnames(sampleInfo)[1]) {\n    stop('eigencorplotMetavars need &gt;= 2 feature')\n  }\n\n  p5 &lt;- PCAtools::eigencorplot(\n    data3,\n    components = getComponents(data3, 1:eigencorplotComponents),\n    metavars = metavars,\n    cexCorval = 1.0,\n    fontCorval = 2,\n    posLab = \"all\",\n    rotLabX = 45,\n    scale = TRUE,\n    main = \"PC clinical correlates\",\n    cexMain = 1.5,\n    plotRsquared = FALSE,\n    corFUN = \"pearson\",\n    corUSE = \"na.or.complete\",\n    signifSymbols = c(\"****\", \"***\", \"**\", \"*\", \"\"),\n    signifCutpoints = c(0, 0.0001, 0.001, 0.01, 0.05, 1),\n    returnPlot = TRUE\n  )\n\n  p6 &lt;- plot_grid(\n    p1, p2, p3,\n    ncol = 3,\n    labels = c(\"A\", \"B  Pairs plot\", \"C\"),\n    label_fontfamily = \"Arial\",\n    label_fontface = \"bold\",\n    label_size = 22,\n    align = \"h\",\n    rel_widths = c(1.10, 0.80, 1.10)\n  )\n\n  p7 &lt;- plot_grid(\n    p4,\n    as.grob(p5),\n    ncol = 2,\n    labels = c(\"D\", \"E\"),\n    label_fontfamily = \"Arial\",\n    label_fontface = \"bold\",\n    label_size = 22,\n    align = \"h\",\n    rel_widths = c(0.8, 1.2)\n  )\n\n  p &lt;- plot_grid(\n    p6, p7,\n    ncol = 1,\n    rel_heights = c(1.1, 0.9)\n  )\n\n  return(p)\n}\n\n## plot\np &lt;- call_pcatools(\n  datTable = data,\n  sampleInfo = data2,\n  biplotColBy = \"ER\",\n  biplotShapeBy = \"Grade\",\n  eigencorplotMetavars = colnames(data2)[-1],\n  screeplotComponents = 30,\n  pairsplotComponents = 3,\n  plotloadingsComponents = 5,\n  eigencorplotComponents = 10,\n  top_var = 90,\n  screeplotColBar = \"#0085FF\",\n  plotloadingsLowCol = \"#0085FF\",\n  plotloadingsMidCol = \"#FFFFFF\",\n  plotloadingsHighCol = \"#FF0000\"\n)\n\np\n\n\n\n\n\n\n\nFigure 1: PCAtools",
    "crumbs": [
      "HIPLOT",
      "PCAtools"
    ]
  },
  {
    "objectID": "Hiplot/091-likert.html",
    "href": "Hiplot/091-likert.html",
    "title": "Likert Plot",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Likert Plot plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/likert?lang=en\nDescriptive statistical analysis of Likert scale data.",
    "crumbs": [
      "HIPLOT",
      "Likert Plot"
    ]
  },
  {
    "objectID": "Hiplot/091-likert.html#setup",
    "href": "Hiplot/091-likert.html#setup",
    "title": "Likert Plot",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplotify; likert\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplotify\", quietly = TRUE)) {\n  install.packages(\"ggplotify\")\n}\nif (!requireNamespace(\"likert\", quietly = TRUE)) {\n  install.packages(\"likert\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplotify)\nlibrary(likert)",
    "crumbs": [
      "HIPLOT",
      "Likert Plot"
    ]
  },
  {
    "objectID": "Hiplot/091-likert.html#data-preparation",
    "href": "Hiplot/091-likert.html#data-preparation",
    "title": "Likert Plot",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/likert/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\nlevs &lt;- unique(unlist(data))\nfor (i in 1:ncol(data)) {\n  data[,i] &lt;- factor(data[, i], levels = levs)\n}\n\n# View data\nhead(data)\n\n            ST24Q01           ST24Q02        ST24Q03           ST24Q04\n1 Strongly disagree    Strongly agree          Agree Strongly disagree\n2          Disagree    Strongly agree Strongly agree Strongly disagree\n3          Disagree          Disagree       Disagree             Agree\n4          Disagree          Disagree       Disagree          Disagree\n5          Disagree             Agree       Disagree Strongly disagree\n6             Agree Strongly disagree          Agree Strongly disagree\n            ST24Q05           ST24Q06        ST24Q07           ST24Q08\n1             Agree Strongly disagree          Agree          Disagree\n2    Strongly agree Strongly disagree          Agree          Disagree\n3          Disagree          Disagree       Disagree          Disagree\n4          Disagree Strongly disagree       Disagree          Disagree\n5             Agree Strongly disagree Strongly agree Strongly disagree\n6 Strongly disagree          Disagree       Disagree             Agree\n            ST24Q09           ST24Q10           ST24Q11\n1 Strongly disagree             Agree             Agree\n2 Strongly disagree             Agree             Agree\n3          Disagree          Disagree          Disagree\n4 Strongly disagree          Disagree          Disagree\n5 Strongly disagree Strongly disagree             Agree\n6          Disagree             Agree Strongly disagree",
    "crumbs": [
      "HIPLOT",
      "Likert Plot"
    ]
  },
  {
    "objectID": "Hiplot/091-likert.html#visualization",
    "href": "Hiplot/091-likert.html#visualization",
    "title": "Likert Plot",
    "section": "Visualization",
    "text": "Visualization\n\n# Likert Plot\npobj &lt;- likert(data)\ncolrs &lt;- c(\"#3B4992FF\",\"#EE0000FF\")\np &lt;- as.ggplot(plot(pobj, type = \"bar\", \n                    low.color = colrs[1], high.color = colrs[2], wrap = 50))\n\np\n\n\n\n\n\n\n\nFigure 1: Likert Plot",
    "crumbs": [
      "HIPLOT",
      "Likert Plot"
    ]
  },
  {
    "objectID": "Hiplot/050-easy-som.html",
    "href": "Hiplot/050-easy-som.html",
    "title": "Easy SOM",
    "section": "",
    "text": "Establish the SOM model and conduct the visulization.",
    "crumbs": [
      "HIPLOT",
      "Easy SOM"
    ]
  },
  {
    "objectID": "Hiplot/050-easy-som.html#setup",
    "href": "Hiplot/050-easy-som.html#setup",
    "title": "Easy SOM",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; kohonen\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"kohonen\", quietly = TRUE)) {\n  install.packages(\"kohonen\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(kohonen)",
    "crumbs": [
      "HIPLOT",
      "Easy SOM"
    ]
  },
  {
    "objectID": "Hiplot/050-easy-som.html#data-preparation",
    "href": "Hiplot/050-easy-som.html#data-preparation",
    "title": "Easy SOM",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/easy-som/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# convert data structure\ntarget &lt;- data[,1]\ntarget &lt;- factor(target, levels = unique(target))\ndata &lt;- data[,-1]\ndata &lt;- as.data.frame(data)\nfor (i in 1:ncol(data)) {\n  data[,i] &lt;- as.numeric(data[,i])\n}\ndata &lt;- as.matrix(data)\nset.seed(7)\nkohmap &lt;- xyf(scale(data), target, grid = somgrid(xdim=6, ydim=4, topo=\"hexagonal\"), rlen=100)\n\ncolor_key &lt;- c(\"#A50026\",\"#D73027\",\"#F46D43\",\"#FDAE61\",\"#FEE090\",\"#FFFFBF\",\"#E0F3F8\",\n               \"#ABD9E9\",\"#74ADD1\",\"#4575B4\",\"#313695\")\ncolors &lt;- function (n, alpha, rev = FALSE) {\n  colorRampPalette(color_key)(n)\n}\n\n# View data\nhead(data[,1:5])\n\n     alcohol malic acid  ash ash alkalinity magnesium\n[1,]   12.86       1.35 2.32           18.0       122\n[2,]   12.88       2.99 2.40           20.0       104\n[3,]   12.81       2.31 2.40           24.0        98\n[4,]   12.70       3.55 2.36           21.5       106\n[5,]   12.51       1.24 2.25           17.5        85\n[6,]   12.60       2.46 2.20           18.5        94",
    "crumbs": [
      "HIPLOT",
      "Easy SOM"
    ]
  },
  {
    "objectID": "Hiplot/050-easy-som.html#visualization",
    "href": "Hiplot/050-easy-som.html#visualization",
    "title": "Easy SOM",
    "section": "Visualization",
    "text": "Visualization\n\n# Easy SOM\np &lt;- function () {\n  par(mfrow = c(3,2))\n  xyfpredictions &lt;- classmat2classvec(getCodes(kohmap, 2))\n  plot(kohmap, type=\"counts\", col = as.integer(target),\n       palette.name = colors,\n       pchs = as.integer(target), \n       main = \"Counts plot\", shape = \"straight\", border = NA)\n  \n  som.hc &lt;- cutree(hclust(object.distances(kohmap, \"codes\")), 3)\n  add.cluster.boundaries(kohmap, som.hc)\n\n  plot(kohmap, type=\"mapping\",\n       labels = as.integer(target), col = colors(3)[as.integer(target)],\n       palette.name = colors,\n       shape = \"straight\",\n       main = \"Mapping plot\")\n\n  ## add background colors to units according to their predicted class labels\n  xyfpredictions &lt;- classmat2classvec(getCodes(kohmap, 2))\n  bgcols &lt;- colors(3)\n  plot(kohmap, type=\"mapping\", col = as.integer(target),\n       pchs = as.integer(target), bgcol = bgcols[as.integer(xyfpredictions)],\n       main = \"Another mapping plot\", shape = \"straight\", border = NA)\n  \n  similarities &lt;- plot(kohmap, type=\"quality\", shape = \"straight\",\n                       palette.name = colors)\n  \n  plot(kohmap, type=\"codes\", shape = \"straight\", \n       main = c(\"Codes X\", \"Codes Y\"), palette.name = colors)\n}\n\np()\n\n\n\n\n\n\n\nFigure 1: Easy SOM",
    "crumbs": [
      "HIPLOT",
      "Easy SOM"
    ]
  },
  {
    "objectID": "Hiplot/145-pyramid-chart2.html",
    "href": "Hiplot/145-pyramid-chart2.html",
    "title": "Pyramid Chart 2",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Pyramid Chart 2 plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/pyramid-chart2?lang=en\nThe pyramid chart is a pyramid-like figure that distributes data on both sides of a central axis.",
    "crumbs": [
      "HIPLOT",
      "Pyramid Chart 2"
    ]
  },
  {
    "objectID": "Hiplot/145-pyramid-chart2.html#setup",
    "href": "Hiplot/145-pyramid-chart2.html#setup",
    "title": "Pyramid Chart 2",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; apyramid; ggplot2\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"apyramid\", quietly = TRUE)) {\n  install.packages(\"apyramid\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(apyramid)\nlibrary(ggplot2)",
    "crumbs": [
      "HIPLOT",
      "Pyramid Chart 2"
    ]
  },
  {
    "objectID": "Hiplot/145-pyramid-chart2.html#data-preparation",
    "href": "Hiplot/145-pyramid-chart2.html#data-preparation",
    "title": "Pyramid Chart 2",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data are age, gender, and the number of people after the combination of the first two variables .\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/pyramid-chart2/data.json\")$exampleData[[1]]$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\nx &lt;- as.integer(data[,\"age\"])\ndata$age_group &lt;- cut(x, breaks = pretty(x), right = TRUE, include.lowest = TRUE)\n\n# View data\nhead(data[,1:5])\n\n  case_id date_of_onset date_of_hospitalisation date_of_outcome outcome\n1       1     2013/2/19                    &lt;NA&gt;        2013/3/4   Death\n2       2     2013/2/27                2013/3/3       2013/3/10   Death\n3       3      2013/3/9               2013/3/19        2013/4/9   Death\n4       4     2013/3/19               2013/3/27            &lt;NA&gt;    &lt;NA&gt;\n5       5     2013/3/19               2013/3/30       2013/5/15 Recover\n6       6     2013/3/21               2013/3/28       2013/4/26   Death",
    "crumbs": [
      "HIPLOT",
      "Pyramid Chart 2"
    ]
  },
  {
    "objectID": "Hiplot/145-pyramid-chart2.html#visualization",
    "href": "Hiplot/145-pyramid-chart2.html#visualization",
    "title": "Pyramid Chart 2",
    "section": "Visualization",
    "text": "Visualization\n\n# Pyramid Chart 2\np &lt;- age_pyramid(data, \"age_group\", split_by = \"Gender\") + \n  scale_fill_manual(values = c(\"#BC3C29FF\",\"#0072B5FF\")) +\n  xlab(\"Age group\") + \n  ylab(\"Gender\") +\n  theme_classic() +\n  theme(text = element_text(family = \"Arial\"),\n      plot.title = element_text(size = 12,hjust = 0.5),\n      axis.title = element_text(size = 12),\n      axis.text = element_text(size = 10),\n      axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n      legend.position = \"right\",\n      legend.direction = \"vertical\",\n      legend.title = element_text(size = 10),\n      legend.text = element_text(size = 10))\n\np\n\n\n\n\n\n\n\nFigure 1: Pyramid Chart 2\n\n\n\n\n\nThe graph shows the age groups from bottom to top in order on the central axis, the left side represents the number of men, the right side represents the number of women, and the X-axis represents the number of people. The graph clearly shows the proportion of men and women in different age groups and the proportion of different age groups in the same gender.",
    "crumbs": [
      "HIPLOT",
      "Pyramid Chart 2"
    ]
  },
  {
    "objectID": "Hiplot/047-dual-y-axis.html",
    "href": "Hiplot/047-dual-y-axis.html",
    "title": "Dual Y Axis Chart",
    "section": "",
    "text": "The dual Y-axis graph can put two groups of data with larger orders of magnitude in the same graph for display.",
    "crumbs": [
      "HIPLOT",
      "Dual Y Axis Chart"
    ]
  },
  {
    "objectID": "Hiplot/047-dual-y-axis.html#setup",
    "href": "Hiplot/047-dual-y-axis.html#setup",
    "title": "Dual Y Axis Chart",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)",
    "crumbs": [
      "HIPLOT",
      "Dual Y Axis Chart"
    ]
  },
  {
    "objectID": "Hiplot/047-dual-y-axis.html#data-preparation",
    "href": "Hiplot/047-dual-y-axis.html#data-preparation",
    "title": "Dual Y Axis Chart",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data is divided into three columns, the first column is the value of the x-axis, the second column is the value of the left Y-axis, and the third column is the value of the right Y-axis.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/dual-y-axis/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# View data\nhead(data)\n\n  x     data1     data2\n1 1 0.6105444 1000.5383\n2 2 0.9961953  981.0398\n3 3 0.6314076  961.0601\n4 4 0.8651855  941.2540\n5 5 0.8169382  922.3971\n6 6 0.1877025  903.3067",
    "crumbs": [
      "HIPLOT",
      "Dual Y Axis Chart"
    ]
  },
  {
    "objectID": "Hiplot/047-dual-y-axis.html#visualization",
    "href": "Hiplot/047-dual-y-axis.html#visualization",
    "title": "Dual Y Axis Chart",
    "section": "Visualization",
    "text": "Visualization\n\n# Dual Y Axis Chart\np &lt;- ggplot(data, aes(x = x)) +\n  geom_line(aes(y = data[, 2]), size = 1, color = \"#D72C15\") +\n  geom_line(aes(y = data[, 3] / as.numeric(10)), size = 1, color = \"#02657B\") +\n  scale_y_continuous(\n    name = colnames(data)[2],\n    sec.axis = sec_axis(~ . * as.numeric(10), name = colnames(data)[3])) +\n  ggtitle(\"Dual Y Axis Chart\") + xlab(\"x\") +\n  theme_bw() +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n\np\n\n\n\n\n\n\n\nFigure 1: Dual Y Axis Chart\n\n\n\n\n\nInterpretation of case statistics graphics In the case data, the Y-axis scale on the left is in the range of 0-100, while the Y-axis scale on the right is 0-1000.",
    "crumbs": [
      "HIPLOT",
      "Dual Y Axis Chart"
    ]
  },
  {
    "objectID": "Hiplot/033-corrplot.html",
    "href": "Hiplot/033-corrplot.html",
    "title": "Corrplot",
    "section": "",
    "text": "The correlation heat map is a graph that analyzes the correlation between two or more variables.",
    "crumbs": [
      "HIPLOT",
      "Corrplot"
    ]
  },
  {
    "objectID": "Hiplot/033-corrplot.html#setup",
    "href": "Hiplot/033-corrplot.html#setup",
    "title": "Corrplot",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; corrplot; ggcorrplot; ggplotify\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"corrplot\", quietly = TRUE)) {\n  install.packages(\"corrplot\")\n}\nif (!requireNamespace(\"ggcorrplot\", quietly = TRUE)) {\n  install.packages(\"ggcorrplot\")\n}\nif (!requireNamespace(\"ggplotify\", quietly = TRUE)) {\n  install.packages(\"ggplotify\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(corrplot)\nlibrary(ggcorrplot)\nlibrary(ggplotify)",
    "crumbs": [
      "HIPLOT",
      "Corrplot"
    ]
  },
  {
    "objectID": "Hiplot/033-corrplot.html#data-preparation",
    "href": "Hiplot/033-corrplot.html#data-preparation",
    "title": "Corrplot",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data are the gene names and the expression of each sample.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/corrplot/data.json\")$exampleData[[1]]$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# convert data structure\ndata &lt;- data[!is.na(data[, 1]), ]\nidx &lt;- duplicated(data[, 1])\ndata[idx, 1] &lt;- paste0(data[idx, 1], \"--dup-\", cumsum(idx)[idx])\nrownames(data) &lt;- data[, 1]\ndata &lt;- data[, -1]\nstr2num_df &lt;- function(x) {\n  final &lt;- NULL\n  for (i in seq_len(ncol(x))) {\n    final &lt;- cbind(final, as.numeric(x[, i]))\n  }\n  colnames(final) &lt;- colnames(x)\n  return(final)\n}\ntmp &lt;- str2num_df(t(data))\ncorr &lt;- round(cor(tmp, use = \"na.or.complete\", method = \"pearson\"), 3)\np_mat &lt;- round(cor_pmat(tmp, method = \"pearson\"), 3)\n\n# View data\nhead(data)\n\n             M1       M2       M3       M4       M5       M6        M7       M8\nRGL4   8.454808 8.019389 8.990836 9.718631 7.908075 4.147051  4.985084 4.576711\nMPP7   8.690520 8.630346 7.080873 9.838476 8.271824 5.179200  5.200868 3.266993\nUGCG   8.648366 8.600555 9.431046 7.923021 8.309214 4.902510  5.750804 4.492856\nCYSTM1 8.628884 9.238677 8.487243 8.958537 7.357109 4.541605  6.370533 4.246651\nANXA2  4.983769 6.748022 6.220791 4.719403 3.284346 8.089850 10.637472 7.214912\nENDOD1 5.551640 5.406465 4.663785 3.550765 4.103507 8.393991  9.538503 9.069923\n             M9      M10\nRGL4   4.930349 4.293700\nMPP7   5.565226 4.300309\nUGCG   4.659987 3.306275\nCYSTM1 4.745769 3.449627\nANXA2  9.002710 5.123359\nENDOD1 8.639664 7.106392",
    "crumbs": [
      "HIPLOT",
      "Corrplot"
    ]
  },
  {
    "objectID": "Hiplot/033-corrplot.html#visualization",
    "href": "Hiplot/033-corrplot.html#visualization",
    "title": "Corrplot",
    "section": "Visualization",
    "text": "Visualization\n\n# Corrplot\np &lt;- as.ggplot(function(){\n  corrplot(\n    corr, \n    method = \"circle\", \n    type = \"upper\",\n    tl.col = \"black\", \n    diag = F,\n    col = colorRampPalette(c(\"#4477AA\", \"#FFFFFF\", \"#BB4444\"))(200),\n    order = \"hclust\",\n    hclust.method = \"ward.D2\")\n  }) +\n  xlab(\"\") + ylab(\"\") +\n  ggtitle(\"Cor Heatmap Plot\") +\n  theme_void() +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_blank(), axis.text.y = element_blank(),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\np\n\n\n\n\n\n\n\nFigure 1: Corrplot\n\n\n\n\n\nRed indicates positive correlation between two genes, blue indicates negative correlation between two genes, and the number in each cell indicates correlation coefficient.",
    "crumbs": [
      "HIPLOT",
      "Corrplot"
    ]
  },
  {
    "objectID": "Hiplot/023-circular-barplot.html",
    "href": "Hiplot/023-circular-barplot.html",
    "title": "Circular Barplot",
    "section": "",
    "text": "Drawing circular barplot",
    "crumbs": [
      "HIPLOT",
      "Circular Barplot"
    ]
  },
  {
    "objectID": "Hiplot/023-circular-barplot.html#setup",
    "href": "Hiplot/023-circular-barplot.html#setup",
    "title": "Circular Barplot",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2; dplyr\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"dplyr\", quietly = TRUE)) {\n  install.packages(\"dplyr\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(dplyr)",
    "crumbs": [
      "HIPLOT",
      "Circular Barplot"
    ]
  },
  {
    "objectID": "Hiplot/023-circular-barplot.html#data-preparation",
    "href": "Hiplot/023-circular-barplot.html#data-preparation",
    "title": "Circular Barplot",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/circular-barplot/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# convert data structure\ndata$group &lt;- as.factor(data$group)\nempty_bar &lt;- 2\nto_add &lt;- data.frame(matrix(NA, empty_bar*nlevels(data$group), ncol(data)))\ncolnames(to_add) &lt;- colnames(data)\nto_add$group &lt;- rep(levels(data$group), each=empty_bar)\ndata &lt;- rbind(data, to_add)\ndata &lt;- data %&gt;% arrange(group)\ndata$id &lt;- seq(1, nrow(data))\n\nlabel_data &lt;- data\nnumber_of_bar &lt;- nrow(label_data)\nangle &lt;- 90 - 360 * (label_data$id-0.5) /number_of_bar\nlabel_data$hjust &lt;- ifelse( angle &lt; -90, 1, 0)\nlabel_data$angle &lt;- ifelse(angle &lt; -90, angle+180, angle)\n\nbase_data &lt;- data %&gt;% \n  group_by(group) %&gt;% \n  dplyr::summarize(start=min(id), end=max(id) - empty_bar) %&gt;% \n  rowwise() %&gt;% \n  mutate(title=mean(c(start, end)))\n\n# View data\nhead(data)\n\n  individual group value id\n1   Mister 1     A    82  1\n2   Mister 2     A    98  2\n3   Mister 3     A    72  3\n4   Mister 4     A    34  4\n5   Mister 5     A    60  5\n6   Mister 6     A    61  6",
    "crumbs": [
      "HIPLOT",
      "Circular Barplot"
    ]
  },
  {
    "objectID": "Hiplot/023-circular-barplot.html#visualization",
    "href": "Hiplot/023-circular-barplot.html#visualization",
    "title": "Circular Barplot",
    "section": "Visualization",
    "text": "Visualization\n\n# Circular Barplot\np &lt;- ggplot(data, aes(x=as.factor(id), y=value, fill=group)) +\n  geom_bar(aes(x=as.factor(id), y=value, fill=group), stat=\"identity\", alpha=0.5) +\n  ylim(-50,max(na.omit(data$value))+30) +\n  geom_segment(data=base_data, aes(x = start, y = -5, xend = end, yend = -5), colour = \"black\", alpha=0.8, size=0.8 , inherit.aes = FALSE )  +\n  geom_text(data=base_data, aes(x = title, y = -12, label=group), colour = \"black\", alpha=0.8, size=4, fontface=\"bold\", inherit.aes = FALSE) +\n  geom_text(data=label_data, aes(x=id, y=value+8, label=individual, hjust=hjust), color=\"black\", fontface=\"bold\",alpha=0.6, size=3, angle= label_data$angle, inherit.aes = FALSE ) +\n  geom_text(data=label_data, aes(x=id, y=value-10, label=value, hjust=hjust), color=\"black\", fontface=\"bold\",alpha=0.6, size=3, angle= label_data$angle, inherit.aes = FALSE ) +\n  coord_polar() + \n  scale_fill_manual(values = c(\"#3b4992ff\",\"#ee0000ff\",\"#008b45ff\",\"#631879ff\")) +\n  theme_minimal() +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_blank(),\n        axis.text = element_blank(),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10),\n        panel.grid = element_blank(),\n        plot.margin = unit(rep(-1,4), \"cm\"))\n\np\n\n\n\n\n\n\n\nFigure 1: Circular Barplot",
    "crumbs": [
      "HIPLOT",
      "Circular Barplot"
    ]
  },
  {
    "objectID": "Hiplot/178-venn.html",
    "href": "Hiplot/178-venn.html",
    "title": "Venn",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Venn plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/venn?lang=en\nA Venn diagram is a diagramthat shows all possible logical relations between a finite collection of different sets. These diagrams depict elements as points in the plane, and sets as regions inside closed curves. A Venn diagram consists of multiple overlapping closed curves, usually circles, each representing a set. The points inside a curve labelled S represent elements of the set S, while points outside the boundary represent elements not in the set S. This lends to easily read visualizations; for example, the set of all elements that are members of both sets Sand T, S ∩ T, is represented visually by the area of overlap of the regions S and T. In Venn diagrams the curves are overlapped in every possible way, showing all possible relations between the sets.",
    "crumbs": [
      "HIPLOT",
      "Venn"
    ]
  },
  {
    "objectID": "Hiplot/178-venn.html#setup",
    "href": "Hiplot/178-venn.html#setup",
    "title": "Venn",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; VennDiagram; grDevices\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"VennDiagram\", quietly = TRUE)) {\n  install.packages(\"VennDiagram\")\n}\nif (!requireNamespace(\"grDevices\", quietly = TRUE)) {\n  install.packages(\"grDevices\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(VennDiagram)\nlibrary(grDevices)",
    "crumbs": [
      "HIPLOT",
      "Venn"
    ]
  },
  {
    "objectID": "Hiplot/178-venn.html#data-preparation",
    "href": "Hiplot/178-venn.html#data-preparation",
    "title": "Venn",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data is a collection of five gene names.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/venn/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# convert data structure\nfor (i in seq_len(ncol(data))) {\n  data[is.na(data[, i]), i] &lt;- \"\"\n}\nraw &lt;- data\ndata &lt;- as.data.frame(raw[raw[, 1] != \"\", 1])\ncolnames(data) &lt;- colnames(raw)[1]\nlist.num &lt;- 1\nfor (i in 2:ncol(raw)) {\n  if (any(!is.na(raw[, i]) & raw[, i] != \"\")) {\n    tmp &lt;- raw[i]\n    tmp &lt;- tmp[tmp[, 1] != \"\", ]\n    tmp &lt;- as.data.frame(tmp)\n    colnames(tmp) &lt;- colnames(raw)[i]\n    assign(paste0(\"data\", i), tmp)\n    list.num &lt;- list.num + 1\n  }\n}\ncolnames(data) &lt;- paste(\"V\", seq_len(ncol(data)), sep = \"\")\ncolnames(data2) &lt;- paste(\"V\", seq_len(ncol(data2)), sep = \"\")\ncolnames(data3) &lt;- paste(\"V\", seq_len(ncol(data3)), sep = \"\")\ncolnames(data4) &lt;- paste(\"V\", seq_len(ncol(data4)), sep = \"\")\ncolnames(data5) &lt;- paste(\"V\", seq_len(ncol(data5)), sep = \"\")\ndata_list &lt;- list(\n  n1 = data$V1, n2 = data2$V1, n3 = data3$V1,\n  n4 = data4$V1, n5 = data5$V1\n)\nnames(data_list) &lt;- colnames(raw)[1:5]\n\n# View data\nhead(data)\n\n       V1\n1   ISG15\n2  TTLL10\n3    HES4\n4  OR4G4P\n5 MND2P28\n6  FAM87B",
    "crumbs": [
      "HIPLOT",
      "Venn"
    ]
  },
  {
    "objectID": "Hiplot/178-venn.html#visualization",
    "href": "Hiplot/178-venn.html#visualization",
    "title": "Venn",
    "section": "Visualization",
    "text": "Visualization\n\n# Venn\ncol &lt;- c(\"#E64B35FF\",\"#4DBBD5FF\",\"#00A087FF\",\"#3C5488FF\",\"#F39B7FFF\")\np &lt;- venn.diagram(\n  data_list, scaled = F, euler.d = F, filename = NULL, col = \"black\",\n  fill = col,\n  cex = c(\n    1.5, 1.5, 1.5, 1.5, 1.5, 1, 0.8, 1, 0.8, 1, 0.8, 1, 0.8,\n    1, 0.8, 1, 0.55, 1, 0.55, 1, 0.55, 1, 0.55, 1, 0.55, 1, 1, 1, 1, 1, 1.5\n  ),\n  cat.col = col, cat.cex = 1,\n  main.fontfamily = \"Arial\", fontfamily = \"Arial\", cat.fontface = \"bold\",\n  cat.fontfamily = \"Arial\", margin = 0.1, main = \"Vene Plot\", alpha = 0.8\n);grid::grid.draw(p)\n\n\n\n\n\n\n\nFigure 1: Venn\n\n\n\n\n\nThe closed curve of 5 colors represents 5 sets, and the number represents the number of overlapping or non-overlapping genes in multiple sets. For example, 8 in the sample figure represents 8 identical gene names in 5 sample sets.",
    "crumbs": [
      "HIPLOT",
      "Venn"
    ]
  },
  {
    "objectID": "Hiplot/093-line-errorbar.html",
    "href": "Hiplot/093-line-errorbar.html",
    "title": "Line (errorbar)",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Line (errorbar) plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/line-errorbar?lang=en\nThe error line mainly indicates the error range of each data point and shows the potential error or uncertainty relative to each data in the series.",
    "crumbs": [
      "HIPLOT",
      "Line (errorbar)"
    ]
  },
  {
    "objectID": "Hiplot/093-line-errorbar.html#setup",
    "href": "Hiplot/093-line-errorbar.html#setup",
    "title": "Line (errorbar)",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggpubr\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggpubr\", quietly = TRUE)) {\n  install.packages(\"ggpubr\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggpubr)",
    "crumbs": [
      "HIPLOT",
      "Line (errorbar)"
    ]
  },
  {
    "objectID": "Hiplot/093-line-errorbar.html#data-preparation",
    "href": "Hiplot/093-line-errorbar.html#data-preparation",
    "title": "Line (errorbar)",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data are two groups and their corresponding values.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/line-errorbar/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\ndata[, 3] &lt;- factor(data[, 3], levels = unique(data[, 3]))\n\n# View data\nhead(data)\n\n  Value Group2 Group1\n1   4.2 treat1    low\n2  11.5 treat1    low\n3   7.3 treat1    low\n4   5.8 treat1    low\n5   6.4 treat1    low\n6  10.0 treat1    low",
    "crumbs": [
      "HIPLOT",
      "Line (errorbar)"
    ]
  },
  {
    "objectID": "Hiplot/093-line-errorbar.html#visualization",
    "href": "Hiplot/093-line-errorbar.html#visualization",
    "title": "Line (errorbar)",
    "section": "Visualization",
    "text": "Visualization\n\n# Line (errorbar)\np &lt;- ggline(\n  data, x = \"Group1\", y = \"Value\", color = \"Group2\",\n  add = \"mean_se\", title = \"Line plot with errorbar\", palette = \"npg\") +\n  stat_compare_means(aes_(group = as.name(\"Group2\"))) +\n  theme_bw() +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12, hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n\np\n\n\n\n\n\n\n\nFigure 1: Line (errorbar)\n\n\n\n\n\nThe red line in low type represents the maximum value of the low type in treat1, the red line represents the minimum value of the low type in treat1, and so on. Conduct rank-sum test on treat1 and treat2 according to low,mid and high types respectively, and display p-value at the top of the figure.",
    "crumbs": [
      "HIPLOT",
      "Line (errorbar)"
    ]
  },
  {
    "objectID": "Hiplot/148-qqplot.html",
    "href": "Hiplot/148-qqplot.html",
    "title": "QQ Plot",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot QQ Plot plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/qqplot?lang=en\nVerify whether a set of data comes from a certain distribution or whether two sets of data come from the same (family) distribution.",
    "crumbs": [
      "HIPLOT",
      "QQ Plot"
    ]
  },
  {
    "objectID": "Hiplot/148-qqplot.html#setup",
    "href": "Hiplot/148-qqplot.html#setup",
    "title": "QQ Plot",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; grafify\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"grafify\", quietly = TRUE)) {\n  install.packages(\"grafify\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(grafify)",
    "crumbs": [
      "HIPLOT",
      "QQ Plot"
    ]
  },
  {
    "objectID": "Hiplot/148-qqplot.html#data-preparation",
    "href": "Hiplot/148-qqplot.html#data-preparation",
    "title": "QQ Plot",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/qqplot/data.json\")$exampleData[[1]]$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\ndata[, \"Genotype\"] &lt;- factor(data[, \"Genotype\"], levels = unique(data[, \"Genotype\"]))\n\n# View data\nhead(data)\n\n  Genotype Cytokine Experiment facet\n1       WT 1.312322     Exp_ 1     A\n2       WT 2.171466     Exp_ 2     A\n3       WT 1.497610     Exp_ 3     A\n4       WT 1.088861     Exp_ 4     A\n5       WT 1.270528     Exp_ 5     A\n6       WT 3.012708     Exp_ 6     A",
    "crumbs": [
      "HIPLOT",
      "QQ Plot"
    ]
  },
  {
    "objectID": "Hiplot/148-qqplot.html#visualization",
    "href": "Hiplot/148-qqplot.html#visualization",
    "title": "QQ Plot",
    "section": "Visualization",
    "text": "Visualization\n\n# QQ Plot\np &lt;- plot_qqline(data = data, ycol = Cytokine, group = Genotype,\n                 symsize = 2, symthick = 0.5, s_alpha = 1) +\n  ggtitle(\"QQplot without facet\") +\n  xlab(\"theoretical\") + ylab(\"sample\") + \n  guides(fill = guide_legend(title = \"Genotype\")) +\n  scale_color_manual(values = c(\"#E69F00\",\"#4DB1DC\")) +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n\np\n\n\n\n\n\n\n\nFigure 1: QQ Plot",
    "crumbs": [
      "HIPLOT",
      "QQ Plot"
    ]
  },
  {
    "objectID": "Hiplot/038-density-hist-mirror.html",
    "href": "Hiplot/038-density-hist-mirror.html",
    "title": "Mirror Density & Histogram",
    "section": "",
    "text": "The mirror density & histogram is a graph used to observe the distribution of continuous variables in two side view: top and bottom.",
    "crumbs": [
      "HIPLOT",
      "Mirror Density & Histogram"
    ]
  },
  {
    "objectID": "Hiplot/038-density-hist-mirror.html#setup",
    "href": "Hiplot/038-density-hist-mirror.html#setup",
    "title": "Mirror Density & Histogram",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2; ggthemes\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"ggthemes\", quietly = TRUE)) {\n  install.packages(\"ggthemes\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(ggthemes)",
    "crumbs": [
      "HIPLOT",
      "Mirror Density & Histogram"
    ]
  },
  {
    "objectID": "Hiplot/038-density-hist-mirror.html#data-preparation",
    "href": "Hiplot/038-density-hist-mirror.html#data-preparation",
    "title": "Mirror Density & Histogram",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/density-hist-mirror/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# convert data structure\nsides &lt;- data[1,]\ndata &lt;- data[-1,]\nfor (i in 1:ncol(data)) {\n  data[,i] &lt;- as.numeric(data[,i])\n}\n\n# View data\nhead(data)\n\n         var1     var2     var3     var4     var5     var6\n2  0.54659146 1.575592 1.508968 2.504824 5.540246 6.198931\n3 -0.64052340 5.275076 1.498841 4.436792 4.987390 5.194154\n4  1.03196438 2.561983 4.018349 3.506171 5.030395 6.570980\n5  0.09518815 1.802874 2.057855 2.789252 4.797252 7.545844\n6  0.89147721 2.627927 2.218567 4.581939 4.791792 5.468657\n7  0.61786781 3.574565 2.051910 4.929031 5.830516 6.105716",
    "crumbs": [
      "HIPLOT",
      "Mirror Density & Histogram"
    ]
  },
  {
    "objectID": "Hiplot/038-density-hist-mirror.html#visualization",
    "href": "Hiplot/038-density-hist-mirror.html#visualization",
    "title": "Mirror Density & Histogram",
    "section": "Visualization",
    "text": "Visualization\n\n1. Mirror Density\n\n# Mirror Density\np &lt;- ggplot(data, aes(x=x))\ncolrs &lt;- c(\"#e64b35ff\",\"#4dbbd5ff\",\"#00a087ff\",\"#3c5488ff\",\"#f39b7fff\",\"#8491b4ff\")\ncolrs2 &lt;- colnames(data)\nfor (i in seq_len(length(sides))) {\n  eval(parse(\n    text = sprintf(\"p &lt;- p + geom_density(aes(x = %s, y = %s..density.., color = '%s', fill = '%s'), kernel = '%s')\", \n                   colnames(data)[i], ifelse(sides[i] == \"top\", \"\", \"-\"), colnames(data)[i],\n                   colnames(data)[i], \"gaussian\")\n    ))\n  names(colrs)[i] &lt;- colnames(data)[i]\n  names(colrs2)[i] &lt;- colrs[i]\n}\np &lt;- p + \n  ggtitle(\"\") +\n  scale_fill_manual(values=colrs, name=\"Densities\") +\n  scale_color_manual(values=colrs, name=\"Densities\") +\n  theme_stata() +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n\np\n\n\n\n\n\n\n\nFigure 1: Mirror Density\n\n\n\n\n\n\n\n2. Mirror Histogram\n\n# Mirror Histogram\np &lt;- ggplot(data, aes(x=x))\ncolrs &lt;- c(\"#e64b35ff\",\"#4dbbd5ff\",\"#00a087ff\",\"#3c5488ff\",\"#f39b7fff\",\"#8491b4ff\")\ncolrs2 &lt;- colnames(data)\nfor (i in seq_len(length(sides))) {\n  eval(parse(\n    text = sprintf(\"p &lt;- p + geom_histogram(aes(x = %s, y = %s..density.., color = '%s', fill = '%s'), bins = %s)\", \n                   colnames(data)[i], ifelse(sides[i] == \"top\", \"\", \"-\"),\n                   colnames(data)[i], colnames(data)[i], 35)))\n  names(colrs)[i] &lt;- colnames(data)[i]\n  names(colrs2)[i] &lt;- colrs[i]\n}\np &lt;- p + \n  ggtitle(\"\") +\n  scale_fill_manual(values=colrs, name=\"Densities\") +\n  scale_color_manual(values=colrs, name=\"Densities\") +\n  theme_stata() +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n\np\n\n\n\n\n\n\n\nFigure 2: Mirror Histogram",
    "crumbs": [
      "HIPLOT",
      "Mirror Density & Histogram"
    ]
  },
  {
    "objectID": "Hiplot/018-calibration-curve.html",
    "href": "Hiplot/018-calibration-curve.html",
    "title": "Calibration Curve",
    "section": "",
    "text": "The calibration curve is used to evaluate the consistency / calibration, i.e. the difference between the predicted value and the real value.",
    "crumbs": [
      "HIPLOT",
      "Calibration Curve"
    ]
  },
  {
    "objectID": "Hiplot/018-calibration-curve.html#setup",
    "href": "Hiplot/018-calibration-curve.html#setup",
    "title": "Calibration Curve",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; survival; rms; ggplotify\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"survival\", quietly = TRUE)) {\n  install.packages(\"survival\")\n}\nif (!requireNamespace(\"rms\", quietly = TRUE)) {\n  install.packages(\"rms\")\n}\nif (!requireNamespace(\"ggplotify\", quietly = TRUE)) {\n  install.packages(\"ggplotify\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(survival)\nlibrary(rms)\nlibrary(ggplotify)",
    "crumbs": [
      "HIPLOT",
      "Calibration Curve"
    ]
  },
  {
    "objectID": "Hiplot/018-calibration-curve.html#data-preparation",
    "href": "Hiplot/018-calibration-curve.html#data-preparation",
    "title": "Calibration Curve",
    "section": "Data Preparation",
    "text": "Data Preparation\nData frame of multi columns data (Numeric allow NA). i.e the survival data (status with 0 and 1).\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/calibration-curve/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# convert data structure\nres.lrm &lt;- lrm(as.formula(paste(\n  \"status ~ \", \n  paste(colnames(data)[3:length(colnames(data))], collapse = \"+\"))),\n  data = data, x = TRUE, y = TRUE)\n\nlrm.cal &lt;- calibrate(res.lrm, method = \"boot\", B = length(rownames(data)))\n\n# View data\nhead(data)\n\n  time status age sex ph.ecog ph.karno pat.karno meal.cal wt.loss\n1  306      2  74   1       1       90       100     1175      NA\n2  455      2  68   1       0       90        90     1225      15\n3 1010      1  56   1       0       90        90       NA      15\n4  210      2  57   1       1       90        60     1150      11\n5  883      2  60   1       0      100        90       NA       0\n6 1022      1  74   1       1       50        80      513       0",
    "crumbs": [
      "HIPLOT",
      "Calibration Curve"
    ]
  },
  {
    "objectID": "Hiplot/018-calibration-curve.html#visualization",
    "href": "Hiplot/018-calibration-curve.html#visualization",
    "title": "Calibration Curve",
    "section": "Visualization",
    "text": "Visualization\n\n# Calibration Curve\np &lt;- as.ggplot(function() {\n  plot(lrm.cal,\n       xlab = \"Nomogram Predicted Survival\",\n       ylab = \"Actual Survival\",\n       main = \"Calibration Curve\"\n       )\n})\n\n\nn=168   Mean absolute error=0.065   Mean squared error=0.00499\n0.9 Quantile of absolute error=0.096\n\np\n\n\n\n\n\n\n\nFigure 1: Calibration Curve",
    "crumbs": [
      "HIPLOT",
      "Calibration Curve"
    ]
  },
  {
    "objectID": "Hiplot/144-pyramid-chart.html",
    "href": "Hiplot/144-pyramid-chart.html",
    "title": "Pyramid Chart",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Pyramid Chart plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/pyramid-chart?lang=en\nThe pyramid chart is a pyramid-like figure that distributes data on both sides of a central axis.",
    "crumbs": [
      "HIPLOT",
      "Pyramid Chart"
    ]
  },
  {
    "objectID": "Hiplot/144-pyramid-chart.html#setup",
    "href": "Hiplot/144-pyramid-chart.html#setup",
    "title": "Pyramid Chart",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggcharts\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggcharts\", quietly = TRUE)) {\n  install.packages(\"ggcharts\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggcharts)",
    "crumbs": [
      "HIPLOT",
      "Pyramid Chart"
    ]
  },
  {
    "objectID": "Hiplot/144-pyramid-chart.html#data-preparation",
    "href": "Hiplot/144-pyramid-chart.html#data-preparation",
    "title": "Pyramid Chart",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data are age, gender, and the number of people after the combination of the first two variables .\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/pyramid-chart/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# View data\nhead(data)\n\n    age    sex    pop\n1   0-4   male 225817\n2   0-4 female 213072\n3   5-9   male 223656\n4   5-9 female 210508\n5 10-14   male 214782\n6 10-14 female 201672",
    "crumbs": [
      "HIPLOT",
      "Pyramid Chart"
    ]
  },
  {
    "objectID": "Hiplot/144-pyramid-chart.html#visualization",
    "href": "Hiplot/144-pyramid-chart.html#visualization",
    "title": "Pyramid Chart",
    "section": "Visualization",
    "text": "Visualization\n\n# Pyramid Chart\np &lt;- pyramid_chart(data = data, x = age, y = pop, group = sex, \n                   title = \"\", sort = \"no\", bar_colors = c(\"#C20B01\",\"#196ABD\")) +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n\np\n\n\n\n\n\n\n\nFigure 1: Pyramid Chart\n\n\n\n\n\nThe graph shows the age groups from bottom to top in order on the central axis, the left side represents the number of men, the right side represents the number of women, and the X-axis represents the number of people. The graph clearly shows the proportion of men and women in different age groups and the proportion of different age groups in the same gender.",
    "crumbs": [
      "HIPLOT",
      "Pyramid Chart"
    ]
  },
  {
    "objectID": "Hiplot/137-perspective.html",
    "href": "Hiplot/137-perspective.html",
    "title": "Perspective",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Perspective plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/perspective?lang=en\nThe three-dimensional perspective is a three-dimensional figure that can connect the higher values contained in a matrix with surfaces.",
    "crumbs": [
      "HIPLOT",
      "Perspective"
    ]
  },
  {
    "objectID": "Hiplot/137-perspective.html#setup",
    "href": "Hiplot/137-perspective.html#setup",
    "title": "Perspective",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; shape; ggplotify\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"shape\", quietly = TRUE)) {\n  install.packages(\"shape\")\n}\nif (!requireNamespace(\"ggplotify\", quietly = TRUE)) {\n  install.packages(\"ggplotify\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(shape)\nlibrary(ggplotify)",
    "crumbs": [
      "HIPLOT",
      "Perspective"
    ]
  },
  {
    "objectID": "Hiplot/137-perspective.html#data-preparation",
    "href": "Hiplot/137-perspective.html#data-preparation",
    "title": "Perspective",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data is a matrix.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/perspective/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\ndata &lt;- as.matrix(data)\ncol &lt;- drapecol(data)\n\n# View data\nhead(data[,1:5])\n\n      V1  V2  V3  V4  V5\n[1,] 100 101 102 103 104\n[2,] 100 101 102 103 104\n[3,] 101 102 103 104 105\n[4,] 101 102 103 104 105\n[5,] 101 102 103 104 105\n[6,] 101 102 103 104 105",
    "crumbs": [
      "HIPLOT",
      "Perspective"
    ]
  },
  {
    "objectID": "Hiplot/137-perspective.html#visualization",
    "href": "Hiplot/137-perspective.html#visualization",
    "title": "Perspective",
    "section": "Visualization",
    "text": "Visualization\n\n# Perspective\np &lt;- as.ggplot(function() {\n  persp(as.matrix(data),\n    theta = 45, phi = 20,\n    expand = 0.5,\n    r = 180, col = col,\n    ltheta = 120,\n    shade = 0.5,\n    ticktype = \"detailed\",\n    xlab = \"X\", ylab = \"Y\", zlab = \"Z\",\n    border = \"black\" # could be NA\n  )\n  title(\"Perspective Plot\", line = 0)\n})\n\np\n\n\n\n\n\n\n\nFigure 1: Perspective\n\n\n\n\n\nA clear view of a mountain peak.",
    "crumbs": [
      "HIPLOT",
      "Perspective"
    ]
  },
  {
    "objectID": "Hiplot/162-scatter2.html",
    "href": "Hiplot/162-scatter2.html",
    "title": "Scatter2",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Scatter2 plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/scatter2?lang=en\nTwo-dimensional spatial scatter to demonstrate multi-numerical variable relationships.",
    "crumbs": [
      "HIPLOT",
      "Scatter2"
    ]
  },
  {
    "objectID": "Hiplot/162-scatter2.html#setup",
    "href": "Hiplot/162-scatter2.html#setup",
    "title": "Scatter2",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; grafify; ggplot2\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"grafify\", quietly = TRUE)) {\n  install.packages(\"grafify\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(grafify)\nlibrary(ggplot2)",
    "crumbs": [
      "HIPLOT",
      "Scatter2"
    ]
  },
  {
    "objectID": "Hiplot/162-scatter2.html#data-preparation",
    "href": "Hiplot/162-scatter2.html#data-preparation",
    "title": "Scatter2",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/scatter2/data.json\")$exampleData[[1]]$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# View data\nhead(data[,1:5])\n\n                car  mpg cyl  disp  hp\n1    Hornet 4 Drive 21.4   6 258.0 110\n2 Hornet Sportabout 18.7   8 360.0 175\n3           Valiant 18.1   6 225.0 105\n4        Duster 360 14.3   8 360.0 245\n5        Merc 450SE 16.4   8 275.8 180\n6        Merc 450SL 17.3   8 275.8 180",
    "crumbs": [
      "HIPLOT",
      "Scatter2"
    ]
  },
  {
    "objectID": "Hiplot/162-scatter2.html#visualization",
    "href": "Hiplot/162-scatter2.html#visualization",
    "title": "Scatter2",
    "section": "Visualization",
    "text": "Visualization\n\n# scatter2\nsymsize &lt;- data[,\"gear\"]\ndata[,\"gear\"] &lt;- factor(data[,\"gear\"], levels = unique(data[,\"gear\"]))\np &lt;- ggplot(data, aes(x = mpg, y = disp)) + \n  geom_point(alpha = 1, aes(size = gear, fill = gear), shape = 21, stroke = 0.5) +\n  labs(fill = \"gear\", color = \"gear\") +\n  guides(x = guide_axis(angle = 0),\n         fill = guide_legend(title = \"gear\"),\n         color = FALSE,\n         size = guide_legend(title = \"gear\")) +\n  ggtitle(\"Scatter2 Plot\") +\n  scale_fill_grafify() +\n  theme_classic(base_size = 20) +\n  theme(text = element_text(family = \"Arial\"),\n        strip.background = element_blank(),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n\np\n\n\n\n\n\n\n\nFigure 1: scatter2",
    "crumbs": [
      "HIPLOT",
      "Scatter2"
    ]
  },
  {
    "objectID": "Hiplot/121-metawho.html",
    "href": "Hiplot/121-metawho.html",
    "title": "Meta-Subgroup Analysis",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Meta-Subgroup Analysis plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/metawho?lang=en\nThe goal of metawho is to provide simple R implementation of “Meta-analytical method to Identify Who Benefits Most from Treatments”.\nmetawho is powered by R package metafor and does not support dataset contains individuals for now. Please use stata package ipdmetan if you are more familar with stata code.",
    "crumbs": [
      "HIPLOT",
      "Meta-Subgroup Analysis"
    ]
  },
  {
    "objectID": "Hiplot/121-metawho.html#setup",
    "href": "Hiplot/121-metawho.html#setup",
    "title": "Meta-Subgroup Analysis",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; meta; cowplot\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"metawho\", quietly = TRUE)) {\n  install.packages(\"metawho\")\n}\nif (!requireNamespace(\"cowplot\", quietly = TRUE)) {\n  install.packages(\"cowplot\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(metawho)\nlibrary(cowplot)",
    "crumbs": [
      "HIPLOT",
      "Meta-Subgroup Analysis"
    ]
  },
  {
    "objectID": "Hiplot/121-metawho.html#data-preparation",
    "href": "Hiplot/121-metawho.html#data-preparation",
    "title": "Meta-Subgroup Analysis",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/metawho/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\ndata = deft_prepare(data, conf_level = 1 - 0.95)\nres = deft_do(data, group_level = unique(data$subgroup))\n\n# View data\nhead(data)\n\n                 entry         trial subgroup   hr ci.lb ci.ub  ni   conf_q\n1      Rizvi 2015-Male    Rizvi 2015     Male 0.30  0.09  1.00  16 1.959964\n2    Rizvi 2015-Female    Rizvi 2015   Female 0.11  0.02  0.56  18 1.959964\n3      Rizvi 2018-Male    Rizvi 2018     Male 1.25  0.82  1.90 118 1.959964\n4    Rizvi 2018-Female    Rizvi 2018   Female 0.63  0.42  0.95 122 1.959964\n5   Hellmann 2018-Male Hellmann 2018     Male 0.90  0.41  1.99  37 1.959964\n6 Hellmann 2018-Female Hellmann 2018   Female 0.28  0.12  0.67  38 1.959964\n          yi       sei\n1 -1.2039728 0.6142831\n2 -2.2072749 0.8500678\n3  0.2231436 0.2143674\n4 -0.4620355 0.2082200\n5 -0.1053605 0.4030005\n6 -1.2729657 0.4387290",
    "crumbs": [
      "HIPLOT",
      "Meta-Subgroup Analysis"
    ]
  },
  {
    "objectID": "Hiplot/121-metawho.html#visualization",
    "href": "Hiplot/121-metawho.html#visualization",
    "title": "Meta-Subgroup Analysis",
    "section": "Visualization",
    "text": "Visualization\n\n# Meta-Subgroup Analysis\np1 &lt;- deft_show(res, element = \"all\")\np2 &lt;- deft_show(res, element = \"subgroup\")\np &lt;- plot_grid(p1, p2, nrow = 2)\n\np\n\n\n\n\n\n\n\nFigure 1: Meta-Subgroup Analysis",
    "crumbs": [
      "HIPLOT",
      "Meta-Subgroup Analysis"
    ]
  },
  {
    "objectID": "Hiplot/006-barplot-errorbar2.html",
    "href": "Hiplot/006-barplot-errorbar2.html",
    "title": "Barplot (errorbar2)",
    "section": "",
    "text": "Bar plot with error-lines and groups.",
    "crumbs": [
      "HIPLOT",
      "Barplot (errorbar2)"
    ]
  },
  {
    "objectID": "Hiplot/006-barplot-errorbar2.html#setup",
    "href": "Hiplot/006-barplot-errorbar2.html#setup",
    "title": "Barplot (errorbar2)",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2; grafify; ggpubr\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"grafify\", quietly = TRUE)) {\n  install.packages(\"grafify\")\n}\nif (!requireNamespace(\"ggpubr\", quietly = TRUE)) {\n  install.packages(\"ggpubr\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(grafify)\nlibrary(ggpubr)",
    "crumbs": [
      "HIPLOT",
      "Barplot (errorbar2)"
    ]
  },
  {
    "objectID": "Hiplot/006-barplot-errorbar2.html#data-preparation",
    "href": "Hiplot/006-barplot-errorbar2.html#data-preparation",
    "title": "Barplot (errorbar2)",
    "section": "Data Preparation",
    "text": "Data Preparation\nData frame:\n&lt;1st-col&gt;: (Numeric) values as Y-axis.\n&lt;2nd-col&gt;: (Numeric or String) classes as X-axis.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/barplot-errorbar2/data.json\")$exampleData[[1]]$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# convert data structure\ndata[, 2] &lt;- factor(data[, 2], levels = unique(data[, 2]))\n\n# View data\nhead(data)\n\n  score   class\n1    60    math\n2    62    math\n3    70 chinese\n4    73 chinese\n5    80 english\n6    85 english",
    "crumbs": [
      "HIPLOT",
      "Barplot (errorbar2)"
    ]
  },
  {
    "objectID": "Hiplot/006-barplot-errorbar2.html#visualization",
    "href": "Hiplot/006-barplot-errorbar2.html#visualization",
    "title": "Barplot (errorbar2)",
    "section": "Visualization",
    "text": "Visualization\n\n# Barplot (errorbar2)\np &lt;- plot_scatterbar_sd(\n  data, ycol = get(colnames(data)[1]), xcol = get(colnames(data)[2]),\n  b_alpha = 1, ewid = 0.2, jitter = 0.1) +\n  stat_compare_means(data = data, aes(data[, 2], data[, 1], fill = data[, 2]),\n                     label = \"p.format\", ref.group = \".all.\", vjust = -2, \n                     method = \"t.test\") +\n  guides(fill=guide_legend(title=colnames(data)[2])) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.2))) +\n  labs(x=\"class\", y=\"score\") +\n  scale_fill_manual(values = c(\"#E64B35FF\",\"#4DBBD5FF\",\"#00A087FF\",\"#3C5488FF\")) +\n  theme_classic2() +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5, vjust = 1),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n\np\n\n\n\n\n\n\n\nFigure 1: Barplot (errorbar2)",
    "crumbs": [
      "HIPLOT",
      "Barplot (errorbar2)"
    ]
  },
  {
    "objectID": "Hiplot/059-gantt.html",
    "href": "Hiplot/059-gantt.html",
    "title": "Gantt",
    "section": "",
    "text": "The Gantt chart is a type of bar chart that illustrates a project schedule.",
    "crumbs": [
      "HIPLOT",
      "Gantt"
    ]
  },
  {
    "objectID": "Hiplot/059-gantt.html#setup",
    "href": "Hiplot/059-gantt.html#setup",
    "title": "Gantt",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; tidyverse; ggthemes\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"tidyverse\", quietly = TRUE)) {\n  install.packages(\"tidyverse\")\n}\nif (!requireNamespace(\"ggthemes\", quietly = TRUE)) {\n  install.packages(\"ggthemes\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(tidyverse)\nlibrary(ggthemes)",
    "crumbs": [
      "HIPLOT",
      "Gantt"
    ]
  },
  {
    "objectID": "Hiplot/059-gantt.html#data-preparation",
    "href": "Hiplot/059-gantt.html#data-preparation",
    "title": "Gantt",
    "section": "Data Preparation",
    "text": "Data Preparation\nData were loaded for 4 samples (4 patients), 3 items (3 treatments), and the start and end times of each treatment.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/gantt/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\nusr_ylab &lt;- colnames(data)[1]\nif (!is.numeric(data[, 2])) {\n  data[, 2] &lt;- factor(data[, 2], levels = unique(data[, 2]))\n}\ndata_gather &lt;- gather(data, \"state\", \"date\", 3:4)\nsample &lt;- levels(data_gather$sample)\ndata_gather$sample &lt;- factor(data_gather$sample,\n  levels = rev(unique(data_gather$sample))\n)\n\n# View data\nhead(data_gather)\n\n    sample   item state date\n1 patient1 treat1 start    1\n2 patient2 treat1 start    2\n3 patient2 treat2 start    5\n4 patient2 treat3 start    7\n5 patient3 treat3 start    6\n6 patient3 treat1 start    3",
    "crumbs": [
      "HIPLOT",
      "Gantt"
    ]
  },
  {
    "objectID": "Hiplot/059-gantt.html#visualization",
    "href": "Hiplot/059-gantt.html#visualization",
    "title": "Gantt",
    "section": "Visualization",
    "text": "Visualization\n\n# Gantt\np &lt;- ggplot(data_gather, aes(date, sample, color = item)) +\n  geom_line(size = 10, alpha = 1) +\n  labs(x = \"Time\", y = \"sample\", title = \"Gantt Plot\") +\n  theme(axis.ticks = element_blank()) +\n  scale_color_manual(values = c(\"#e04d39\",\"#5bbad6\",\"#1e9f86\")) +\n  theme_stata() +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5, vjust = 1),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n\np\n\n\n\n\n\n\n\nFigure 1: Gantt\n\n\n\n\n\nThe horizontal axis represents the time schedule, the vertical axis represents 4 patients, and the 3 colors represent 3 treatments. The figure can observe the time schedule of different treatments for each patient.",
    "crumbs": [
      "HIPLOT",
      "Gantt"
    ]
  },
  {
    "objectID": "Hiplot/172-treeheatr.html",
    "href": "Hiplot/172-treeheatr.html",
    "title": "Treeheatr",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Treeheatr plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/treeheatr?lang=en\nThe heatmap decision tree is a visualization graph that combines two types of graphs: heatmap and decision tree visualization.",
    "crumbs": [
      "HIPLOT",
      "Treeheatr"
    ]
  },
  {
    "objectID": "Hiplot/172-treeheatr.html#setup",
    "href": "Hiplot/172-treeheatr.html#setup",
    "title": "Treeheatr",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; treeheatr; ggplotify\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"treeheatr\", quietly = TRUE)) {\n  install.packages(\"treeheatr\")\n}\nif (!requireNamespace(\"ggplotify\", quietly = TRUE)) {\n  install.packages(\"ggplotify\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(treeheatr)\nlibrary(ggplotify)",
    "crumbs": [
      "HIPLOT",
      "Treeheatr"
    ]
  },
  {
    "objectID": "Hiplot/172-treeheatr.html#data-preparation",
    "href": "Hiplot/172-treeheatr.html#data-preparation",
    "title": "Treeheatr",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe first column is the name of the species, the second column is the island, and the rest are the species characteristics.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/treeheatr/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# convert data structure\nx &lt;- data\nwrong_cols &lt;- suppressWarnings(sapply(x, function(x) {\n  if (!is.numeric(x)) {\n    sum(!is.na(as.numeric(x))) &gt; 0.7 * length(x)\n  } else {\n    FALSE\n  }\n}))\nif (any(wrong_cols)) {\n  ix &lt;- which(wrong_cols)\n  for (i in ix) {\n    data[[i]] &lt;- suppressWarnings(as.numeric(data[[i]]))\n  }\n  rm(ix)\n}\nrm(x, wrong_cols)\n\n# View data\nhead(data)\n\n  species    island culmen_length_mm culmen_depth_mm flipper_length_mm\n1  Adelie Torgersen             39.1            18.7               181\n2  Adelie Torgersen             39.5            17.4               186\n3  Adelie Torgersen             40.3            18.0               195\n4  Adelie Torgersen               NA              NA                NA\n5  Adelie Torgersen             36.7            19.3               193\n6  Adelie Torgersen             39.3            20.6               190\n  body_mass_g    sex\n1        3750   MALE\n2        3800 FEMALE\n3        3250 FEMALE\n4          NA   &lt;NA&gt;\n5        3450 FEMALE\n6        3650   MALE",
    "crumbs": [
      "HIPLOT",
      "Treeheatr"
    ]
  },
  {
    "objectID": "Hiplot/172-treeheatr.html#visualization",
    "href": "Hiplot/172-treeheatr.html#visualization",
    "title": "Treeheatr",
    "section": "Visualization",
    "text": "Visualization\n\n# Treeheatr\np &lt;- as.ggplot(function() {\n  print(heat_tree(data,\n    target_lab = \"species\",\n    task = 'classification',\n    show = \"heat-tree\",\n    heat_rel_height = 0.2,\n    panel_space = 0.001,\n    clust_samps = T,\n    clust_target = T,\n    lev_fac = 1.3,\n    cont_legend = F,\n    cate_legend = F\n  ))\n})\n\np\n\n\n\n\n\n\n\nFigure 1: Treeheatr\n\n\n\n\n\nThe upper half of the figure is a decision diagram, and the lower half is a heat map.\nDecision tree: The topmost island has the greatest influence on the classification of species, and can be classified into different species according to different conditions.\nHeatmap: you can observe the changes in the amount of each species under each condition.\nLegend: For each categorical variable, different colors indicate different types; for continuous variables, the higher the value, the lighter the color, otherwise, the darker.",
    "crumbs": [
      "HIPLOT",
      "Treeheatr"
    ]
  },
  {
    "objectID": "Hiplot/011-beanplot.html",
    "href": "Hiplot/011-beanplot.html",
    "title": "Beanplot",
    "section": "",
    "text": "The beanplot is a method of visualizing the distribution characteristics.",
    "crumbs": [
      "HIPLOT",
      "Beanplot"
    ]
  },
  {
    "objectID": "Hiplot/011-beanplot.html#setup",
    "href": "Hiplot/011-beanplot.html#setup",
    "title": "Beanplot",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplotify; beanplot\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplotify\", quietly = TRUE)) {\n  install.packages(\"ggplotify\")\n}\nif (!requireNamespace(\"beanplot\", quietly = TRUE)) {\n  install.packages(\"beanplot\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplotify)\nlibrary(beanplot)",
    "crumbs": [
      "HIPLOT",
      "Beanplot"
    ]
  },
  {
    "objectID": "Hiplot/011-beanplot.html#data-preparation",
    "href": "Hiplot/011-beanplot.html#data-preparation",
    "title": "Beanplot",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data is data set (data on treatment outcomes of different treatment regimens).\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/beanplot/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# convert data structure\nGroupOrder &lt;- as.numeric(factor(data[, 2], levels = unique(data[, 2])))\ndata[, 2] &lt;- paste0(data[,2], \" \", as.numeric(factor(data[, 3])))\ndata &lt;- cbind(data, GroupOrder)\n\n# View data\nhead(data)\n\n     Y     X  Group GroupOrder\n1  4.2 low 1 treat1          1\n2 11.5 low 1 treat1          1\n3  7.3 low 1 treat1          1\n4  5.8 low 1 treat1          1\n5  6.4 low 1 treat1          1\n6 10.0 low 1 treat1          1",
    "crumbs": [
      "HIPLOT",
      "Beanplot"
    ]
  },
  {
    "objectID": "Hiplot/011-beanplot.html#visualization",
    "href": "Hiplot/011-beanplot.html#visualization",
    "title": "Beanplot",
    "section": "Visualization",
    "text": "Visualization\n\n# Beanplot\np &lt;- as.ggplot(function() {\n  beanplot(Y ~ reorder(X, GroupOrder, mean), data = data, ll = 0.04,\n           main = \"Bean Plot\", ylab = \"Y\", xlab = \"X\", side = \"both\",\n           border = NA, horizontal = F, \n           col = list(c(\"#2b70c4\", \"#2b70c4\"),c(\"#e9c216\", \"#e9c216\")),\n           beanlines = \"mean\", overallline = \"mean\", kernel = \"gaussian\")\n  \n  legend(\"bottomright\", fill = c(\"#2b70c4\", \"#e9c216\"),\n         legend = levels(factor(data[, 3])))\n})\n\np\n\n\n\n\n\n\n\nFigure 1: Beanplot",
    "crumbs": [
      "HIPLOT",
      "Beanplot"
    ]
  },
  {
    "objectID": "Hiplot/149-r-code-flow.html",
    "href": "Hiplot/149-r-code-flow.html",
    "title": "R Script Flow",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot R Script Flow plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/r-code-flow?lang=en\nR script flow can realize the visual window of if, else and other logic functions.",
    "crumbs": [
      "HIPLOT",
      "R Script Flow"
    ]
  },
  {
    "objectID": "Hiplot/149-r-code-flow.html#setup",
    "href": "Hiplot/149-r-code-flow.html#setup",
    "title": "R Script Flow",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: flow\n\n\n# Install packages\nif (!requireNamespace(\"flow\", quietly = TRUE)) {\n  install.packages(\"flow\")\n}\n\n# Load packages\nlibrary(flow)",
    "crumbs": [
      "HIPLOT",
      "R Script Flow"
    ]
  },
  {
    "objectID": "Hiplot/149-r-code-flow.html#data-preparation",
    "href": "Hiplot/149-r-code-flow.html#data-preparation",
    "title": "R Script Flow",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data are if, else function code of R.\n\n# Load data\ncode &lt;- function(){\n  if (x &lt; 10) {\n    a &lt;- 1\n  } else {\n    a &lt;- 2\n  }\n  if (a == 2) {\n    c &lt;- d\n  } else {\n    d &lt;- a\n  }\n}",
    "crumbs": [
      "HIPLOT",
      "R Script Flow"
    ]
  },
  {
    "objectID": "Hiplot/149-r-code-flow.html#visualization",
    "href": "Hiplot/149-r-code-flow.html#visualization",
    "title": "R Script Flow",
    "section": "Visualization",
    "text": "Visualization\n\n# R Script Flow\np &lt;- flow_view(code)\n\np\n\n\n\n\n\n\n\nFigure 1: R Script Flow\n\n\n\nThe graph shows that if the variable x&lt;10, a =1, if the variable x&gt;10, a = 2;If a is equal to 2, then c is equal to d, if a is not equal to 2, then d is equal to a.",
    "crumbs": [
      "HIPLOT",
      "R Script Flow"
    ]
  },
  {
    "objectID": "Hiplot/163-scatterpie.html",
    "href": "Hiplot/163-scatterpie.html",
    "title": "Scatterpie",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Scatterpie plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/scatterpie?lang=en\nScatter Pie can be used to visualize data fraction in different space coordinates.",
    "crumbs": [
      "HIPLOT",
      "Scatterpie"
    ]
  },
  {
    "objectID": "Hiplot/163-scatterpie.html#setup",
    "href": "Hiplot/163-scatterpie.html#setup",
    "title": "Scatterpie",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; scatterpie\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"scatterpie\", quietly = TRUE)) {\n  install.packages(\"scatterpie\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(scatterpie)",
    "crumbs": [
      "HIPLOT",
      "Scatterpie"
    ]
  },
  {
    "objectID": "Hiplot/163-scatterpie.html#data-preparation",
    "href": "Hiplot/163-scatterpie.html#data-preparation",
    "title": "Scatterpie",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/scatterpie/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# View data\nhead(data)\n\n            x          y          A        B        C        D\n1  -56.047565  12.665926 0.71040656 2.887786 1.309570 2.892264\n2  -23.017749  -1.427338 0.25688371 1.403569 1.375096 4.945092\n3    7.050839  68.430114 0.24669188 0.524395 3.189978 5.138863\n4   12.928774 -11.288549 0.34754260 3.144288 3.789556 2.295894\n5 -126.506123  29.230687 0.95161857 3.029335 1.048951 2.471943\n6  -68.685285   6.192712 0.04502772 3.203072 2.596539 4.439393",
    "crumbs": [
      "HIPLOT",
      "Scatterpie"
    ]
  },
  {
    "objectID": "Hiplot/163-scatterpie.html#visualization",
    "href": "Hiplot/163-scatterpie.html#visualization",
    "title": "Scatterpie",
    "section": "Visualization",
    "text": "Visualization\n\n# Scatterpie\np &lt;- ggplot() +\n  geom_scatterpie(data = data, aes(x = x, y = y), cols = colnames(data)[-c(1, 2)]) +\n  scale_fill_manual(values = c(\"#E64B35FF\",\"#4DBBD5FF\",\"#00A087FF\",\"#3C5488FF\")) +\n  labs(x=\"x\", y=\"y\") +\n  theme_minimal() +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n\np\n\n\n\n\n\n\n\nFigure 1: Scatterpie",
    "crumbs": [
      "HIPLOT",
      "Scatterpie"
    ]
  },
  {
    "objectID": "Hiplot/081-group-bubble.html",
    "href": "Hiplot/081-group-bubble.html",
    "title": "Group Bubble",
    "section": "",
    "text": "System Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)",
    "crumbs": [
      "HIPLOT",
      "Group Bubble"
    ]
  },
  {
    "objectID": "Hiplot/081-group-bubble.html#setup",
    "href": "Hiplot/081-group-bubble.html#setup",
    "title": "Group Bubble",
    "section": "",
    "text": "System Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)",
    "crumbs": [
      "HIPLOT",
      "Group Bubble"
    ]
  },
  {
    "objectID": "Hiplot/081-group-bubble.html#data-preparation",
    "href": "Hiplot/081-group-bubble.html#data-preparation",
    "title": "Group Bubble",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/group-bubble/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# View data\nhead(data)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa",
    "crumbs": [
      "HIPLOT",
      "Group Bubble"
    ]
  },
  {
    "objectID": "Hiplot/081-group-bubble.html#visualization",
    "href": "Hiplot/081-group-bubble.html#visualization",
    "title": "Group Bubble",
    "section": "Visualization",
    "text": "Visualization\n\n# Group Bubble\np &lt;- ggplot(data = data, aes(x = Sepal.Length, y = Sepal.Width, \n                             size = Petal.Width, color = Species)) +\n  geom_point(alpha = 0.7) +\n  scale_size(range = c(1, 4)) +\n  scale_color_manual(values = c(\"#e04d39\",\"#5bbad6\",\"#1e9f86\")) +\n  theme_bw()\n\np\n\n\n\n\n\n\n\nFigure 1: Group Bubble",
    "crumbs": [
      "HIPLOT",
      "Group Bubble"
    ]
  },
  {
    "objectID": "Hiplot/166-stack-violin.html",
    "href": "Hiplot/166-stack-violin.html",
    "title": "Stack Violin",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Stack Violin plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/stack-violin?lang=en\nThe expression of key genes in each cluster in single-cell transcriptomic (Single Cell RNA-Seq)analysis.",
    "crumbs": [
      "HIPLOT",
      "Simple Funnel Diagram"
    ]
  },
  {
    "objectID": "Hiplot/166-stack-violin.html#setup",
    "href": "Hiplot/166-stack-violin.html#setup",
    "title": "Stack Violin",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: readr; limma; Seurat; ggplot2\n\n\n# Install packages\nif (!requireNamespace(\"readr\", quietly = TRUE)) {\n  install.packages(\"readr\")\n}\nif (!requireNamespace(\"limma\", quietly = TRUE)) {\n  install.packages(\"limma\")\n}\nif (!requireNamespace(\"Seurat\", quietly = TRUE)) {\n  install.packages(\"Seurat\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\n\n# Load packages\nlibrary(readr)\nlibrary(limma)\nlibrary(Seurat)\nlibrary(ggplot2)",
    "crumbs": [
      "HIPLOT",
      "Simple Funnel Diagram"
    ]
  },
  {
    "objectID": "Hiplot/166-stack-violin.html#data-preparation",
    "href": "Hiplot/166-stack-violin.html#data-preparation",
    "title": "Stack Violin",
    "section": "Data Preparation",
    "text": "Data Preparation\nGene expression matrix. Gene expression matrix in all cells and groups in single cell transcriptome analysis (Single Cell RNA-Seq).\n\n# Load data\ndata &lt;- readr::read_delim(\"https://download.hiplot.cn/api/file/fetch/?path=/c622f9b0-54da-11f0-ba5f-8dc116702904/public/demo/stack-violin.txt\")\n\n# convert data structure\ndata &lt;- as.matrix(data)\nrownames(data) &lt;- data[, 1]\nexp &lt;- data[, 2:ncol(data)]\ndimnames &lt;- list(\n  rownames(exp),\n  colnames(exp)\n)\ndata &lt;- matrix(as.numeric(as.matrix(exp)),\n  nrow = nrow(exp),\n  dimnames = dimnames\n)\ndata &lt;- avereps(data,\n  ID = rownames(data)\n)\n## Convert the matrix to a Seurat object and filter the data\npbmc &lt;- CreateSeuratObject(\n  counts = data,\n  project = \"seurat\",\n  min.cells = 0,\n  min.features = 0,\n  names.delim = \"_\",\n)\n## Calculate the percentage of mitochondrial genes using the PercentageFeatureSet function\npbmc[[\"percent.mt\"]] &lt;- PercentageFeatureSet(\n  object = pbmc,\n  pattern = \"^MT-\"\n)\n## Filter the data\npbmc &lt;- subset(\n  x = pbmc,\n  subset = nFeature_RNA &gt; 50 & percent.mt &lt; 5\n)\n## Normalize the data\npbmc &lt;- NormalizeData(\n  object = pbmc,\n  normalization.method = \"LogNormalize\",\n  scale.factor = 10000, verbose = F\n)\n## Extract genes with large coefficient of variation between cells\npbmc &lt;- FindVariableFeatures(\n  object = pbmc,\n  selection.method = \"vst\",\n  nfeatures = 1500, verbose = F\n)\n## Standard preprocessing steps before PCA dimensionality reduction\npbmc &lt;- ScaleData(pbmc)\npbmc &lt;- RunPCA(\n  object = pbmc,\n  npcs = 20,\n  pc.genes = VariableFeatures(object = pbmc)\n)\n## Distribution of p-values for each PC and uniform distribution\npbmc &lt;- JackStraw(\n  object = pbmc,\n  num.replicate = 100\n)\npbmc &lt;- ScoreJackStraw(\n  object = pbmc,\n  dims = 1:20\n)\n## Calculate neighbor distance\npbmc &lt;- FindNeighbors(\n  object = pbmc,\n  dims = 1:20\n)\n## Group cells and optimize standard modularity\npbmc &lt;- FindClusters(\n  object = pbmc,\n  resolution = 0.5\n)\n\nModularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n\nNumber of nodes: 653\nNumber of edges: 19073\n\nRunning Louvain algorithm...\nMaximum modularity in 10 random starts: 0.8659\nNumber of communities: 8\nElapsed time: 0 seconds\n\n## TSNE clustering\npbmc &lt;- RunTSNE(\n  object = pbmc,\n  dims = 1:20\n)\n## Finding differentially expressed features\nlog_fc_filter &lt;- 0.5\nadj_pval_filter &lt;- 0.05\npbmc_markers &lt;- FindAllMarkers(\n  object = pbmc,\n  only.pos = FALSE,\n  min.pct = 0.25,\n  logfc.threshold = log_fc_filter\n)\npbmc_sig_markers &lt;- pbmc_markers[(abs(as.numeric(\n  as.vector(pbmc_markers$avg_logFC)\n)) &gt; log_fc_filter &\n  as.numeric(as.vector(pbmc_markers$p_val_adj)) &lt;\n    adj_pval_filter), ]\n\n# View data\nhead(data[,1:5])\n\n         PT089_P1_A01 PT089_P1_A02 PT089_P1_A03 PT089_P1_A04 PT089_P1_A05\nA1BG             0.00            0            0            0            0\nA1BG-AS1         0.00            0            0            0            0\nA1CF             0.00            0            0            1            0\nA2M              0.00            0            0          339            0\nA2M-AS1          0.00            0            0            0            0\nA2ML1            1.08            0            0            0            0",
    "crumbs": [
      "HIPLOT",
      "Simple Funnel Diagram"
    ]
  },
  {
    "objectID": "Hiplot/166-stack-violin.html#visualization",
    "href": "Hiplot/166-stack-violin.html#visualization",
    "title": "Stack Violin",
    "section": "Visualization",
    "text": "Visualization\n\n# Stack Violin\n## Define the plot function\nmodify_vlnplot &lt;- function(obj,\n                           feature,\n                           pt.size = 0,\n                           plot.margin = unit(c(-0.75, 0, -0.75, 0), \"cm\"),\n                           ...) {\n  p &lt;- VlnPlot(obj,\n    features = feature,\n    pt.size = pt.size,\n    ...\n  )\n\n  p &lt;- p +\n    xlab(\"\") +\n    ylab(feature) +\n    theme(\n      axis.text.x = element_blank(),\n      axis.text.y = element_blank(),\n      axis.ticks.x = element_blank(),\n      axis.ticks.y = element_line(),\n      axis.title.y = element_text(angle = 0, vjust = 0.5),\n      plot.margin = plot.margin,\n      text = element_text(\n        family = \"Arial\"\n      ),\n      plot.title = element_blank(),\n      axis.title = element_text(\n        size = 10\n      ),\n      legend.position = \"none\",\n      legend.direction = \"vertical\",\n      legend.title = element_text(\n        size = 10\n      ),\n      legend.text = element_text(\n        size = 10\n      )\n    ) +\n    scale_fill_manual(values = c(\"#00468BFF\",\"#ED0000FF\",\"#42B540FF\",\"#0099B4FF\",\n                                 \"#925E9FFF\",\"#FDAF91FF\",\"#AD002AFF\",\"#ADB6B6FF\"))\n  return(p)\n}\n\n## main function\nstacked_vln_plot &lt;- function(obj,\n                           features,\n                           pt.size = 0,\n                           plot.margin = unit(c(-0.75, 0, -0.75, 0), \"cm\"),\n                           ...) {\n  plot_list &lt;- purrr::map(\n    features,\n    function(x) {\n      modify_vlnplot(\n        obj = obj,\n        feature = x,\n        ...\n      )\n    }\n  )\n  plot_list[[length(plot_list)]] &lt;- plot_list[[length(plot_list)]] +\n    theme(\n      axis.text.x = element_text(),\n      axis.ticks.x = element_line()\n    )\n  p &lt;- patchwork::wrap_plots(\n    plotlist = plot_list,\n    ncol = 1\n  )\n  return(p)\n}\n\n## plot\np &lt;- stacked_vln_plot(pbmc, c(\"ACTG1\",\"ARF1\",\"ALDOA\",\"ARHGDIA\",\"ACTB\"), pt.size = 0)\n\np\n\n\n\n\n\n\n\nFigure 1: Stack Violin",
    "crumbs": [
      "HIPLOT",
      "Simple Funnel Diagram"
    ]
  },
  {
    "objectID": "Hiplot/064-ggbetweenstats.html",
    "href": "Hiplot/064-ggbetweenstats.html",
    "title": "Betweenstats",
    "section": "",
    "text": "System Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggstatsplot; ggplot2; cowplot\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggstatsplot\", quietly = TRUE)) {\n  install.packages(\"ggstatsplot\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"cowplot\", quietly = TRUE)) {\n  install.packages(\"cowplot\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggstatsplot)\nlibrary(ggplot2)\nlibrary(cowplot)",
    "crumbs": [
      "HIPLOT",
      "Betweenstats"
    ]
  },
  {
    "objectID": "Hiplot/064-ggbetweenstats.html#setup",
    "href": "Hiplot/064-ggbetweenstats.html#setup",
    "title": "Betweenstats",
    "section": "",
    "text": "System Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggstatsplot; ggplot2; cowplot\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggstatsplot\", quietly = TRUE)) {\n  install.packages(\"ggstatsplot\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"cowplot\", quietly = TRUE)) {\n  install.packages(\"cowplot\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggstatsplot)\nlibrary(ggplot2)\nlibrary(cowplot)",
    "crumbs": [
      "HIPLOT",
      "Betweenstats"
    ]
  },
  {
    "objectID": "Hiplot/064-ggbetweenstats.html#data-preparation",
    "href": "Hiplot/064-ggbetweenstats.html#data-preparation",
    "title": "Betweenstats",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/ggbetweenstats/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\naxis &lt;- c(\"mpaa\", \"length\", \"genre\")\ndata[, axis[1]] &lt;- factor(data[, axis[1]], levels = unique(data[, axis[1]]))\ndata[, axis[3]] &lt;- factor(data[, axis[3]], levels = unique(data[, axis[3]]))\n\n# View data\nhead(data)\n\n                                                                 title year\n1                       Lord of the Rings: The Return of the King, The 2003\n2                   Lord of the Rings: The Fellowship of the Ring, The 2001\n3                               Lord of the Rings: The Two Towers, The 2002\n4                                                            Star Wars 1977\n5                       Star Wars: Episode V - The Empire Strikes Back 1980\n6 Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb 1964\n  length budget rating  votes  mpaa  genre\n1    251   94.0    9.0 103631 PG-13 Action\n2    208   93.0    8.8 157608 PG-13 Action\n3    223   94.0    8.8 114797 PG-13 Action\n4    125   11.0    8.8 134640    PG Action\n5    129   18.0    8.8 103706    PG Action\n6     93    1.8    8.7  63471    PG Comedy",
    "crumbs": [
      "HIPLOT",
      "Betweenstats"
    ]
  },
  {
    "objectID": "Hiplot/064-ggbetweenstats.html#visualization",
    "href": "Hiplot/064-ggbetweenstats.html#visualization",
    "title": "Betweenstats",
    "section": "Visualization",
    "text": "Visualization\n\n# Betweenstats\ng &lt;- unique(data[,axis[3]])\nplist &lt;- list()\nfor (i in 1:length(g)) {\n  fil &lt;- data[,axis[3]] == g[i]\n  plist[[i]] &lt;- ggbetweenstats(\n    data = data[fil,], x = mpaa, y = length,\n    title= paste('', axis[3], g[i], sep = ':'),\n    p.adjust.method = \"holm\",\n    plot.type = \"boxviolin\",\n    pairwise.comparisons = T,\n    pairwise.display = \"significant\",\n    effsize.type = \"unbiased\",\n    notch = T,\n    type = \"parametric\",\n    plotgrid.args = list(ncol = 2)) +\n    scale_color_manual(values = c(\"#00468BFF\",\"#ED0000FF\",\"#42B540FF\"))\n}\np &lt;- plot_grid(plotlist = plist, ncol = 2)\n\np\n\n\n\n\n\n\n\nFigure 1: Betweenstats",
    "crumbs": [
      "HIPLOT",
      "Betweenstats"
    ]
  },
  {
    "objectID": "Hiplot/135-pca2.html",
    "href": "Hiplot/135-pca2.html",
    "title": "PCA2",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot PCA2 plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/pca2?lang=en\nPrincipal component analysis (PCA) is a data processing method with “dimension reduction” as the core, replacing multi-index data with a few comprehensive indicators (PCA), and restoring the most essential characteristics of data.",
    "crumbs": [
      "HIPLOT",
      "PCA2"
    ]
  },
  {
    "objectID": "Hiplot/135-pca2.html#setup",
    "href": "Hiplot/135-pca2.html#setup",
    "title": "PCA2",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; FactoMineR; factoextra\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"FactoMineR\", quietly = TRUE)) {\n  install.packages(\"FactoMineR\")\n}\nif (!requireNamespace(\"factoextra\", quietly = TRUE)) {\n  install.packages(\"factoextra\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(FactoMineR)\nlibrary(factoextra)",
    "crumbs": [
      "HIPLOT",
      "PCA2"
    ]
  },
  {
    "objectID": "Hiplot/135-pca2.html#data-preparation",
    "href": "Hiplot/135-pca2.html#data-preparation",
    "title": "PCA2",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data are set (gene name and corresponding gene expression value) and sample information (sample name and grouping).\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/pca2/data.json\")$exampleData[[1]]$textarea[[1]])\ndata &lt;- as.data.frame(data)\nsample_info &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/pca2/data.json\")$exampleData[[1]]$textarea[[2]])\nsample_info &lt;- as.data.frame(sample_info)\n\n# Convert data structure\nrow.names(sample_info) &lt;- sample_info[,1]\nsample_info &lt;- sample_info[colnames(data)[-1],]\n## tsne\nrownames(data) &lt;- data[, 1]\ndata &lt;- as.matrix(data[, -1])\npca_data &lt;- PCA(t(as.matrix(data)), scale.unit = TRUE, ncp = 5, graph = FALSE)\n\n# View data\nhead(data[,1:5])\n\n              M1       M2        M3       M4       M5\nGBP4    6.599344 5.226266  3.693288 3.938501 4.527193\nBCAT1   5.760380 4.892783  5.448924 3.485413 3.855669\nCMPK2   9.561905 4.549168  3.998655 5.614384 3.904793\nSTOX2   8.396409 8.717055  8.039064 7.643060 9.274649\nPADI2   8.419766 8.268430  8.451181 9.200732 8.598207\nSCARNA5 7.653074 5.780393 10.633550 5.913684 8.805605",
    "crumbs": [
      "HIPLOT",
      "PCA2"
    ]
  },
  {
    "objectID": "Hiplot/135-pca2.html#visualization",
    "href": "Hiplot/135-pca2.html#visualization",
    "title": "PCA2",
    "section": "Visualization",
    "text": "Visualization\n\n# PCA2\np &lt;- fviz_pca_ind(pca_data, geom.ind = \"point\", pointsize = 6, addEllipses = TRUE,\n                  mean.point = F, col.ind = sample_info[,\"Group\"]) +\n  ggtitle(\"Principal Component Analysis\") +\n  scale_fill_manual(values = c(\"#00468BFF\",\"#ED0000FF\")) +\n  scale_color_manual(values = c(\"#00468BFF\",\"#ED0000FF\")) +\n  theme_bw() +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n\np\n\n\n\n\n\n\n\nFigure 1: PCA2\n\n\n\n\n\nDifferent colors represent different samples, which can explain the relationship between principal components and original variables. For example, M1 has a greater contribution to PC1, while M8 has a greater negative correlation with PC1.",
    "crumbs": [
      "HIPLOT",
      "PCA2"
    ]
  },
  {
    "objectID": "Hiplot/017-bumpchart.html",
    "href": "Hiplot/017-bumpchart.html",
    "title": "Bumpchart",
    "section": "",
    "text": "Bump chart can be used to display the change of grouped values.",
    "crumbs": [
      "HIPLOT",
      "Bumpchart"
    ]
  },
  {
    "objectID": "Hiplot/017-bumpchart.html#setup",
    "href": "Hiplot/017-bumpchart.html#setup",
    "title": "Bumpchart",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2; ggbump; dplyr\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"ggbump\", quietly = TRUE)) {\n  install.packages(\"ggbump\")\n}\nif (!requireNamespace(\"dplyr\", quietly = TRUE)) {\n  install.packages(\"dplyr\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(ggbump)\nlibrary(dplyr)",
    "crumbs": [
      "HIPLOT",
      "Bumpchart"
    ]
  },
  {
    "objectID": "Hiplot/017-bumpchart.html#data-preparation",
    "href": "Hiplot/017-bumpchart.html#data-preparation",
    "title": "Bumpchart",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/bumpchart/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# View data\nhead(data)\n\n     x y group\n1 2019 4     A\n2 2020 2     A\n3 2021 2     A\n4 2019 3     B\n5 2020 1     B\n6 2021 4     B",
    "crumbs": [
      "HIPLOT",
      "Bumpchart"
    ]
  },
  {
    "objectID": "Hiplot/017-bumpchart.html#visualization",
    "href": "Hiplot/017-bumpchart.html#visualization",
    "title": "Bumpchart",
    "section": "Visualization",
    "text": "Visualization\n\n# Bumpchart\np &lt;- ggplot(data, aes(x = x, y = y, color = group)) +\n  geom_bump(size = 1.5) +\n  geom_point(size = 5) +\n  geom_text(data = data %&gt;% filter(x == min(x)),\n            aes(x = x - 0.1, label = group),\n            size = 5, hjust = 1) +\n  geom_text(data = data %&gt;% filter(x == max(x)),\n            aes(x = x + 0.1, label = group),\n            size = 5, hjust = 0) +\n  theme_void() +\n  theme(legend.position = \"none\") +\n  scale_color_manual(values = c(\"#0571B0\",\"#92C5DE\",\"#F4A582\",\"#CA0020\"))\n\np\n\n\n\n\n\n\n\nFigure 1: Bumpchart",
    "crumbs": [
      "HIPLOT",
      "Bumpchart"
    ]
  },
  {
    "objectID": "Hiplot/056-flowerplot.html",
    "href": "Hiplot/056-flowerplot.html",
    "title": "Flower plot",
    "section": "",
    "text": "Flower plot with multiple sets.",
    "crumbs": [
      "HIPLOT",
      "Flower plot"
    ]
  },
  {
    "objectID": "Hiplot/056-flowerplot.html#setup",
    "href": "Hiplot/056-flowerplot.html#setup",
    "title": "Flower plot",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; flowerplot; ggplotify\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"flowerplot\", quietly = TRUE)) {\n  install_github(\"dongwei1220/flowerplot\")\n}\nif (!requireNamespace(\"ggplotify\", quietly = TRUE)) {\n  install.packages(\"ggplotify\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(flowerplot)\nlibrary(ggplotify)",
    "crumbs": [
      "HIPLOT",
      "Flower plot"
    ]
  },
  {
    "objectID": "Hiplot/056-flowerplot.html#data-preparation",
    "href": "Hiplot/056-flowerplot.html#data-preparation",
    "title": "Flower plot",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/flowerplot/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# View data\nhead(data)\n\n     Set1   Set2  Set3  Set4   Set5    Set6   Set7     Set8\n1   ZMIZ1  ADCY5  TNS1  TNS1   TNS1   ZMIZ1 SORBS1     RGS3\n2    TNS1  ACTN4 ZMIZ1 ZMIZ1  ZMIZ1    TNS1   TNS1    FHOD3\n3   CASZ1 SORBS1  RXRA  RXRA TSPAN9   CASZ1  ZMIZ1 PPARGC1B\n4    NFIC   TNS1 AHDC1 NCOR2   MIDN    NFIC  RBM20     NNMT\n5 CACNA1C  ZMIZ1 ACTN4  MIDN  NCOR2 CACNA1C TSPAN9   SORBS2\n6   AHDC1  RBM20  MIDN AHDC1  AHDC1   AHDC1  SYNPO   FAM53B",
    "crumbs": [
      "HIPLOT",
      "Flower plot"
    ]
  },
  {
    "objectID": "Hiplot/056-flowerplot.html#visualization",
    "href": "Hiplot/056-flowerplot.html#visualization",
    "title": "Flower plot",
    "section": "Visualization",
    "text": "Visualization\n\n# Flower plot\np &lt;- as.ggplot(function(){\n  flowerplot(\n    flower_dat = data,\n    angle = 90,\n    a = 0.5,\n    b = 2,\n    r = 1,\n    ellipse_col = \"RdBu\",\n    circle_col = \"#FFFFFF\",\n    label_text_cex = 1\n  )})\n\np\n\n\n\n\n\n\n\nFigure 1: Flower plot",
    "crumbs": [
      "HIPLOT",
      "Flower plot"
    ]
  },
  {
    "objectID": "Hiplot/177-upset-plot.html",
    "href": "Hiplot/177-upset-plot.html",
    "title": "Upset Plot",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Upset Plot plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/upset-plot?lang=en\nUpset can be used to show the interactive relationship between collections.",
    "crumbs": [
      "HIPLOT",
      "Upset Plot"
    ]
  },
  {
    "objectID": "Hiplot/177-upset-plot.html#setup",
    "href": "Hiplot/177-upset-plot.html#setup",
    "title": "Upset Plot",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; VennDiagram; ComplexHeatmap; ggplotify; ggplot2\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"VennDiagram\", quietly = TRUE)) {\n  install.packages(\"VennDiagram\")\n}\nif (!requireNamespace(\"ComplexHeatmap\", quietly = TRUE)) {\n  install_github(\"jokergoo/ComplexHeatmap\")\n}\nif (!requireNamespace(\"ggplotify\", quietly = TRUE)) {\n  install.packages(\"ggplotify\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(VennDiagram)\nlibrary(ComplexHeatmap)\nlibrary(ggplotify)\nlibrary(ggplot2)",
    "crumbs": [
      "HIPLOT",
      "Upset Plot"
    ]
  },
  {
    "objectID": "Hiplot/177-upset-plot.html#data-preparation",
    "href": "Hiplot/177-upset-plot.html#data-preparation",
    "title": "Upset Plot",
    "section": "Data Preparation",
    "text": "Data Preparation\nThere are two types of data tables: list and binary. The list format is that each column is a set and contains all the elements corresponding to the set. In the binary format, the first column is all the elements of all sets, and the subsequent columns are a numeric matrix composed of 0 and 1. 1 indicates that the corresponding row element exists in a certain set, and 0 indicates that it does not exist.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/upset-plot/data.json\")$exampleData[[1]]$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# convert data structure\nfor (i in seq_len(ncol(data))) {\n  data[is.na(data[, i]), i] &lt;- \"\"\n}\ndata2 &lt;- as.list(data)\ndata2 &lt;- lapply(data2, function(x) {x[x != \"\"]})\ndata2 &lt;- list_to_matrix(data2)\nm = make_comb_mat(data2, mode = \"distinct\")\nss = set_size(m)\ncs = comb_size(m)\nset_order &lt;- order(ss)\ncomb_order &lt;- order(comb_degree(m), -cs)\n\n# View data\nhead(data)\n\n     Set1      Set2     Set3      Set4    Set5      Set6    Set7     Set8\n1   ISG15      HES5     DVL1   MATP6P1 FAM132A   FAM132A FAM132A  TNFRSF4\n2  TTLL10  AURKAIP1 ARHGEF16   MIR551A    AGRN   MIR551A WBP1LP6   WASH7P\n3    HES4 LINC00982   OR4F16  C1orf222 WBP1LP6   MIR200B   PANK4   TMEM52\n4  OR4G4P    FAM87B      SKI   MIR200B  KLHL17    ATAD3C  OR4G4P   MMP23B\n5 MND2P28       SKI   WASH7P LINC00115  FAM41C   ANKRD65   SSU72   CDK11B\n6  FAM87B     GABRD    MEGF6    ATAD3B   PANK4 LINC01128 MND2P28 C1orf170",
    "crumbs": [
      "HIPLOT",
      "Upset Plot"
    ]
  },
  {
    "objectID": "Hiplot/177-upset-plot.html#visualization",
    "href": "Hiplot/177-upset-plot.html#visualization",
    "title": "Upset Plot",
    "section": "Visualization",
    "text": "Visualization\n\n# Upset Plot\np &lt;- as.ggplot(function(){\n  top_annotation &lt;- HeatmapAnnotation(\n    Intersections = anno_barplot(\n      cs, ylim = c(0, max(cs)*1.1), \n      border = FALSE, \n      gp = gpar(fill = \"#000000\", fontsize = 10), \n      height = unit(5, \"cm\")\n    ), \n    annotation_name_side = \"left\", \n    annotation_name_rot = 90\n  )\n  \n  left_annotation &lt;- rowAnnotation(\n    Numbers = anno_barplot(-ss, axis_param = list(\n      at = seq(-max(ss), 0, round(max(ss)/5)),\n      labels = rev(seq(0, max(ss), round(max(ss)/5))),\n      labels_rot = 0),\n      baseline = 0,\n      border = FALSE, \n      gp = gpar(fill = \"#000000\", fontsize = 10), \n      width = unit(4, \"cm\")\n    ),\n    set_name = anno_text(set_name(m), location = 0.5,  just = \"center\",\n                         width = max_text_width(set_name(m)) + unit(5, \"mm\"))\n  )\n  \n  ht = UpSet(m, comb_col = \"#000000\", bg_col = \"#F0F0F0\", bg_pt_col = \"#CCCCCC\",\n             pt_size = unit(3, \"mm\"), lwd = 2, set_order = set_order,\n             comb_order = comb_order, top_annotation = top_annotation,\n             left_annotation = left_annotation,  right_annotation = NULL,\n             show_row_names = FALSE)\n  ht = draw(ht)\n  od = column_order(ht)\n  decorate_annotation(\"Intersections\", {\n    grid.text(cs[od], x = seq_along(cs), y = unit(cs[od], \"native\") + unit(2, \"pt\"),\n              default.units = \"native\", just = c(\"left\", \"bottom\"), \n              gp = gpar(fontsize = 10, col = \"#000000\",\n              fontfamily = \"Arial\"), hjust = 0.5)\n  })\n})\np &lt;- p + ggtitle(\"Upset Plot\") + \n  theme(plot.title = element_text(hjust = 0.6))\n\np\n\n\n\n\n\n\n\nFigure 1: Upset Plot",
    "crumbs": [
      "HIPLOT",
      "Upset Plot"
    ]
  },
  {
    "objectID": "Hiplot/024-circular-pie-chart.html",
    "href": "Hiplot/024-circular-pie-chart.html",
    "title": "Circular Pie Chart",
    "section": "",
    "text": "Another form of the pie chart.",
    "crumbs": [
      "HIPLOT",
      "Circular Pie Chart"
    ]
  },
  {
    "objectID": "Hiplot/024-circular-pie-chart.html#setup",
    "href": "Hiplot/024-circular-pie-chart.html#setup",
    "title": "Circular Pie Chart",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)",
    "crumbs": [
      "HIPLOT",
      "Circular Pie Chart"
    ]
  },
  {
    "objectID": "Hiplot/024-circular-pie-chart.html#data-preparation",
    "href": "Hiplot/024-circular-pie-chart.html#data-preparation",
    "title": "Circular Pie Chart",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/circular-pie-chart/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# convert data structure\ndata$draw_percent &lt;- data[[\"values\"]] / sum(data[[\"values\"]]) * 100\ndata$draw_class &lt;- 1\ndata2 &lt;- data\ndata2[[\"values\"]] &lt;- 0\ndata2$draw_class &lt;- 0\ndata &lt;- rbind(data, data2)\nfiltered_data &lt;- data[data[[\"values\"]] &gt; 0,]\n\n# View data\nhead(data)\n\n  labels values draw_percent draw_class\n1      A     20    16.666667          1\n2      B     30    25.000000          1\n3      C     15    12.500000          1\n4      D     10     8.333333          1\n5      E     45    37.500000          1\n6      A      0    16.666667          0",
    "crumbs": [
      "HIPLOT",
      "Circular Pie Chart"
    ]
  },
  {
    "objectID": "Hiplot/024-circular-pie-chart.html#visualization",
    "href": "Hiplot/024-circular-pie-chart.html#visualization",
    "title": "Circular Pie Chart",
    "section": "Visualization",
    "text": "Visualization\n\n# Circular Pie Chart\np &lt;- ggplot(data, aes(x = draw_class, y = values, fill = labels)) +\n  geom_bar(position = \"stack\", stat = \"identity\", width = 0.7) +\n  geom_text(data = filtered_data, aes(label = sprintf(\"%.2f%%\", draw_percent)),\n            position = position_stack(vjust = 0.5), size = 3) +\n  coord_polar(theta = \"y\") +\n  xlab(\"\") +\n  ylab(\"Pie Chart\") +\n  scale_fill_manual(values = c(\"#e64b35ff\",\"#4dbbd5ff\",\"#00a087ff\",\"#3c5488ff\",\"#f39b7fff\")) +\n  theme_minimal() +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(color = \"black\"),\n        axis.text.y = element_blank(),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank())\n\np\n\n\n\n\n\n\n\nFigure 1: Circular Pie Chart",
    "crumbs": [
      "HIPLOT",
      "Circular Pie Chart"
    ]
  },
  {
    "objectID": "Hiplot/009-barplot-line-multiple.html",
    "href": "Hiplot/009-barplot-line-multiple.html",
    "title": "Multiple Barplot&Line",
    "section": "",
    "text": "Displaying multiple bar or line plot in one diagram.",
    "crumbs": [
      "HIPLOT",
      "Multiple Barplot&Line"
    ]
  },
  {
    "objectID": "Hiplot/009-barplot-line-multiple.html#setup",
    "href": "Hiplot/009-barplot-line-multiple.html#setup",
    "title": "Multiple Barplot&Line",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2; reshape2; ggthemes\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"reshape2\", quietly = TRUE)) {\n  install.packages(\"reshape2\")\n}\nif (!requireNamespace(\"ggthemes\", quietly = TRUE)) {\n  install.packages(\"ggthemes\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(reshape2)\nlibrary(ggthemes)",
    "crumbs": [
      "HIPLOT",
      "Multiple Barplot&Line"
    ]
  },
  {
    "objectID": "Hiplot/009-barplot-line-multiple.html#data-preparation",
    "href": "Hiplot/009-barplot-line-multiple.html#data-preparation",
    "title": "Multiple Barplot&Line",
    "section": "Data Preparation",
    "text": "Data Preparation\nData frame with multiple columns data (Numeric).\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/barplot-line-multiple/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# convert data structure\ndata_melt &lt;- melt(data, id.vars = colnames(data)[1])\ndata_melt[, 1] &lt;- factor(data_melt[, 1], level = unique(data_melt[, 1]))\n\n# View data\nhead(data)\n\n  age height weight math biology english chinese\n1  12    158    100  120      90     115     140\n2  15    160    110  145      80     120     120\n3  18    175    120  132      95     118     110\n4  20    176    121  124      99     118     136\n5  21    176    120  135      98     114     150\n6  22    177    124  140      87     110     150",
    "crumbs": [
      "HIPLOT",
      "Multiple Barplot&Line"
    ]
  },
  {
    "objectID": "Hiplot/009-barplot-line-multiple.html#visualization",
    "href": "Hiplot/009-barplot-line-multiple.html#visualization",
    "title": "Multiple Barplot&Line",
    "section": "Visualization",
    "text": "Visualization\n\n1. Multiple Line\n\n# Multiple Line\np &lt;- ggplot(data = data_melt, aes(x = age, y = value, group = variable,\n                                  colour = variable)) +\n  geom_line(alpha = 1, size = 1) +\n  geom_point(aes(shape = variable), alpha = 1, size = 3) +\n  labs(title = \"Line (Multiple)\", x = \"X Lable\", y = \"Value\") +\n  scale_color_manual(values = c(\"#3B4992FF\",\"#EE0000FF\",\"#008B45FF\",\"#631879FF\",\n                               \"#008280FF\",\"#BB0021FF\")) +\n  theme_stata() +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n\np\n\n\n\n\n\n\n\nFigure 1: Multiple Line\n\n\n\n\n\n\n\n2. Multiple Barplot\n\n# Multiple Barplot\np &lt;- ggplot(data = data_melt, aes(x = age, y = value, fill = variable)) +\n  geom_bar(stat = \"identity\", position = position_dodge(), colour = \"black\",\n           alpha = 1) +\n  labs(title = \"\", x = \"X Lable\", y = \"Value\") +\n  \n  scale_fill_manual(values = c(\"#3B4992FF\",\"#EE0000FF\",\"#008B45FF\",\"#631879FF\",\n                               \"#008280FF\",\"#BB0021FF\")) +\n  theme_stata() +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n\np\n\n\n\n\n\n\n\nFigure 2: Multiple Barplot",
    "crumbs": [
      "HIPLOT",
      "Multiple Barplot&Line"
    ]
  },
  {
    "objectID": "Hiplot/160-scatter-gradient.html",
    "href": "Hiplot/160-scatter-gradient.html",
    "title": "Gradient Scatter",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Gradient Scatter plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/scatter-gradient?lang=en\nTwo-dimensional spatial scatter to demonstrate multi-numerical variable relationships.",
    "crumbs": [
      "HIPLOT",
      "Gradient Scatter"
    ]
  },
  {
    "objectID": "Hiplot/160-scatter-gradient.html#setup",
    "href": "Hiplot/160-scatter-gradient.html#setup",
    "title": "Gradient Scatter",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; grafify; ggplot2\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"grafify\", quietly = TRUE)) {\n  install.packages(\"grafify\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(grafify)\nlibrary(ggplot2)",
    "crumbs": [
      "HIPLOT",
      "Gradient Scatter"
    ]
  },
  {
    "objectID": "Hiplot/160-scatter-gradient.html#data-preparation",
    "href": "Hiplot/160-scatter-gradient.html#data-preparation",
    "title": "Gradient Scatter",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/scatter-gradient/data.json\")$exampleData[[1]]$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# View data\nhead(data)\n\n                car  mpg cyl disp  hp drat    wt  qsec vs am gear carb\n1         Mazda RX4 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\n2     Mazda RX4 Wag 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\n3        Datsun 710 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n4    Hornet 4 Drive 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\n5 Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\n6           Valiant 18.1   6  225 105 2.76 3.460 20.22  1  0    3    1",
    "crumbs": [
      "HIPLOT",
      "Gradient Scatter"
    ]
  },
  {
    "objectID": "Hiplot/160-scatter-gradient.html#visualization",
    "href": "Hiplot/160-scatter-gradient.html#visualization",
    "title": "Gradient Scatter",
    "section": "Visualization",
    "text": "Visualization\n\n# Gradient Scatter\np &lt;- ggplot(data, aes(x = mpg, y = disp)) + \n  geom_point(aes(fill = gear), size = 5, alpha = 1, shape = 21, stroke = 0.5) +\n  labs(fill = \"gear\", color = \"gear\") +\n  theme_classic(base_size = 10) +\n  theme(strip.background = element_blank()) +\n  guides(x = guide_axis(angle = 0)) +\n  scale_fill_gradient(low = \"#00438E\", high = \"#E43535\") +\n  scale_color_gradient(low = \"#00438E\", high = \"#E43535\") + \n  guides(fill = guide_legend(title = \"gear\"),\n         size = guide_legend(title = \"gear\")) +\n  ggtitle(\"Scatter-gradient Plot\") +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n\np\n\n\n\n\n\n\n\nFigure 1: Gradient Scatter",
    "crumbs": [
      "HIPLOT",
      "Gradient Scatter"
    ]
  },
  {
    "objectID": "Hiplot/076-ggwordcloud.html",
    "href": "Hiplot/076-ggwordcloud.html",
    "title": "ggwordcloud",
    "section": "",
    "text": "The word cloud is to visualize the “keywords” that appear frequently in the web text by forming a “keyword cloud layer” or “keyword rendering”.",
    "crumbs": [
      "HIPLOT",
      "ggwordcloud"
    ]
  },
  {
    "objectID": "Hiplot/076-ggwordcloud.html#setup",
    "href": "Hiplot/076-ggwordcloud.html#setup",
    "title": "ggwordcloud",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggwordcloud\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggwordcloud\", quietly = TRUE)) {\n  install.packages(\"ggwordcloud\")\n}\nif (!requireNamespace(\"curl\", quietly = TRUE)) {\n  install.packages(\"curl\")\n}\nif (!requireNamespace(\"png\", quietly = TRUE)) {\n  install.packages(\"png\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggwordcloud)\nlibrary(curl)\nlibrary(png)",
    "crumbs": [
      "HIPLOT",
      "ggwordcloud"
    ]
  },
  {
    "objectID": "Hiplot/076-ggwordcloud.html#data-preparation",
    "href": "Hiplot/076-ggwordcloud.html#data-preparation",
    "title": "ggwordcloud",
    "section": "Data Preparation",
    "text": "Data Preparation\nLoad data nouns and noun frequencies.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/ggwordcloud/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\ninmask &lt;- \"https://download.hiplot.cn/api/file/fetch/?path=public/demo/ggwordcloud/hearth.png\"\n\n# Convert data structure\ncol &lt;- data[, 2]\ndata &lt;- cbind(data, col)\n\n# View data\nhead(data)\n\n    word freq col\n1    oil   85  85\n2   said   73  73\n3 prices   48  48\n4   opec   42  42\n5    mln   31  31\n6    the   26  26",
    "crumbs": [
      "HIPLOT",
      "ggwordcloud"
    ]
  },
  {
    "objectID": "Hiplot/076-ggwordcloud.html#visualization",
    "href": "Hiplot/076-ggwordcloud.html#visualization",
    "title": "ggwordcloud",
    "section": "Visualization",
    "text": "Visualization\n\n# ggwordcloud\np &lt;- ggplot(data, aes(label = word, size = freq, color = col)) +\n  scale_size_area(max_size = 40) +\n  theme_minimal() + \n  geom_text_wordcloud_area(\n    mask = png::readPNG(curl::curl_fetch_memory(inmask)$content), \n    rm_outside = TRUE) +\n  scale_color_gradient(low = \"#8B0000\", high = \"#FF0000\")\n\np\n\n\n\n\n\n\n\nFigure 1: ggwordcloud\n\n\n\n\n\nDisplay the proportion of nouns in the word cloud graph according to the frequency of nouns.",
    "crumbs": [
      "HIPLOT",
      "ggwordcloud"
    ]
  },
  {
    "objectID": "Hiplot/036-d3-wordcloud.html",
    "href": "Hiplot/036-d3-wordcloud.html",
    "title": "D3 Wordcloud",
    "section": "",
    "text": "Display the wordcloud。",
    "crumbs": [
      "HIPLOT",
      "D3 Wordcloud"
    ]
  },
  {
    "objectID": "Hiplot/036-d3-wordcloud.html#setup",
    "href": "Hiplot/036-d3-wordcloud.html#setup",
    "title": "D3 Wordcloud",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; d3wordcloud\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"d3wordcloud\", quietly = TRUE)) {\n  devtools::install_github(\"jbkunst/d3wordcloud\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(d3wordcloud)",
    "crumbs": [
      "HIPLOT",
      "D3 Wordcloud"
    ]
  },
  {
    "objectID": "Hiplot/036-d3-wordcloud.html#data-preparation",
    "href": "Hiplot/036-d3-wordcloud.html#data-preparation",
    "title": "D3 Wordcloud",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/d3-wordcloud/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# convert data structure\nrow.names(data) &lt;- data[, 1]\n\n# View data\nhead(data)\n\n         word freq\noil       oil   85\nsaid     said   73\nprices prices   48\nopec     opec   42\nmln       mln   31\nthe       the   26",
    "crumbs": [
      "HIPLOT",
      "D3 Wordcloud"
    ]
  },
  {
    "objectID": "Hiplot/036-d3-wordcloud.html#visualization",
    "href": "Hiplot/036-d3-wordcloud.html#visualization",
    "title": "D3 Wordcloud",
    "section": "Visualization",
    "text": "Visualization\n\n# D3 Wordcloud\np &lt;- d3wordcloud(\n  words = data[, 1], \n  freqs = data[, 2],\n  padding = 0,\n  rotate.min = 0,\n  rotate.max = 0,\n  size.scale = \"linear\",\n  color.scale = \"linear\",\n  spiral = \"archimedean\",\n  font = \"Arial\",\n  rangesizefont = c(10, 90)\n)\n\np\n\n\n\n\n\n\n\nFigure 1: D3 Wordcloud",
    "crumbs": [
      "HIPLOT",
      "D3 Wordcloud"
    ]
  },
  {
    "objectID": "Hiplot/054-fan.html",
    "href": "Hiplot/054-fan.html",
    "title": "Fan Plot",
    "section": "",
    "text": "The pie chart is a statistical chart designed to clearly show the percentage of each data group by the size of the pie.",
    "crumbs": [
      "HIPLOT",
      "Fan Plot"
    ]
  },
  {
    "objectID": "Hiplot/054-fan.html#setup",
    "href": "Hiplot/054-fan.html#setup",
    "title": "Fan Plot",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; plotrix; ggplotify\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"plotrix\", quietly = TRUE)) {\n  install.packages(\"plotrix\")\n}\nif (!requireNamespace(\"ggplotify\", quietly = TRUE)) {\n  install.packages(\"ggplotify\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(plotrix)\nlibrary(ggplotify)",
    "crumbs": [
      "HIPLOT",
      "Fan Plot"
    ]
  },
  {
    "objectID": "Hiplot/054-fan.html#data-preparation",
    "href": "Hiplot/054-fan.html#data-preparation",
    "title": "Fan Plot",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data are different groups and their data.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/fan/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# View data\nhead(data)\n\n   group value\n1 Group1    13\n2 Group2    34\n3 Group3    21\n4 Group4    43",
    "crumbs": [
      "HIPLOT",
      "Fan Plot"
    ]
  },
  {
    "objectID": "Hiplot/054-fan.html#visualization",
    "href": "Hiplot/054-fan.html#visualization",
    "title": "Fan Plot",
    "section": "Visualization",
    "text": "Visualization\n\n# Fan Plot\np &lt;- as.ggplot(function() {\n  fan.plot(data[, 2], main = \"\", labels = as.character(data[, 1]),\n           col = c(\"#E64B35FF\",\"#4DBBD5FF\",\"#00A087FF\",\"#3C5488FF\"))\n  })\n\np\n\n\n\n\n\n\n\nFigure 1: Fan Plot\n\n\n\n\n\nDifferent colors represent different groups and different areas represent data and proportion.",
    "crumbs": [
      "HIPLOT",
      "Fan Plot"
    ]
  },
  {
    "objectID": "Hiplot/142-point-sd.html",
    "href": "Hiplot/142-point-sd.html",
    "title": "Point (SD)",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Point (SD) plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/point-sd?lang=en\nDisplaying the standard deviation (SD) of multi-group data.",
    "crumbs": [
      "HIPLOT",
      "Point (SD)"
    ]
  },
  {
    "objectID": "Hiplot/142-point-sd.html#setup",
    "href": "Hiplot/142-point-sd.html#setup",
    "title": "Point (SD)",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; grafify; dplyr\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"grafify\", quietly = TRUE)) {\n  install.packages(\"grafify\")\n}\nif (!requireNamespace(\"dplyr\", quietly = TRUE)) {\n  install.packages(\"dplyr\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(grafify)\nlibrary(dplyr)",
    "crumbs": [
      "HIPLOT",
      "Point (SD)"
    ]
  },
  {
    "objectID": "Hiplot/142-point-sd.html#data-preparation",
    "href": "Hiplot/142-point-sd.html#data-preparation",
    "title": "Point (SD)",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/point-sd/data.json\")$exampleData[[1]]$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\ny &lt;- \"Doubling_time\"\ngroup &lt;- \"Student\"\ndata[, group] &lt;- factor(data[, group], levels = unique(data[, group]))\ndata &lt;- data %&gt;% \n  mutate(median = median(get(y), na.rm = TRUE),\n         mean = mean(get(y), na.rm = TRUE))\n\n# View data\nhead(data)\n\n  Experiment Student Doubling_time facet   median     mean\n1       Exp1       A      17.36765    F1 20.18114 19.91642\n2       Exp1       B      18.04119    F1 20.18114 19.91642\n3       Exp1       C      18.70120    F1 20.18114 19.91642\n4       Exp1       D      20.06762    F1 20.18114 19.91642\n5       Exp1       E      20.19807    F2 20.18114 19.91642\n6       Exp1       F      22.11908    F2 20.18114 19.91642",
    "crumbs": [
      "HIPLOT",
      "Point (SD)"
    ]
  },
  {
    "objectID": "Hiplot/142-point-sd.html#visualization",
    "href": "Hiplot/142-point-sd.html#visualization",
    "title": "Point (SD)",
    "section": "Visualization",
    "text": "Visualization\n\n# Point (SD)\np &lt;- plot_point_sd(data = data, Student, Doubling_time, symsize = 5,\n                   symthick = 0.5, s_alpha = 1, ewid = 0, symshape = 21,\n                   all_alpha = 0) +\n  geom_hline(aes(yintercept = median), colour = 'black', linetype = 2, \n             size = 0.5) +\n  xlab(group) + ylab(y) + \n  guides(fill = guide_legend(title = group)) +\n  ggtitle(\"Point-SD\") +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n    \n  \np\n\n\n\n\n\n\n\nFigure 1: Point (SD)",
    "crumbs": [
      "HIPLOT",
      "Point (SD)"
    ]
  },
  {
    "objectID": "Hiplot/187-pca.html",
    "href": "Hiplot/187-pca.html",
    "title": "PCA",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot PCA plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/pca?lang=en\nPrincipal component analysis (PCA) is a data processing method with “dimension reduction” as the core, replacing multi-index data with a few comprehensive indicators (PCA), and restoring the most essential characteristics of data.",
    "crumbs": [
      "HIPLOT",
      "PCA"
    ]
  },
  {
    "objectID": "Hiplot/187-pca.html#setup",
    "href": "Hiplot/187-pca.html#setup",
    "title": "PCA",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; gmodels, ggpubr, ggplot2\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"gmodels\", quietly = TRUE)) {\n  install.packages(\"gmodels\")\n}\nif (!requireNamespace(\"ggpubr\", quietly = TRUE)) {\n  install.packages(\"ggpubr\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(gmodels)\nlibrary(ggpubr)\nlibrary(ggplot2)",
    "crumbs": [
      "HIPLOT",
      "PCA"
    ]
  },
  {
    "objectID": "Hiplot/187-pca.html#data-preparation",
    "href": "Hiplot/187-pca.html#data-preparation",
    "title": "PCA",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data are set (gene name and corresponding gene expression value) and sample information (sample name and grouping).\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/pca/data.json\")$exampleData[[1]]$textarea[[1]])\ndata &lt;- as.data.frame(data)\ngroup &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/pca/data.json\")$exampleData[[1]]$textarea[[2]])\ngroup &lt;- as.data.frame(group)\n\n# Convert data structure\nrownames(data) &lt;- data[, 1]\ndata &lt;- as.matrix(data[, -1])\npca_info &lt;- fast.prcomp(data)\n## Create configuration\nconf &lt;- list(\n  dataArg = list(\n    list(list(value = \"group\")),  # Color by group\n    list(list(value = \"\"))         # No shape group\n  ),\n  general = list(\n    title = \"Principal Component Analysis\",\n    palette = \"Set1\"\n  )\n)\n## Perform PCA - Note: data must be transposed because PCA analyzes samples (columns)\npca_info &lt;- prcomp(t(data), scale. = TRUE)\n## Prepare plot data\naxis &lt;- sapply(conf$dataArg[[1]], function(x) x$value)\n## Process color grouping\nif (is.null(axis[1]) || axis[1] == \"\") {\n  colorBy &lt;- rep('ALL', ncol(data))\n} else {\n  ## Ensure sample order matches\n  colorBy &lt;- group[match(colnames(data), group$sample), axis[1]]\n}\ncolorBy &lt;- factor(colorBy, levels = unique(colorBy))\n## Create PCA data frame\npca_data &lt;- data.frame(\n  sample = rownames(pca_info$x),\n  PC1 = pca_info$x[, 1],\n  PC2 = pca_info$x[, 2],\n  colorBy = colorBy\n)\n## Calculate explained variance\nvariance_explained &lt;- round(pca_info$sdev^2 / sum(pca_info$sdev^2) * 100, 1)\n\n# View data\nstr(data)\n\n num [1:9, 1:6] 6.6 5.76 9.56 8.4 8.42 ...\n - attr(*, \"dimnames\")=List of 2\n  ..$ : chr [1:9] \"GBP4\" \"BCAT1\" \"CMPK2\" \"STOX2\" ...\n  ..$ : chr [1:6] \"M1\" \"M2\" \"M3\" \"M8\" ...\n\nstr(group)\n\n'data.frame':   6 obs. of  2 variables:\n $ sample: chr  \"M1\" \"M2\" \"M3\" \"M8\" ...\n $ group : chr  \"G1\" \"G1\" \"G1\" \"G2\" ...\n\nhead(pca_data)\n\n    sample        PC1         PC2 colorBy\nM1      M1  0.8626164  2.17168331      G1\nM2      M2  2.1114348  0.50696347      G1\nM3      M3  2.9706882 -1.81112892      G1\nM8      M8 -3.0779404 -0.85045239      G2\nM9      M9 -2.5038211  0.08748266      G2\nM10    M10 -0.3629779 -0.10454813      G2",
    "crumbs": [
      "HIPLOT",
      "PCA"
    ]
  },
  {
    "objectID": "Hiplot/187-pca.html#visualization",
    "href": "Hiplot/187-pca.html#visualization",
    "title": "PCA",
    "section": "Visualization",
    "text": "Visualization\n\n# PCA\np &lt;- ggplot(pca_data, aes(x = PC1, y = PC2, color = colorBy)) +\n  geom_point(size = 4, alpha = 0.8) +\n  geom_hline(yintercept = 0, linetype = \"dashed\", color = \"gray70\") +\n  geom_vline(xintercept = 0, linetype = \"dashed\", color = \"gray70\") +\n  stat_ellipse(level = 0.95, show.legend = FALSE) +\n  ggtitle(conf$general$title) +\n  labs(\n    x = paste0(\"PC1 (\", variance_explained[1], \"%)\"),\n    y = paste0(\"PC2 (\", variance_explained[2], \"%)\"),\n    color = axis[1]\n  ) +\n  \n  # Custom color scheme\n  scale_color_brewer(palette = conf$general$palette) +\n  \n  # Add sample labels\n  geom_text(aes(label = sample), \n            hjust = 0.5, vjust = -1, size = 3.5, show.legend = FALSE) +\n  \n  # Theme settings\n  theme_bw(base_size = 12) +\n  theme(\n    plot.title = element_text(hjust = 0.5, face = \"bold\", size = 16),\n    axis.title = element_text(size = 14, face = \"bold\"),\n    axis.text = element_text(size = 12),\n    legend.title = element_text(size = 12, face = \"bold\"),\n    legend.text = element_text(size = 11),\n    legend.position = \"right\",\n    panel.grid.major = element_line(color = \"grey90\", linewidth = 0.3),\n    panel.grid.minor = element_blank(),\n    panel.border = element_rect(fill = NA, color = \"grey50\", linewidth = 0.5),\n    aspect.ratio = 1\n  )\n\n# Display plot\np\n\nToo few points to calculate an ellipse\nToo few points to calculate an ellipse\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_path()`).\n\n\n\n\n\nPCA\n\n\n\n\nDifferent colors represent different samples, which can explain the relationship between principal components and original variables. For example, M1 has a greater contribution to PC1, while M8 has a greater negative correlation with PC1.",
    "crumbs": [
      "HIPLOT",
      "PCA"
    ]
  },
  {
    "objectID": "Hiplot/180-violin-group.html",
    "href": "Hiplot/180-violin-group.html",
    "title": "Violin Group",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Violin Group plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/violin-group?lang=en\nViolin and box plot of grouped data with T-test.",
    "crumbs": [
      "HIPLOT",
      "Violin Group"
    ]
  },
  {
    "objectID": "Hiplot/180-violin-group.html#setup",
    "href": "Hiplot/180-violin-group.html#setup",
    "title": "Violin Group",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggpubr; ggthemes\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggpubr\", quietly = TRUE)) {\n  install.packages(\"ggpubr\")\n}\nif (!requireNamespace(\"ggthemes\", quietly = TRUE)) {\n  install.packages(\"ggthemes\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggpubr)\nlibrary(ggthemes)",
    "crumbs": [
      "HIPLOT",
      "Violin Group"
    ]
  },
  {
    "objectID": "Hiplot/180-violin-group.html#data-preparation",
    "href": "Hiplot/180-violin-group.html#data-preparation",
    "title": "Violin Group",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n&lt;1st-col&gt;: (Numeric) value data\n&lt;2nd-col&gt;: (String) 1st-rank groups\n&lt;3rd-col&gt;: (String) 2nd-rank groups\n\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/violin-group/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# convert data structure\ndata[, 3] &lt;- factor(data[, 3], levels = unique(data[, 3]))\n\n# View data\nhead(data)\n\n  Value Group1 Group2\n1   4.2    low treat1\n2  11.5    low treat1\n3   7.3    low treat1\n4   5.8    low treat1\n5   6.4    low treat1\n6  10.0    low treat1",
    "crumbs": [
      "HIPLOT",
      "Violin Group"
    ]
  },
  {
    "objectID": "Hiplot/180-violin-group.html#visualization",
    "href": "Hiplot/180-violin-group.html#visualization",
    "title": "Violin Group",
    "section": "Visualization",
    "text": "Visualization\n\n# Violin Group\np &lt;- ggviolin(data, x = \"Group1\", y = \"Value\", color = \"Group2\", add = \"dotplot\",\n              add.params = list(fill = \"white\",size = 1), title = \"Violin Diagram\",\n              xlab = \"Group1\", ylab = \"Value\", fill = \"Group2\",\n              palette = c(\"#374E55FF\", \"#DF8F44FF\"), alpha = 0.5, trim = F) +\n  stat_compare_means(aes(group = data[, colnames(data)[3]]),\n    method = \"t.test\", vjust = -6, label.x.npc = \"left\", label.y.npc = \"top\",\n    tip.length = 0.03, bracket.size = 0.3, step.increase = 0, position = \"identity\",\n    na.rm = FALSE, show.legend = NA, inherit.aes = TRUE, geom = \"text\") +\n  theme_stata() +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n\np\n\n\n\n\n\n\n\nFigure 1: Violin Group",
    "crumbs": [
      "HIPLOT",
      "Violin Group"
    ]
  },
  {
    "objectID": "Hiplot/014-bivariate.html",
    "href": "Hiplot/014-bivariate.html",
    "title": "Bivariate Chart",
    "section": "",
    "text": "Display the bivariate.",
    "crumbs": [
      "HIPLOT",
      "Bivariate Chart"
    ]
  },
  {
    "objectID": "Hiplot/014-bivariate.html#setup",
    "href": "Hiplot/014-bivariate.html#setup",
    "title": "Bivariate Chart",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; GGally\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"GGally\", quietly = TRUE)) {\n  install.packages(\"GGally\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(GGally)",
    "crumbs": [
      "HIPLOT",
      "Bivariate Chart"
    ]
  },
  {
    "objectID": "Hiplot/014-bivariate.html#data-preparation",
    "href": "Hiplot/014-bivariate.html#data-preparation",
    "title": "Bivariate Chart",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/bivariate/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# View data\nhead(data)\n\n  total_bill  tip gender smoker day   time size\n1      16.99 1.01 Female     No Sun Dinner    2\n2      10.34 1.66   Male     No Sun Dinner    3\n3      21.01 3.50   Male     No Sun Dinner    3\n4      23.68 3.31   Male     No Sun Dinner    2\n5      24.59 3.61 Female     No Sun Dinner    4\n6      25.29 4.71   Male     No Sun Dinner    4",
    "crumbs": [
      "HIPLOT",
      "Bivariate Chart"
    ]
  },
  {
    "objectID": "Hiplot/014-bivariate.html#visualization",
    "href": "Hiplot/014-bivariate.html#visualization",
    "title": "Bivariate Chart",
    "section": "Visualization",
    "text": "Visualization\n\n# Bivariate Chart\np &lt;- ggbivariate(data, outcome = \"smoker\", \n                 explanatory = c(\"day\",\"time\",\"gender\",\"tip\")) +\n  ggtitle(\"Bivariate\") +\n  scale_fill_manual(values = c(\"#e04d39\",\"#5bbad6\")) +\n  theme_bw() +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n\np\n\n\n\n\n\n\n\nFigure 1: Bivariate Chart",
    "crumbs": [
      "HIPLOT",
      "Bivariate Chart"
    ]
  },
  {
    "objectID": "Hiplot/021-circle-packing.html",
    "href": "Hiplot/021-circle-packing.html",
    "title": "Circle Packing",
    "section": "",
    "text": "Circle packing is a visualization method used to display the differences in quantity among different categories.",
    "crumbs": [
      "HIPLOT",
      "Circle Packing"
    ]
  },
  {
    "objectID": "Hiplot/021-circle-packing.html#setup",
    "href": "Hiplot/021-circle-packing.html#setup",
    "title": "Circle Packing",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; packcircles; ggplot2; viridis\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"packcircles\", quietly = TRUE)) {\n  install.packages(\"packcircles\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"viridis\", quietly = TRUE)) {\n  install.packages(\"viridis\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(packcircles)\nlibrary(ggplot2)\nlibrary(viridis)",
    "crumbs": [
      "HIPLOT",
      "Circle Packing"
    ]
  },
  {
    "objectID": "Hiplot/021-circle-packing.html#data-preparation",
    "href": "Hiplot/021-circle-packing.html#data-preparation",
    "title": "Circle Packing",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/circle-packing/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# convert data structure\npacking &lt;- circleProgressiveLayout(data[[\"v\"]], sizetype = \"area\")\ndata &lt;- cbind(data, packing)\ndat_gg &lt;- circleLayoutVertices(packing, npoints = 50)\ncolors &lt;- c(\"#E57164\",\"#F8ECA7\",\"#9389C1\",\"#3F9C78\",\"#769F8D\",\"#E5F9A9\",\"#7CE9A4\",\n            \"#CE9FCA\",\"#78F197\",\"#8BB085\",\"#D88880\",\"#A6E4C3\",\"#F7F6B1\",\"#C5E69A\",\n            \"#F45FDE\",\"#5CF371\",\"#9259CF\",\"#2B6D9B\",\"#F3C096\",\"#EEADBE\")\ndat_gg$value &lt;- rep(colors, each = 51)\n\n# View data\nhead(data)\n\n  g   v           x          y   radius\n1 A 100  -5.6418958  0.0000000 5.641896\n2 B 120   6.1803872  0.0000000 6.180387\n3 C  80  -0.2298516 -9.2166458 5.046265\n4 D  10  -6.7961670 -7.3357638 1.784124\n5 E  60 -12.9322538 -6.8624061 4.370194\n6 F  30 -14.3618753  0.4597221 3.090194",
    "crumbs": [
      "HIPLOT",
      "Circle Packing"
    ]
  },
  {
    "objectID": "Hiplot/021-circle-packing.html#visualization",
    "href": "Hiplot/021-circle-packing.html#visualization",
    "title": "Circle Packing",
    "section": "Visualization",
    "text": "Visualization\n\n# Circle Packing\np &lt;- ggplot() +\n  geom_polygon(data = dat_gg, aes(x, y, group = id, fill = value), colour = \"black\", alpha = 0.4) +\n  scale_fill_manual(values = magma(nrow(data))) +\n  theme_void() +\n  theme(legend.position = \"none\") +\n  coord_equal() +\n  scale_size_continuous(range = c(2.3, 4.5)) +\n  geom_text(data = data, aes(x, y, size = v, label = g), vjust = 0) +\n  geom_text(data = data, aes(x, y, label = v, size = v), vjust = 1.2)\n\np\n\n\n\n\n\n\n\nFigure 1: Circle Packing",
    "crumbs": [
      "HIPLOT",
      "Circle Packing"
    ]
  },
  {
    "objectID": "Hiplot/019-chi-square-fisher.html",
    "href": "Hiplot/019-chi-square-fisher.html",
    "title": "Chi-square-fisher Test",
    "section": "",
    "text": "Chi-square and Fisher test can be used to test the frequency difference of categorical variables. The tool will automatically select the statistical method of Chi-square and Fisher exact test.",
    "crumbs": [
      "HIPLOT",
      "Chi-square-fisher Test"
    ]
  },
  {
    "objectID": "Hiplot/019-chi-square-fisher.html#setup",
    "href": "Hiplot/019-chi-square-fisher.html#setup",
    "title": "Chi-square-fisher Test",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2; visdat; aplot\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"visdat\", quietly = TRUE)) {\n  install.packages(\"visdat\")\n}\nif (!requireNamespace(\"aplot\", quietly = TRUE)) {\n  install.packages(\"aplot\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(visdat)\nlibrary(aplot)",
    "crumbs": [
      "HIPLOT",
      "Chi-square-fisher Test"
    ]
  },
  {
    "objectID": "Hiplot/019-chi-square-fisher.html#data-preparation",
    "href": "Hiplot/019-chi-square-fisher.html#data-preparation",
    "title": "Chi-square-fisher Test",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe data table supports two formats: contingency table (example 1) and single-row record table (example 2)\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/chi-square-fisher/data.json\")$exampleData[[1]]$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# convert data structure\nrownames(data) &lt;- data[,1]\ndata &lt;- data[,-1]\ncb &lt;- combn(nrow(data), 2)\nfinal &lt;- data.frame()\nfor (i in 1:ncol(cb)) {\n  tmp &lt;- data[cb[,i],]\n  groups &lt;- paste0(rownames(data)[cb[,i]], collapse = \" | \")\n  \n  res &lt;- tryCatch({\n    chisq.test(tmp)\n    }, warning = function(w) {\n      tryCatch({fisher.test(tmp)}, error = function(e) {\n        return(fisher.test(tmp, simulate.p.value = TRUE))\n        })\n  })\n  val_percent &lt;- apply(tmp, 1, function(x) {\n    sprintf(\"%s (%s%%)\", x, round(x / sum(x), 2) * 100)\n  })\n  val_percent1 &lt;- paste0(colnames(tmp), \":\", val_percent[,1])\n  val_percent1 &lt;- paste0(val_percent1, collapse = \" | \")\n  val_percent2 &lt;- paste0(colnames(tmp), \":\", val_percent[,2])\n  val_percent2 &lt;- paste0(val_percent2, collapse = \" | \")\n  tmp &lt;- data.frame(\n    groups = groups,\n    val_percent_left = val_percent1,\n    val_percent_right = val_percent2,\n    statistic = ifelse(is.null(res$statistic), NA,\n      as.numeric(res$statistic)),\n    pvalue = as.numeric(res$p.value),\n    method = res$method\n  )\n  final &lt;- rbind(final, tmp)\n}\nfinal &lt;- as.data.frame(final)\nfinal$pvalue &lt; as.numeric(final$pvalue)\n\n [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\nfinal$statistic &lt; as.numeric(final$statistic)\n\n [1] FALSE FALSE FALSE    NA FALSE FALSE    NA FALSE    NA    NA\n\n# View data\nhead(final)\n\n  groups                        val_percent_left\n1  A | B L:401 (48%) | M:216 (26%) | H:221 (26%)\n2  A | C L:401 (48%) | M:216 (26%) | H:221 (26%)\n3  A | D L:401 (48%) | M:216 (26%) | H:221 (26%)\n4  A | E L:401 (48%) | M:216 (26%) | H:221 (26%)\n5  B | C L:254 (37%) | M:259 (38%) | H:169 (25%)\n6  B | D L:254 (37%) | M:259 (38%) | H:169 (25%)\n                        val_percent_right    statistic       pvalue\n1 L:254 (37%) | M:259 (38%) | H:169 (25%) 2.810229e+01 7.900708e-07\n2 L:400 (48%) | M:215 (26%) | H:220 (26%) 4.566425e-04 9.997717e-01\n3 L:252 (38%) | M:251 (38%) | H:162 (24%) 2.614390e+01 2.103411e-06\n4       L:3 (23%) | M:5 (38%) | H:5 (38%)           NA 1.633146e-01\n5 L:400 (48%) | M:215 (26%) | H:220 (26%) 2.821998e+01 7.449197e-07\n6 L:252 (38%) | M:251 (38%) | H:162 (24%) 6.689139e-02 9.671074e-01\n                              method\n1         Pearson's Chi-squared test\n2         Pearson's Chi-squared test\n3         Pearson's Chi-squared test\n4 Fisher's Exact Test for Count Data\n5         Pearson's Chi-squared test\n6         Pearson's Chi-squared test",
    "crumbs": [
      "HIPLOT",
      "Chi-square-fisher Test"
    ]
  },
  {
    "objectID": "Hiplot/019-chi-square-fisher.html#visualization",
    "href": "Hiplot/019-chi-square-fisher.html#visualization",
    "title": "Chi-square-fisher Test",
    "section": "Visualization",
    "text": "Visualization\n\n# Chi-square-fisher Test\np1 &lt;- vis_value(final[\"statistic\"]) + \n  scale_fill_gradientn(colours = c(\"#3362ab\",\"#87b7d7\",\"#e8e0db\",\"#eea07d\",\"#ad1c2e\"))\n\np2 &lt;- vis_expect(final[\"pvalue\"], ~.x &lt; 0.05) +\n  scale_fill_manual(values = c(\"#1c438a\",\"#e7120c\"))\n\np &lt;- p1+p2\np\n\n\n\n\n\n\n\nFigure 1: Chi-square-fisher Test",
    "crumbs": [
      "HIPLOT",
      "Chi-square-fisher Test"
    ]
  },
  {
    "objectID": "Hiplot/089-interval-area-chart.html",
    "href": "Hiplot/089-interval-area-chart.html",
    "title": "Interval Area Chart",
    "section": "",
    "text": "System Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)",
    "crumbs": [
      "HIPLOT",
      "Interval Area Chart"
    ]
  },
  {
    "objectID": "Hiplot/089-interval-area-chart.html#setup",
    "href": "Hiplot/089-interval-area-chart.html#setup",
    "title": "Interval Area Chart",
    "section": "",
    "text": "System Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)",
    "crumbs": [
      "HIPLOT",
      "Interval Area Chart"
    ]
  },
  {
    "objectID": "Hiplot/089-interval-area-chart.html#data-preparation",
    "href": "Hiplot/089-interval-area-chart.html#data-preparation",
    "title": "Interval Area Chart",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe case data consists of the highest and lowest temperatures for each of the twelve months in a year, along with the corresponding abbreviated month names. Based on the case data, temperature intervals and average temperature lines have been plotted for each month.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/interval-area-chart/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\ndata[[\"month\"]] &lt;- factor(data[[\"month\"]], levels = data[[\"month\"]])\n\n# View data\nhead(data)\n\n  month min_temperature max_temperature mean\n1   Jan              15              20   16\n2   Feb              17              25   20\n3   Mar              20              26   23\n4   Apr              25              30   27\n5   May              30              35   32\n6   Jun              32              35   34",
    "crumbs": [
      "HIPLOT",
      "Interval Area Chart"
    ]
  },
  {
    "objectID": "Hiplot/089-interval-area-chart.html#visualization",
    "href": "Hiplot/089-interval-area-chart.html#visualization",
    "title": "Interval Area Chart",
    "section": "Visualization",
    "text": "Visualization\n\n# Interval Area Chart\np &lt;- ggplot(data, aes(x = month, group = 1)) +\n  geom_line(aes(y = max_temperature), size = 1.2, color = \"#EA3323\", \n            linetype = \"solid\") +\n  geom_line(aes(y = min_temperature), size = 1.2, color = \"#0000F5\", \n            linetype = \"solid\") +\n  geom_line(aes(x = month, y = mean), size = 1.2, color = \"#BEBEBE\", \n            linetype = \"dashed\") +\n  geom_ribbon(aes(ymin = min_temperature, ymax = max_temperature), \n              fill = \"#F2F2F2\", alpha = 0.5) +\n  geom_text(aes(x = month, y = max_temperature + 1, label = max_temperature),\n            color = \"#EA3323\", size = 2.5, vjust = -0.5, hjust = 0) +\n  geom_text(aes(x = month, y = min_temperature - 1, label = min_temperature),\n            color = \"#0000F5\", size = 2.5, vjust = 1.5, hjust = 0) +\n  geom_text(aes(x = month, y = mean, label = mean),\n            color = \"#BEBEBE\", size = 2.5, vjust = 1.5, hjust = 0) +\n  labs(title = \"Temperature\", x = \"Month\", y = \"Temperature\") +\n  scale_color_manual(values = c(max = \"#EA3323\", min = \"#0000F5\")) +\n  theme_bw() +\n  theme(plot.title = element_text(hjust = 0.5))\n\np\n\n\n\n\n\n\n\nFigure 1: Interval Area Chart",
    "crumbs": [
      "HIPLOT",
      "Interval Area Chart"
    ]
  },
  {
    "objectID": "Hiplot/181-violin.html",
    "href": "Hiplot/181-violin.html",
    "title": "Violin",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Violin plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/violin?lang=en\nThe violin plot, named for its resemblance to a violin, is a statistical diagram combining a box diagram with a kernel density diagram to show the distribution of data and the probability density.",
    "crumbs": [
      "HIPLOT",
      "Violin"
    ]
  },
  {
    "objectID": "Hiplot/181-violin.html#setup",
    "href": "Hiplot/181-violin.html#setup",
    "title": "Violin",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggpubr; ggthemes\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggpubr\", quietly = TRUE)) {\n  install.packages(\"ggpubr\")\n}\nif (!requireNamespace(\"ggthemes\", quietly = TRUE)) {\n  install.packages(\"ggthemes\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggpubr)\nlibrary(ggthemes)",
    "crumbs": [
      "HIPLOT",
      "Violin"
    ]
  },
  {
    "objectID": "Hiplot/181-violin.html#data-preparation",
    "href": "Hiplot/181-violin.html#data-preparation",
    "title": "Violin",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data is data set (gene names and expression levels in different tumors).\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/violin/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# convert data structure\ngroups &lt;- unique(data[, 2])\nngroups &lt;- length(groups)\ncomb &lt;- combn(1:ngroups, 2)\nmy_comparisons &lt;- list()\nfor (i in seq_len(ncol(comb))) {\n  my_comparisons[[i]] &lt;- groups[comb[, i]]\n}\n\n# View data\nhead(data)\n\n  Expresssion Tumor\n1    12.10228   AML\n2    12.61382   AML\n3    12.52741   AML\n4    12.67990   AML\n5    12.64837   AML\n6    12.12146   AML",
    "crumbs": [
      "HIPLOT",
      "Violin"
    ]
  },
  {
    "objectID": "Hiplot/181-violin.html#visualization",
    "href": "Hiplot/181-violin.html#visualization",
    "title": "Violin",
    "section": "Visualization",
    "text": "Visualization\n\n# Violin\np &lt;- ggviolin(data, x = \"Tumor\", y = \"Expresssion\", fill = \"Tumor\", add = \"boxplot\",\n              xlab = \"Tumor\", ylab = \"Expresssion\", \n              add.params = list(fill = \"white\"),\n              palette = c(\"#e04d39\",\"#5bbad6\",\"#1e9f86\"),\n              title = \"Violin Plot\", alpha = 1) + \n  stat_compare_means(comparisons = my_comparisons, label = \"p.signif\") +\n  theme_stata() +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n\np\n\n\n\n\n\n\n\nFigure 1: Violin\n\n\n\n\n\nThe violin plot can reflect the data distribution, which is similar to the box diagram. The black horizontal line in the box shows the median gene expression level in each tumor, and the upper and lower edges in the white box represent the upper and lower quartiles in the data set. The violin graph can also reflect the data density, and the more concentrated the data set, the fatter the graph. The gene expression distribution in the BLGG group is more concentrated, followed by BIC group and AML group.",
    "crumbs": [
      "HIPLOT",
      "Violin"
    ]
  },
  {
    "objectID": "Hiplot/100-map-china.html",
    "href": "Hiplot/100-map-china.html",
    "title": "China Map",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot China Map plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/map-china?lang=en",
    "crumbs": [
      "HIPLOT",
      "China Map"
    ]
  },
  {
    "objectID": "Hiplot/100-map-china.html#setup",
    "href": "Hiplot/100-map-china.html#setup",
    "title": "China Map",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2; RColorBrewer\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"RColorBrewer\", quietly = TRUE)) {\n  install.packages(\"RColorBrewer\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(RColorBrewer)",
    "crumbs": [
      "HIPLOT",
      "China Map"
    ]
  },
  {
    "objectID": "Hiplot/100-map-china.html#data-preparation",
    "href": "Hiplot/100-map-china.html#data-preparation",
    "title": "China Map",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/map-china/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\ndt_map &lt;- readRDS(url(\"https://download.hiplot.cn/ui/basic/map-china/china.rds\"))\n\n# Convert data structure\ndt_map$Value &lt;- data$value[match(dt_map$FCNAME, data$name)]\n\n# View data\nhead(data)\n\n    name value\n1 安徽省  6118\n2 福建省  3581\n3 甘肃省  2617\n4 广东省  9449\n5 贵州省  3762\n6 海南省   845",
    "crumbs": [
      "HIPLOT",
      "China Map"
    ]
  },
  {
    "objectID": "Hiplot/100-map-china.html#visualization",
    "href": "Hiplot/100-map-china.html#visualization",
    "title": "China Map",
    "section": "Visualization",
    "text": "Visualization\n\n# China Map\np &lt;- ggplot(dt_map, aes(x = long, y = lat, group = group, fill = Value)) +\n  labs(fill = \"Value\") +\n  geom_polygon() +\n  geom_path() +\n  coord_fixed() +\n  scale_fill_gradientn(\n    colours = colorRampPalette(rev(brewer.pal(11,\"RdYlBu\")))(500),\n    na.value = \"grey10\",\n    limits = c(0, max(dt_map$Value) * 1.2)) +\n    ggtitle(\"China Map Plot\") +\n  theme_minimal()\n\np\n\n\n\n\n\n\n\nFigure 1: China Map",
    "crumbs": [
      "HIPLOT",
      "China Map"
    ]
  },
  {
    "objectID": "Hiplot/122-moon-charts.html",
    "href": "Hiplot/122-moon-charts.html",
    "title": "Moon charts",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Moon charts plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/moon-charts?lang=en\nThe moon chart is a graph that uses the moon’s waxing and waning to reflect the size of the data.",
    "crumbs": [
      "HIPLOT",
      "Moon charts"
    ]
  },
  {
    "objectID": "Hiplot/122-moon-charts.html#setup",
    "href": "Hiplot/122-moon-charts.html#setup",
    "title": "Moon charts",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; gggibbous; ggplot2\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"gggibbous\", quietly = TRUE)) {\n  install.packages(\"gggibbous\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(gggibbous)\nlibrary(ggplot2)",
    "crumbs": [
      "HIPLOT",
      "Moon charts"
    ]
  },
  {
    "objectID": "Hiplot/122-moon-charts.html#data-preparation",
    "href": "Hiplot/122-moon-charts.html#data-preparation",
    "title": "Moon charts",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data are the name of the restaurant and the number of types of food in the restaurant, the number of decorative style types, the number of tableware sets and the number of price types.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/moon-charts/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\ndata[, 1] &lt;- factor(data[, 1], levels = unique(data[, 1]))\nrest_cols &lt;- colnames(data)[-1]\ntidyrest &lt;- reshape(\n  data,\n  varying = rest_cols,\n  v.names = \"Score\",\n  timevar = \"Category\",\n  times = factor(rest_cols, levels = rest_cols),\n  idvar = colnames(data)[1],\n  direction = \"long\"\n)\n\n# View data\nhead(data)\n\n                     Restaurant Food Decor Service Price\n1       Anscombe\"s Luncheonette    5     2       4     4\n2                  Chai Squared    3     5       2     5\n3 Tukey\"s Honest Southern Diner    4     3       3     2\n4                  Bagels ANOVA    4     1       3     5\n5                 Spearmint Row    1     5       5     2",
    "crumbs": [
      "HIPLOT",
      "Moon charts"
    ]
  },
  {
    "objectID": "Hiplot/122-moon-charts.html#visualization",
    "href": "Hiplot/122-moon-charts.html#visualization",
    "title": "Moon charts",
    "section": "Visualization",
    "text": "Visualization\n\n# Moon charts\np &lt;- ggplot(tidyrest, aes(0, 0)) +\n  geom_moon(aes(ratio = (Score - 1) / 4), fill = \"black\") +\n  geom_moon(aes(ratio = 1 - (Score - 1) / 4), right = FALSE) +\n  facet_grid(Category ~ Restaurant, switch = \"y\") +\n  theme_minimal() +\n  theme(\n    panel.grid = element_blank(),\n    axis.text = element_blank(),\n    axis.title = element_blank()\n  )\n\np\n\n\n\n\n\n\n\nFigure 1: Moon charts\n\n\n\n\n\nThe first row of the diagram shows the name of the restaurant, the first column shows different variables in the restaurant, the blank moon represents the number of 1 (the least number), the black moon represents the number of 5 (the most number) data, as the number of data increases, the black area of the moon gradually becomes larger, that is, gradually becomes full moon.",
    "crumbs": [
      "HIPLOT",
      "Moon charts"
    ]
  },
  {
    "objectID": "Hiplot/051-eulerr.html",
    "href": "Hiplot/051-eulerr.html",
    "title": "Eulerr Plot",
    "section": "",
    "text": "System Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; eulerr; ggplotify\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"eulerr\", quietly = TRUE)) {\n  install.packages(\"eulerr\")\n}\nif (!requireNamespace(\"ggplotify\", quietly = TRUE)) {\n  install.packages(\"ggplotify\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(eulerr)\nlibrary(ggplotify)",
    "crumbs": [
      "HIPLOT",
      "Eulerr Plot"
    ]
  },
  {
    "objectID": "Hiplot/051-eulerr.html#setup",
    "href": "Hiplot/051-eulerr.html#setup",
    "title": "Eulerr Plot",
    "section": "",
    "text": "System Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; eulerr; ggplotify\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"eulerr\", quietly = TRUE)) {\n  install.packages(\"eulerr\")\n}\nif (!requireNamespace(\"ggplotify\", quietly = TRUE)) {\n  install.packages(\"ggplotify\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(eulerr)\nlibrary(ggplotify)",
    "crumbs": [
      "HIPLOT",
      "Eulerr Plot"
    ]
  },
  {
    "objectID": "Hiplot/051-eulerr.html#data-preparation",
    "href": "Hiplot/051-eulerr.html#data-preparation",
    "title": "Eulerr Plot",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/eulerr/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# convert data structure\ngenes &lt;- as.numeric(data[, 2])\nnames(genes) &lt;- as.character(data[, 1])\neuler_set &lt;- euler(genes)\n  \n# View data\nhead(data)\n\n      Term Value\n1       SE    13\n2    Treat    28\n3 Anti-CCP   101\n4    DAS28    91\n5 SE&Treat     1\n6 SE&DAS28    14",
    "crumbs": [
      "HIPLOT",
      "Eulerr Plot"
    ]
  },
  {
    "objectID": "Hiplot/051-eulerr.html#visualization",
    "href": "Hiplot/051-eulerr.html#visualization",
    "title": "Eulerr Plot",
    "section": "Visualization",
    "text": "Visualization\n\n# Eulerr Plot\nfill &lt;- c(\"#3B4992FF\",\"#EE0000FF\",\"#008B45FF\",\"#631879FF\",\"#008280FF\",\"#BB0021FF\",\n          \"#5F559BFF\",\"#A20056FF\")\np &lt;- as.ggplot(\n  plot(euler_set,\n    labels = list(col = rep(\"white\", length(genes))),\n    fills = list(fill = fill),\n    quantities = list(type = c(\"percent\", \"counts\"),\n    col = rep(\"white\", length(genes))),\n    main = \"Eulerr\")\n)\n\np\n\n\n\n\n\n\n\nFigure 1: Eulerr Plot",
    "crumbs": [
      "HIPLOT",
      "Eulerr Plot"
    ]
  },
  {
    "objectID": "Hiplot/186-waterfalls.html",
    "href": "Hiplot/186-waterfalls.html",
    "title": "Waterfalls",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Waterfalls plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/waterfalls?lang=en\nThe waterfall chart is used to display the cumulative effect of sequentially introduced positive or negative values . These intermediate values can either be time based or category based.",
    "crumbs": [
      "HIPLOT",
      "Waterfalls"
    ]
  },
  {
    "objectID": "Hiplot/186-waterfalls.html#setup",
    "href": "Hiplot/186-waterfalls.html#setup",
    "title": "Waterfalls",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; waterfalls; ggplot2\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"waterfalls\", quietly = TRUE)) {\n  install.packages(\"waterfalls\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(waterfalls)\nlibrary(ggplot2)",
    "crumbs": [
      "HIPLOT",
      "Waterfalls"
    ]
  },
  {
    "objectID": "Hiplot/186-waterfalls.html#data-preparation",
    "href": "Hiplot/186-waterfalls.html#data-preparation",
    "title": "Waterfalls",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data have two columns, with the first for category based items and the second for their corresponding values.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/waterfalls/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# View data\nhead(data)\n\n  label value\n1     a   100\n2     b   -20\n3     c    10\n4     d    20\n5     e   110",
    "crumbs": [
      "HIPLOT",
      "Waterfalls"
    ]
  },
  {
    "objectID": "Hiplot/186-waterfalls.html#visualization",
    "href": "Hiplot/186-waterfalls.html#visualization",
    "title": "Waterfalls",
    "section": "Visualization",
    "text": "Visualization\n\n# Waterfalls\np &lt;- waterfall(data, rect_text_labels = data$value, rect_text_size = 1,\n    rect_text_labels_anchor = \"centre\", calc_total = T,\n    total_axis_text = \"Total\", total_rect_text = sum(data$value),\n    total_rect_color = \"steelblue\", total_rect_text_color = \"black\",\n    rect_width = 0.7, rect_border = \"black\", draw_lines = TRUE,\n    linetype = 2, fill_by_sign = F, \n    fill_colours = c(\"#E64B35FF\",\"#4DBBD5FF\",\"#00A087FF\",\"#3C5488FF\",\"#F39B7FFF\",\n                     \"#8491B4FF\"),\n    scale_y_to_waterfall = T) +\n  theme_bw() +\n  theme(axis.text = element_text(size = 12),\n        plot.title = element_text(hjust = 0.5)) +\n  labs(title = \"Waterfalls Plot\")\n\np\n\n\n\n\n\n\n\nFigure 1: Waterfalls\n\n\n\n\n\nAs shown in the example figure, the x-axis represent each category based items, the y-axis showing their cumulative values. Increments and decrements that are sufficiently extreme can cause the cumulative total to fall above and below the axis at various points.",
    "crumbs": [
      "HIPLOT",
      "Waterfalls"
    ]
  },
  {
    "objectID": "Hiplot/182-visdat.html",
    "href": "Hiplot/182-visdat.html",
    "title": "Visdat",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Visdat plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/visdat?lang=en",
    "crumbs": [
      "HIPLOT",
      "Visdat"
    ]
  },
  {
    "objectID": "Hiplot/182-visdat.html#setup",
    "href": "Hiplot/182-visdat.html#setup",
    "title": "Visdat",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; visdat; ggplot2; dplyr; patchwork\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"visdat\", quietly = TRUE)) {\n  install.packages(\"visdat\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"dplyr\", quietly = TRUE)) {\n  install.packages(\"dplyr\")\n}\nif (!requireNamespace(\"patchwork\", quietly = TRUE)) {\n  install.packages(\"patchwork\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(visdat)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(patchwork)",
    "crumbs": [
      "HIPLOT",
      "Visdat"
    ]
  },
  {
    "objectID": "Hiplot/182-visdat.html#data-preparation",
    "href": "Hiplot/182-visdat.html#data-preparation",
    "title": "Visdat",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/visdat/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# View data\nhead(data)\n\n  RowNames Ozone Solar.R Wind Temp Month Day\n1        1    41     190  7.4   67     5   1\n2        2    36     118  8.0   72     5   2\n3        3    12     149 12.6   74     5   3\n4        4    18     313 11.5   62     5   4\n5        5    NA      NA 14.3   56     5   5\n6        6    28      NA 14.9   66     5   6",
    "crumbs": [
      "HIPLOT",
      "Visdat"
    ]
  },
  {
    "objectID": "Hiplot/182-visdat.html#visualization",
    "href": "Hiplot/182-visdat.html#visualization",
    "title": "Visdat",
    "section": "Visualization",
    "text": "Visualization\n\n# Visdat\nadd_palette &lt;- function (p) {\n  ## add color palette\n  p &lt;- p + scale_fill_manual(values = c(\"#3B4992FF\", \"#EE0000FF\"))\n}\npobj &lt;- list()\npobj[[\"p1\"]] &lt;- add_palette(vis_dat(data)) + ggtitle(':vis_dat')\npobj[[\"p2\"]] &lt;- add_palette(vis_guess(data)) + ggtitle(':vis_guess')\npobj[[\"p3\"]] &lt;- vis_miss(data, cluster = T, sort_miss = T) + ggtitle(':vis_miss')\npobj[[\"p4\"]] &lt;- add_palette(vis_expect(data, ~.x &gt;= 20 )) + ggtitle(':vis_expect')\npobj[[\"p5\"]] &lt;- vis_cor(data) + \n  scale_fill_gradientn(colours = c(\"#0571B0\", \"#92C5DE\", \"#F4A582\", \"#CA0020\")) +\n  ggtitle(':vis_cor')\npobj[[\"p6\"]] &lt;- data %&gt;%\n      select_if(is.numeric) %&gt;%\n      vis_value() + ggtitle(':vis_value')\npobj[[\"p6\"]] &lt;- pobj[[\"p6\"]] + \n  scale_fill_gradientn(colours = c(\"#0571B0\",\"#92C5DE\",\"#F7F7F7\",\"#F4A582\",\n                                   \"#CA0020\"))\n\npstr &lt;- paste0(sprintf(\"pobj[[%s]]\", 1:length(pobj)), collapse = \" + \")\np &lt;- eval(parse(text = \n  sprintf(\"%s + plot_layout(ncol = 2) +\nplot_annotation(tag_levels = 'A')\", pstr)))\n\np\n\n\n\n\n\n\n\nFigure 1: Visdat",
    "crumbs": [
      "HIPLOT",
      "Visdat"
    ]
  },
  {
    "objectID": "Hiplot/109-map-oceania-antarc.html",
    "href": "Hiplot/109-map-oceania-antarc.html",
    "title": "Oceania/Antarc Map",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Oceania/Antarc Map plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/map-oceania-antarc?lang=en",
    "crumbs": [
      "HIPLOT",
      "Oceania/Antarc Map"
    ]
  },
  {
    "objectID": "Hiplot/109-map-oceania-antarc.html#setup",
    "href": "Hiplot/109-map-oceania-antarc.html#setup",
    "title": "Oceania/Antarc Map",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2; RColorBrewer\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"RColorBrewer\", quietly = TRUE)) {\n  install.packages(\"RColorBrewer\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(RColorBrewer)",
    "crumbs": [
      "HIPLOT",
      "Oceania/Antarc Map"
    ]
  },
  {
    "objectID": "Hiplot/109-map-oceania-antarc.html#data-preparation",
    "href": "Hiplot/109-map-oceania-antarc.html#data-preparation",
    "title": "Oceania/Antarc Map",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/map-oceania-antarc/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\ndt_map &lt;- readRDS(url(\"https://download.hiplot.cn/ui/basic/map-oceania-antarc/oca.rds\"))\n\n# Convert data structure\ndt_map$Value &lt;- data$value[match(dt_map$ENG_NAME, data$region)]\n\n# View data\nhead(data)\n\n                      region value\n1        American Samoa (US)   672\n2                 Antarctica     3\n3    Pacific Is Refuges (US)   320\n4 Cook Islands (NEW ZEALAND)   740\n5                       FIJI   303\n6  French Polynesia (FRANCE)   879",
    "crumbs": [
      "HIPLOT",
      "Oceania/Antarc Map"
    ]
  },
  {
    "objectID": "Hiplot/109-map-oceania-antarc.html#visualization",
    "href": "Hiplot/109-map-oceania-antarc.html#visualization",
    "title": "Oceania/Antarc Map",
    "section": "Visualization",
    "text": "Visualization\n\n# Oceania/Antarc Map\np &lt;- ggplot(dt_map) +\n  geom_polygon(aes(x = long, y = lat, group = group, fill = Value),\n               alpha = 0.9, size = 0.5) +\n  geom_path(aes(x = long, y = lat, group = group), color = \"black\", size = 0.2) +\n  coord_fixed() +\n  scale_fill_gradientn(\n    colours = colorRampPalette(rev(brewer.pal(11,\"RdYlBu\")))(500),\n    breaks = seq(min(data$value), max(data$value), \n                 round((max(data$value)-min(data$value))/7)),\n    name = \"Color Key\",\n    guide = guide_legend(\n      direction = \"vertical\", keyheight = unit(1, units = \"mm\"),\n      keywidth = unit(8, units = \"mm\"),\n      title.position = \"top\", title.hjust = 0.5, label.hjust = 0.5,\n      nrow = 1, byrow = T, reverse = F, label.position = \"bottom\")) +\n  theme(text = element_text(color = \"#3A3F4A\"),\n        axis.text = element_blank(),\n        axis.ticks = element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        legend.position = \"top\",\n        legend.text = element_text(size = 4 * 1.5, color = \"black\"),\n        legend.title = element_text(size = 5 * 1.5, color = \"black\"),\n        plot.title = element_text(\n          face = \"bold\", size = 5 * 1.5, hjust = 0.5, \n          margin = margin(t = 4, b = 5), color = \"black\"),\n        plot.background = element_rect(fill = \"#FFFFFF\", color = \"#FFFFFF\"),\n        panel.background = element_rect(fill = \"#FFFFFF\", color = NA),\n        legend.background = element_rect(fill = \"#FFFFFF\", color = NA),\n        plot.margin = unit(c(1.5, 1.5, 1.5, 1.5), \"cm\")) +\n  labs(x = NULL, y = NULL, title = \"Oceania/Antarc Map\")\n\np\n\n\n\n\n\n\n\nFigure 1: Oceania/Antarc Map",
    "crumbs": [
      "HIPLOT",
      "Oceania/Antarc Map"
    ]
  },
  {
    "objectID": "Hiplot/118-matrix-bubble.html",
    "href": "Hiplot/118-matrix-bubble.html",
    "title": "Matrix Bubble",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Matrix Bubble plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/matrix-bubble?lang=en\nThe color matrix bubble is used to visualize the expression matrix data of multiple genes (rows) in various cells (columns).",
    "crumbs": [
      "HIPLOT",
      "Matrix Bubble"
    ]
  },
  {
    "objectID": "Hiplot/118-matrix-bubble.html#setup",
    "href": "Hiplot/118-matrix-bubble.html#setup",
    "title": "Matrix Bubble",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggalluvial; ggplot2\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggalluvial\", quietly = TRUE)) {\n  install.packages(\"ggalluvial\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggalluvial)\nlibrary(ggplot2)",
    "crumbs": [
      "HIPLOT",
      "Matrix Bubble"
    ]
  },
  {
    "objectID": "Hiplot/118-matrix-bubble.html#data-preparation",
    "href": "Hiplot/118-matrix-bubble.html#data-preparation",
    "title": "Matrix Bubble",
    "section": "Data Preparation",
    "text": "Data Preparation\nData Structure：\n\n&lt;1st-col&gt;: (String) cell sample name as X axis\n&lt;2nd-col&gt;: (String) gene name as the Y axis\n&lt;3rd-col&gt;: (Numeric) gene expression\n&lt;4rd-col&gt;: (Numeric) groups\n\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/matrix-bubble/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\ndata[, 1] &lt;- factor(data[, 1], levels = unique(data[, 1]))\ndata[, 2] &lt;- factor(data[, 2], levels = unique(data[, 2]))\n\n# View data\nhead(data)\n\n      x     y value  group\n1 cell1 gene1     1 groupC\n2 cell1 gene2     5 groupC\n3 cell1 gene3    10 groupC\n4 cell1 gene4    15 groupC\n5 cell1 gene5    20 groupC\n6 cell1 gene6    25 groupC",
    "crumbs": [
      "HIPLOT",
      "Matrix Bubble"
    ]
  },
  {
    "objectID": "Hiplot/118-matrix-bubble.html#visualization",
    "href": "Hiplot/118-matrix-bubble.html#visualization",
    "title": "Matrix Bubble",
    "section": "Visualization",
    "text": "Visualization\n\n# Matrix Bubble\np &lt;- ggplot(data = data, aes(x = x, y = y, size = value, color = y)) +\n  geom_point(alpha = 1) +\n  labs(title = \"Matrix Bubble\") +\n  guides(color = FALSE) +\n  theme(panel.background = element_blank(),\n        panel.grid.major = element_line(colour = \"gray\"),\n        strip.background = element_blank(),\n        panel.border = element_rect(colour = \"black\", fill = NA),\n        panel.spacing = unit(0, \"lines\"),\n        plot.title = element_text(size = 12, hjust = 0.5),\n        text = element_text(family = \"Arial\"),\n        legend.title = element_text(size = 10),\n        axis.text.x = element_text(angle=0, hjust=0.5, vjust=1)) +\n  facet_grid(~group, scales = 'fixed', margins = F) +\n  scale_color_manual(values = c(\n    \"#3B4992FF\",\"#EE0000FF\",\"#008B45FF\",\"#631879FF\",\"#008280FF\",\"#BB0021FF\",\n    \"#5F559BFF\",\"#A20056FF\",\"#808180FF\",\"#1B1919FF\"))\n\np\n\n\n\n\n\n\n\nFigure 1: Matrix Bubble",
    "crumbs": [
      "HIPLOT",
      "Matrix Bubble"
    ]
  },
  {
    "objectID": "Hiplot/167-stacked-percentage-bar-chart.html",
    "href": "Hiplot/167-stacked-percentage-bar-chart.html",
    "title": "Percentsge Stacked Bar Chart",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Percentsge Stacked Bar Chart plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/stacked-percentage-bar-chart?lang=en",
    "crumbs": [
      "HIPLOT",
      "Percentsge Stacked Bar Chart"
    ]
  },
  {
    "objectID": "Hiplot/167-stacked-percentage-bar-chart.html#setup",
    "href": "Hiplot/167-stacked-percentage-bar-chart.html#setup",
    "title": "Percentsge Stacked Bar Chart",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2; dplyr; tidyr; scales\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"dplyr\", quietly = TRUE)) {\n  install.packages(\"dplyr\")\n}\nif (!requireNamespace(\"tidyr\", quietly = TRUE)) {\n  install.packages(\"tidyr\")\n}\nif (!requireNamespace(\"scales\", quietly = TRUE)) {\n  install.packages(\"scales\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(scales)",
    "crumbs": [
      "HIPLOT",
      "Percentsge Stacked Bar Chart"
    ]
  },
  {
    "objectID": "Hiplot/167-stacked-percentage-bar-chart.html#data-preparation",
    "href": "Hiplot/167-stacked-percentage-bar-chart.html#data-preparation",
    "title": "Percentsge Stacked Bar Chart",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe case data represents the sales percentage of three different products in a shopping mall over the course of one week.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/stacked-percentage-bar-chart/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# convert data structure\ndata$total &lt;- rowSums(data[, -1])\ndata_long &lt;- gather(data, kinds, value, -days, -total)\ndata_long &lt;- data_long %&gt;%\n  group_by(days) %&gt;%\n  mutate(percent = value / total * 100)\ndata_long[[\"days\"]] &lt;- factor(data_long[[\"days\"]], levels = data[[\"days\"]])\n\n# View data\nhead(data)\n\n       days goods1 goods2 goods3 total\n1    Monday    150    300      0   450\n2   Tuesday    200    250      0   450\n3 Wednesday    300    100      0   400\n4  Thursday    200    300      0   500\n5    Friday    100    300      0   400\n6  Saturday     50     50    400   500",
    "crumbs": [
      "HIPLOT",
      "Percentsge Stacked Bar Chart"
    ]
  },
  {
    "objectID": "Hiplot/167-stacked-percentage-bar-chart.html#visualization",
    "href": "Hiplot/167-stacked-percentage-bar-chart.html#visualization",
    "title": "Percentsge Stacked Bar Chart",
    "section": "Visualization",
    "text": "Visualization\n\n# Percentsge Stacked Bar Chart\np &lt;- ggplot(data_long, aes(x = percent, y = days, fill = kinds)) +\n  geom_bar(stat = \"identity\", position = \"stack\") +\n  geom_text(aes(label = ifelse(percent != 0, paste0(round(percent), \"%\"), \"\")),\n            position = position_stack(vjust = 0.5)) +\n  labs(title = \"Percentage Stacked Bar Chart\", x = \"Percentage\", y = \"Days\") +\n  scale_x_continuous(labels = percent_format(scale = 1)) +\n  theme_bw() +\n  theme(plot.title = element_text(hjust = 0.5)) +\n  scale_fill_manual(values = c(\"#E64B35FF\",\"#4DBBD5FF\",\"#00A087FF\"))\n\np\n\n\n\n\n\n\n\nFigure 1: Percentsge Stacked Bar Chart",
    "crumbs": [
      "HIPLOT",
      "Percentsge Stacked Bar Chart"
    ]
  },
  {
    "objectID": "Hiplot/169-survival.html",
    "href": "Hiplot/169-survival.html",
    "title": "Survival Analysis",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Survival Analysis plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/survival?lang=en\nThe survivorship curve is a graph showing the number or proportion of individuals surviving to each age for a given species or group (e.g. males or females).",
    "crumbs": [
      "HIPLOT",
      "Survival Analysis"
    ]
  },
  {
    "objectID": "Hiplot/169-survival.html#setup",
    "href": "Hiplot/169-survival.html#setup",
    "title": "Survival Analysis",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; survminer; survival; ggplotify\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"survminer\", quietly = TRUE)) {\n  install.packages(\"survminer\")\n}\nif (!requireNamespace(\"survival\", quietly = TRUE)) {\n  install.packages(\"survival\")\n}\nif (!requireNamespace(\"ggplotify\", quietly = TRUE)) {\n  install.packages(\"ggplotify\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(survminer)\nlibrary(survival)\nlibrary(ggplotify)",
    "crumbs": [
      "HIPLOT",
      "Survival Analysis"
    ]
  },
  {
    "objectID": "Hiplot/169-survival.html#data-preparation",
    "href": "Hiplot/169-survival.html#data-preparation",
    "title": "Survival Analysis",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data are point-in-time, status and groups.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/survival/data.json\")$exampleData[[1]]$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# convert data structure\ncolnames(data) &lt;- c(\"Time\", \"Status\", \"Group\")\ndata[,1] &lt;- as.numeric(data[,1])\nfit &lt;- survfit(Surv(Time, Status == 1) ~ Group, data = data)\ndata &lt;- data[data[,1] &lt; 1100,]\n\n# View data\nhead(data)\n\n  Time Status Group\n1  306      1    G1\n2  455      1    G1\n3 1010      0    G1\n4  210      1    G1\n5  883      1    G1\n6 1022      0    G1",
    "crumbs": [
      "HIPLOT",
      "Survival Analysis"
    ]
  },
  {
    "objectID": "Hiplot/169-survival.html#visualization",
    "href": "Hiplot/169-survival.html#visualization",
    "title": "Survival Analysis",
    "section": "Visualization",
    "text": "Visualization\n\n# Survival Analysis\np &lt;- ggsurvplot(\n  fit, data = data, risk.table = T, pval = T, conf.int = T, fun = \"pct\", \n  size = 0.5, xlab = \"Time\", ylab = \"Survival probability\",\n  ggtheme = theme_bw(), risk.table.y.text.col = TRUE,\n  risk.table.height = 0.25, risk.table.y.text = T,\n  ncensor.plot = T, ncensor.plot.height = 0.25,\n  conf.int.style = \"ribbon\", surv.median.line = \"hv\",\n  palette = c(\"#00468BFF\", \"#ED0000FF\"),\n  xlim = c(0, 1100), ylim = c(0, 100),\n  break.x.by = 150)\n\np\n\n\n\n\n\n\n\nFigure 1: Survival Analysis\n\n\n\n\n\nThe horizontal axis represents time and the vertical axis represents the probability of survival. The blue curve represents the survivolship curve of G1 group and the red curve represents the survivolship curve of G2 group. After logrank test, p value =0.0013&lt;0.05 indicates that difference in survival status between the two groups could not be explained by sampling error, and the grouping factor is the reason for the difference in survival rate between the two curves. This graph shows that overall survival is better in G2 than in G1.",
    "crumbs": [
      "HIPLOT",
      "Survival Analysis"
    ]
  },
  {
    "objectID": "Hiplot/062-gene-trend.html",
    "href": "Hiplot/062-gene-trend.html",
    "title": "Gene Cluster Trend",
    "section": "",
    "text": "The gene cluster trend is used to display different gene expression trend with multiple lines showing the similar expression patterns in each cluster.",
    "crumbs": [
      "HIPLOT",
      "Gene Cluster Trend"
    ]
  },
  {
    "objectID": "Hiplot/062-gene-trend.html#setup",
    "href": "Hiplot/062-gene-trend.html#setup",
    "title": "Gene Cluster Trend",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; Mfuzz; ggplotify; RColorBrewer\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"Mfuzz\", quietly = TRUE)) {\n  install_github(\"MatthiasFutschik/Mfuzz\")\n}\nif (!requireNamespace(\"ggplotify\", quietly = TRUE)) {\n  install.packages(\"ggplotify\")\n}\nif (!requireNamespace(\"RColorBrewer\", quietly = TRUE)) {\n  install.packages(\"RColorBrewer\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(Mfuzz)\nlibrary(ggplotify)\nlibrary(RColorBrewer)",
    "crumbs": [
      "HIPLOT",
      "Gene Cluster Trend"
    ]
  },
  {
    "objectID": "Hiplot/062-gene-trend.html#data-preparation",
    "href": "Hiplot/062-gene-trend.html#data-preparation",
    "title": "Gene Cluster Trend",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data are a gene expression matrix with each row represent a gene and each column represent a time-point sample.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/gene-trend/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\n## Convert a gene expression matrix to an ExpressionSet object\nrow.names(data) &lt;- data[,1]\ndata &lt;- data[,-1]\ndata &lt;- as.matrix(data)\neset &lt;- new(\"ExpressionSet\", exprs = data)\n## Filter genes with more than 25% missing values\neset &lt;- filter.NA(eset, thres=0.25)\n\n0 genes excluded.\n\n## Remove genes with small differences between samples based on standard deviation\neset &lt;- filter.std(eset, min.std=0, visu = F)\n\n0 genes excluded.\n\n## Data Standardization\neset &lt;- standardise(eset)\n## Set the number of clusters\nc &lt;- 6\n## Evaluate the optimal m value\nm &lt;- mestimate(eset)\n## Perform mfuzz clustering\ncl &lt;- mfuzz(eset, c = c, m = m)\n\n# View data\nhead(data)\n\n           Time1      Time2       Time3\nGene1  0.1774993  1.6563226 -1.15259948\nGene2 -0.5037254 -0.5207024  0.46416071\nGene3  0.1050310  0.6079246  0.72893247\nGene4 -1.1791537  0.4340085  0.41061745\nGene5  0.8368975 -0.7047414 -1.46114720\nGene6  0.2611762  0.1351524 -0.01890809",
    "crumbs": [
      "HIPLOT",
      "Gene Cluster Trend"
    ]
  },
  {
    "objectID": "Hiplot/062-gene-trend.html#visualization",
    "href": "Hiplot/062-gene-trend.html#visualization",
    "title": "Gene Cluster Trend",
    "section": "Visualization",
    "text": "Visualization\n\n# Gene Cluster Trend\np &lt;- as.ggplot(function(){\n  mfuzz.plot2(\n  eset,\n  cl,\n  xlab = \"Time\",\n  ylab = \"Expression changes\",\n  mfrow = c(2,(c/2+0.5)),\n  colo = \"fancy\",\n  centre = T,\n  centre.col = \"red\",\n  time.labels = colnames(eset),\n  x11=F)\n  })\n\np\n\n\n\n\n\n\n\nFigure 1: Gene Cluster Trend\n\n\n\n\n\nAs shown in the example figure, the genes are clustered into different groups, with each group showing similar expression patterns across different time-points. The average expression trend is highlighted in each cluster.",
    "crumbs": [
      "HIPLOT",
      "Gene Cluster Trend"
    ]
  },
  {
    "objectID": "Hiplot/010-barplot.html",
    "href": "Hiplot/010-barplot.html",
    "title": "Barplot",
    "section": "",
    "text": "Bar charts are used to display category data with rectangular bars whose height or length is proportional to the value they represent. Bar charts can be drawn vertically or horizontally. The bar chart shows the comparison between the discrete categories. One axis of the chart shows the specific categories to be compared, and the other axis represents the measurements. Some bar charts show bars that can also show the values of multiple measurement variables.",
    "crumbs": [
      "HIPLOT",
      "Barplot"
    ]
  },
  {
    "objectID": "Hiplot/010-barplot.html#setup",
    "href": "Hiplot/010-barplot.html#setup",
    "title": "Barplot",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2; ggthemes\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"ggthemes\", quietly = TRUE)) {\n  install.packages(\"ggthemes\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(ggthemes)",
    "crumbs": [
      "HIPLOT",
      "Barplot"
    ]
  },
  {
    "objectID": "Hiplot/010-barplot.html#data-preparation",
    "href": "Hiplot/010-barplot.html#data-preparation",
    "title": "Barplot",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data are efficacy data of different doses of drugs in different treatment regimens.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/barplot/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# convert data structure\ndata[, 2] &lt;- factor(data[, 2], levels = unique(data[, 2]))\ndata[, 3] &lt;- factor(data[, 3], levels = unique(data[, 3]))\n\n# View data\nhead(data)\n\n  value  treat dose\n1    13 Group1 high\n2    34 Group2 high\n3    21 Group3 high\n4    43 Group4 high\n5    25 Group1  mid\n6     8 Group2  mid",
    "crumbs": [
      "HIPLOT",
      "Barplot"
    ]
  },
  {
    "objectID": "Hiplot/010-barplot.html#visualization",
    "href": "Hiplot/010-barplot.html#visualization",
    "title": "Barplot",
    "section": "Visualization",
    "text": "Visualization\n\n# Barplot\np &lt;- ggplot(data, aes(x = dose, y = value, fill = treat)) +\n  geom_bar(position = position_dodge(0.9), stat = \"identity\") +\n  ggtitle(\"Bar Plot\") +\n  geom_text(aes(label = value), position = position_dodge(0.9), vjust = 1.5, color = \"white\", size = 3.5) +\n  scale_fill_manual(values = c(\"#e04d39\",\"#5bbad6\",\"#1e9f86\",\"#3c5488ff\")) +\n  theme_stata() +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n\np\n\n\n\n\n\n\n\nFigure 1: Barplot\n\n\n\n\n\nThe bar chart shows the different effects of low, medium, and high doses in different treatment groups (groups 1 to 4). Group 1 had the best effect with medium dose treatment, group 2 had the best effect with high dose treatment, group 3 had no significant difference with dose treatment, and group 4 had the best effect with high dose treatment.",
    "crumbs": [
      "HIPLOT",
      "Barplot"
    ]
  },
  {
    "objectID": "Hiplot/161-scatter.html",
    "href": "Hiplot/161-scatter.html",
    "title": "Scatter",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot Scatter plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/scatter?lang=en\nTwo groups of data are used to form multiple coordinate points. By observing the distribution of coordinate points, it can judge whether there is correlation between variables or summarize the data processing mode of coordinate point distribution.",
    "crumbs": [
      "HIPLOT",
      "Scatter"
    ]
  },
  {
    "objectID": "Hiplot/161-scatter.html#setup",
    "href": "Hiplot/161-scatter.html#setup",
    "title": "Scatter",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)",
    "crumbs": [
      "HIPLOT",
      "Scatter"
    ]
  },
  {
    "objectID": "Hiplot/161-scatter.html#data-preparation",
    "href": "Hiplot/161-scatter.html#data-preparation",
    "title": "Scatter",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data are the horizontal axis values and their corresponding vertical axis values and groups.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/scatter/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# View data\nhead(data)\n\n  Value1 Value2  Group\n1      1      1 treat1\n2      2      4 treat1\n3      3      9 treat1\n4      4     16 treat1\n5      5     25 treat1\n6      6     36 treat1",
    "crumbs": [
      "HIPLOT",
      "Scatter"
    ]
  },
  {
    "objectID": "Hiplot/161-scatter.html#visualization",
    "href": "Hiplot/161-scatter.html#visualization",
    "title": "Scatter",
    "section": "Visualization",
    "text": "Visualization\n\n# Scatter\np &lt;- ggplot(data, aes(x = Value1, y = Value2)) +\n  geom_point(size = 1, alpha = 1, aes(color = Group, shape = Group)) +\n  ggtitle(\"Scatter Plot\") +\n  scale_color_manual(values = c(\"#00468BFF\", \"#ED0000FF\")) +\n  theme_bw() +\n  theme(text = element_text(family = \"Arial\"),\n        plot.title = element_text(size = 12,hjust = 0.5),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10),\n        axis.text.x = element_text(angle = 0, hjust = 0.5,vjust = 1),\n        legend.position = \"right\",\n        legend.direction = \"vertical\",\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 10))\n\np\n\n\n\n\n\n\n\nFigure 1: Scatter\n\n\n\n\n\nValue1 represents the horizontal axis and Value2 represents the vertical axis. The diagram shows that Value1 and Value2 in treatment plan 1 are positively correlated: that is, when Value1 becomes larger, Value2 will become larger; In treatment plan 2, two variables are negatively correlated: that is, when Value1 becomes larger, Value2 becomes smaller.",
    "crumbs": [
      "HIPLOT",
      "Scatter"
    ]
  },
  {
    "objectID": "Hiplot/078-gobubble.html",
    "href": "Hiplot/078-gobubble.html",
    "title": "GOBubble Plot",
    "section": "",
    "text": "The gobubble plot is used to display Z-score coloured bubble plot of terms ordered alternatively by z-score or the negative logarithm of the adjusted p-value.",
    "crumbs": [
      "HIPLOT",
      "GOBubble Plot"
    ]
  },
  {
    "objectID": "Hiplot/078-gobubble.html#setup",
    "href": "Hiplot/078-gobubble.html#setup",
    "title": "GOBubble Plot",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; GOplot; ggplotify\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"GOplot\", quietly = TRUE)) {\n  install.packages(\"GOplot\")\n}\nif (!requireNamespace(\"ggplotify\", quietly = TRUE)) {\n  install.packages(\"ggplotify\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(GOplot)\nlibrary(ggplotify)",
    "crumbs": [
      "HIPLOT",
      "GOBubble Plot"
    ]
  },
  {
    "objectID": "Hiplot/078-gobubble.html#data-preparation",
    "href": "Hiplot/078-gobubble.html#data-preparation",
    "title": "GOBubble Plot",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe loaded data are the results of GO enrichment with seven columns: category, GO id, GO term, gene count, gene name, logFC, adjust pvalue and zscore.\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/gobubble/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\n\n# Convert data structure\ncolnames(data) &lt;- c(\"category\",\"ID\",\"term\",\"count\",\"genes\",\"logFC\",\"adj_pval\",\"zscore\")\ndata &lt;- data[data$category %in% c(\"BP\",\"CC\",\"MF\"),]\ndata &lt;- data[!is.na(data$adj_pval),]\ndata$adj_pval &lt;- as.numeric(data$adj_pval)\ndata$zscore &lt;- as.numeric(data$zscore)\n\n# View data\nhead(data)\n\n  category         ID              term count  genes      logFC adj_pval\n1       BP GO:0007507 heart development    54   DLC1 -0.9707875 2.17e-06\n2       BP GO:0007507 heart development    54   NRP2 -1.5153173 2.17e-06\n3       BP GO:0007507 heart development    54   NRP1 -1.1412315 2.17e-06\n4       BP GO:0007507 heart development    54   EDN1  1.3813006 2.17e-06\n5       BP GO:0007507 heart development    54 PDLIM3 -0.8876939 2.17e-06\n6       BP GO:0007507 heart development    54   GJA1 -0.8179480 2.17e-06\n      zscore\n1 -0.8164966\n2 -0.8164966\n3 -0.8164966\n4 -0.8164966\n5 -0.8164966\n6 -0.8164966",
    "crumbs": [
      "HIPLOT",
      "GOBubble Plot"
    ]
  },
  {
    "objectID": "Hiplot/078-gobubble.html#visualization",
    "href": "Hiplot/078-gobubble.html#visualization",
    "title": "GOBubble Plot",
    "section": "Visualization",
    "text": "Visualization\n\n# GOBubble Plot\np &lt;- function () {\n  GOBubble(data, display = \"single\", title = \"GO Enrichment Bubbleplot\",\n           colour = c(\"#FC8D59\",\"#FFFFBF\",\"#99D594\"),\n           labels = 0,  ID = T, table.legend = T, table.col = T, bg.col = F) + \n  theme(plot.title = element_text(hjust = 0.5))\n}\np &lt;- as.ggplot(p)\n\np\n\n\n\n\n\n\n\nFigure 1: GOBubble Plot\n\n\n\n\n\nAs shown in the example figure, the x- axis of the plot represents the z-score. The negative logarithm of the adjusted p-value (corresponding to the significance of the term) is displayed on the y-axis. The area of the plotted circles is proportional to the number of genes assigned to the term. Each circle is coloured according to its category and labeled alternatively with the ID or term name.",
    "crumbs": [
      "HIPLOT",
      "GOBubble Plot"
    ]
  },
  {
    "objectID": "Hiplot/098-map-china-city.html",
    "href": "Hiplot/098-map-china-city.html",
    "title": "China Map (City)",
    "section": "",
    "text": "Note\n\n\n\nHiplot website\nThis page is the tutorial for source code version of the Hiplot China Map (City) plugin. You can also use the Hiplot website to achieve no code ploting. For more information please see the following link:\nhttps://hiplot.cn/basic/map-china-city?lang=en",
    "crumbs": [
      "HIPLOT",
      "China Map (City)"
    ]
  },
  {
    "objectID": "Hiplot/098-map-china-city.html#setup",
    "href": "Hiplot/098-map-china-city.html#setup",
    "title": "China Map (City)",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: data.table; jsonlite; ggplot2; RColorBrewer\n\n\n# Install packages\nif (!requireNamespace(\"data.table\", quietly = TRUE)) {\n  install.packages(\"data.table\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"RColorBrewer\", quietly = TRUE)) {\n  install.packages(\"RColorBrewer\")\n}\n\n# Load packages\nlibrary(data.table)\nlibrary(jsonlite)\nlibrary(ggplot2)\nlibrary(RColorBrewer)",
    "crumbs": [
      "HIPLOT",
      "China Map (City)"
    ]
  },
  {
    "objectID": "Hiplot/098-map-china-city.html#data-preparation",
    "href": "Hiplot/098-map-china-city.html#data-preparation",
    "title": "China Map (City)",
    "section": "Data Preparation",
    "text": "Data Preparation\n\n# Load data\ndata &lt;- data.table::fread(jsonlite::read_json(\"https://hiplot.cn/ui/basic/map-china-city/data.json\")$exampleData$textarea[[1]])\ndata &lt;- as.data.frame(data)\ndt_map &lt;- readRDS(url(\"https://download.hiplot.cn/ui/basic/map-china-city/china.city.rds\"))\n\n# Convert data structure\ndt_map$Value &lt;- data$value[match(dt_map$city, data$name)]\n\n# View data\nhead(data)\n\n      name value\n1   北京市   756\n2   天津市   321\n3 石家庄市   232\n4   唐山市   467\n5 秦皇岛市   549\n6   邯郸市   226",
    "crumbs": [
      "HIPLOT",
      "China Map (City)"
    ]
  },
  {
    "objectID": "Hiplot/098-map-china-city.html#visualization",
    "href": "Hiplot/098-map-china-city.html#visualization",
    "title": "China Map (City)",
    "section": "Visualization",
    "text": "Visualization\n\n# China Map (City)\np &lt;- ggplot(dt_map) +\n  geom_polygon(aes(x = long, y = lat, group = group, fill = Value),\n               alpha = 0.9, size = 0.5) +\n  geom_path(aes(x = long, y = lat, group = group), color = \"black\", size = 0.2) +\n  coord_fixed() +\n  scale_fill_gradientn(\n    colours = colorRampPalette(rev(brewer.pal(11,\"RdYlBu\")))(500),\n    breaks = seq(min(data$value), max(data$value), \n                 round((max(data$value)-min(data$value))/7)),\n    name = \"\",\n    guide = guide_legend(\n      direction = \"vertical\", keyheight = unit(1, units = \"mm\"),\n      keywidth = unit(8, units = \"mm\"),\n      title.position = \"top\", title.hjust = 0.5, label.hjust = 0.5,\n      nrow = 1, byrow = T, reverse = F, label.position = \"bottom\")) +\n  theme(text = element_text(color = \"#3A3F4A\"),\n        axis.text = element_blank(),\n        axis.ticks = element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        legend.position = \"top\",\n        legend.text = element_text(size = 4 * 1.5, color = \"black\"),\n        legend.title = element_text(size = 5 * 1.5, color = \"black\"),\n        plot.title = element_text(\n          face = \"bold\", size = 5 * 1.5, hjust = 0.5, \n          margin = margin(t = 4, b = 5), color = \"black\"),\n        plot.background = element_rect(fill = \"#FFFFFF\", color = \"#FFFFFF\"),\n        panel.background = element_rect(fill = \"#FFFFFF\", color = NA),\n        legend.background = element_rect(fill = \"#FFFFFF\", color = NA),\n        plot.margin = unit(c(1.5, 1.5, 1.5, 1.5), \"cm\")) +\n  labs(x = NULL, y = NULL, title = \"China City Map\")\n\np\n\n\n\n\n\n\n\nFigure 1: China Map (City)",
    "crumbs": [
      "HIPLOT",
      "China Map (City)"
    ]
  }
]