[
  {
    "objectID": "Distribution/Ridgeline.html",
    "href": "Distribution/Ridgeline.html",
    "title": "Ridgeline Plot",
    "section": "",
    "text": "A ridgeline plot, also known as a joyplot, visualizes the distribution of multiple numeric variables across different categories. This method is useful for comparing density distributions while preserving an overall view of trends and variations.",
    "crumbs": [
      "Distribution",
      "Ridgeline Plot"
    ]
  },
  {
    "objectID": "Distribution/Ridgeline.html#example",
    "href": "Distribution/Ridgeline.html#example",
    "title": "Ridgeline Plot",
    "section": "Example",
    "text": "Example\n\n\n\n\n\nA Ridgeline plot represents the distribution of a numeric variable across several groups. In this example, the plot displays the distribution of diamond prices across different quality categories. The x-axis represents price values, while the density curves illustrate how frequently each price occurs within each quality group.",
    "crumbs": [
      "Distribution",
      "Ridgeline Plot"
    ]
  },
  {
    "objectID": "Distribution/Ridgeline.html#setup",
    "href": "Distribution/Ridgeline.html#setup",
    "title": "Ridgeline Plot",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming Language: R\nDependencies: readr, ggplot2, ggridges, viridis, hrbrthemes\n\n\n# Installing necessary packages\nif (!requireNamespace(\"readr\", quietly = TRUE)) {\n  install.packages(\"readr\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"ggridges\", quietly = TRUE)) {\n  install.packages(\"ggridges\")\n}\nif (!requireNamespace(\"hrbrthemes\", quietly = TRUE)) {\n  install.packages(\"hrbrthemes\")\n}\nif (!requireNamespace(\"viridis\", quietly = TRUE)) {\n  install.packages(\"viridis\")\n}\n\n# Loading the libraries\nlibrary(readr)      # For reading TSV files\nlibrary(dplyr)      # For data manipulation\nlibrary(ggplot2)    # For creating plots\nlibrary(ggridges)   # For density ridgeline plots\nlibrary(hrbrthemes) # For enhanced ggplot2 themes\nlibrary(viridis)    # For color maps",
    "crumbs": [
      "Distribution",
      "Ridgeline Plot"
    ]
  },
  {
    "objectID": "Distribution/Ridgeline.html#data-preparation",
    "href": "Distribution/Ridgeline.html#data-preparation",
    "title": "Ridgeline Plot",
    "section": "Data Preparation",
    "text": "Data Preparation\nHere’s a brief tutorial using the built-in R datasets (iris) and the Lung Cancer (Raponi 2006) dataset from UCSC Xena DATASETS.\n\n# Load iris dataset\ndata(\"iris\")\n\n# Load Lung Cancer (Raponi 2006) clinical data\nTCGA_clinic &lt;- read_tsv(\"https://ucsc-public-main-xena-hub.s3.us-east-1.amazonaws.com/download/raponi2006_public%2Fraponi2006_public_clinicalMatrix.gz\") %&gt;%\n  mutate(T = as.factor(T))\nhead(TCGA_clinic)\n\n# A tibble: 6 × 16\n  sampleID   Age Differentiation Gender Histology     M     N Race \n  &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n1 LS-1        75 mod_poor        M      SCC           0     0 w    \n2 LS-10       61 poor            F      SCC           0     0 w    \n3 LS-100      72 mod             M      SCC           0     0 w    \n4 LS-101      75 mod             M      SCC           0     1 w    \n5 LS-102      76 mod             F      SCC           0     0 w    \n6 LS-103      58 well_mod        M      SCC           0     1 w    \n# ℹ 8 more variables: Smoking_History_Packyears &lt;dbl&gt;, Stage &lt;chr&gt;,\n#   OS.time &lt;dbl&gt;, T &lt;fct&gt;, OS &lt;chr&gt;, `_INTEGRATION` &lt;chr&gt;, `_PATIENT` &lt;chr&gt;,\n#   `_GENOMIC_ID_raponi2006` &lt;chr&gt;",
    "crumbs": [
      "Distribution",
      "Ridgeline Plot"
    ]
  },
  {
    "objectID": "Distribution/Ridgeline.html#visualization",
    "href": "Distribution/Ridgeline.html#visualization",
    "title": "Ridgeline Plot",
    "section": "Visualization",
    "text": "Visualization\n\n1. Basic Ridgeline Plot\nFigure 1 illustrates the distribution of the Sepal.Length variable across different Species.\n\n# Basic Ridgeline plot\np1_1 &lt;- ggplot(iris, aes(x = Sepal.Length, y = Species, fill = Species)) +\n  geom_density_ridges(alpha = 0.5) +\n  theme_ridges(font_size = 16, grid = TRUE) +\n  theme(legend.position = \"right\")\n\np1_1\n\n\n\n\n\n\n\nFigure 1: Basic Ridgeline Plot Using the iris Dataset\n\n\n\n\n\nFigure 2 illustrates the distribution of the OS.time variable across primary tumor conditions and survival status.\n\n# Basic Ridgeline plot\np1_2 &lt;- ggplot(TCGA_clinic, aes(x = OS.time, y = T, fill = T)) +\n  geom_density_ridges(alpha = 0.5, scale = 2) +\n  theme_ridges(font_size = 16, grid = TRUE) +\n  theme(legend.position = \"right\")\n\np1_2\n\n\n\n\n\n\n\nFigure 2: Basic Ridgeline Plot Using the Lung Cancer (Raponi 2006) Dataset\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nKey function notes: geom_density_ridges() / theme_ridges()\ngeom_density_ridges()\ngeom_density_ridges is a very flexible function that can be used to create multiple styles of ridgeline plots.\nHere are some commonly used parameters and options for geom_density_ridges():\n\nalpha: Sets the transparency.\ncolour: Sets the line color.\nfill: Fills colors based on categorical variables.\nscale: Controls the overlap between ridges.\n\ntheme_ridges()\ntheme_ridges is a theme function provided by the ggridges package specifically for beautifying ridge plots.\nThe parameters of this function include:\n\n**font_size**: Overall font size, default is 14.\nline_size: Default line size.\ngrid: If set to TRUE (default), it will draw a background grid; if set to FALSE, the background will be blank.\n\n\n\n\n\n2. Histogram Ridgeline Plots\nHistogram ridgeline plots are ideal for displaying data distributions and counts, whereas traditional ridgeline plots are better suited for comparing distribution shapes across categories. Density can be represented in various ways; for instance, setting stat = “binline” creates a histogram-like appearance for each distribution.\nFigure 3 illustrates the Sepal The distribution of the Length variable on different specifications.\n\np2_1 &lt;- ggplot(iris, aes(x = Sepal.Length, y = Species, fill = Species)) +\n  geom_density_ridges(alpha = 0.5, stat = \"binline\", bins = 10) +\n  theme_ridges(font_size = 16, grid = TRUE) +\n  theme(legend.position = \"none\")\n\np2_1\n\n\n\n\n\n\n\nFigure 3: Histogram Ridgeline Plots Using the iris Dataset\n\n\n\n\n\nFigure 4 illustrates the distribution of the OS.time variable in primary tumor conditions and survival status\n\np2_2 &lt;- ggplot(TCGA_clinic, aes(x = OS.time, y = T, fill = T)) +\n  geom_density_ridges(alpha = 0.5, stat = \"binline\", bins = 10) +\n  theme_ridges(font_size = 16, grid = TRUE) +\n  theme(legend.position = \"none\")\n\np2_2\n\n\n\n\n\n\n\nFigure 4: Histogram Ridgeline Plots Using the Lung Cancer (Raponi 2006) Dataset\n\n\n\n\n\n\n\n3. Ridgeline Plot with Variable Colors\nColors can be assigned based on numerical variables instead of categorical ones, allowing for a more intuitive visualization of changes in data size.\nFigure 5 illustrates the Sepal The distribution of the Length variable on different specifications.\n\np3_1 &lt;- ggplot(iris, aes(x = Sepal.Length, y = Species, fill = ..x..)) +  # Create ridge plot\n  geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) +  # Adjust parameters\n  scale_fill_viridis(name = \"Sepal.Length\", option = \"C\") +  # Adjust color mapping\n  labs(title = 'Sepal.Length in iris') + \n  theme_ipsum() +   # Set image theme\n  theme(legend.position = \"bottom\",  \n        panel.spacing = unit(0.1, \"lines\"),\n        strip.text.x = element_text(size = 8))\n\np3_1\n\n\n\n\n\n\n\nFigure 5: Ridgeline Plot with Variable Colors Using the iris Dataset\n\n\n\n\n\nFigure 6 illustrates the distribution of the OS.time variable in primary tumor conditions and survival status.\n\np3_2 &lt;- ggplot(TCGA_clinic, aes(x = OS.time, y = T, fill = ..x..)) +  # Create ridge plot\n  geom_density_ridges_gradient(scale = 1, rel_min_height = 0.01) +  # Adjust parameters\n  scale_fill_viridis(name = \"OS.time\", option = \"C\") +  # Adjust color mapping\n  labs(title = 'Distribution of OS.time in different tumor staging') + \n  theme_ipsum() +   # Set image theme\n  theme(legend.position = \"bottom\", panel.spacing = unit(0.1, \"lines\"),\n        strip.text.x = element_text(size = 8))\n\np3_2\n\n\n\n\n\n\n\nFigure 6: Ridgeline Plot with Variable Colors Using the Lung Cancer (Raponi 2006) Dataset\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nKey function notes: scale_fill_viridis() / theme_ipsum()\nscale_fill_viridis()\nThis function from the viridis package provides color mapping schemes for continuous data.\nCommonly used parameters include:\n\nbegin and end: Control the start and end positions of the color mapping (values between 0 and 1).\ndirection: Controls the color direction.\n\nA value of 1 gradually darkens the color from low to high values.\nA value of -1 reverses this direction.\n\noption: Selects a predefined color scheme from the viridis package (e.g., “magma”, “inferno”, or “plasma”).\naesthetics: Specifies whether the color is applied to the fill (fill) or the outline (colour).\n\ntheme_ipsum()\nThis function from the hrbrthemes package provides a predefined theme for ggplot2.\nHere are some themes available in the hrbrthemes package:\n\ntheme_ipsum(): The core theme, featuring Arial Narrow font and emphasizing good typography and readability.\ntheme_ft_rc(): A clean and precise theme with a focus on typography.\ntheme_ipsum_rc(): A variant of theme_ipsum(), with possible different typography or color choices.\ntheme_ipsum_tw(): A theme designed for Twitter branding, using Twitter’s colors and font styles.\ntheme_ipsum_ps(): Optimized for print design with specific typography and color choices.\ntheme_modern_rc(): A modern, minimalist theme suited for contemporary data visualization needs.",
    "crumbs": [
      "Distribution",
      "Ridgeline Plot"
    ]
  },
  {
    "objectID": "Distribution/Ridgeline.html#applications",
    "href": "Distribution/Ridgeline.html#applications",
    "title": "Ridgeline Plot",
    "section": "Applications",
    "text": "Applications\n\n1. Ridgeline Plot for Group Comparison\n\n\n\n\n\n\nFigure 7: Applications of Ridgeline Plot for Group Comparison\n\n\n\nRidgeline plots are used to visualize cytokine expression across various experimental conditions and to compare gene expression distributions in different cell populations. [1]\n\n\n2. Using Ridgeline Plots to Visualize Gene Set Enrichment Analysis Results\n\n\n\n\n\n\nFigure 8: Applications of Using Ridgeline Plots to Visualize Gene Set Enrichment Analysis Results\n\n\n\nRidgeline plots are used to visualize gene set enrichment analysis results, highlighting biomarkers associated with Moyamoya disease. [2]",
    "crumbs": [
      "Distribution",
      "Ridgeline Plot"
    ]
  },
  {
    "objectID": "Distribution/Ridgeline.html#reference",
    "href": "Distribution/Ridgeline.html#reference",
    "title": "Ridgeline Plot",
    "section": "Reference",
    "text": "Reference\n\nKrämer B, Nalin AP, Ma F, Eickhoff S, Lutz P, Leonardelli S, Goeser F, Finnemann C, Hack G, Raabe J, ToVinh M, Ahmad S, Hoffmeister C, Kaiser KM, Manekeller S, Branchi V, Bald T, Hölzel M, Hüneburg R, Nischalke HD, Semaan A, Langhans B, Kaczmarek DJ, Benner B, Lordo MR, Kowalski J, Gerhardt A, Timm J, Toma M, Mohr R, Türler A, Charpentier A, van Bremen T, Feldmann G, Sattler A, Kotsch K, Abdallah AT, Strassburg CP, Spengler U, Carson WE 3rd, Mundy-Bosse BL, Pellegrini M, O’Sullivan TE, Freud AG, Nattermann J. Single-cell RNA sequencing identifies a population of human liver-type ILC1s. Cell Rep. 2023 Jan 31;42(1):111937. doi: 10.1016/j.celrep.2022.111937. Epub 2023 Jan 1. PMID: 36640314; PMCID: PMC9950534.\nXu Y, Chen B, Guo Z, Chen C, Wang C, Zhou H, Zhang C, Feng Y. Identification of diagnostic markers for moyamoya disease by combining bulk RNA-sequencing analysis and machine learning. Sci Rep. 2024 Mar 11;14(1):5931. doi: 10.1038/s41598-024-56367-w. PMID: 38467737; PMCID: PMC10928210.\nWickham, H. (2009). ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. ISBN 978-0-387-98140-6 (Print) 978-0-387-98141-3 (E-Book). [DOI: 10.1007/978-0-387-98141-3] (https://doi.org/10.1007/978-0-387-98141-3)\nScherer, C. (2019). ggridges: Ridgeline plots in ‘ggplot2’. Journal of Statistical Software, 88(1), 1-19. [DOI: 10.18637/jss.v088.i01] (https://doi.org/10.18637/jss.v088.i01)\nGarnier, S., Team, R. C., & Team, R. S. (2018). viridis: Default color maps for R. R package version 0.5.1. https://CRAN.R-project.org/package=viridis\nFournet, H. (2016). hrbrthemes: Additional themes, scales, and geoms for ‘ggplot2’. R package version 1.7.6. https://CRAN.R-project.org/package=hrbrthemes",
    "crumbs": [
      "Distribution",
      "Ridgeline Plot"
    ]
  },
  {
    "objectID": "Distribution/Density.html",
    "href": "Distribution/Density.html",
    "title": "Density Plot",
    "section": "",
    "text": "A density plot represents the distribution of a numerical variable using kernel density estimation to display the probability density function. It is a smoothed version of a histogram, sharing the same concept but providing a clearer representation of the overall trend and shape of the data.",
    "crumbs": [
      "Distribution",
      "Density Plot"
    ]
  },
  {
    "objectID": "Distribution/Density.html#example",
    "href": "Distribution/Density.html#example",
    "title": "Density Plot",
    "section": "Example",
    "text": "Example\n\n\n\n\n\nThis density plot illustrates the distribution of expression levels for the TSPAN6 gene across multiple samples. The x-axis represents the data values (e.g., gene expression levels ranging from 8 to 15), while the y-axis represents density, not absolute counts. The y-axis can be interpreted as the “relative frequency” of data values within a specific interval. The total area under the density curve is 1, representing the relative probability distribution of the data across the x-axis. In simpler terms, it measures the proportion of samples within a specific value range relative to the total sample size.\nUnlike histograms, which use absolute frequencies on the y-axis, density plots use density values, resulting in a smoother representation of data distribution. This allows for a clearer visualization of the data’s central tendency and overall distribution characteristics.\nThe plot shows that the expression levels of the TSPAN6 gene are concentrated between 10 and 13, with a peak around 12, indicating that most samples have relatively consistent expression levels. The unimodal distribution suggests that the expression pattern of TSPAN6 is stable across most samples.",
    "crumbs": [
      "Distribution",
      "Density Plot"
    ]
  },
  {
    "objectID": "Distribution/Density.html#setup",
    "href": "Distribution/Density.html#setup",
    "title": "Density Plot",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming Language: R\nDependencies: ggplot2, ggExtra, hrbrthemes, dplyr, tidyr, viridis, ggpmisc, ggpubr, geomtextpath, cowplot\n\n\n# Installing necessary packages \nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {   \n  install.packages(\"ggplot2\") \n} \nif (!requireNamespace(\"ggExtra\", quietly = TRUE)) {   \n  install.packages(\"ggExtra\") \n} \nif (!requireNamespace(\"hrbrthemes\", quietly = TRUE)) {\n  install.packages(\"hrbrthemes\") \n} \nif (!requireNamespace(\"dplyr\", quietly = TRUE)) {\n  install.packages(\"dplyr\") \n} \nif (!requireNamespace(\"tidyr\", quietly = TRUE)) {\n  install.packages(\"tidyr\") \n} \nif (!requireNamespace(\"viridis\", quietly = TRUE)) {\n  install.packages(\"viridis\") \n} \nif (!requireNamespace(\"ggpmisc\", quietly = TRUE)) {\n  install.packages(\"ggpmisc\") \n} \nif (!requireNamespace(\"ggpubr\", quietly = TRUE)) {\n  install.packages(\"ggpubr\") \n} \nif (!requireNamespace(\"geomtextpath\", quietly = TRUE)) {\n  install.packages(\"geomtextpath\") \n}  \nif (!requireNamespace(\"cowplot\", quietly = TRUE)) {\n  install.packages(\"cowplot\")\n}\n\n# Loading the libraries \nlibrary(ggplot2)       # For creating plots \nlibrary(ggExtra)       # For enhancing ggplot2 graphics \nlibrary(hrbrthemes)    # For professional themes \nlibrary(dplyr)         # For data manipulation\nlibrary(tidyr)         # For reshaping data\nlibrary(viridis)       # For color maps \nlibrary(ggpmisc)       # For statistical annotations \nlibrary(ggpubr)        # For publication-ready themes \nlibrary(geomtextpath)  # For adding text to density curves\nlibrary(cowplot)        # Plot alignment and annotation package",
    "crumbs": [
      "Distribution",
      "Density Plot"
    ]
  },
  {
    "objectID": "Distribution/Density.html#data-preparation",
    "href": "Distribution/Density.html#data-preparation",
    "title": "Density Plot",
    "section": "Data Preparation",
    "text": "Data Preparation\nHere’s a brief tutorial using the built-in R datasets (iris, mtcars, diamonds) and the TCGA-LIHC.htseq_counts.tsv dataset from UCSC Xena DATASETS. This example demonstrates how to load and work with these datasets in R.\n\n# Read the TSV data \ndata &lt;- readr::read_tsv(\"https://bizard-1301043367.cos.ap-guangzhou.myqcloud.com/TCGA-LIHC.htseq_counts.tsv.gz\")  \n\n# Filter and reshape data for the first gene TSPAN6 (Ensembl ID: ENSG00000000003.13)\ndata1 &lt;- data %&gt;%   \n  filter(Ensembl_ID == \"ENSG00000000003.13\") %&gt;%   \n  pivot_longer(     \n    cols = -Ensembl_ID,      \n    names_to = \"sample\",      \n    values_to = \"expression\"   \n    ) %&gt;%   \n  mutate(var = \"var1\")  # Add a column to differentiate the variables  \n\n# Filter and reshape data for the second gene SCYL3 (Ensembl ID: ENSG00000000457.12)\ndata2 &lt;- data %&gt;%   \n  filter(Ensembl_ID == \"ENSG00000000457.12\") %&gt;%   \n  pivot_longer(     \n    cols = -Ensembl_ID,      \n    names_to = \"sample\",      \n    values_to = \"expression\"   \n    ) %&gt;%   \n  mutate(var = \"var2\")  # Add a column to differentiate the variables  \n\n# Combine the two datasets \ndata12 &lt;- bind_rows(data1, data2)  \n\n# View the final combined dataset \nhead(data12)\n\n# A tibble: 6 × 4\n  Ensembl_ID         sample           expression var  \n  &lt;chr&gt;              &lt;chr&gt;                 &lt;dbl&gt; &lt;chr&gt;\n1 ENSG00000000003.13 TCGA-DD-A4NG-01A      12.8  var1 \n2 ENSG00000000003.13 TCGA-G3-AAV4-01A       9.72 var1 \n3 ENSG00000000003.13 TCGA-2Y-A9H1-01A      11.3  var1 \n4 ENSG00000000003.13 TCGA-CC-A3M9-01A      11.6  var1 \n5 ENSG00000000003.13 TCGA-K7-AAU7-01A      11.5  var1 \n6 ENSG00000000003.13 TCGA-BC-A10W-01A      12.0  var1",
    "crumbs": [
      "Distribution",
      "Density Plot"
    ]
  },
  {
    "objectID": "Distribution/Density.html#visualization",
    "href": "Distribution/Density.html#visualization",
    "title": "Density Plot",
    "section": "Visualization",
    "text": "Visualization\n\n1. Basic Density Plot\nIn the ggplot2 package, you can create a density plot using geom_density, which requires only a numeric variable as input.\n\n# Basic Density Plot \np1 &lt;- ggplot(data1, aes(x = expression)) +   \n  geom_density(fill = \"#69b3a2\", color = \"#e9ecef\", alpha = 0.8) +   \n  labs(title = \"Density Plot of TSPAN6 Expression Levels\",        \n       x = \"Expression\",        \n       y = \"Density\") +   \n  theme_minimal()  \np1\n\n\n\n\n\n\n\nFigure 1: Basic Density Plot\n\n\n\n\n\nFigure 1 illustrates the distribution of expression levels of the TSPAN6 gene across multiple samples from LIHC patients sourced from TCGA.\n\n\n\n\n\n\nTip\n\n\n\ntheme_ipsum You can use the theme_ipsum from the hrbrthemes package: it is easy to use and makes your charts look more professional. As you can see, theme_ipsum() comes with a set of pre-configured settings, such as font size, color, and gridlines, which adhere to good visualization practices, are well-designed, and are ready for publishing.\n\nggplot(data1, aes(x = expression)) +\n  geom_density(fill = \"#69b3a2\", color = \"#e9ecef\", alpha = 0.8) +\n  labs(title = \"Density Plot of TSPAN6 Expression Levels\",\n       x = \"Expression\",\n       y = \"Density\") +\n  theme_ipsum()\n\n\n\n\n\n\n\nFigure 2: Themed Density Plot\n\n\n\n\n\n\n\n\n\n2. Mirrored Density Plot\nThe mirror density plot helps us intuitively compare the distributions of two datasets. Through the mirrored structure, we can quickly determine whether the two datasets exhibit symmetry or differences. The mirror density plot combines two density plots into a single graph, reducing the required visualization space while maintaining a clear description of the data distribution.\n\n# Create a mirrored density plot \nggplot(data12, aes(x = expression, fill = var)) +\n\n  # Draw the upper density curve\n  geom_density(data = filter(data12, var == \"var1\"), aes(y = ..density..), fill = \"#69b3a2\", alpha = 0.8) +\n  geom_label(data = filter(data12, var == \"var1\"), aes(x = median(expression), y = 0.25, label = \"TSPAN6\"), color = \"white\", fill = \"#1b9e77\") +\n  \n  # Draw the lower density curve\n  geom_density(data = filter(data12, var == \"var2\"), aes(y = -..density..), fill = \"#404080\", alpha = 0.8) +\n  geom_label(data = filter(data12, var == \"var2\"), aes(x = median(expression), y = -0.25, label = \"C1QA\"), color = \"white\", fill = \"#7570b3\") +  \n\n  # Beautify the plot\n  xlab(\"Expression\") +\n  ylab(\"Density\") +\n  ggtitle(\"Mirror Density Plot of TSPAN6 and C1QA\") +\n  theme(legend.position = \"none\") +\n  theme_minimal()\n\n\n\n\n\n\n\nFigure 3: Mirrored Density Plot\n\n\n\n\n\nFigure 3 demonstrates the expression distribution of the TSPAN6 and C1QA genes in LIHC patients sourced from TCGA. The same approach can also be used to generate a mirrored histogram.\n\n\n3. Multiple Groups Density Plot\nA multi-group density plot allows for an intuitive comparison of the distribution differences between different groups, helping to identify trends, patterns, and outliers, while presenting data from multiple groups on the same plot, making it easier to compare group characteristics. However, when there are many groups or the distribution curves overlap, the plot can become cluttered, making it difficult to distinguish the differences between groups, which reduces the readability of the chart. Transparency adjustments can be made to reduce visual interference from overlapping areas. However, this method can only improve the visualization to a certain extent and is not a universal solution. Other plotting methods discussed later in this document (e.g., facet density plots) can be used to resolve this issue.\n\n# Without transparency (left)\np1 &lt;- ggplot(data=diamonds, aes(x=price, group=cut, fill=cut)) +\n  geom_density(adjust=1.5) +\n  theme_minimal() +\n  ggtitle(\"p1\")\n\n# With transparency (right)\np2 &lt;- ggplot(data=diamonds, aes(x=price, group=cut, fill=cut)) +\n  geom_density(adjust=1.5, alpha=.4) +\n  theme_minimal() +\n  ggtitle(\"p2\")\n\nplot_grid(p1, p2, ncol = 2)\n\n\n\n\n\n\n\nFigure 4: Multiple Groups Density Plot Using the Diamonds Dataset\n\n\n\n\n\nFigure 4 compares the density distributions of the diamonds dataset’s price under different transparency settings. The left plot (p1) does not apply transparency, with all group fill colors opaque. The graph is overall crowded, and there is significant overlap between groups, making it hard to interpret the information. The right plot (p2) applies transparency, making the color layering effects between different groups more prominent, thus allowing for a clearer observation of the density distribution characteristics of each group.\n\n# Create annotation framework\nannot &lt;- data.frame(\n  Species = c(\"setosa\", \"versicolor\", \"virginica\"),\n  x = c(1.8, 4, 5.1),  # Annotation positions for each species\n  y = c(0.5, 0.9, .8)\n)\n\n# Generate density plot\nggplot(filter(iris, Species %in% c(\"setosa\", \"versicolor\", \"virginica\")), aes(x = Petal.Length, color = Species, fill = Species)) +\n  geom_density(alpha = 0.6) +\n  scale_fill_viridis(discrete = TRUE) +\n  scale_color_viridis(discrete = TRUE) +\n  geom_text(data = annot, aes(x = x, y = y, label = Species, color = Species), hjust = 0, size = 4.5) +\n  theme_minimal() +\n  theme(\n    legend.position = \"none\"\n  ) +\n  ylab(\"\") +\n  xlab(\"Petal Length (cm)\")\n\n\n\n\n\n\n\nFigure 5: Multiple Groups Density Plot Using the Iris Dataset\n\n\n\n\n\nFigure 5 shows the distribution density of petal length (Petal.Length) for different species in the Iris dataset, allowing for a clear visualization of the distribution differences in petal length across species.\n\n\n4. Faceted Density Plot\nFacet density plots for multiple variables, by displaying data from different groups in different panels, allow for a more intuitive comparison of distribution differences between groups, reducing visual clutter. If all panels share the same X-axis, the distribution features of each group, such as central tendency, spread, and shape, can still be compared. Facet density plots for multiple variables are created using facet_wrap().\n\nggplot(data=diamonds, aes(x=price, group=cut, fill=cut)) +\n  geom_density(adjust=1.5) +\n  theme_ipsum() +\n  facet_wrap(~cut) + \n  theme(\n    legend.position=\"none\",\n    panel.spacing = unit(0.1, \"lines\"),\n    axis.ticks.x=element_blank()\n  )\n\n\n\n\n\n\n\nFigure 6: Faceted Density Plot\n\n\n\n\n\nFigure 6 demonstrates the price distribution for different cut grades in the diamonds dataset. The density curve for each cut grade is displayed in separate facets, making it easier to observe the price distribution pattern of each cut grade within the same coordinate system.\n\n\n5. Stacked Density Plot\nIn a stacked density plot, the density distributions of different groups are stacked on top of each other, avoiding the confusion caused by overlapping curves. However, since the groups are stacked, it becomes difficult to understand the distribution of groups not at the bottom of the chart (facet density plots are recommended here).\n\np &lt;- ggplot(data=diamonds, aes(x=price, group=cut, fill=cut)) +\n  geom_density(adjust=1.5, position=\"fill\") +\n  theme_ipsum()\np\n\n\n\n\n\n\n\nFigure 7: Stacked Density Plot\n\n\n\n\n\nFigure 7 shows the relative distribution of prices for different cut grades in the diamonds dataset. By using a stacked density plot (position=“fill”), the cumulative density for all groups at each price position sums to 1, making it easier to compare the relative density distributions of different cut grades.\n\n\n6. Marginal distributions (density plots)\nMarginal distributions provide additional information about the data, not only showing the relationships between variables but also revealing the independent distribution characteristics of each variable. Combining marginal density plots with scatter plots (or other main plots) offers a comprehensive view, making it easier to detect patterns, outliers, and trends in the data. Marginal distributions (density plots) can be drawn using the ggMarginal() function from the ggExtra package.\n\np &lt;- ggplot(mtcars, aes(x = wt, y = mpg, color = factor(cyl), size = factor(cyl))) +\n  geom_point(aes(color = factor(cyl)), show.legend = TRUE) +  # Scatter plot with size variation based on cyl\n  geom_smooth(method = 'lm', formula = y ~ x, se = TRUE, linewidth = 1, aes(color = factor(cyl))) +  # Regression curve with color and width based on cyl\n  scale_color_manual(values = c(\"#2e3b97\", \"#faad61\", \"#b76252\")) +  # Specifying colors for the regression curves\n  stat_poly_eq(aes(label = paste(after_stat(eq.label), after_stat(rr.label), after_stat(p.value.label), sep = \"~~~~\")), \n               formula = y ~ x, size = 4,\n               hjust = -1,   # Adjust horizontal alignment\n               vjust = 1.1,   # Adjust vertical alignment\n               position = position_nudge(x = 2.7, y = 1)) + \n  theme(legend.position = \"none\")  # Hide legend\n\n# Add marginal density plot to the scatter plot\np1 &lt;- ggMarginal(p, type=\"density\")  \n\np1\n\n\n\n\n\n\n\nFigure 8: Marginal Density Plot\n\n\n\n\n\nThe scatter plot shows the relationship between car weight (wt) and miles per gallon (mpg) for different cylinder counts (cyl) in the mtcars dataset. The marginal density plot shows the distribution patterns of wt (weight) and mpg (miles per gallon) for cars with different cylinder counts (cyl), revealing the differences in wt or mpg between the different cylinder groups.\n\n\n\n\n\n\nTip\n\n\n\nCustomizable Parameters for Plots with Marginal Distributions\n\nChange the size of the marginal plot using the size parameter.\nCustomize the appearance of the marginal plot with common parameters.\nDisplay only one marginal plot (either the x or y axis) using margins = 'x' or margins = 'y'.\n\n\np &lt;- ggplot(mtcars, aes(x = wt, y = mpg, color = factor(cyl), size = factor(cyl))) +\n  geom_point(aes(color = factor(cyl)), show.legend = TRUE) +  # Scatter plot with size variation based on cyl\n  geom_smooth(method = 'lm', formula = y ~ x, se = TRUE, linewidth = 1, aes(color = factor(cyl))) +  # Regression curve with color and width based on cyl\n  scale_color_manual(values = c(\"#2e3b97\", \"#faad61\", \"#b76252\")) +  # Specifying colors for the regression curves\n  stat_poly_eq(aes(label = paste(after_stat(eq.label), after_stat(rr.label), after_stat(p.value.label), sep = \"~~~~\")),\n               formula = y ~ x, size = 4,\n               hjust = -1.45,   # Adjusted horizontal alignment (modified value)\n               vjust = 1.1,   # Adjust vertical alignment\n               position = position_nudge(x = 2.7, y = 1)) + \n  theme(legend.position = \"none\")  # Hide legend\n\n# Marginal density plot\np2 &lt;- ggMarginal(p, type=\"density\", margins = 'x', color=\"purple\", size = 4)  # Display only x-axis marginal density plot\n\np2\n\n\n\n\n\n\n\nFigure 9: Customizable Parameters for Plots with Marginal Distributions\n\n\n\n\n\nSimilar to the previous plot, Figure 9 also shows the relationship between weight (wt) and miles per gallon (mpg) for cars with different numbers of cylinders (cyl) in the mtcars dataset. The marginal density plot illustrates the distribution pattern of cars with different cylinder counts (cyl) in terms of mpg (miles per gallon).\n\n\n\n\n7. Annotated Density Plot\nAnnotated density plots allow key information or group names to be displayed directly on the plot, making it easier to understand the distribution and differences of data across groups without relying on a legend. This enhances the readability of the plot and improves the efficiency of information delivery. You can add text or labels along the density curve using ggplot2 and the geomtextpath package.\n\nggplot(iris, aes(x = Sepal.Length, colour = Species, label = Species)) +\n  geom_textdensity() +\n  theme_bw() + guides(color = 'none')\n\n\n\n\n\n\n\nFigure 10: Annotated Density Plot\n\n\n\n\n\nFigure 10 represents the Sepal.Length distribution for different species in the iris dataset using text density curves. The text layout adjusts dynamically according to the density of the distribution, making it easier to visually observe the distribution of sepal length across species.\n\n\n\n\n\n\nTip\n\n\n\nCustomizable Parameters for Labels in Annotated Density Plots\n\nChange the size of the text using the size parameter.\nCustomize the font style with the fontface parameter.\nAdjust vertical alignment with the vjust parameter.\nAdjust horizontal alignment with the hjust parameter. The last two parameters (vjust and hjust) can be floats (usually between -1 and 1) or strings such as xmid (or ymid), xmax (or ymax), and auto (default).\n\n\n\n\nmtcars$labels = ifelse(mtcars$vs==0, \"Type 0\", \"Type 1\")\nggplot(mtcars, aes(x = qsec, colour = as.factor(labels), label = as.factor(labels))) +\n  geom_textdensity(size = 6, fontface = 4, # Bold italic text\n                   vjust = -0.4, hjust = \"ymid\") +\n  theme_bw() + guides(color = 'none')  # Remove color guide\n\n\n\n\n\n\n\nFigure 11: Customizable Parameters for Annotated Density Plot\n\n\n\n\n\nFigure 11 shows the text density distribution of qsec (1/4 mile acceleration time) and vs (engine type) in the mtcars dataset. By adjusting text density properties, the labels become more noticeable and readable.",
    "crumbs": [
      "Distribution",
      "Density Plot"
    ]
  },
  {
    "objectID": "Distribution/Density.html#applications",
    "href": "Distribution/Density.html#applications",
    "title": "Density Plot",
    "section": "Applications",
    "text": "Applications\n\n1. Applications of Basic Density Plot\n\n\n\n\n\n\nMende, D. R. et al.(2016)\n\n\n\n\nFigure 12: Applications of Basic Density Plot\n\n\n\nFigure 12: Summary of the coverage of iSAGs assembled from the metagenomic and single-cell datasets used in this study. (A) Fragment recruitment map of metagenomic reads mapped to the iSAGs constructed in this study. The alternating orange and green bars at the bottom of each graph represent overlapping group boundaries, which are sorted from longest to shortest. (B) A density plot showing the relative coverage of raw SAG reads mapped to the iSAGs constructed here. [1]\n\n\n2. Applications of Multiple Groups Density Plot\n\n\n\n\n\n\nGrimmer, M. R. et al.(2014)\n\n\n\n\nFigure 13: Applications of Multiple Groups Density Plot\n\n\n\nFigure 13: Analysis of activating and repressing promoters. (A) A tag density plot of the frequency of the main 598-SKD binding motifs at the binding promoters (as shown in the figure above, representing partial target motifs). The colored curves correspond to the 598-SKD binding promoters on genes that are constitutively active, downregulated, or upregulated. (B) Tag density plot of 598-SKD and 598 ChIP-seq tags at the 598-SKD target promoters across expression groups; plot colors correspond to those in (A). (C) Tag density plot of 598-SKD across promoters and gene bodies; plot colors correspond to those in (A). [2]\n\n\n3. Applications of Faceted Density Plots\n\n\n\n\n\n\nReck, M. et al.(2015)\n\n\n\n\nFigure 14: Applications of Faceted Density Plots\n\n\n\nFigure 14 analyzes the overexpression of comE, comR, comS, and comRS in the LytFsm reporter gene strain background. [3]",
    "crumbs": [
      "Distribution",
      "Density Plot"
    ]
  },
  {
    "objectID": "Distribution/Density.html#reference",
    "href": "Distribution/Density.html#reference",
    "title": "Density Plot",
    "section": "Reference",
    "text": "Reference\n\nMende, D. R., Aylward, F. O., Eppley, J. M., Nielsen, T. N., & DeLong, E. F. (2016). Improved Environmental Genomes via Integration of Metagenomic and Single-Cell Assemblies. Frontiers in Microbiology, 7, 143. https://doi.org/10.3389/fmicb.2016.00143. PMID: 26904016; PMCID: PMC4749706.\n\nGrimmer, M. R., Stolzenburg, S., Ford, E., Lister, R., Blancafort, P., & Farnham, P. J. (2014). Analysis of an artificial zinc finger epigenetic modulator: widespread binding but limited regulation. Nucleic Acids Research, 42(16), 10856–10868. https://doi.org/10.1093/nar/gku708. PMID: 25122745; PMCID: PMC4176344.\nReck, M., Tomasch, J., & Wagner-Döbler, I. (2015). The Alternative Sigma Factor SigX Controls Bacteriocin Synthesis and Competence, the Two Quorum Sensing Regulated Traits in Streptococcus mutans. PLoS Genetics, 11(7), e1005353. https://doi.org/10.1371/journal.pgen.1005353. PMID: 26158727; PMCID: PMC4497675.\n\nWickham, H. (2016). ggplot2: Elegant graphics for data analysis. Springer. https://ggplot2.tidyverse.org\n\nGao, Y. (2021). ggExtra: Add marginal plots to ggplot2. https://cran.r-project.org/package/ggExtra\n\nRudis, B. (2020). hrbrthemes: Additional Themes and Theme Components for ‘ggplot2’. https://cran.r-project.org/package/hrbrthemes\n\nWickham, H., François, R., Henry, L., & Müller, K. (2021). dplyr: A Grammar of Data Manipulation. https://cran.r-project.org/package/dplyr\nWickham, H., & Henry, L. (2021). tidyr: Tidy Messy Data. https://cran.r-project.org/package/tidyr\n\nGarnier, S. (2018). viridis: Default Color Maps from ‘matplotlib’. https://cran.r-project.org/package/viridis\n\nAubry, R., & Bouchard, C. (2020). ggpmisc: Miscellaneous Extensions to ‘ggplot2’. https://cran.r-project.org/package/ggpmisc\n\nKassambara, A. (2021). ggpubr: ‘ggplot2’ Based Publication Ready Plots. https://cran.r-project.org/package/ggpubr\n\nBrown, C. (2022). geomtextpath: Curved Text on Geoms in ‘ggplot2’. https://cran.r-project.org/package/geomtextpath\nWilke, C. O. (2020). cowplot: Streamlined Plot Theme and Plot Annotations for “ggplot2”. https://cran.r-project.org/package=cowplot",
    "crumbs": [
      "Distribution",
      "Density Plot"
    ]
  },
  {
    "objectID": "Distribution/ViolinPlot.html",
    "href": "Distribution/ViolinPlot.html",
    "title": "Violin Plot",
    "section": "",
    "text": "A violin plot combines elements of a density plot and a box plot to visualize data distribution. It displays key statistical information, including the median, quartiles, minimum, and maximum values. Violin plots are particularly useful for comparing distributions across different groups, offering a more intuitive representation than traditional box plots by revealing the shape of the data distribution.",
    "crumbs": [
      "Distribution",
      "Violin Plot"
    ]
  },
  {
    "objectID": "Distribution/ViolinPlot.html#example",
    "href": "Distribution/ViolinPlot.html#example",
    "title": "Violin Plot",
    "section": "Example",
    "text": "Example",
    "crumbs": [
      "Distribution",
      "Violin Plot"
    ]
  },
  {
    "objectID": "Distribution/ViolinPlot.html#setup",
    "href": "Distribution/ViolinPlot.html#setup",
    "title": "Violin Plot",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming language: R\nDependent packages: tidyr; ggplot2; dplyr; gghalves; forcats; hrbrthemes; viridis; ggstatsplot; palmerpenguins\n\n\n# Installing necessary packages\nif (!requireNamespace(\"tidyr\", quietly = TRUE)) {\n  install.packages(\"tidyr\")\n}\nif (!requireNamespace(\"gghalves\", quietly = TRUE)) {\n  install.packages(\"gghalves\")\n}\nif (!requireNamespace(\"dplyr\", quietly = TRUE)) {\n  install.packages(\"dplyr\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"forcats\", quietly = TRUE)) {\n  install.packages(\"forcats\")\n}\nif (!requireNamespace(\"hrbrthemes\", quietly = TRUE)) {\n  install.packages(\"hrbrthemes\")\n}\nif (!requireNamespace(\"viridis\", quietly = TRUE)) {\n  install.packages(\"viridis\")\n}\nif (!requireNamespace(\"ggstatsplot\", quietly = TRUE)) {\n  install.packages(\"ggstatsplot\")\n}\nif (!requireNamespace(\"palmerpenguins\", quietly = TRUE)) {\n  install.packages(\"palmerpenguins\")\n}\n\n# Load packages\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(gghalves)\nlibrary(forcats)\nlibrary(hrbrthemes)\nlibrary(viridis)\nlibrary(ggstatsplot)\nlibrary(palmerpenguins)",
    "crumbs": [
      "Distribution",
      "Violin Plot"
    ]
  },
  {
    "objectID": "Distribution/ViolinPlot.html#data-preparation",
    "href": "Distribution/ViolinPlot.html#data-preparation",
    "title": "Violin Plot",
    "section": "Data Preparation",
    "text": "Data Preparation\nWe used the built-in R datasets (iris, penguins) and the TCGA-BRCA.htseq_counts.tsv dataset from UCSC Xena DATASETS. Selected genes were chosen for demonstration purposes.\n\n# Load the TCGA-BRCA gene expression dataset from a processed CSV file  \ndata_counts &lt;- read.csv(\"files/TCGA-BRCA.htseq_counts_processed.csv\")\n\n# Load built-in R dataset iris\ndata_wide &lt;- iris[ , 1:4] # Take the data in columns 1-4 of the iris database as an example\n\n# Load built-in R dataset penguins\ndata(\"penguins\", package = \"palmerpenguins\")\ndata_penguins &lt;- drop_na(penguins) # Remove missing values\n\n# Manually create a demonstration dataset with grouped values \ndata &lt;- data.frame(\n  name=c( rep(\"A\",500), rep(\"B\",500), rep(\"B\",500), rep(\"C\",20), rep('D', 100)  ),\n  value=c( rnorm(500, 10, 5), rnorm(500, 13, 1), rnorm(500, 18, 1), rnorm(20, 25, 4), rnorm(100, 12, 1) )\n  )\nsample_size &lt;- data %&gt;% \n  group_by(name) %&gt;% \n  summarize(num=n()) # Compute the sample size for each group",
    "crumbs": [
      "Distribution",
      "Violin Plot"
    ]
  },
  {
    "objectID": "Distribution/ViolinPlot.html#visualization",
    "href": "Distribution/ViolinPlot.html#visualization",
    "title": "Violin Plot",
    "section": "Visualization",
    "text": "Visualization\n\n1. Basic Violin Plot\nExample 1: Basic Violin Plot with Manually Created Data\n\n# Basic Violin Plot\np &lt;- ggplot(data, aes(x=name, y=value, fill=name)) + \n  geom_violin()\n\np\n\n\n\n\n\n\n\nFigure 1: Basic Violin Plot\n\n\n\n\n\nExample 2: Basic Violin Plot with the iris Dataset\n\n# Transform the `iris` dataset from wide format to long format. Use the gather function to collect the data in each column into two new columns named \"MesureType\" and \"Val\", so that one row represents one observation.\ndata_long_iris &lt;- data_wide %&gt;%  \n  gather(key = \"MeasureType\", value = \"Value\")  \n\nggplot(data_long_iris, aes(x = MeasureType, y = Value, fill = MeasureType)) +  \n  geom_violin()  \n\n\n\n\n\n\n\nFigure 2: Basic Violin Plot Using the iris Dataset\n\n\n\n\n\nExample 3: Violin Plot with TCGA-BRCA Gene Expression Data\n\nexample_counts1 &lt;- data_counts[1:5,] %&gt;%\n  gather(key = \"sample\",value = \"gene_expression\",3:1219) # Select five example genes for visualization: A1BG, A1BG-AS1, A1CF, A2M, and A2M-AS1.\n\nggplot(example_counts1, aes(x=gene_name, y=gene_expression, fill=gene_name)) +\n  geom_violin()\n\n\n\n\n\n\n\nFigure 3: Basic Violin Plot Using the TCGA-BRCA dataset\n\n\n\n\n\n\n\n2. Horizontal Violin Plot\nThe x and y axes can be flipped using coord_flip().\n\nexample_counts2 &lt;- data_counts[1:6,] %&gt;% \n  gather(key = \"sample\",value = \"gene_expression\",3:1219) %&gt;% \n  mutate(gene_name= fct_reorder(gene_name,gene_expression ))\n\nggplot(example_counts2, aes(x=gene_name, y=gene_expression, fill=gene_name, color=gene_name)) +\n  geom_violin() +\n  scale_fill_viridis(discrete=TRUE) +\n  scale_color_viridis(discrete=TRUE) +\n  theme_ipsum() + # Improve plot appearance\n  theme(legend.position=\"none\" ) +\n  coord_flip() + # flip the x and y axes\n  xlab(\"\") +\n  ylab(\"Assigned Probability (%)\")\n\n\n\n\n\n\n\nFigure 4: Horizontal Violin Plot Using the TCGA-BRCA dataset\n\n\n\n\n\n\n\n3. Violin Plot with Boxplot\nIn practical visualization applications, a box plot can be added to a violin plot using geom_boxplot(), which helps in visually comparing the distribution of the data.\n\nexample_data &lt;- data %&gt;% \n  left_join(sample_size) %&gt;%\n  mutate(myaxis = paste0(name, \"\\n\", \"n=\", num)) # The `myaxis` variable is created to display sample size on the x-axis.  \n\nggplot(example_data, aes(x=myaxis, y=value, fill=name)) +\n  geom_violin(width=1.4) +\ngeom_boxplot( width=0.1,color=\"grey\", alpha=0.2) + # Draw a box plot. A small width value makes the box plot inside the violin plot.\nscale_fill_viridis(discrete = TRUE) +\n  theme_ipsum() + # Beautify the graph\n  theme(\n   legend.position=\"none\",\n   plot.title = element_text(size=11)\n  ) +\n  ggtitle(\"A Violin plot wrapping a boxplot\") +  # Set the title\n  xlab(\"\")\n\n\n\n\n\n\n\nFigure 5: Violin Plot with Boxplot\n\n\n\n\n\nAnother Violin Plot with Box Plot using the TCGA-BRCA Gene Expression Data\n\nexample_counts3 &lt;- data_counts[1:5,] %&gt;%\n  gather(key = \"sample\", value = \"gene_expression\",3:1219) %&gt;%\n  mutate(gene_name= fct_reorder(gene_name,gene_expression ))\n\nggplot(example_counts3, aes(x=gene_name, y=gene_expression, fill=gene_name, color=gene_name)) +\n  geom_violin() +\n  geom_boxplot( width=0.1,color=\"grey\", alpha=0.2)+\n  scale_fill_viridis(discrete=TRUE) +\n  scale_color_viridis(discrete=TRUE) +\n  theme_ipsum() + # Beautify the graph\n  theme(legend.position=\"none\" ) \n\n\n\n\n\n\n\nFigure 6: Violin Plot with Boxplot Using the TCGA-BRCA dataset\n\n\n\n\n\n\n\n4. Grouped Violin Plot\nOn the basis of the basic violin plot, we can achieve intra-group comparison by setting the fill value.\nThe example below demonstrates intra-group comparison using the fill aesthetic. In this case, the penguins dataset is used. The x variable represents the species, and fill=sex creates an intra-group classification to visualize the comparison of flipper lengths within each species, grouped by gender.\n\nggplot(data_penguins, aes(fill=sex, y=flipper_length_mm, x=species)) + # Use X as the major classification and fill as the intra-group classification\n  geom_violin(position=\"dodge\", alpha=0.5, outlier.colour=\"transparent\") +\n  scale_fill_viridis(discrete=T, name=\"\") +\n  theme_ipsum()  \n\n\n\n\n\n\n\nFigure 7: Grouped Violin Plot Using the penguins dataset\n\n\n\n\n\n\n\n5. Half-Violin Plot\nA half-violin plot is useful for visualizing a large amount of data in a compact form. We can use the geom_half_violin function to display two groups separately.\nIn the following example, we visualize the flipper lengths of penguins for both species and genders, by plotting female and male penguins on opposite sides of the plot.\n\n# Separate the data for female and male penguins\ndata_female &lt;- data_penguins %&gt;% filter(sex == \"female\")\ndata_male &lt;- data_penguins %&gt;% filter(sex == \"male\")\n\n# Plot the half-violin plot for both groups (females on the right and males on the left)\nggplot() +\n  geom_half_violin(\n    data = data_female,\n    aes(y = flipper_length_mm, x = species),\n    position = position_dodge(width = 1),\n    scale = 'width',\n    colour = NA,\n    fill = \"#9370DB\",\n    alpha = 0.8,  ## Set transparency\n    side = \"r\"\n  ) +\n  geom_half_violin(\n    data = data_male,\n    aes(y = flipper_length_mm, x = species),\n    position = position_dodge(width = 1),\n    scale = 'width',\n    colour = NA,\n    fill = \"#FFFF00\",\n    alpha = 0.6,\n    side = \"l\"\n  )\n\n\n\n\n\n\n\nFigure 8: Half-Violin Plot Using the penguins dataset\n\n\n\n\n\n\n\n6. Violin Plot Using the ggstatsplot Package\nThe ggstatsplot package extends ggplot2 by adding powerful statistical visualizations. The ggbetweenstats() function allows the creation of combined violin plots, box plots, and scatter plots.\nIn the following example, we visualize the distribution of bill lengths across different penguin species using the penguins dataset. We further enhance the plot’s aesthetics using the theme() function.\n\nplt &lt;- ggbetweenstats(\n  data = data_penguins,\n  x = species,\n  y = bill_length_mm\n) +\n# Beautification\n  labs(  ## Add labels and title\n    x = \"Penguins Species\",\n    y = \"Bill Length\",\n    title = \"Distribution of bill length across penguins species\"\n  ) +\n  theme(\n    axis.ticks = element_blank(),\n    axis.line = element_line(colour = \"grey50\"),\n    panel.grid = element_line(color = \"#b4aea9\"),\n    panel.grid.minor = element_blank(),\n    panel.grid.major.x = element_blank(),\n    panel.grid.major.y = element_line(linetype = \"dashed\"),\n    panel.background = element_rect(fill = \"#fbf9f4\", color = \"#fbf9f4\"),\n    plot.background = element_rect(fill = \"#fbf9f4\", color = \"#fbf9f4\")\n  )\n\nplt\n\n\n\n\n\n\n\nFigure 9: Violin Plot Using the ggstatsplot Package",
    "crumbs": [
      "Distribution",
      "Violin Plot"
    ]
  },
  {
    "objectID": "Distribution/ViolinPlot.html#application",
    "href": "Distribution/ViolinPlot.html#application",
    "title": "Violin Plot",
    "section": "Application",
    "text": "Application\n\n1. Basic Violin Plot\n\n\n\n\n\n\nFigure 10: Applications of Basic Violin Plot\n\n\n\nFigure 10 e is a violin plot of the relative abundances of circRNAs in seven types of cancer tissues and their corresponding normal tissues [1].\n\n\n2. Grouped Violin Plot\n\n\n\n\n\n\nFigure 11: Applications of Grouped Violin Plot\n\n\n\nThe above violin plot analyzes and compares the levels and distributions of 31 proteins and mRNAs in single A549 cells [2].\n\n\n3. Half-Violin Plot\n\n\n\n\n\n\nFigure 12: Applications of Half-Violin Plot\n\n\n\nFigure 12 E uses a half-violin plot to analyze the clone size distribution of WT clones in WT intestines (left) or M−/+ intestines (middle and right figures) [3].\n\n\n4. Violin Plot with Boxplot\n\n\n\n\n\n\nFigure 13: Applications of Violin Plot with Boxplot\n\n\n\nFigure 13 D shows the expected median MSD and distribution of droplets attached to the substrate (noise) and in water (stimulation), as well as the nanoscale RMS displacement [4].",
    "crumbs": [
      "Distribution",
      "Violin Plot"
    ]
  },
  {
    "objectID": "Distribution/ViolinPlot.html#reference",
    "href": "Distribution/ViolinPlot.html#reference",
    "title": "Violin Plot",
    "section": "Reference",
    "text": "Reference\n[1] Zheng Q, Bao C, Guo W, Li S, Chen J, Chen B, Luo Y, Lyu D, Li Y, Shi G, Liang L, Gu J, He X, Huang S. Circular RNA profiling reveals an abundant circHIPK3 that regulates cell growth by sponging multiple miRNAs. Nat Commun. 2016 Apr 6;7:11215. doi: 10.1038/ncomms11215. PMID: 27050392; PMCID: PMC4823868.\n[2] Gong H, Wang X, Liu B, Boutet S, Holcomb I, Dakshinamoorthy G, Ooi A, Sanada C, Sun G, Ramakrishnan R. Single-cell protein-mRNA correlation analysis enabled by multiplexed dual-analyte co-detection. Sci Rep. 2017 Jun 5;7(1):2776. doi: 10.1038/s41598-017-03057-5. PMID: 28584233; PMCID: PMC5459813.\n[3] Kolahgar G, Suijkerbuijk SJ, Kucinski I, Poirier EZ, Mansour S, Simons BD, Piddini E. Cell Competition Modifies Adult Stem Cell and Tissue Population Dynamics in a JAK-STAT-Dependent Manner. Dev Cell. 2015 Aug 10;34(3):297-309. doi: 10.1016/j.devcel.2015.06.010. Epub 2015 Jul 23. PMID: 26212135; PMCID: PMC4537514.\n[4] Cribb JA, Osborne LD, Beicker K, Psioda M, Chen J, O’Brien ET, Taylor Ii RM, Vicci L, Hsiao JP, Shao C, Falvo M, Ibrahim JG, Wood KC, Blobe GC, Superfine R. An Automated High-throughput Array Microscope for Cancer Cell Mechanics. Sci Rep. 2016 Jun 6;6:27371. doi: 10.1038/srep27371. PMID: 27265611; PMCID: PMC4893602.\n[5] Wickham H, Vaughan D, Girlich M (2024). tidyr: Tidy Messy Data. R package version 1.3.1, https://CRAN.R-project.org/package=tidyr.\n[6] H. Wickham. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York, 2016.\n[7] Wickham H, François R, Henry L, Müller K, Vaughan D (2023). dplyr: A Grammar of Data Manipulation. R package version 1.1.4, https://CRAN.R-project.org/package=dplyr.\n[8] Tiedemann F (2022). gghalves: Compose Half-Half Plots Using Your Favourite Geoms. R package version 0.1.4, https://CRAN.R-project.org/package=gghalves.\n[9] Wickham H (2023). forcats: Tools for Working with Categorical Variables (Factors). R package version 1.0.0, https://CRAN.R-project.org/package=forcats.\n[10] Rudis B (2024). hrbrthemes: Additional Themes, Theme Components and Utilities for ‘ggplot2’. R package version 0.8.7, https://CRAN.R-project.org/package=hrbrthemes.\n[11] Simon Garnier, Noam Ross, Robert Rudis, Antônio P. Camargo, Marco Sciaini, and Cédric Scherer (2024). viridis(Lite) - Colorblind-Friendly Color Maps for R. viridis package version 0.6.5.\n[12] Patil, I. (2021). Visualizations with statistical details: The ‘ggstatsplot’ approach. Journal of Open Source Software, 6(61), 3167, doi:10.21105/joss.03167\n[13] Horst AM, Hill AP, Gorman KB (2020). palmerpenguins: Palmer Archipelago (Antarctica) penguin data. R package version 0.1.0. https://allisonhorst.github.io/palmerpenguins/. doi: 10.5281/zenodo.3960218.",
    "crumbs": [
      "Distribution",
      "Violin Plot"
    ]
  },
  {
    "objectID": "GraphGallery.html",
    "href": "GraphGallery.html",
    "title": "Graph Gallery",
    "section": "",
    "text": "👋 Bizard is a comprehensive repository of advanced visualization codes tailored for biomedical research.\nThe toolkit includes a diverse array of charting options, from variable distributions to interactive visualizations, systematically organized to meet the unique needs of biomedical data analysis. Built on a robust foundation, each example is paired with reproducible R code, detailed annotations, and real-world datasets to ensure accessibility and practical application.\nWith resources for both beginners and seasoned researchers, Bizard empowers users to create intuitive, scientifically rigorous, and visually compelling outputs, advancing data visualization standards in the biomedical field.",
    "crumbs": [
      "Graph Gallery"
    ]
  },
  {
    "objectID": "GraphGallery.html#under-construction-demo-only",
    "href": "GraphGallery.html#under-construction-demo-only",
    "title": "Graph Gallery",
    "section": "UNDER CONSTRUCTION [DEMO ONLY]",
    "text": "UNDER CONSTRUCTION [DEMO ONLY]",
    "crumbs": [
      "Graph Gallery"
    ]
  },
  {
    "objectID": "GraphGallery.html#distribution-gallery",
    "href": "GraphGallery.html#distribution-gallery",
    "title": "Graph Gallery",
    "section": "Distribution Gallery",
    "text": "Distribution Gallery",
    "crumbs": [
      "Graph Gallery"
    ]
  },
  {
    "objectID": "GraphGallery.html#correlation-gallery",
    "href": "GraphGallery.html#correlation-gallery",
    "title": "Graph Gallery",
    "section": "Correlation Gallery",
    "text": "Correlation Gallery\n\n\n\nCorrelation DEMO",
    "crumbs": [
      "Graph Gallery"
    ]
  },
  {
    "objectID": "GraphGallery.html#ranking-gallery",
    "href": "GraphGallery.html#ranking-gallery",
    "title": "Graph Gallery",
    "section": "Ranking Gallery",
    "text": "Ranking Gallery\n\n\n\nRanking DEMO",
    "crumbs": [
      "Graph Gallery"
    ]
  },
  {
    "objectID": "GraphGallery.html#others",
    "href": "GraphGallery.html#others",
    "title": "Graph Gallery",
    "section": "Others",
    "text": "Others",
    "crumbs": [
      "Graph Gallery"
    ]
  },
  {
    "objectID": "Template/visualization_guidance_EN.html",
    "href": "Template/visualization_guidance_EN.html",
    "title": "Contribution_guidance",
    "section": "",
    "text": "Example guide for a visualization tutorial"
  },
  {
    "objectID": "Template/visualization_guidance_EN.html#example",
    "href": "Template/visualization_guidance_EN.html#example",
    "title": "Contribution_guidance",
    "section": "Example",
    "text": "Example\n【Figure. Example Plot】\nShow the title/diagram notes for the above example diagrams and interpret the meaning of the example diagram xy axes or other identifiers."
  },
  {
    "objectID": "Template/visualization_guidance_EN.html#setup",
    "href": "Template/visualization_guidance_EN.html#setup",
    "title": "Contribution_guidance",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming Language: R\nDependencies: (Populate R packages or other resources that the visualization tutorial depends on)\n\n\n#Example Code-----\n# Installing necessary packages\nif (!requireNamespace(\"readr\", quietly = TRUE)) {\n  install.packages(\"readr\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"tidyverse\", quietly = TRUE)) {\n  install.packages(\"tidyverse\")\n}\n\n# Loading the libraries\nlibrary(readr) \nlibrary(ggplot2) \nlibrary(tidyverse)"
  },
  {
    "objectID": "Template/visualization_guidance_EN.html#data-preparation",
    "href": "Template/visualization_guidance_EN.html#data-preparation",
    "title": "Contribution_guidance",
    "section": "Data Preparation",
    "text": "Data Preparation\n\nR built-in datasets (e.g. iris, penguins) and biomedical related datasets (e.g. histology data, survival information, clinical indicators, etc.) need to be included.\nBiomedical related datasets need to be uploaded to the Bizard Tencent Cloud in order to get a link to the insertion tutorial, data from public datasets is best, and if provided by an individual/organization needs to ensure that the data can be made public. The size of the dataset should be less than 1MB.\n\n\n# Data reading and processing codes can be freely chosen to be displayed or not------\n# Read the TSV data\ndata &lt;- readr::read_tsv(\"https://bizard-1301043367.cos.ap-guangzhou.myqcloud.com/TCGA-LIHC.htseq_counts.tsv.gz\")\n\n# Filter and reshape data for the first gene TSPAN6 (Ensembl ID: ENSG00000000003.13)\ndata1 &lt;- data %&gt;%\n  filter(Ensembl_ID == \"ENSG00000000003.13\") %&gt;%\n  pivot_longer(\n    cols = -Ensembl_ID, \n    names_to = \"sample\", \n    values_to = \"expression\"\n  ) %&gt;%\n  mutate(var = \"var1\")  # Add a column to differentiate the variables\n\n# Filter and reshape data for the second gene SCYL3 (Ensembl ID: ENSG00000000457.12)\ndata2 &lt;- data %&gt;%\n  filter(Ensembl_ID == \"ENSG00000000457.12\") %&gt;%\n  pivot_longer(\n    cols = -Ensembl_ID, \n    names_to = \"sample\", \n    values_to = \"expression\"\n  ) %&gt;%\n  mutate(var = \"var2\")  # Add a column to differentiate the variables\n\n# Combine the two datasets\ndata12 &lt;- bind_rows(data1, data2)\n\n# View the final combined dataset\nhead(data12)\n\n# A tibble: 6 × 4\n  Ensembl_ID         sample           expression var  \n  &lt;chr&gt;              &lt;chr&gt;                 &lt;dbl&gt; &lt;chr&gt;\n1 ENSG00000000003.13 TCGA-DD-A4NG-01A      12.8  var1 \n2 ENSG00000000003.13 TCGA-G3-AAV4-01A       9.72 var1 \n3 ENSG00000000003.13 TCGA-2Y-A9H1-01A      11.3  var1 \n4 ENSG00000000003.13 TCGA-CC-A3M9-01A      11.6  var1 \n5 ENSG00000000003.13 TCGA-K7-AAU7-01A      11.5  var1 \n6 ENSG00000000003.13 TCGA-BC-A10W-01A      12.0  var1"
  },
  {
    "objectID": "Template/visualization_guidance_EN.html#visualization",
    "href": "Template/visualization_guidance_EN.html#visualization",
    "title": "Contribution_guidance",
    "section": "Visualization",
    "text": "Visualization\n\n1. Basic Plot\nUse the base functions to draw graphical annotations and profiles of images. e.g.@fig-BasicHist illustrates the distribution of expression levels for the TSPAN6 gene across different samples.\n\n# Basic Drawing Code Example-----\n#| label: fig-BasicHist\n#| fig-cap: \"Basic Histogram\"\n#| out.width: \"95%\"\n#| warning: false\n\n# Basic Histogram\np1 &lt;- ggplot(data1, aes(x = expression)) +\n  geom_histogram() + \n  labs(x = \"Gene Expression\", y = \"Count\")\n\np1\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nSupplement the base code with important parameters that can be extended and provide the corresponding plotting code.\n\n\n\n\n\n\nTip\n\n\n\nKey Parameters: binwidth / bins\nThe binwidth or bins parameter determines how much data each bin will contain. Modifying these values can significantly affect the appearance of the histogram and the information conveyed.\n\n\n\n# Code example (with supplementary parameter `bins`)-----\n#| label: fig-bins\n#| fig-cap: \"Key Parameters: `binwidth` / `bins`\"\n#| fig.width: 8\n#| fig.heright: 2\n#| out.width: \"95%\"\n#| warning: false\n\np2_1 &lt;- ggplot(data1, aes(x = expression)) +\n  geom_histogram(bins = 30, fill = \"skyblue\", color = \"white\") +\n  ggtitle(\"Bins = 30\") + \n  labs(x = \"Gene Expression\", y = \"Count\")\n\np2_2 &lt;- ggplot(data1, aes(x = expression)) +\n  geom_histogram(bins = 50, fill = \"skyblue\", color = \"white\") +\n  ggtitle(\"Bins = 50\") + \n  labs(x = \"Gene Expression\", y = \"Count\")\n\ncowplot::plot_grid(p2_1, p2_2)\n\n\n\n\n\n\n\n\n\n\n2. More Advanced Plots (e.g.Histogram with Density Curve)\nIntroduces complex types of visualization, such as using functions that contain more custom parameters, using multiple base chart overlays, adding statistical tests, and more.\ne.g. The density curve provides a smooth representation of the data distribution. Unlike the histogram, which depends on the number of bins, the density curve uses kernel density estimation (KDE) to smooth the distribution. This allows a clearer understanding of the overall trend and shape of the data.\n\n# Advanced Drawing Code Example-----\n#| label: fig-DensityCurve\n#| fig-cap: \"Histogram with Density Curve\"\n#| out.width: \"95%\"\n#| warning: false\n\np1 &lt;- ggplot(data1, aes(x = expression)) +\n  geom_histogram(aes(y = after_stat(density)), bins = 30, fill = \"skyblue\", color = \"white\") +\n  geom_density(alpha = 0.2, fill = \"#FF6666\") + \n  labs(x = \"Gene Expression\", y = \"Density\")\n\np1\n\n\n\n\n\n\n\n\nOptionally you can add a detailed description of the parameters using callout-tip if you need it."
  },
  {
    "objectID": "Template/visualization_guidance_EN.html#applications",
    "href": "Template/visualization_guidance_EN.html#applications",
    "title": "Contribution_guidance",
    "section": "Applications",
    "text": "Applications\nDemonstrate the practical application of visualization charts in the biomedical literature, with the option to show basic/advanced charts separately if they are widely used in various types of biomedical literature.\ne.g.\n\n1. Applications of Basic Histogram\n\n\n\n\n\n\nFigure 1: Applications of Basic Histogram\n\n\n\nFigure 9 shows the differences between the relative frequencies of human X and human Y chromosome’s histograms for n = 6. [1]\nAdditional image figure notes and source documentation information are required. A code reproduction of the figure may be added at the author’s discretion."
  },
  {
    "objectID": "Template/visualization_guidance_EN.html#reference",
    "href": "Template/visualization_guidance_EN.html#reference",
    "title": "Contribution_guidance",
    "section": "Reference",
    "text": "Reference\ne.g. 1. Costa, A. M., Machado, J. T., & Quelhas, M. D. (2011). Histogram-based DNA analysis for the visualization of chromosome, genome, and species information. Bioinformatics, 27(9), 1207–1214. https://doi.org/10.1093/bioinformatics/btr131"
  },
  {
    "objectID": "Template/visualization_guidance_EN.html#contributors",
    "href": "Template/visualization_guidance_EN.html#contributors",
    "title": "Contribution_guidance",
    "section": "Contributors",
    "text": "Contributors\n\nEditor: Yours name.\nReviewers: Reviewers name."
  },
  {
    "objectID": "Template/visualization_guidance_CH.html",
    "href": "Template/visualization_guidance_CH.html",
    "title": "Contribution_guidance",
    "section": "",
    "text": "对于可视化教程的示例指导"
  },
  {
    "objectID": "Template/visualization_guidance_CH.html#example",
    "href": "Template/visualization_guidance_CH.html#example",
    "title": "Contribution_guidance",
    "section": "Example",
    "text": "Example\n【Figure. 示例图】\n展示以上示例图的标题/图注，并对示例图xy轴或其他标识物的含义解读。"
  },
  {
    "objectID": "Template/visualization_guidance_CH.html#环境配置",
    "href": "Template/visualization_guidance_CH.html#环境配置",
    "title": "Contribution_guidance",
    "section": "环境配置",
    "text": "环境配置\n\n系统要求 跨平台（Linux/MacOS/Windows）\n编程语言: R\n依赖资源: （填充可视化教程依赖的R包或其他资源）\n\n\n#代码示例----- \n# Installing necessary packages\nif (!requireNamespace(\"readr\", quietly = TRUE)) {\n  install.packages(\"readr\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"tidyverse\", quietly = TRUE)) {\n  install.packages(\"tidyverse\")\n}\n\n# Loading the libraries\nlibrary(readr) \nlibrary(ggplot2) \nlibrary(tidyverse)"
  },
  {
    "objectID": "Template/visualization_guidance_CH.html#数据准备",
    "href": "Template/visualization_guidance_CH.html#数据准备",
    "title": "Contribution_guidance",
    "section": "数据准备",
    "text": "数据准备\n\n需包含R内置的数据集（如iris、penguins）和生物医学相关数据集（如组学数据、生存信息、临床指标等）。\n生物医学相关数据集需上传至Bizard腾讯云以便获取插入教程的链接，来自于公共数据集的数据最佳，若由个人/组织提供需确保数据能够被公开。数据集大小需小于1MB。\n\n\n# 数据读入和处理代码可以自由选择是否展示------\n# 读取 TSV 数据\ndata &lt;- readr::read_tsv(\"https://bizard-1301043367.cos.ap-guangzhou.myqcloud.com/TCGA-LIHC.htseq_counts.tsv.gz\")\n\n# 筛选并重塑第一个基因 TSPAN6 的数据(Ensembl ID: ENSG00000000003.13)\ndata1 &lt;- data %&gt;%\n  filter(Ensembl_ID == \"ENSG00000000003.13\") %&gt;%\n  pivot_longer(\n    cols = -Ensembl_ID, \n    names_to = \"sample\", \n    values_to = \"expression\"\n  ) %&gt;%\n  mutate(var = \"var1\")  # 添加一列来区分变量\n\n# 筛选和重塑第二个基因 SCYL3 的数据 (Ensembl ID: ENSG00000000457.12)\ndata2 &lt;- data %&gt;%\n  filter(Ensembl_ID == \"ENSG00000000457.12\") %&gt;%\n  pivot_longer(\n    cols = -Ensembl_ID, \n    names_to = \"sample\", \n    values_to = \"expression\"\n  ) %&gt;%\n  mutate(var = \"var2\")  # 添加一列来区分变量\n\n# 合并两个数据集\ndata12 &lt;- bind_rows(data1, data2)\n\n# 查看最终的合并数据集\nhead(data12)\n\n# A tibble: 6 × 4\n  Ensembl_ID         sample           expression var  \n  &lt;chr&gt;              &lt;chr&gt;                 &lt;dbl&gt; &lt;chr&gt;\n1 ENSG00000000003.13 TCGA-DD-A4NG-01A      12.8  var1 \n2 ENSG00000000003.13 TCGA-G3-AAV4-01A       9.72 var1 \n3 ENSG00000000003.13 TCGA-2Y-A9H1-01A      11.3  var1 \n4 ENSG00000000003.13 TCGA-CC-A3M9-01A      11.6  var1 \n5 ENSG00000000003.13 TCGA-K7-AAU7-01A      11.5  var1 \n6 ENSG00000000003.13 TCGA-BC-A10W-01A      12.0  var1"
  },
  {
    "objectID": "Template/visualization_guidance_CH.html#可视化",
    "href": "Template/visualization_guidance_CH.html#可视化",
    "title": "Contribution_guidance",
    "section": "可视化",
    "text": "可视化\n\n1. 基础绘图\n使用基础函数绘制图片的图注和简介。\n例：@fig-BasicHist 显示了 TSPAN6基因在不同样本中的表达水平分布。\n\n# 基础绘图代码示例-----\n#| label: fig-BasicHist\n#| fig-cap: \"Basic Histogram\"\n#| out.width: \"95%\"\n#| warning: false\n\n# 基础柱状图\np1 &lt;- ggplot(data1, aes(x = expression)) +\n  geom_histogram() + \n  labs(x = \"Gene Expression\", y = \"Count\")\n\np1\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n补充基础代码可以扩展的重要参数，并提供对应的绘图代码。 例： ::: callout-tip 关键参数: binwidth / bins\nbinwidth 或 bin参数决定了每个分区包含多少数据。修改这些值会极大地影响直方图的外观和传递的信息。 :::\n\n# 代码示例（以补充参数bins为例）-----\n#| label: fig-bins\n#| fig-cap: \"Key Parameters: `binwidth` / `bins`\"\n#| fig.width: 8\n#| fig.heright: 2\n#| out.width: \"95%\"\n#| warning: false\n\np2_1 &lt;- ggplot(data1, aes(x = expression)) +\n  geom_histogram(bins = 30, fill = \"skyblue\", color = \"white\") +\n  ggtitle(\"Bins = 30\") + \n  labs(x = \"Gene Expression\", y = \"Count\")\n\np2_2 &lt;- ggplot(data1, aes(x = expression)) +\n  geom_histogram(bins = 50, fill = \"skyblue\", color = \"white\") +\n  ggtitle(\"Bins = 50\") + \n  labs(x = \"Gene Expression\", y = \"Count\")\n\ncowplot::plot_grid(p2_1, p2_2)\n\n\n\n\n\n\n\n\n\n\n2. 更多进阶图表 (例：密度曲线和柱状图结合)\n介绍复杂的可视化类型，例如使用包含更多自定义参数的函数、使用多种基础图表叠加、添加统计学检验等。 例：密度曲线可以平滑地表示数据分布。直方图依赖于分位数，而密度曲线则不同，它使用核密度估计(KDE)来平滑分布。这样就能更清楚地了解数据的整体趋势和形状。\n\n# 进阶绘图代码示例-----\n#| label: fig-DensityCurve\n#| fig-cap: \"Histogram with Density Curve\"\n#| out.width: \"95%\"\n#| warning: false\n\np1 &lt;- ggplot(data1, aes(x = expression)) +\n  geom_histogram(aes(y = after_stat(density)), bins = 30, fill = \"skyblue\", color = \"white\") +\n  geom_density(alpha = 0.2, fill = \"#FF6666\") + \n  labs(x = \"Gene Expression\", y = \"Density\")\n\np1\n\n\n\n\n\n\n\n\n如果你有需要的话可以选择使用callout-tip添加对参数的详细描述。"
  },
  {
    "objectID": "Template/visualization_guidance_CH.html#应用",
    "href": "Template/visualization_guidance_CH.html#应用",
    "title": "Contribution_guidance",
    "section": "应用",
    "text": "应用\n展示可视化图表在生物医学文献中的实际应用，如果基础图表/进阶图表被广泛应用在各类生物医学文献，则可以选择分别展示。\n例： ### 1. 基础柱状图的应用\n\n\n\n\n\n\nFigure 1: 基础柱状图的应用\n\n\n\n图 9 显示了 n = 6时人类X染色体和人类Y染色体直方图相对频率的差异。 [1]\n需补充图片图注和来源文献信息。可视作者意愿补充对该图的代码复现。"
  },
  {
    "objectID": "Template/visualization_guidance_CH.html#参考文献",
    "href": "Template/visualization_guidance_CH.html#参考文献",
    "title": "Contribution_guidance",
    "section": "参考文献",
    "text": "参考文献\n例： 1. Costa, A. M., Machado, J. T., & Quelhas, M. D. (2011). Histogram-based DNA analysis for the visualization of chromosome, genome, and species information. Bioinformatics, 27(9), 1207–1214. https://doi.org/10.1093/bioinformatics/btr131"
  },
  {
    "objectID": "Template/visualization_guidance_CH.html#共享者",
    "href": "Template/visualization_guidance_CH.html#共享者",
    "title": "Contribution_guidance",
    "section": "共享者",
    "text": "共享者\n\n编辑: 您的姓名。\n审阅: 审阅者姓名。"
  },
  {
    "objectID": "Correlation/ConnectedScatter.html",
    "href": "Correlation/ConnectedScatter.html",
    "title": "Connected Scatter",
    "section": "",
    "text": "Connected scatter is a type of chart that builds upon scatter by adding lines to connect the data points in a certain order. It allows us to discern not only the correlation between independent variable and dependent variable but also the trend in the data points.",
    "crumbs": [
      "Correlation",
      "Connected Scatter"
    ]
  },
  {
    "objectID": "Correlation/ConnectedScatter.html#example",
    "href": "Correlation/ConnectedScatter.html#example",
    "title": "Connected Scatter",
    "section": "Example",
    "text": "Example\n\n\n\n\n\nIn this figure, this is a basic connected scatter plot. The curve representing the change between Sepal.Length and Sepal.Widthfluctuates up and down. However, overall, the dependent variable Sepal.Length increases as the independent variable Sepal.Width increases.",
    "crumbs": [
      "Correlation",
      "Connected Scatter"
    ]
  },
  {
    "objectID": "Correlation/ConnectedScatter.html#setup",
    "href": "Correlation/ConnectedScatter.html#setup",
    "title": "Connected Scatter",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming Language: R\nDependencies: ggplot2, dplyr\n\n\n# Install packages\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"dplyr\", quietly = TRUE)) {\n  install.packages(\"dplyr\")\n}\n\n# Load packages\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(stringr)",
    "crumbs": [
      "Correlation",
      "Connected Scatter"
    ]
  },
  {
    "objectID": "Correlation/ConnectedScatter.html#data-preparation",
    "href": "Correlation/ConnectedScatter.html#data-preparation",
    "title": "Connected Scatter",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe datasets used are the built-in R datasets iris and economics. The iris dataset contains measurements of sepal length and width, as well as petal length and width, for three species of iris plants. The economics dataset is a time series of U.S. economic data. Additionally, the gene expression data for breast cancer from the NCBI database is used,which has 24 sample columns, and two rows of gene expression data are selected for plotting.\n\n# 1.Load iris data\ndata(\"iris\", package = \"datasets\")\ndata &lt;- iris\n\n# 2. Load and filter time series data\n# To simplify the plotting process, only the data from December is selected to represent the entire year\ndata_economics &lt;- economics %&gt;%\n  select(date, psavert, uempmed) %&gt;%\n  filter(str_detect(date, \"-12-01\")) %&gt;%\n  slice_head(n = 25) %&gt;%\n  mutate(date = str_extract(date, \"^\\\\d{4}\")) %&gt;% #extracts the 4-digit year from the beginning of each date string.\n  select(date, psavert, uempmed)\n\n# 3.Load gene expression data (first two rows)\ndata_counts &lt;- read.csv(\"files/GSE243555_all_genes_with_counts.txt\", sep = \"\\t\", header = TRUE, nrows = 10)\n\naxis_names &lt;- data_counts[c(1, 2), 1]        # Save names\n\ndata_counts &lt;- data_counts %&gt;%      \n  select(-1) %&gt;%               # Remove first column\n  slice(1:2) %&gt;%               # remain the first two rows\n  t()  %&gt;%                     # Transpose\n  as.data.frame() %&gt;%\n  setNames(c(\"V1\", \"V2\"))      # Set column names\n\nhead(data_counts)\n\n                           V1  V2\nMCF7.HG..1.              2905 178\nMCF7.HG..LG..2.          2496 161\nADIPO.HG..2.             1802 184\nADIPO.HG..LG..2.         1400 174\nMCF7...ADIPO..HG..2.     2180 154\nMCF7...ADIPO..HG..LG..2. 2123 118",
    "crumbs": [
      "Correlation",
      "Connected Scatter"
    ]
  },
  {
    "objectID": "Correlation/ConnectedScatter.html#visualization",
    "href": "Correlation/ConnectedScatter.html#visualization",
    "title": "Connected Scatter",
    "section": "Visualization",
    "text": "Visualization\n\n1. Basic Plotting\nFigure 1 was created by adding geom_line to the scatter plot.\n\n# Basic plotting, only adding `geom_line`\np &lt;- ggplot(data[data$Species == \"setosa\", ], aes(x = Sepal.Width, y = Sepal.Length)) +\n  geom_point(shape = 17, size = 1.5, color = \"blue\") +\n  geom_line()\n\np\n\n\n\n\n\n\n\nFigure 1: Basic Plotting\n\n\n\n\n\n\n\n2. Set Line Styles\nFigure 2 sets the line direction, width, type, and color by parameters.\n\n## Set line styles\np &lt;- ggplot(data[data$Species == \"setosa\", ], aes(x = Sepal.Width, y = Sepal.Length)) +\n  geom_point(shape = 17, size = 1.5, color = \"blue\") +\n  geom_line(orientation = \"x\", linetype = 1, color = \"red\", linewidth = 0.1)\n\np\n\n\n\n\n\n\n\nFigure 2: Set Line Styles\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nKey Parameters: geom_line\nlinetype:\nlinetype indicates the type of line, with optional values ranging from 0 to 6 (0 = blank, 1 = solid, 2 = dashed, 3 = dotted, 4 = dotdash, 5 = longdash, 6 = twodash). The specific shapes are shown in the following figure:\n\n\n\n\n\norientation:\nThe orientation of the line segment, with options “x” and “y”. When orientation=\"x\", the line is plotted with x as the independent variable and y as the dependent variable.\nlinewidth:\nThe thickness of the line segment.\n\n\n\n\n3. Multiclass Data Plotting\nFigure 3 was created by using color=Species, shape=Species, and linetype=Species to map the categorical variable to multiple features.\n\n## Multiclass Data Plotting\n## Use `color=Species`,`shape=Species`,`linetype=Species` to map categorical variables to multiple features\np &lt;- ggplot(\n  data[data$Species == \"setosa\" | data$Species == \"virginica\", ],\n  aes(x = Sepal.Width, y = Sepal.Length)\n) +\n  geom_point(aes(color = Species, shape = Species), size = 1.5) +\n  geom_line(aes(linetype = Species)) +\n  # Change the position of the legend\n  theme(legend.position = \"inside\", legend.position.inside = c(0.85, 0.8))\n\np\n\n\n\n\n\n\n\nFigure 3: Multiclass Data Plotting\n\n\n\n\n\n\n\n4. Plotting with Genetic Data\nFigure 4 shows a connected scatter plot of two genes related to breast cancer.\n\n# Plotting with genetic data\np &lt;- ggplot(data_counts, aes(x = V1, y = V2)) +\n  geom_point(shape = 17, size = 1.5, color = \"blue\") +\n  geom_line(orientation = \"x\", linetype = 1, color = \"red\", linewidth = 0.1) +\n  theme(axis.text.x = element_text(angle = 90)) + # Avoid text overlap\n  labs(x = axis_names[1], y = axis_names[2]) # Add x-axis and y-axis labels\n\np\n\n\n\n\n\n\n\nFigure 4: Plotting with Genetic Data\n\n\n\n\n\n\n\n5. Connect Points In Chronological Order\n\nDo not Connect Points in Chronological Order (For Comparison)\nFigure 5 uses geom_line() for drawing. By default, geom_line() draws along the x-axis direction (it draws along the y-axis when orientation=\"y\").\n\np &lt;- ggplot(data_economics, aes(x = psavert, y = uempmed)) +\n  geom_point(shape = 17, size = 1.5, color = \"blue\") +\n  geom_text(\n    label = data_economics$date, nudge_x = 0,\n    nudge_y = -0.1, size = 3\n  ) +\n  geom_line(linewidth = 1)\n\np\n\n\n\n\n\n\n\nFigure 5: Comparison Diagram\n\n\n\n\n\n\n\nConnect Points in Chronological Order\nIn Figure 6, geom_segment() is used to connect points in chronological order, which results in a significant difference compared to the plot drawn with geom_line().\n\n# Sort by date\ndata_economics &lt;- data_economics[order(data_economics$date), ]\n\n# Use `geom_segment()` to draw line segments\np &lt;- ggplot(data_economics, aes(x = psavert, y = uempmed)) +\n  geom_point(shape = 17, size = 1.5, color = \"blue\") +\n  geom_text(\n    label = data_economics$date, nudge_x = 0,\n    nudge_y = -0.1, size = 5\n  ) +\n  geom_segment(\n    aes(\n      xend = c(tail(psavert, n = 24), NA),\n      yend = c(tail(uempmed, n = 24), NA)\n    ),\n    linewidth = 1\n  )\n\np\n\n\n\n\n\n\n\nFigure 6: Connect Points in Chronological Order\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nKey Parameters: geom_segment\nxend,yend：\nCorresponding to x and y, that is, drawing a line segment from (x, y) to (xend, yend). In the code, c(tail(psavert, n=24), NA) takes the last 24 values of the psavert column and appends an NA. This makes each point point to the next one to draw a line segment, with the final point pointing to NA, thus not drawing a line segment.\n\n\n\n\nDraw Arrows\nArrows are added to each line segment in Figure 7, making the chronological features in the connected scatter plot more apparent.\n\n# Sort by date\ndata_economics &lt;- data_economics[order(data_economics$date), ]\n\n# Use `geom_segment()` to draw line segments\np &lt;- ggplot(data_economics, aes(x = psavert, y = uempmed)) +\n  geom_point(shape = 17, size = 1.5, color = \"blue\") +\n  geom_text(\n    label = data_economics$date, nudge_x = 0,\n    nudge_y = -0.1, size = 5\n  ) +\n  geom_segment(\n    aes(\n      xend = c(tail(psavert, n = 24), NA),\n      yend = c(tail(uempmed, n = 24), NA)\n    ),\n    linewidth = 1, arrow = arrow(length = unit(0.5, \"cm\"))\n  )\n\np\n\n\n\n\n\n\n\nFigure 7: Draw Arrows",
    "crumbs": [
      "Correlation",
      "Connected Scatter"
    ]
  },
  {
    "objectID": "Correlation/ConnectedScatter.html#applications",
    "href": "Correlation/ConnectedScatter.html#applications",
    "title": "Connected Scatter",
    "section": "Applications",
    "text": "Applications\n\n\n\n\n\nThe plot shows the relative error curves corresponding to the model methods based on the unused, original, and improved methods. The average relative error of the component content model based on the improved method is superior to the models based on the unused and original methods.[1]\n\n\n\n\n\nComparison of sparse canonical correlation analysis with iCluster for cancer classification(SCCA-CC). Using a different number of genes preselected based on MAD, we compared the classification performance between SCCA-CC and iCluster. (A) represents the P-value associated with survival, calculated by the log-rank test; (B) represents the Silhouette score indicating clustering consistency; (C) assesses the algorithm’s runtime to evaluate computational complexity.[2]\n\n\n\n\n\n\nDistribution of the number of comorbidities among HCC patients. (B) Average number of comorbidities among HCC patients of different ages and genders. (C) Distribution of the number of comorbidities among male HCC patients in different age groups. (D) Distribution of the number of comorbidities among female HCC patients in different age groups.[3]",
    "crumbs": [
      "Correlation",
      "Connected Scatter"
    ]
  },
  {
    "objectID": "Correlation/ConnectedScatter.html#reference",
    "href": "Correlation/ConnectedScatter.html#reference",
    "title": "Connected Scatter",
    "section": "Reference",
    "text": "Reference\n[1] LU R, LIU H, YANG H, et al. Multi-Delay Identification of Rare Earth Extraction Process Based on Improved Time-Correlation Analysis[J]. Sensors (Basel), 2023,23(3).\n[2] QI L, WANG W, WU T, et al. Multi-Omics Data Fusion for Cancer Molecular Subtyping Using Sparse Canonical Correlation Analysis[J]. Front Genet, 2021,12: 607817.\n[3] MU X M, WANG W, JIANG Y Y, et al. Patterns of Comorbidity in Hepatocellular Carcinoma: A Network Perspective[J]. Int J Environ Res Public Health, 2020,17(9).",
    "crumbs": [
      "Correlation",
      "Connected Scatter"
    ]
  },
  {
    "objectID": "Correlation/Scatter.html",
    "href": "Correlation/Scatter.html",
    "title": "Scatter Plot",
    "section": "",
    "text": "A scatter plot is a basic visualization chart used to represent the general trend of the dependent variable changing with the independent variable.",
    "crumbs": [
      "Correlation",
      "Scatter Plot"
    ]
  },
  {
    "objectID": "Correlation/Scatter.html#example",
    "href": "Correlation/Scatter.html#example",
    "title": "Scatter Plot",
    "section": "Example",
    "text": "Example\n\n\n\n\n\nThe basic scatter plot above can intuitively show the general trend of the dependent variable y changing with the independent variable x. It can be seen that y generally increases with the increase of x.",
    "crumbs": [
      "Correlation",
      "Scatter Plot"
    ]
  },
  {
    "objectID": "Correlation/Scatter.html#setup",
    "href": "Correlation/Scatter.html#setup",
    "title": "Scatter Plot",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming Language: R\nDependencies: ggplot2, ggpmisc, ggpubr, ggExtra, geomtextpath, plotly, dplyr\n\n\n# Install packages\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"ggpmisc\", quietly = TRUE)) {\n  install.packages(\"ggpmisc\")\n}\nif (!requireNamespace(\"ggpubr\", quietly = TRUE)) {\n  install.packages(\"ggpubr\")\n}\nif (!requireNamespace(\"ggExtra\", quietly = TRUE)) {\n  install.packages(\"ggExtra\")\n}\nif (!requireNamespace(\"geomtextpath\", quietly = TRUE)) {\n  install.packages(\"geomtextpath\")\n}\nif (!requireNamespace(\"plotly\", quietly = TRUE)) {\n  install.packages(\"plotly\")\n}\nif (!requireNamespace(\"dplyr\", quietly = TRUE)) {\n  install.packages(\"dplyr\")\n}\n\n# Load packages\nlibrary(ggpmisc)\nlibrary(ggplot2)\nlibrary(ggpubr)\nlibrary(ggExtra)\nlibrary(geomtextpath)\nlibrary(plotly)\nlibrary(dplyr)",
    "crumbs": [
      "Correlation",
      "Scatter Plot"
    ]
  },
  {
    "objectID": "Correlation/Scatter.html#data-preparation",
    "href": "Correlation/Scatter.html#data-preparation",
    "title": "Scatter Plot",
    "section": "Data Preparation",
    "text": "Data Preparation\nUsing R’s built-in dataset iris and the NCBI GSE243555 dataset\n\n# 1.Load iris data\ndata &lt;- iris\n\n# 2.Load gene expression data (first two rows)\ndata_counts &lt;- read.csv(\"files/GSE243555_all_genes_with_counts.txt\", sep = \"\\t\", header = TRUE, nrows = 10) \n\naxis_names &lt;- data_counts[c(1, 2), 1]        # Save names\ndata_counts &lt;- data_counts %&gt;%      \n  select(-1) %&gt;%               # Remove first column\n  slice(1:2) %&gt;%               # remain the first two rows\n  t()  %&gt;%                     # Transpose\n  as.data.frame() %&gt;%\n  setNames(c(\"V1\", \"V2\"))      # Set column names\n\nhead(data_counts)\n\n                           V1  V2\nMCF7.HG..1.              2905 178\nMCF7.HG..LG..2.          2496 161\nADIPO.HG..2.             1802 184\nADIPO.HG..LG..2.         1400 174\nMCF7...ADIPO..HG..2.     2180 154\nMCF7...ADIPO..HG..LG..2. 2123 118",
    "crumbs": [
      "Correlation",
      "Scatter Plot"
    ]
  },
  {
    "objectID": "Correlation/Scatter.html#visualization",
    "href": "Correlation/Scatter.html#visualization",
    "title": "Scatter Plot",
    "section": "Visualization",
    "text": "Visualization\n\n1. Basic Plotting\nFigure 1 is a basic scatter plot, which can be drawn by calling geom_point().\n\n# Basic plotting\np &lt;- ggplot(data, aes(x = Sepal.Width, y = Sepal.Length)) +\n  geom_point()\n\np\n\n\n\n\n\n\n\nFigure 1: Basic Plotting\n\n\n\n\n\n\n\n2. Set Point Style\nFigure 2 has changed the shape, size, and color style of the points based on the basic scatter plot.\n\n# Set the shape, size, and color parameters in `geom_point`\np &lt;- ggplot(data, aes(x = Sepal.Width, y = Sepal.Length)) +\n  geom_point(shape = 17, size = 1.5, color = \"blue\")\n\np\n\n\n\n\n\n\n\nFigure 2: Set Point Style\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nKey Parameters: shape\nshape is the shape of the point, with optional values ranging from 0 to 25, and the specific shapes are shown in the following figure:\n\n\n\n\n\n\n\n\n\n3. Multi-class Data Plotting, Change Legend Position\n\nMulti-class Data Plotting\nFigure 3 uses color=Species to map the species variable to the color feature, giving different species different colors.\n\n# Multi-class data plotting\np_multi &lt;- ggplot(data, aes(x = Sepal.Width, y = Sepal.Length, color = Species)) +\n  geom_point(shape = 16, size = 1.5)\n\np_multi\n\n\n\n\n\n\n\nFigure 3: Multi-class Data Plotting\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nKey Parameters: color=Species\nHere, the Species variable is mapped to the color feature, with different Species groups having different color. You can also map variables to multiple features, such as alpha=Species (mapping the species variable to the transparency feature, meaning the three types of data points will have different transparencies), shape=Species (mapping the species variable to the shape variable), and so on.\n\n\n\n\nMap Categorical Variables to other Features\nFigure 4 maps the species variable to both color and shape, with different species having different colors and shapes.\n\n## Map categorical variables to other features\np_multi &lt;- ggplot(data, aes(\n  x = Sepal.Width, y = Sepal.Length,\n  color = Species, shape = Species\n)) +\n  geom_point()\n\np_multi\n\n\n\n\n\n\n\nFigure 4: Map Categorical Variables to other Features\n\n\n\n\n\n\n\nChange Legend Position\nFigure 5 places the legend in the blank space of the chart, making it more aesthetically pleasing.\n\n## Map categorical variables to other features\np_multi &lt;- ggplot(data, aes(\n  x = Sepal.Width, y = Sepal.Length,\n  color = Species, shape = Species\n)) +\n  geom_point() +\n  # use `theme()` to change the legend position\n  theme(legend.position = \"inside\", legend.position.inside = c(0.87, 0.8))\n\np_multi\n\n\n\n\n\n\n\nFigure 5: Change Legend Position\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nKey Parameters: theme\nlegend.position：\nSet the position of the legend, with options including “none”, “left”, “right”, “bottom”, “top”, “inside”.\nlegend.position.inside：\nThe legend.position=\"inside\" is effective only when it is set. The general form is legend.position.inside=c(x,y), where x and y are numerical values, both ranging from 0 to 1. The larger the x value, the more the legend is positioned to the right; the larger the y value, the higher the legend is positioned. Adjustments can be made according to the actual blank space.\n\n\n\n\n\n4. Add Point Labels\n\ngeom_text() for Point Labels\nFigure 6 uses geom_text() to draw point labels.\n\n# Basic plotting and point labels\n# To ensure that the points do not overlap, only the data with the species \"setosa\" was selected for plotting\np &lt;- ggplot(data = data[data$Species == \"setosa\", ], aes(x = Sepal.Width, y = Sepal.Length)) +\n  geom_point(shape = 16, size = 1.5, color = \"blue\") +\n  geom_text(\n    label = rownames(data[data$Species == \"setosa\", ]),\n    nudge_x = 0.03, nudge_y = -0.04,\n    check_overlap = T\n  )\n\np\n\n\n\n\n\n\n\nFigure 6: geom_text() for Point Labels\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nKey Parameters: geom_text\nlabel:\nThe label content displayed on the chart can be column names or other features.\nnudge_x,nudge_y:\nCentered on each point, nudge_x and nudge_y represent the deviation from this center point, and adjustments are made to place the labels in the optimal position.\ncheck_overlap：\nA boolean value, when true, will avoid overlap, but some point labels may not be displayed; when false, it will not check if the points overlap.\n\n\n\n\ngeom_label() for Point Labels\nFigure 7 uses geom_label() to draw point labels.\n\n# `geom_label` can also be used to draw point labels, and the parameters can remain unchanged.\np &lt;- ggplot(data = data[data$Species == \"setosa\", ], aes(x = Sepal.Width, y = Sepal.Length)) +\n  geom_point(shape = 16, size = 1.5, color = \"blue\") +\n  geom_label(\n    label = rownames(data[data$Species == \"setosa\", ]),\n    nudge_x = 0.025, nudge_y = -0.04, size = 2.5\n  )\n\np\n\n\n\n\n\n\n\nFigure 7: geom_label() for Point Labels\n\n\n\n\n\n\n\n\n5. Regression Curve and Regression Equation/Correlation Coefficient\n\nDraw Regression Curve\nFigure 8 introduces a regression curve using geom_smooth(), which is a common form in articles.\n\n# Draw regression curve\np &lt;- ggplot(data_counts, aes(x = V1, y = V2)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", formula = y ~ x, se = T, color = \"red\")\n\np\n\n\n\n\n\n\n\nFigure 8: Draw Regression Curve\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nKey Parameters: geom_smooth\nmethod:\nThe method for drawing the regression curve can be chosen, with the default method=NULL. Options include “lm”, “glm”, “gam”, “loess”, or a custom function.\nformula:\nThe formula used for drawing the regression curve can be chosen, with the default formula=NULL. Options include y ~ x, y ~ poly(x, 2), y ~ log(x), etc.\nse:\nThe Boolean value, where TRUE indicates displaying the confidence interval, with the default se = TRUE.\n\n\n\n\nAdd Regression Equation\nFigure 9 has annotated the regression equation, R-squared, p-value, and other information in the upper left corner.\n\n# Draw regression curve\np &lt;- ggplot(data_counts, aes(x = V1, y = V2)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", formula = y ~ x, se = T, color = \"red\") +\n  # Add the regression equation, eq: equation, R2: R-squared, P: p-value\n  stat_poly_eq(use_label(\"eq\", \"R2.CI\", \"P\"), formula = y ~ x, size = 4, method = \"lm\")\n\np\n\n\n\n\n\n\n\nFigure 9: Add Regression Equation\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nKey Parameters: use_label\nThe types of labels to be added, “eq”, “R2”, “P” represent the equation of the regression equation, the R-squared value, and the p-value, respectively. There are also other optional values such as “R2.CI” (displaying the 95% confidence interval) and “method” (displaying the method).\n\n\n\n\nAdjust the Position of the Regression Equation Label\nFigure 10 used the label.y and label.x parameters to adjust the label position as needed.\n\n## Adjust the label to a suitable position\np &lt;- ggplot(data_counts, aes(x = V1, y = V2)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", formula = y ~ x, se = T, color = \"red\") +\n  stat_poly_eq(use_label(\"eq\"),\n    formula = y ~ x, size = 4, method = \"lm\",\n    label.y = 0.45, label.x = 0.5, angle = -5\n  )\n\np\n\n\n\n\n\n\n\nFigure 10: Adjust the Position of the Regression Equation Label\n\n\n\n\n\n\n\nPlotting Multi-class Data with Regression Equations\nFigure 11 uses multiple types of data for plotting and adds regression curves and their labels.\n\n# Multi-class plotting with regression equations\np_multi &lt;- ggplot(data, aes(x = Sepal.Width, y = Sepal.Length, color = Species, shape = Species)) +\n  geom_point(size = 1.5) +\n  scale_colour_manual(values = c(\"setosa\" = \"purple\", \"versicolor\" = \"blue\", \"virginica\" = \"pink\")) +\n  theme(legend.position = \"inside\", legend.position.inside = c(0.87, 0.8)) +      # Set the legend position\n  geom_smooth(method = \"lm\", formula = y ~ x, se = T) +\n  stat_poly_eq(use_label(\"eq\"),\n    formula = y ~ x, size = 3.5, method = \"lm\",\n    label.x = c(0.6, 0.6, 0.6), label.y = c(0.2, 0.6, 0.75), angle = 10, color = \"black\"\n  )\n\np_multi\n\n\n\n\n\n\n\nFigure 11: Plotting Multi-class Data with Regression Equations\n\n\n\n\n\n\n\nDisplay Correlation Coefficient\nFigure 12 uses the stat_cor() function to display the correlation coefficient label.\n\n# Display correlation coefficient\np &lt;- ggplot(data_counts, aes(x = V1, y = V2)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", formula = y ~ x, se = T, color = \"red\") +\n  stat_cor(\n    method = \"pearson\", label.sep = \",\",\n    p.accuracy = 0.00001, r.digits = 5, size = 4\n  )\n\np\n\n\n\n\n\n\n\nFigure 12: Display Correlation Coefficient\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nKey Parameters: stat_cor\nmethod:\nThe method for calculating the correlation coefficient, which can be chosen from “pearson” (default), “kendall”, or “spearman”.\nlabel.sep:\nThe delimiter for labels, defaulting to “,”.\nr.accuracy,p.accuracy:\nThe precision of the R value or P value.\nr.digits,p.digits：\nThe number of significant digits for the R value or P value.\n\n\n\n\n\n6. Add Labels to Regression Curve\n\nsingle-type Data Plotting with Label\nFigure 13 uses geom_labelsmooth() to add labels to the regression curve.\n\n## Draw the regression line and add labels\np &lt;- ggplot(data[data$Species == \"setosa\", ], aes(x = Sepal.Width, y = Sepal.Length)) +\n  geom_point(shape = 16, size = 2, color = \"blue\") +\n  geom_labelsmooth(aes(label = Species[1]),\n    fill = \"white\",\n    method = \"lm\", formula = y ~ x,\n    size = 6, linewidth = 1,\n    boxlinewidth = 0.6, linecolour = \"red\"\n  )\n\np\n\n\n\n\n\n\n\nFigure 13: single-type Data Plotting with Label\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nKey Parameters: geom_labelsmooth\nlabel：\nLabel name.\nfill：\nBox fill color.\nlinewidth:\nLine thickness.\nboxlinewidth:\nThe thickness of the box border.\n\n\n\n\nMulti-class Data Plotting with Labels\nFigure 14 adds label to multiple types of data accordingly.\n\n# Multi-class data plotting with labels\np &lt;- ggplot(data, aes(x = Sepal.Width, y = Sepal.Length, color = Species, shape = Species)) +\n  geom_point(size = 2) +\n  theme(legend.position = \"none\") +\n  geom_labelsmooth(aes(label = Species),\n    fill = \"white\",\n    method = \"lm\", formula = y ~ x,\n    size = 3, linewidth = 0.6, boxlinewidth = 0.3\n  )\n\np     \n\n\n\n\n\n\n\nFigure 14: Multi-class Data Plotting with Labels\n\n\n\n\n\n\n\n\n7. Add Marginal Rug Plots\nFigure 15 uses geom_rug() to add marginal rugs.\n\np &lt;- ggplot(data, aes(x = Sepal.Width, y = Sepal.Length)) +\n  geom_point(shape = 16, size = 1.5, color = \"blue\") +\n  geom_rug(color = \"steelblue\", alpha = 0.1, linewidth = 1.5)\n\np\n\n\n\n\n\n\n\nFigure 15: Add Marginal Rug Plots\n\n\n\n\n\n\n\n8. Add Marginal Distributions\nFigure 16 introduces the marginal distribution of histograms, and multiple parameters can be used to adjust the style of the marginal plots.\n\n# Add marginal distributions\np &lt;- ggplot(data, aes(x = Sepal.Width, y = Sepal.Length)) +\n  geom_point(shape = 16, size = 1.5, color = \"blue\")\n\np\n\np1 &lt;- ggMarginal(p,\n  type = \"histogram\", color = \"red\", fill = \"green\",\n  margins = \"both\", xparams = list(bins = 12, fill = \"purple\")\n)\n\np1\n\n\n\n\n\n\n\nFigure 16: Add Marginal Distributions\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nKey Parameters: ggMarginal\ntype:\nThe type of marginal distribution plot, with options including “density”, “histogram”, “boxplot”, “violin”, “densigram”.\nmargins:\nSet which edge to draw the marginal distribution plot, margins=c(x,y) indicates that marginal plots are drawn on both the x and y edges.\nxparams,yparams：\nSet the side plot to be effective only for the x or y dimension. The parameters include common parameters such as color, fill, and size, as well as unique parameters for this marginal plot, such as the bins for histograms.\nbins:\nLike the histogram parameter bins, divide the histogram into several bars.\n\n\n\n\n9. Draw 3D Interactive Scatter Plot\nFigure 17 uses three columns of data and supports interactive browsing.\n\n## 3D Interactive Scatter Plot.\np &lt;- plot_ly(data,\n  x = ~ data$Sepal.Length, y = ~ data$Sepal.Width,\n  z = ~ data$Petal.Length, color = ~ data$Species,\n  colors = c(\"#FF6DAE\", \"#D4CA3A\", \"#00BDFF\"),\n  marker = list(size = 5)\n) %&gt;%\n  add_markers()        # Add the above chart to the `plotly` visualization\n\np\n\n\n\n\n\n\n\nFigure 17: Draw 3D Interactive Scatter Plot",
    "crumbs": [
      "Correlation",
      "Scatter Plot"
    ]
  },
  {
    "objectID": "Correlation/Scatter.html#applications",
    "href": "Correlation/Scatter.html#applications",
    "title": "Scatter Plot",
    "section": "Applications",
    "text": "Applications\n\n\n\n\n\n\nFigure 18: Applications of Scatter Plot\n\n\n\nThe figure shows that KRT6B expression is positively correlated with immune-related genes (including CXCL9 and CXCL10). [1]\n\n\n\n\n\n\nFigure 19: Applications of Scatter Plot\n\n\n\nThe figure shows that in the brown and dark blue modules, there is a strong positive correlation between module members and gene importance (cor=0.78&p&lt;0.001, cor=0.59&p&lt;0.001). [2]\n\n\n\n\n\n\nFigure 20: Applications of Scatter Plot\n\n\n\nThe figure explores the association between CXCR4 and various immune cells. [3]",
    "crumbs": [
      "Correlation",
      "Scatter Plot"
    ]
  },
  {
    "objectID": "Correlation/Scatter.html#reference",
    "href": "Correlation/Scatter.html#reference",
    "title": "Scatter Plot",
    "section": "Reference",
    "text": "Reference\n[1] Song Q, Yu H, Cheng Y, et al. Bladder cancer-derived exosomal KRT6B promotes invasion and metastasis by inducing EMT and regulating the immune microenvironment[J]. J Transl Med, 2022,20(1):308.\n[2] Xie J, Chen L, Wu D, et al. Significance of liquid-liquid phase separation (LLPS)-related genes in breast cancer: a multi-omics analysis[J]. Aging (Albany NY), 2023,15(12):5592-5610.\n[3]Zhang S, Hou L, Sun Q. Correlation analysis of intestinal flora and immune function in patients with primary hepatocellular carcinoma[J]. J Gastrointest Oncol, 2022,13(3):1308-1316.",
    "crumbs": [
      "Correlation",
      "Scatter Plot"
    ]
  },
  {
    "objectID": "Correlation/Correlogram.html",
    "href": "Correlation/Correlogram.html",
    "title": "Correlogram",
    "section": "",
    "text": "Correlogram or Correlation diagrams are often used to summarize the correlation information of various groups of data in the entire dataset.",
    "crumbs": [
      "Correlation",
      "Correlogram"
    ]
  },
  {
    "objectID": "Correlation/Correlogram.html#example",
    "href": "Correlation/Correlogram.html#example",
    "title": "Correlogram",
    "section": "Example",
    "text": "Example\n\n\n\n\n\nFor example, the above diagram is a correlation heatmap of various groups of data in the mtcars dataset. Colors are used to represent the pairwise correlations of data in different groups, and the shade of the color represents the magnitude of the P-value.",
    "crumbs": [
      "Correlation",
      "Correlogram"
    ]
  },
  {
    "objectID": "Correlation/Correlogram.html#setup",
    "href": "Correlation/Correlogram.html#setup",
    "title": "Correlogram",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming Language: R\nDependencies: GGally; corrplot; ggcorrplot; corrgram\n\n\n# Install packages\nif (!requireNamespace(\"GGally\", quietly = TRUE)) {\n  install.packages(\"GGally\")\n}\nif (!requireNamespace(\"corrplot\", quietly = TRUE)) {\n  install.packages(\"corrplot\")\n}\nif (!requireNamespace(\"ggcorrplot\", quietly = TRUE)) {\n  install.packages(\"ggcorrplot\")\n}\nif (!requireNamespace(\"corrgram\", quietly = TRUE)) {\n  install.packages(\"corrgram\")\n}\n\n# Load packages\nlibrary(GGally)\nlibrary(corrplot)\nlibrary(ggcorrplot)\nlibrary(corrgram)",
    "crumbs": [
      "Correlation",
      "Correlogram"
    ]
  },
  {
    "objectID": "Correlation/Correlogram.html#data-preparation",
    "href": "Correlation/Correlogram.html#data-preparation",
    "title": "Correlogram",
    "section": "Data Preparation",
    "text": "Data Preparation\nThe correlation heatmap is mainly drawn using the built-in datasets in R.\n\ndata(\"flea\", package = \"GGally\")\ndata_flea &lt;- flea\n\ndata(\"mtcars\", package = \"datasets\")\ndata_mtcars &lt;- mtcars\n\ndata(\"tips\", package = \"GGally\")\ndata_tips &lt;- tips",
    "crumbs": [
      "Correlation",
      "Correlogram"
    ]
  },
  {
    "objectID": "Correlation/Correlogram.html#visualization",
    "href": "Correlation/Correlogram.html#visualization",
    "title": "Correlogram",
    "section": "Visualization",
    "text": "Visualization\n\n1. GGally Package\n\nGGally is a commonly used tool for drawing correlation diagrams. It allows the injection of ggplot2 code but does not have a sorting function.\n\n\nDrawing of Basic Correlation Diagram\n\nggpairs(data_flea, columns = 2:5)\n\n\n\n\n\n\n\n\n\nThe above diagram shows the correlation visualization of each group of data in the flea dataset. The picture consists of three parts: the scatter plot of the correlation between the corresponding two groups of data in the lower part; the density plot of a single group of data on the diagonal; and the Pearson correlation coefficient values of the corresponding two groups of data in the upper part.\n\n\n\nIntroducing ggplot2 Codes to Color Each Category\n\nggpairs(data_flea, columns = 2:4, ggplot2::aes(colour=species,alpha=0.7)) \n\n\n\n\n\n\n\n\n\nThe above diagram, on the basis of correlation visualization, classifies each category by color.\n\n\n\nCustomizing the Plotting Type\n\nggpairs(data_tips[, c(1, 3, 4, 2)])\n\n\n\n\n\n\n\nsummary(data_tips)\n\n   total_bill         tip             sex      smoker      day         time    \n Min.   : 3.07   Min.   : 1.000   Female: 87   No :151   Fri :19   Dinner:176  \n 1st Qu.:13.35   1st Qu.: 2.000   Male  :157   Yes: 93   Sat :87   Lunch : 68  \n Median :17.80   Median : 2.900                          Sun :76               \n Mean   :19.79   Mean   : 2.998                          Thur:62               \n 3rd Qu.:24.13   3rd Qu.: 3.562                                                \n Max.   :50.81   Max.   :10.000                                                \n      size     \n Min.   :1.00  \n 1st Qu.:2.00  \n Median :2.00  \n Mean   :2.57  \n 3rd Qu.:3.00  \n Max.   :6.00  \n\n\n\nIn the above diagram, tatal_bill and tip are quantitative data, while sex and smoker are qualitative data. In the lower part, scatter plots, histograms, and bar charts of pairwise correlations are mainly drawn according to different data types; in the diagonal part, the distribution diagrams of each group of data are shown; in the upper part, pairwise correlation line charts are drawn according to different data types, and for two quantitative data, the Pearson correlation coefficient values are given.\n\n\n# Changing the plotting type\nggpairs(\n  data_tips[, c(1, 3, 4, 2)],\n  upper = list(continuous = \"density\",\n               combo = \"box_no_facet\"),\n  lower = list(continuous = \"points\",\n               combo = \"dot_no_facet\")\n)\n\n\n\n\n\n\n\n\n\nThrough customization, the histogram in the lower part is modified into a scatter plot, and the correlation coefficient values in the upper part are modified into a density plot.\n\n\n\nCorrelation Visualization\nVisualize the correlation coefficients.\n\nggcorr(data_mtcars) # Draw a correlation coefficient heatmap, with Pearson as the default\n\n\n\n\n\n\n\n\n\nThe above diagram visualizes the correlation coefficients through the ggcorr（） function.\nThe method parameter of ggcorr:\nThe default is in the form of c(\"pairwise\", \"pearson\"). The first parameter is to determine the handling of missing values when calculating the covariance, and the second parameter is used to determine the type of correlation coefficient, such as \"pearson\", \"kendall\" or \"spearman\".\n\n\n\n\n2. corrplot Package\n\nThe corrplot package is a commonly used tool for correlation visualization, which has powerful customization functions and a sorting function.\n\n\nBasic Plotting\n\ncorr &lt;- cor(data_mtcars)\ncorrplot(corr)\n\n\n\n\n\n\n\n\n\n\nParameter Customization\n\nThe main key parameters of corrplot():\ncorr The correlation coefficient matrix to be visualized\nmethod The shape of the visualization\ntype The display range (full, lower, upper)\ncol The color of the graph display\naddCoef.col The color of the correlation coefficient values\norder The sorting method of the correlation coefficients\nis.corr Whether to draw a correlation coefficient plot, which is TRUE by default. It can also achieve the visualization of non-correlation coefficients. Just set this parameter to FALSE.\n……\n\n\ncorrplot(corr,method = \"ellipse\" ,#method, specify the visualization shape\n         order = \"AOE\", #order, the sorting method of the correlation coefficients\n         addCoef.col=\"black\", # Specify the color of the correlation coefficients\n         type=\"lower\") # Specify the display part\n\n\n\n\n\n\n\n\n\nThe above diagram is a correlation coefficient heatmap of the mtcars dataset.\n\ntype=\"lower\" specifies to display the lower part of the heatmap.\nThe shade of the color represents the magnitude of the correlation coefficient.\nThe shape of the ellipse represents the correlation coefficient: the greater the eccentricity, the flatter the ellipse, and the larger the absolute value of the correlation coefficient; the smaller the eccentricity, the rounder the ellipse, and the smaller the absolute value of the correlation coefficient. The direction of the long axis of the ellipse represents the positive or negative of the correlation coefficient. The upper right - lower left direction corresponds to a positive value, and the upper left - lower right direction corresponds to a negative value.\n\n\n\n\nAdding Significance Labels\n\nres1 &lt;-cor.mtest(data_mtcars, conf.level= .95)\ncorrplot(corr, method= \"circle\",\n         p.mat= res1$p, sig.level= 0.01, # P-values greater than 0.01 are considered to have no statistical significance\n         mar= c(1,1,1,1))\n\n\n\n\n\n\n\n\n\nThe above diagram adds significance labels on the basis of the correlation coefficient heatmap. P-values greater than 0.01 are regarded as having no statistical significance.\n\n\n\n\n3. ggcorrplot Package\n\nThe ggcorrplot package is equivalent to a simplified version of the corrplot package, mainly including the calculation function of cor_pmat and the plotting function of ggcorrplot.\n\n\nCalculating P-values with cor_pmat\n\np.mat &lt;- cor_pmat(data_mtcars)\nhead(p.mat[, 1:6])\n\n              mpg          cyl         disp           hp         drat\nmpg  0.000000e+00 6.112687e-10 9.380327e-10 1.787835e-07 1.776240e-05\ncyl  6.112687e-10 0.000000e+00 1.802838e-12 3.477861e-09 8.244636e-06\ndisp 9.380327e-10 1.802838e-12 0.000000e+00 7.142679e-08 5.282022e-06\nhp   1.787835e-07 3.477861e-09 7.142679e-08 0.000000e+00 9.988772e-03\ndrat 1.776240e-05 8.244636e-06 5.282022e-06 9.988772e-03 0.000000e+00\nwt   1.293959e-10 1.217567e-07 1.222320e-11 4.145827e-05 4.784260e-06\n               wt\nmpg  1.293959e-10\ncyl  1.217567e-07\ndisp 1.222320e-11\nhp   4.145827e-05\ndrat 4.784260e-06\nwt   0.000000e+00\n\n\n\n\nPlotting with ggcorrplot\n\nggcorrplot(corr, method = \"square\" )\n\n\n\n\n\n\n\n\n\nThe above diagram is a color heatmap of the correlation coefficients of the mtcar dataset.\n\n\nggcorrplot(corr, method = \"circle\" )\n\n\n\n\n\n\n\n\n\nHere we have changed the plotting type to a circle.\n\n\n\n\n4. corrgram Package\n\nThe corrgram package is also a good choice for drawing correlation diagrams. It can select the content to be displayed in the upper, lower, and diagonal parts.\nWe mainly use the corrgram() function to draw the correlation diagram:\n\ncor.method determines the type of correlation coefficient, pearson (default), spearman, kendall\n\nDifferent methods can be used for visualization:\n\npanel.ellipse displays an ellipse\npanel.shade is used for color blocks\npanel.pie is used for pie charts\npanel.pts is used for scatter plots\n\n\n\ncorrgram(data_mtcars, order=TRUE, \n         lower.panel=panel.shade, # Color blocks\n         upper.panel=panel.pie, # Pie chart\n         text.panel=panel.txt, \n         main=\"Car Milage Data in PC2/PC1 Order\") \n\n\n\n\n\n\n\n\n\nBy setting lower.panel=panel.shade and upper.panel=panel.pie, the upper part is set as a pie chart, and the lower part is set as a color diagram.\n\n\ncorrgram(data_mtcars, order=TRUE, \n         lower.panel=panel.ellipse, # Display an ellipse\n         upper.panel=panel.pts,  # Scatter plot\n         text.panel=panel.txt, \n         diag.panel=panel.minmax, \n         main=\"Car Milage Data in PC2/PC1 Order\") \n\n\n\n\n\n\n\n\n\nBy setting lower.panel=panel.ellipse and upper.panel=panel.pts, the upper part is set as a scatter plot, and the lower part is set as an ellipse diagram (where the red line is the fitted curve).\n\n\ncorrgram(data_mtcars, order=NULL, \n         lower.panel=panel.shade, # Color blocks\n         upper.panel=NULL, \n         text.panel=panel.txt, \n         main=\"Car Milage Data (unsorted)\")\n\n\n\n\n\n\n\n\n\nBy setting lower.panel=panel.shade and upper.panel=NULL, only the color diagram in the lower part is displayed.",
    "crumbs": [
      "Correlation",
      "Correlogram"
    ]
  },
  {
    "objectID": "Correlation/Correlogram.html#applications",
    "href": "Correlation/Correlogram.html#applications",
    "title": "Correlogram",
    "section": "Applications",
    "text": "Applications\n\n\n\n\n\n\nFigure 1: Applications of Correlogram\n\n\n\n\nThe above diagram is a correlation diagram based on the ANI values of strains. The ANI values between each indicator strain are calculated using the JSpecies software and used for the construction of the Pearson correlation matrix. This diagram shows the correlations constructed and sorted by hierarchical clustering using the corrplot package. [1]\n\n\n\n\n\n\n\nFigure 2: Applications of Correlogram\n\n\n\n\nThe above diagram shows the correlations between Gain [FF], ILP, wpm, RR, R r-words, R p-words, RN, and VA. The left diagram shows the correlations without excluding the influence of children’s grades; the right diagram shows the correlations after differentiating the grades. The magnitude of the correlation is represented by the size (and color) of the circle. The corrplot package was used for drawing. [2]",
    "crumbs": [
      "Correlation",
      "Correlogram"
    ]
  },
  {
    "objectID": "Correlation/Correlogram.html#reference",
    "href": "Correlation/Correlogram.html#reference",
    "title": "Correlogram",
    "section": "Reference",
    "text": "Reference\n[1] Espariz M, Zuljan FA, Esteban L, Magni C. Taxonomic Identity Resolution of Highly Phylogenetically Related Strains and Selection of Phylogenetic Markers by Using Genome-Scale Methods: The Bacillus pumilus Group Case. PLoS One. 2016 Sep 22;11(9):e0163098. doi: 10.1371/journal.pone.0163098. PMID: 27658251; PMCID: PMC5033322.\n[2] Marx C, Hutzler F, Schuster S, Hawelka S. On the Development of Parafoveal Preprocessing: Evidence from the Incremental Boundary Paradigm. Front Psychol. 2016 Apr 14;7:514. doi: 10.3389/fpsyg.2016.00514. PMID: 27148123; PMCID: PMC4830847.\n[3] Schloerke B, Cook D, Larmarange J, Briatte F, Marbach M, Thoen E, Elberg A, Crowley J (2024). GGally: Extension to ‘ggplot2’. R package version 2.2.1, CRAN: Package GGally.\n[4] Taiyun Wei and Viliam Simko (2024). R package ‘corrplot’: Visualization of a Correlation Matrix (Version 0.94). Available from GitHub - taiyun/corrplot: A visual exploratory tool on correlation matrix\n[5] Kassambara A (2023). ggcorrplot: Visualization of a Correlation Matrix using ‘ggplot2’. R package version 0.1.4.1, CRAN: Package ggcorrplot.\n[6] Wright K (2021). corrgram: Plot a Correlogram. R package version 1.14, CRAN: Package corrgram.",
    "crumbs": [
      "Correlation",
      "Correlogram"
    ]
  },
  {
    "objectID": "Correlation/Heatmap.html",
    "href": "Correlation/Heatmap.html",
    "title": "Heatmap",
    "section": "",
    "text": "A heatmap is a powerful visualization tool that represents matrix values through color gradients. It is widely used to illustrate gene expression differences across sample groups, variations in compound concentrations, and pairwise sample similarities. More broadly, any tabular dataset can be structured into a heatmap to enhance interpretability.",
    "crumbs": [
      "Correlation",
      "Heatmap"
    ]
  },
  {
    "objectID": "Correlation/Heatmap.html#example",
    "href": "Correlation/Heatmap.html#example",
    "title": "Heatmap",
    "section": "Example",
    "text": "Example\n\n\n\n\n\nIn this heatmap, rows correspond to car models (e.g., Mazda RX4, Merc 450SLC), while columns represent specific attributes (e.g., mpg for miles per gallon, hp for horsepower, wt for weight). Each cell encodes the attribute value for a given car, with higher values appearing closer to yellow.\nHierarchical clustering (dendrograms) on the top and left depict similarity relationships among rows and columns, facilitating pattern recognition and comparative analysis.\n\n\n\n\n\n\nNote\n\n\n\nNotes: The heatmap in this example provides limited insight due to the disparity in attribute scales. Attributes such as hp (horsepower) and disp (displacement) exhibit substantially higher values than others, distorting the color mapping and overshadowing lower-range features. To enhance interpretability, data normalization is required, as discussed in the following sections.",
    "crumbs": [
      "Correlation",
      "Heatmap"
    ]
  },
  {
    "objectID": "Correlation/Heatmap.html#setup",
    "href": "Correlation/Heatmap.html#setup",
    "title": "Heatmap",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming Language: R\nDependencies:readr, ggplot2, hrbrthemes, dplyr, tidyr, viridis, tibble, htmlwidgets, RColorBrewer, plotly, devtools, d3heatmap, heatmaply, lattice, ComplexHeatmap, pheatmap, circlize, gridExtra, cowplot\n\n\n# Installing necessary packages\nif (!requireNamespace(\"readr\", quietly = TRUE)) {\n  install.packages(\"readr\")\n}\nif (!requireNamespace(\"tidyverse\", quietly = TRUE)) {\n  install.packages(\"tidyverse\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"hrbrthemes\", quietly = TRUE)) {\n  install.packages(\"hrbrthemes\")\n}\nif (!requireNamespace(\"dplyr\", quietly = TRUE)) {\n  install.packages(\"dplyr\")\n}\nif (!requireNamespace(\"tidyr\", quietly = TRUE)) {\n  install.packages(\"tidyr\")\n}\nif (!requireNamespace(\"viridis\", quietly = TRUE)) {\n  install.packages(\"viridis\")\n}\nif (!requireNamespace(\"tibble\", quietly = TRUE)) {\n  install.packages(\"tibble\")\n}\nif (!requireNamespace(\"htmlwidgets\", quietly = TRUE)) {\n  install.packages(\"htmlwidgets\")\n}\nif (!requireNamespace(\"RColorBrewer\", quietly = TRUE)) {\n  install.packages(\"RColorBrewer\")\n}\nif (!requireNamespace(\"plotly\", quietly = TRUE)) {\n  install.packages(\"plotly\")\n}\nif (!requireNamespace(\"devtools\", quietly = TRUE)) {\n  install.packages(\"devtools\")\n}\nif (!requireNamespace(\"d3heatmap\", quietly = TRUE)) {\n  devtools::install_github(\"talgalili/d3heatmap\")\n}\nif (!requireNamespace(\"heatmaply\", quietly = TRUE)) {\n  install.packages(\"heatmaply\")\n}\nif (!requireNamespace(\"lattice\", quietly = TRUE)) {\n  install.packages(\"lattice\")\n}\nif (!requireNamespace(\"ComplexHeatmap\", quietly = TRUE)) {\n  devtools::install_github(\"jokergoo/ComplexHeatmap\")\n}\nif (!requireNamespace(\"pheatmap\", quietly = TRUE)) {\n  install.packages(\"pheatmap\")\n}\nif (!requireNamespace(\"circlize\", quietly = TRUE)) {\n  install.packages(\"circlize\")\n}\nif (!requireNamespace(\"gridExtra\", quietly = TRUE)) {\n  install.packages(\"gridExtra\")\n}\nif (!requireNamespace(\"cowplot\", quietly = TRUE)) {\n  install.packages(\"cowplot\")\n}\n\n# Loading the libraries\nlibrary(readr)\nlibrary(hrbrthemes)     # Additional themes for ggplot2\nlibrary(dplyr)          # Data manipulation functions\nlibrary(tidyr)          # Data tidying functions\nlibrary(viridis)        # Color palettes for better visualization\nlibrary(tibble)         # Tidy data frames\nlibrary(htmlwidgets)    # Interactive web visualizations\nlibrary(RColorBrewer)   # Color palettes for visualizations\nlibrary(plotly)         # Interactive plots\nlibrary(d3heatmap)      # D3.js-based interactive heatmaps\nlibrary(heatmaply)      # Interactive heatmaps with ggplot2\nlibrary(lattice)        # Trellis graphics for multivariate data\nlibrary(ComplexHeatmap) # Advanced heatmap functionalities\nlibrary(pheatmap)       # Pretty heatmaps with clustering support\nlibrary(circlize)       # Circular visualizations\nlibrary(gridExtra)      # Grid layout visualization\nlibrary(cowplot)\nlibrary(tidyverse)\nlibrary(ggplot2)        # Data visualization package",
    "crumbs": [
      "Correlation",
      "Heatmap"
    ]
  },
  {
    "objectID": "Correlation/Heatmap.html#data-preparation",
    "href": "Correlation/Heatmap.html#data-preparation",
    "title": "Heatmap",
    "section": "Data Preparation",
    "text": "Data Preparation\nThis section provides a brief tutorial using built-in R datasets (mtcars, volcano) and the TCGA-CHOL.methylation450.tsv dataset from UCSC Xena DATASETS. These datasets will be used to demonstrate heatmap visualization in R. This example demonstrates how to load and work with these datasets in R.\n\n# load built-in R datasets `mtcars`\ndata(\"mtcars\", package = \"datasets\")\nmtcars_matrix &lt;- as.matrix(mtcars)\n\n# Load and process methylation data\nraw_methylation_data &lt;- readr::read_tsv(\"https://bizard-1301043367.cos.ap-guangzhou.myqcloud.com/TCGA-CHOL.methylation450.tsv\")\n\n# Convert to matrix and clean up row/column names\nmethylation_matrix &lt;- raw_methylation_data[, -1] %&gt;%\n  as.data.frame() %&gt;%\n  `rownames&lt;-`(raw_methylation_data$Composite)\n\n# Tidy to long format\nmethylation_long &lt;- methylation_matrix %&gt;%\n  rownames_to_column(\"Composite\") %&gt;%\n  pivot_longer(cols = -Composite, names_to = \"Sample\", values_to = \"Methylation_Level\") %&gt;%\n  mutate(\n    Methylation_Level = as.numeric(Methylation_Level),\n    Composite = gsub(\"^cg0+\", \"cg\", Composite),\n    Sample = substr(Sample, 9, 12)\n  )\n\n# Standardize methylation values\nmethylation_long_standardized &lt;- methylation_long %&gt;%\n  group_by(Composite) %&gt;%\n  mutate(Standardized_Level = scale(Methylation_Level)[,1]) %&gt;%\n  ungroup()\n\n# Convert back to wide format matrix\nstandardized_methylation_matrix &lt;- methylation_long_standardized %&gt;%\n  select(Composite, Sample, Standardized_Level) %&gt;%\n  pivot_wider(names_from = Sample, values_from = Standardized_Level) %&gt;%\n  column_to_rownames(\"Composite\") %&gt;%\n  as.matrix()\n\n\n# Clean up raw methylation matrix (numerical version for raw heatmap)\nmethylation_matrix_num &lt;- methylation_matrix %&gt;%\n  mutate(across(everything(), ~ as.numeric(as.character(.)))) %&gt;%\n  `rownames&lt;-`(gsub(\"^cg0+\", \"cg\", rownames(.))) %&gt;%\n  { `colnames&lt;-`(., substr(colnames(.), 9, 12)) } %&gt;%\n  as.matrix()",
    "crumbs": [
      "Correlation",
      "Heatmap"
    ]
  },
  {
    "objectID": "Correlation/Heatmap.html#visualization",
    "href": "Correlation/Heatmap.html#visualization",
    "title": "Heatmap",
    "section": "Visualization",
    "text": "Visualization\n\n1. Basic R Heatmaps\n\n1.1 Basic Heatmap\nUsing the heatmap() function to construct a heatmap. Below is the simplest heatmap created in base R without additional parameters. The heatmap() function requires a matrix as input. If the data is in a data frame, it can be converted into a matrix using the as.matrix() function. A matrix can also be transposed using the t() function, which swaps rows and columns, effectively exchanging the X and Y axes.\n\nheatmap(mtcars_matrix)\n\n\n\n\n\n\n\nFigure 1: Basic Heatmap Basic R\n\n\n\n\n\nThis heatmap uses color variations to display numerical differences between performance variables of various cars in the mtcars dataset.\n\n\n\n\n\n\nTip\n\n\n\nThis heatmap is not particularly insightful because the variables hp and disp with relatively high values dominate the scale. Consequently, variations in other variables (e.g., mpg, wt) are hard to discern. Standardizing the data, as discussed in the next section, is necessary.\n\n\n\n\n1.2 Standardization\nThe scale parameter in the heatmap() function can be used to standardize the matrix. It can be applied to rows or columns. Here, columns are chosen since we aim to capture variations between columns.\n\nheatmap(mtcars_matrix, scale=\"column\")\n\n\n\n\n\n\n\nFigure 2: Standardization Basic R\n\n\n\n\n\nThis heatmap presents standardized values of performance variables in the mtcars dataset, making comparisons across variables on a common scale and improving the visual accuracy and interpretability.\n\n\n1.3 Clustering Dendrograms and Reordering\nIn the generated heatmap, the order of rows and columns differs from the original mtcars matrix because heatmap() applies clustering algorithms to reorder variables and observations. It calculates distances between pairs of rows and columns and sorts them based on similarities.\nAdditionally, dendrograms are displayed alongside the heatmap. These can be disabled using the Rowv and Colv parameters, as shown below.\n\nheatmap(mtcars_matrix, Colv = NA, Rowv = NA, scale=\"column\")\n\n\n\n\n\n\n\nFigure 3: Clustering Dendrograms and Reordering Basic R\n\n\n\n\n\nThis heatmap shows the standardized values of performance variables in the mtcars dataset, with the dendrograms removed to maintain the original order of rows and columns.\n\n\n1.4 Color Palettes\nHeatmaps can utilize different color palettes:\n\nBuilt-in R palettes: terrain.colors(), rainbow(), heat.colors(), topo.colors(), cm.colors()\nPalettes suggested by the RColorBrewer package\nCustom color palettes\n\n\n# Native color palette\nheatmap(mtcars_matrix, scale=\"column\", col = cm.colors(256))\nheatmap(mtcars_matrix, scale=\"column\", col = terrain.colors(256))\n\n# Using Rcolorbrewer\ncoul &lt;- colorRampPalette(brewer.pal(8, \"PiYG\"))(25)\nheatmap(mtcars_matrix, scale=\"column\", col = coul)\n\n# Custom color palette\nmy_palette &lt;- colorRampPalette(c(\"blue\", \"white\", \"red\"))(256)\nheatmap(mtcars_matrix, scale = \"column\", col = my_palette)\n\n\n\n\n\n\n\nFigure 4: Color Palettes Basic R\n\n\n\n\n\n\n\n\n\n\n\nFigure 5: Color Palettes Basic R\n\n\n\n\n\n\n\n\n\n\n\nFigure 6: Color Palettes Basic R\n\n\n\n\n\n\n\n\n\n\n\nFigure 7: Color Palettes Basic R\n\n\n\n\n\nThe following four heatmaps demonstrate the same data using different color palettes. These highlight the differences in performance variables of cars in the mtcars dataset, emphasizing how palette selection can influence visual interpretation and clarity.\n\nRColorBrewer\nThe display.brewer.all() function in the RColorBrewer package showcases all available color schemes.\n\npar(plt=c(0.1,1,0,1))\ndisplay.brewer.all()\n\n\n\n\n\n\n\nFigure 8: RColorBrewer Basic R\n\n\n\n\n\nThe image displays color scheme names on the left and their respective colors on the right. These schemes fall into three categories: - Sequential (seq): Gradual variations of a single color, suitable for continuous or ordered categorical variables. - Qualitative (qual): Highly distinct colors without hierarchical relationships, ideal for unordered categorical variables. - Diverging (div): Two colors transitioning in opposite directions, often used for continuous variables with meaningful midpoint values (e.g., temperature or odds ratios).\n\n\n\n1.5 Customizing Layout\nHeatmaps can be customized using standard parameters like main for the title and xlab/ylab for axis labels. Additionally, labRow/colRow allow changes to labels, while cexRow/cexCol adjust their sizes.\n\n# Custom titles and axis titles\np5 &lt;- heatmap(mtcars_matrix, Colv = NA, Rowv = NA, scale=\"column\", col = coul, xlab=\"variable\", main=\"heatmap\")\n\n# Custom labels\np6 &lt;- par(mar = c(5, 0, 4, 2))  # Adjust margins\nheatmap(mtcars_matrix, scale=\"column\", cexRow=.8, labRow=paste(\"new_\", rownames(mtcars_matrix),sep=\"\"), col= colorRampPalette(brewer.pal(8, \"Blues\"))(25))\n\n\n\n\n\n\n\nFigure 9: Customizing Layout Basic R\n\n\n\n\n\n\n\n\n\n\n\nFigure 10: Customizing Layout Basic R\n\n\n\n\n\nThe following two heatmaps illustrate standardized performance variables in the mtcars dataset with customized titles, axis labels, and row annotations, improving visual clarity and data communication.\n\n\n1.6 Heatmaps with Color Annotations\nHeatmaps are often used to compare observed structures against expected ones. TheRowSideColors parameter can add a color vector to the side of a heatmap to indicate expected groupings.\n\nmy_group &lt;- as.numeric(as.factor(substr(rownames(mtcars_matrix), 1 , 1))) # Group row labels by the first letter and convert to numeric\ncolSide &lt;- brewer.pal(9, \"Set1\")[my_group] # Use the Set1 color scheme from RColorBrewer to generate 9 colors, assigning each group a color\ncolMain &lt;- colorRampPalette(brewer.pal(8, \"Blues\"))(25)\nheatmap(mtcars_matrix, Colv = NA, Rowv = NA, scale=\"column\" , RowSideColors=colSide, col=colMain)\n\n\n\n\n\n\n\nFigure 11: Heatmaps with Color Annotations Basic R\n\n\n\n\n\nThe heatmap below groups rows by their first letters and assigns a distinct color to each group, helping observers quickly identify differences between groups and understand data patterns more intuitively.\n\n\n\n2. ggplot2 Heatmaps\nThe ggplot2 package uses the geom_tile() function to create heatmaps. Unlike heatmap(), it doesn’t natively support standardization, clustering, or dendrograms.\n\n2.1 Basic Heatmap\nA basic heatmap created with ggplot2 and geom_tile(). Standardization must be performed beforehand, as geom_tile() cannot directly standardize data.\nThe input data must be in a long-format data frame, where each row represents one observation with three key variables:\n\nx: Position on the X-axis\ny: Position on the Y-axis\nfill: Numerical values mapped to colors\n\np &lt;- ggplot(methylation_long_standardized, aes(x = Sample, y = Composite, fill= Standardized_Level)) + \n  geom_tile()\n\np \nThis heatmap demonstrates the distribution of standardized methylation levels (Standardized_Level) in the TCGA-CHOL dataset across samples (Sample) and composites (Composite), highlighting differences in methylation patterns.\n\n\n2.2 Color Palettes\nHeatmaps can have their color palettes customized, just like any ggplot2 chart. Below are three examples using different approaches:\n\nscale_fill_gradient(): Sets the extreme colors of the palette.\nscale_fill_distiller()): Uses ColorBrewer palettes.\nscale_fill_viridis() Implements the Viridis palette. Remember to set discrete=FALSE for continuous variables (ensuring smooth color gradients).\n\n# Extreme colors\np7 &lt;- ggplot(methylation_long_standardized, aes(x = Sample, y = Composite, fill= Standardized_Level)) + \n  geom_tile()+\n  scale_fill_gradient(low=\"white\", high=\"blue\") +\n  theme_ipsum() +\n  theme(axis.text.x = element_text(size = 10))\n\n# ColorBrewer color palette\np8 &lt;- ggplot(methylation_long_standardized, aes(x = Sample, y = Composite, fill= Standardized_Level)) + \n  geom_tile() +\n  scale_fill_distiller(palette = \"RdPu\") +\n  theme_ipsum() +\n  theme(axis.text.x = element_text(size = 10)) \n\n# Using Viridis\np9 &lt;- ggplot(methylation_long_standardized, aes(x = Sample, y = Composite, fill= Standardized_Level)) + \n  geom_tile()+\n  scale_fill_viridis(discrete=FALSE) +\n  theme_ipsum() + \n  theme(axis.text.x = element_text(size = 10))\n\nplot_grid(p7, p8, p9, ncol = 1)\nThese three heatmaps showcase identical data from the TCGA-CHOL dataset, illustrating the distribution of standardized methylation levels between various samples and composites. They emphasize the importance of palette choice for visual impact and data interpretation.\n\n\n2.3 Handling Wide-Format Data\nA common issue involves input in a wide matrix format, such as the volcano dataset. In such cases, the gather() function from the tidyr package can transform the data into a long format suitable for visualization with ggplot.\nvolcano %&gt;%\n  as_tibble() %&gt;%\n  rowid_to_column(var=\"X\") %&gt;%\n  gather(key=\"Y\", value=\"Z\", -1) %&gt;%\n  \n  mutate(Y=as.numeric(gsub(\"V\",\"\",Y))) %&gt;%\n\n  ggplot(aes(X, Y, fill= Z)) + \n    geom_tile() +\n    theme_ipsum() +\n    theme(legend.position=\"none\")\nThis heatmap represents the elevation values (Z) in the volcano dataset. The x-axis indicates row indices (X), the y-axis represents column indices (Y), and color fill depicts changes in elevation.\n\n\n2.4 Interactive Heatmaps\nOne of the significant advantages of creating heatmaps with ggplot2 is the ability to make them interactive using the plotly package. Simply wrap the plot in an object and pass it to the ggplotly() function.\nYou can also customize tooltips to provide richer information. Try hovering over a cell to view tooltips or zoom in on specific areas.\n# Create tooltips text\nmethylation_long_annotated &lt;- methylation_long_standardized %&gt;%\n  mutate(text = paste0(\"Composite: \",Composite, \"\\n\", \"Sample: \", Sample, \"\\n\", \"Standardized_Level: \", Standardized_Level))\n\np &lt;- ggplot(methylation_long_annotated, aes(Composite, Sample, fill = Standardized_Level, text = text)) + \n  geom_tile() +\n  theme_ipsum()\n\npp &lt;- ggplotly(p, tooltip=\"text\", width = 1200, height = 700)\n\npp\nThis interactive heatmap, built with the plotly package, allows dynamic exploration and in-depth data analysis, offering a more intuitive understanding and information retrieval process.\nAlternative packages like d3heatmap and heatmaply can also create interactive heatmaps.\n\nUsing the d3heatmap Package\n\nd3heatmap(standardized_methylation_matrix, scale = \"row\", dendrogram = \"none\")\n\n\n\n\n\n\n\nFigure 12: Using d3heatmap ggplot2\n\n\n\n\nThe d3heatmap package creates interactive heatmaps, enabling dynamic exploration and deeper insights into data.\n\n\nUsing the heatmaply Package\n\np &lt;- heatmaply(standardized_methylation_matrix,\n               dendrogram = \"none\",\n               xlab = \"\", ylab = \"\",\n               main = \"\",\n               scale = \"row\",\n               margins = c(50,0,30,30),\n               grid_color = \"white\",\n               grid_width = 0.00001,\n               titleX = FALSE,\n               hide_colorbar = TRUE,\n               branches_lwd = 0.1,\n               fontsize_row = 5, fontsize_col = 5,\n               labCol = colnames(standardized_methylation_matrix),\n               labRow = rownames(standardized_methylation_matrix),\n               heatmap_layers = theme(axis.line = element_blank())\n)\n\np\n\n\n\n\n\n\n\nFigure 13: Using heatmaply ggplot2\n\n\n\n\nSimilarly, the heatmaply package generates interactive heatmaps, allowing for dynamic analysis and enhanced comprehension of the data.\n\n\n\n\n3. lattice Heatmaps\nThe lattice package provides the levelplot() function for constructing heatmaps.\n\n3.1 Basic Usage of levelplot()\n\n# Convert the Sample and Composite columns from characters to factors\nmethylation_long_standardized$Sample &lt;- as.factor(methylation_long_standardized$Sample)\nmethylation_long_standardized$Composite &lt;- as.factor(methylation_long_standardized$Composite) \n\nlevelplot(Standardized_Level ~ Sample * Composite, data = methylation_long_standardized,\n          xlab = \"Sample\", ylab = \"Composite\",\n          main = \"Heatmap of Standardized TCGA-CHOL Methylation Levels\")\n\n\n\n\n\n\n\nFigure 14: Basic Heatmap lattice\n\n\n\n\n\nThis heatmap illustrates the distribution of standardized methylation levels between samples and composites in the TCGA-CHOL dataset, highlighting variations in methylation states across different samples.\n\n\n3.2 Wide-Format Matrix Input\nUnlike the earlier example with long-format data, this approach uses a square matrix.\n\n\n\n\n\n\nTip\n\n\n\nRows and columns are flipped in the heatmap.\n\n\n\nlevelplot(standardized_methylation_matrix)\n\n\n\n\n\n\n\nFigure 15: Wide-Format Matrix Input lattice\n\n\n\n\n\nThis heatmap demonstrates variations in methylation states across TCGA-CHOL samples using a wide-format matrix in levelplot().\n\n\n3.3 Flipping Axes\nR’s t() function transposes the input matrix, flipping the x and y coordinates. This makes the heatmap’s structure align precisely with the input matrix.\nSetting aspect = \"fill\" adjusts the aspect ratio automatically to reflect the matrix’s actual proportions.\n\n# Flip X and Y axes\nlevelplot( t(standardized_methylation_matrix),\n           col.regions=heat.colors(220),\n           aspect = \"fill\") # Automatically adjust aspect ratio\n\n\n\n\n\n\n\nFigure 16: Flipping Axes lattice\n\n\n\n\n\nThis heatmap reflects the same data as the original matrix with flipped coordinates for structural alignment.\n\n\n3.4 Color Palettes\nMultiple palette options are available: - Native R palettes: terrain.color()， rainbow()，heat.colors()， topo.colors()，cm.colors() - RColorBrewerpalettes - Viridispalettes: viridis, magma, inferno, plasma\n\n# Native color palette\np10 &lt;- levelplot(volcano, col.regions = terrain.colors(100)) # try cm.colors() or terrain.colors()\np10\n\n# Using Rcolorbrewer\ncoul &lt;- colorRampPalette(brewer.pal(8, \"PiYG\"))(25)\np11 &lt;- levelplot(volcano, col.regions = coul)\np11\n\n# Using Viridis\ncoul &lt;- viridis(100)\np12 &lt;- levelplot(volcano, col.regions = coul) \np12\n\n\n\n\n\n\n\nFigure 17: Color Palettes lattice\n\n\n\n\n\n\n\n\n\n\n\nFigure 18: Color Palettes lattice\n\n\n\n\n\n\n\n\n\n\n\nFigure 19: Color Palettes lattice\n\n\n\n\n\nUsing the volcano dataset, these heatmaps visualize elevation values and emphasize the impact of palette selection on interpretability.。\n\n\n\n4. pheatmap Heatmaps\nThe pheatmap package also builds heatmaps and supports data standardization.\n\n4.1 Basic Heatmap\npheatmap(methylation_matrix_num, scale = \"row\")\nThis heatmap visualizes differences in methylation patterns across samples in the TCGA-CHOL dataset using the pheatmap package.\n\n\n4.2 Adjusting Dendrograms\n\nclustering_distance_rows and clustering_distance_cols represent the distance measures used for row and column clustering. The default is “euclidean”, but it can also be set to “correlation”, meaning clustering will be performed based on the Pearson correlation method.\nclustering_method allows modification of the clustering method, which can be one of the following: ‘ward’, ‘ward.D’, ‘ward.D2’, ‘single’, ‘complete’, ‘average’, ‘mcquitty’, ‘median’, or ‘centroid’.\n\npheatmap(methylation_matrix_num, scale = \"row\", \n         clustering_distance_rows = \"euclidean\", clustering_distance_cols = \"euclidean\", # Distance measure used for clustering\n         clustering_method = \"complete\", # Clustering method\n         cluster_rows = T, cluster_cols = F, # Whether to display clustering trees\n         treeheight_row = 30, treeheight_col = 30) # Adjust clustering tree heights\nThis heatmap uses the pheatmap package to display the differences in methylation status across different samples in the TCGA-CHOL dataset, with clustering between samples turned off. The samples are arranged in their original order.\n\n\n4.3 Angle Adjustment of Labels and Segmentation Position Without Clustering\npheatmap(methylation_matrix_num, scale = \"row\", \n         clustering_distance_rows = \"euclidean\", clustering_distance_cols = \"euclidean\", # Distance measure used for clustering\n         clustering_method = \"complete\", # Clustering method\n         cluster_rows = T, cluster_cols = F, # Whether to display clustering trees\n         treeheight_row = 30, treeheight_col = 30, # Adjust clustering tree heights\n         angle_col = \"45\", # Change column label angle\n         gaps_col = c(3,6))  # Used only when column clustering is not performed, assuming samples are split into three groups at positions 3 and 6\nAdjusting the label angles in this heatmap can prevent overlapping labels and improve readability. Adjusting the segmentation position under non-clustered conditions can highlight differences between specific samples, facilitating intuitive analysis.\n\n\n4.4 Adding Values or Markers\npheatmap(methylation_matrix_num, scale = \"row\",\n         border_color = \"white\", # Change cell border color\n         display_numbers = TRUE, # Display corresponding values in heatmap cells\n         fontsize_number = 9, \n         number_color = \"grey30\",\n         number_format = \"%.1f\") # Keep one decimal place\nAdding values or markers to the heatmap provides additional context, helping observers quickly identify the specific methylation level of each sample or site, thereby enhancing the intuitiveness and accuracy of data interpretation.\n\nUsing Raw Data for Annotation\npheatmap(methylation_matrix_num, scale = \"row\",\n         border_color = \"white\",\n         display_numbers = matrix(ifelse(methylation_matrix_num &gt; .8 | methylation_matrix_num &lt; -.8, \"*\", \"\"), nrow = nrow(methylation_matrix_num)),\n         fontsize_number = 9, \n         number_color = \"grey30\")\nThis heatmap uses unnormalized data for annotation, making the results incomparable and potentially misleading observers regarding the differences between samples. Unnormalized values may obscure actual relative changes due to absolute value differences between samples, reducing the accuracy of data interpretation.\n\n\nUsing Normalized Data\npheatmap(standardized_methylation_matrix, scale = \"none\", # No need for further standardization\n         border_color = \"white\",\n         display_numbers = matrix(ifelse(standardized_methylation_matrix &gt; 1 | standardized_methylation_matrix &lt; -1, \"*\", \"\"), nrow = nrow(standardized_methylation_matrix)),\n         fontsize_number = 9, \n         number_color = \"grey30\") \nMarking the heatmap with normalized data can intuitively highlight significant values or features, making it easier for observers to recognize notable methylation state changes or outliers, thus providing guidance for subsequent analysis. This approach enhances the readability and interpretability of the data, helping users quickly extract key information.\n\n\n\n4.5 Color Palettes\nThe heatmap generated by the pheatmap package allows for various ways to modify the color palette: - Native R palettes:terrain.color()， rainbow()，heat.colors()， topo.colors()，cm.colors() - Custom palettes - RColorBrewer palettes\n# Native color palette\np13 &lt;- pheatmap(standardized_methylation_matrix, scale = \"none\",\n         border_color = \"white\",\n         color = colorRampPalette(c(\"navy\",\"white\",\"firebrick3\"))(100))\n\n# Custom color palette\np14 &lt;- pheatmap(standardized_methylation_matrix, scale = \"none\",\n         border_color = \"white\",\n         color = cm.colors(100))\n\n# Using Rcolorbrewer\ncoul &lt;- colorRampPalette(brewer.pal(8, \"PiYG\"))(25)\np15 &lt;- pheatmap(standardized_methylation_matrix, scale = \"none\",\n         border_color = \"white\",\n         color = coul)\nThese three heatmaps use different color palettes to showcase the differences in methylation states among samples in the TCGA-CHOL dataset, emphasizing the importance of palette choice for visual effects and data interpretation.\n\n\n\n5. complexheatmap Heatmaps\nThe ComplexHeatmap package, based on the grid package, uses an object-oriented approach to implement heatmaps and their components. It mainly includes the following classes:\n\nHeatmap：Draws a single heatmap (note the capitalization).\nHeatmapList：Draws a list of heatmaps.\nHeatmapAnnotation: Defines row and column annotations for the heatmap, which can either be part of the heatmap or independent of it.\n\nAdditionally, there are some internal classes:\n\nSingleAnnotation：: Defines a single row or column annotation, forming the list elements of HeatmapAnnotation.\nColorMapping: Defines the mapping of values to colors.\nAnnotationFunction: Used to customize annotation graphics.\n\n\n5.1 Basic Heatmap\n\nHeatmap(standardized_methylation_matrix)\n\n\n\n\n\n\n\nFigure 20: Basic Heatmap complexheatmap\n\n\n\n\n\nThis heatmap uses the ComplexHeatmap package to display the differences in methylation status across different samples in the TCGA-CHOL dataset.\n\n\n5.2 Color Palettes\nUsually, the matrices we plot consist of continuous data, so the color mapping function needs to take a vector as input and return a vector as output.\nThe author of this package recommends using the colorRamp2() function from another package, circlize, to set up color mapping. The colorRamp2() function takes two parameters: the first sets the breakpoint values for mapping, and the second specifies the corresponding color values.\nIn the example below, values between -2 and 2 are linearly interpolated to obtain corresponding colors, with values greater than 2 mapped to red and values less than -2 mapped to green.\n\ncol_fun &lt;- colorRamp2(c(-2, 0, 2), c(\"green\", \"white\", \"red\"))\nHeatmap(standardized_methylation_matrix, name = \"Standardized_Level\", col = col_fun)\n\n\n\n\n\n\n\nFigure 21: Color Palettes complexheatmap\n\n\n\n\n\nThis heatmap uses colorRamp2() to set up color mapping, showcasing the differences in methylation states among samples in the TCGA-CHOL dataset.\nAdditionally, using colorRamp2() ensures color comparability across multiple heatmaps. For example, in two heatmaps, the same color always corresponds to the same value:\n\np1 &lt;- Heatmap(standardized_methylation_matrix, name = \"Standardized_Level1\", col = col_fun)\np2 &lt;- Heatmap(standardized_methylation_matrix/2, name = \"Standardized_Level2\", col = col_fun)\np1 + p2 \n\n\n\n\n\n\n\nFigure 22: Using colorRamp2 complexheatmap\n\n\n\n\n\nThis heatmap uses colorRamp2() to enable color comparisons on the same scale, showcasing the differences in methylation states among samples in the TCGA-CHOL dataset.\nIf the matrix is continuous, you can simply provide a color vector, and the colors will be linearly interpolated. However, this method is not robust to outliers, as color mapping is determined by the minimum and maximum values in the matrix. Extreme outliers can cause less noticeable color variations within the normal range.\n\nHeatmap(standardized_methylation_matrix, name = \"Standardized_Level\", col = rev(cm.colors(10)), column_title = \"color vector for continuous matrix\")\n\n\n\n\n\n\n\nFigure 23: Using Color Vector complexheatmap\n\n\n\n\n\nThis heatmap demonstrates color mapping through linear interpolation, showing the differences in methylation states among samples in the TCGA-CHOL dataset.\nYou can also visualize NA values using the na_col parameter to specify the color for NA:\n\nstandardized_methylation_matrix_na &lt;- standardized_methylation_matrix\nna_index &lt;- sample(c(TRUE, FALSE), nrow(standardized_methylation_matrix)*ncol(standardized_methylation_matrix), replace = TRUE, prob = c(1, 9))\nstandardized_methylation_matrix_na[na_index] &lt;- NA\nHeatmap(standardized_methylation_matrix_na, name = \"matrix with na\", na_col = \"grey\", column_title = \"matrix with na\")\n\n\n\n\n\n\n\nFigure 24: Using na_col Parameter complexheatmap\n\n\n\n\n\nThis heatmap uses the na_col parameter to set the color of NA values to gray, showcasing the differences in methylation states among samples in the TCGA-CHOL dataset.\nBy default, linear interpolation of colors follows the LAB color space. Other color spaces, such as RGB, XYZ, and sRGB, are also available.\n\nf1 &lt;- colorRamp2(seq(min(standardized_methylation_matrix), max(standardized_methylation_matrix), length = 3), c(\"blue\", \"#EEEEEE\", \"red\"))\nf2 &lt;- colorRamp2(seq(min(standardized_methylation_matrix), max(standardized_methylation_matrix), length = 3), c(\"blue\", \"#EEEEEE\", \"red\"), space = \"RGB\")\n\np1 &lt;- Heatmap(standardized_methylation_matrix, name = \"Standardized_Level1\", col = f1, column_title = \"color space in LAB\")\np2 &lt;- Heatmap(standardized_methylation_matrix, name = \"Standardized_Level2\", col = f2, column_title = \"color space in RGB\")\np1 + p2\n\n\n\n\n\n\n\nFigure 25: Different Linear Interpolation complexheatmap\n\n\n\n\n\nThis heatmap illustrates the differences in methylation states among samples in the TCGA-CHOL dataset across various color spaces.\n\n\n5.3 Borders and Gridlines\nThe outermost border of the heatmap is set using the border parameter, while gridlines are configured with the rect_gp parameter.\nThe border parameter can be a logical or a color value. The rect_gp parameter requires a grid::gpar object.\n\nHeatmap(standardized_methylation_matrix, name = \"Standardized_Level\", border = \"black\", col = col_fun, rect_gp = gpar(col = \"white\", lwd = 2) )\n\n\n\n\n\n\n\nFigure 26: Borders and Gridlines complexheatmap\n\n\n\n\n\nThis heatmap modifies the borders and gridlines to show the differences in methylation states among samples in the TCGA-CHOL dataset.\n\n\n5.4 Clustering\nAdjusting the cluster_rows and cluster_columns parameters modifies the clustering of the heatmap.\n\np1 &lt;- Heatmap(standardized_methylation_matrix, cluster_rows = F, cluster_columns = F)\np1\n\n\n\n\n\n\n\nFigure 27: Clustering complexheatmap\n\n\n\n\n\nThis heatmap disables clustering, highlighting the differences in methylation states among samples in the TCGA-CHOL dataset.\n\n\n5.5 Annotation Bars and Multiple Heatmaps\nAnnotation bars are an important component of heatmaps. The ComplexHeatmap package provides flexible settings for annotation bars, which can be placed on any of the four sides of the heatmap (top, bottom, left, or right) using top_annotation, bottom_annotation, left_annotation, and right_annotation. All annotation bars are created using the HeatmapAnnotation() function (alternatively, the rowAnnotation() function can be used as a variant by specifying HeatmapAnnotation(..., which = \"row\")).\n\np1 &lt;- rowAnnotation(\n  \"Average Methylation\" = anno_barplot(\n    rowMeans(standardized_methylation_matrix), \n    gp = gpar(fill = \"blue\"), \n    width = unit(4, \"cm\"),\n    axis_param = list(at = pretty(rowMeans(standardized_methylation_matrix)), \n                      labels = format(pretty(rowMeans(standardized_methylation_matrix)), nsmall = 1, digits = 1))\n  )\n)\n\np2 &lt;- Heatmap(standardized_methylation_matrix, \n               name = \"Standardized Methylation Levels\", \n               col = f2, \n               row_km = 2,\n               column_names_gp = gpar(fontsize = 8))  # Based on row clustering\n\np1 + p2\n\n\n\n\n\n\n\nFigure 28: Multiple Heatmaps complexheatmap\n\n\n\n\n\nThis bar chart serves as an annotation bar for the heatmap, displaying the average methylation value for each site.\nOne of the standout features of the ComplexHeatmap package is its ability to plot multiple heatmaps simultaneously. The example below shows horizontally arranged heatmaps; vertically arranged heatmaps follow a similar principle. Horizontally aligned heatmaps require the same rows.\nThe combination of the heatmap and bar chart displays differences in methylation states among samples in the TCGA-CHOL dataset and the average methylation value for each site.",
    "crumbs": [
      "Correlation",
      "Heatmap"
    ]
  },
  {
    "objectID": "Correlation/Heatmap.html#applications",
    "href": "Correlation/Heatmap.html#applications",
    "title": "Heatmap",
    "section": "Applications",
    "text": "Applications\n\n1. Basic Heatmap\n\n\n\n\n\n\nYang, M., Liu, B. et al.(2013)\n\n\n\n\nFigure 29: Applications of Basic Heatmap\n\n\n\nFigure 2: Heatmaps of TEC matching from 52 healthy individuals. (a) Raw heatmap. (b) Binary heatmap. [1]\n\n\n2. Heatmaps with Color Annotations\n\n\n\n\n\n\nKey, M. (2012)\n\n\n\n\nFigure 30: Applications of Heatmaps with Color Annotations\n\n\n\nFigure 6: Grouping by labels. All heatmap functions support row and column annotations, but implementations vary. Heatmap (a) and heatmap.2 (b) functions support displaying only a single color bar. Heatmap.plus (c) supports displaying a matrix of colored bars. Heatmap_plus (d) can display data frames for binary variables. Although heatmap.2 and heatmap.plus can generate rectangular images, heatmap and heatmap_plus output square images. [2]\n\n\n3. Comparative Heatmaps\n\n\n\n\n\n\nHoggard, T. et al.(2016)\n\n\n\n\nFigure 31: Applications of Comparative Heatmaps\n\n\n\nFigure 6: Comparative heatmaps for miniARS experiments to resolve ambiguities in partitioning and replication functions associated with miniARS chromosomal fragments. Fragments depleted in the Cen-miniARS or Acen-miniARS experiments (e.g., miniARS317 fragments) compared to fragments enriched in these experiments. (B) Shared fragments in the miniARS datasets located in the given competition fitness deciles (i.e., fragments present in both Acen-miniARS and Cen-miniARS libraries) are represented in this heatmap. The heatmap is divided into 100 sections, each representing a combination of competition fitness deciles in the Acen-miniARS and Cen-miniARS experiments, as shown: Bottom-left: Fragments with low competition fitness in both Acen- and Cen-miniARS, indicating weak replication and partitioning abilities. (Partitioning “−”; Replication “−”). Contains 288 fragments representing 62 origins. Bottom-right: Fragments with high competition fitness in Acen-miniARS but low in Cen-miniARS, indicating strong partitioning but weak replication abilities (Partitioning “+”; Replication “−”). Contains 103 fragments representing 32 origins. Top-left: Fragments with low competition fitness in Acen-miniARS but high in Cen-miniARS, indicating weak partitioning but strong replication abilities (Partitioning “−”; Replication “+”). Contains 105 fragments representing 33 origins. (C) Combination analysis of the fragments from (B), aiming to define regions critical for maximizing partitioning abilities (1st and 4th pairs of heatmaps) versus replication abilities (2nd and 3rd pairs of heatmaps). (D) Similar to (B), but heatmaps include only miniARS fragments indicating ARS regions.\nAbbreviations: ARS: Autonomous Replicating Sequence, FKH: Forkhead, ORC: Origin Recognition Complex, RAP1: Rap1 protein binding site [3]",
    "crumbs": [
      "Correlation",
      "Heatmap"
    ]
  },
  {
    "objectID": "Correlation/Heatmap.html#reference",
    "href": "Correlation/Heatmap.html#reference",
    "title": "Heatmap",
    "section": "Reference",
    "text": "Reference\n\nYang, M., Liu, B., Zhao, M., Li, F., Wang, G., & Zhou, F. (2013). Normalizing electrocardiograms of both healthy persons and cardiovascular disease patients for biometric authentication. PLoS One, 8(8), e71523. https://doi.org/10.1371/journal.pone.0071523\n\nKey, M. (2012). A tutorial in displaying mass spectrometry-based proteomic data using heat maps. BMC Bioinformatics, 13(Suppl 16), S10. https://doi.org/10.1186/1471-2105-13-S16-S10\n\nHoggard, T., Liachko, I., Burt, C., Meikle, T., Jiang, K., Craciun, G., Dunham, M. J., & Fox, C. A. (2016). High throughput analyses of budding yeast ARSs reveal new DNA elements capable of conferring centromere-independent plasmid propagation. G3 (Bethesda), 6(4), 993–1012. https://doi.org/10.1534/g3.116.027904\n\nWickham, H. (2016). ggplot2: Elegant graphics for data analysis. Springer. https://r-graph-gallery.com/ggplot2-package.html\n\nRudis, B. (2020). hrbrthemes: Additional themes and theme components for ‘ggplot2’. https://cran.r-project.org/package=hrbrthemes\n\nWickham, H., François, R., Henry, L., & Müller, K. (2021). dplyr: A grammar of data manipulation. https://cran.r-project.org/package=dplyr\n\nWickham, H., & Henry, L. (2021). tidyr: Tidy messy data. https://cran.r-project.org/package=tidyr\n\nGarnier, S. (2018). viridis: Default color maps from ‘matplotlib’. https://cran.r-project.org/package=viridis\n\nHenry, L. (2022). tibble: Simple data frames. https://cran.r-project.org/package=tibble\n\nUrbanek, S. (2021). htmlwidgets: HTML widgets for R. https://cran.r-project.org/package=htmlwidgets\n\nNeuwirth, E. (2014). RColorBrewer: ColorBrewer palettes. https://cran.r-project.org/package=RColorBrewer\n\nWinston, L., & Hsu, T. (2021). plotly: Create interactive web graphics via ‘plotly.js’. https://cran.r-project.org/package=plotly\n\nD3heatmap: Interactive heatmaps using ‘d3.js’. https://cran.r-project.org/package=d3heatmap\n\nGang, C. (2020). heatmaply: Interactive heat maps for R. https://cran.r-project.org/package=heatmaply\n\nBecker, R. A., Wilks, A. R., & Brownrigg, R. (2021). lattice: The lattice package for R. https://cran.r-project.org/package=lattice\n\nAuguie, B. (2017). gridExtra: Miscellaneous Functions for “Grid” Graphics. https://cran.r-project.org/package=gridExtra",
    "crumbs": [
      "Correlation",
      "Heatmap"
    ]
  },
  {
    "objectID": "Template/contribution_0323.html",
    "href": "Template/contribution_0323.html",
    "title": "A Biomedical Visualization Atlas",
    "section": "",
    "text": "先建图表征集issue，进行审核确定：\n\n根据目标任务确定执行的可视化图表类型。\n\n分别按图表建issue让成员列资料\n\n确定创建可视化教程所需的生物医学数据类型；\n根据可视化应用场景优化教程撰写的侧重点（eg. 需要着重介绍的函数/参数、是否要加入常用统计学分析）。\n\n分配成员申领完成\n完成图文撰写需要遵循项目文档规范\n\n参考根据现有可视化教程制作的qmd文档撰写；\n主要模块：可视化图表及其应用场景介绍、环境配置、基础绘图代码、进阶绘图代码、生物医学领域应用（及复现）……\n\n翻译任务的申领和处理"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Bizard",
    "section": "",
    "text": "Data visualization is a critical tool in biomedical research, enabling intuitive interpretation of complex datasets to advance scientific discovery and inform clinical decisions. The R programming language, with its powerful statistical capabilities and extensive package ecosystem, has become a cornerstone for creating high-quality visualizations. However, the vast and ever-evolving landscape of R plotting packages often poses challenges for researchers, who must select appropriate methods and customize visualizations to meet specific research needs. This process demands advanced coding expertise, interdisciplinary collaboration, and significant time investment, which can hinder progress and impact the accuracy of experimental outcomes.\nTo address these challenges, we developed Bizard, a comprehensive, community-driven platform that integrates a curated repository of visualization codes, advanced tutorials, and collaborative forums. By streamlining access to resources and promoting knowledge exchange, Bizard aims to enhance biomedical researchers’ data analysis capabilities and facilitate the clinical translation of research findings.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "Bizard",
    "section": "",
    "text": "Data visualization is a critical tool in biomedical research, enabling intuitive interpretation of complex datasets to advance scientific discovery and inform clinical decisions. The R programming language, with its powerful statistical capabilities and extensive package ecosystem, has become a cornerstone for creating high-quality visualizations. However, the vast and ever-evolving landscape of R plotting packages often poses challenges for researchers, who must select appropriate methods and customize visualizations to meet specific research needs. This process demands advanced coding expertise, interdisciplinary collaboration, and significant time investment, which can hinder progress and impact the accuracy of experimental outcomes.\nTo address these challenges, we developed Bizard, a comprehensive, community-driven platform that integrates a curated repository of visualization codes, advanced tutorials, and collaborative forums. By streamlining access to resources and promoting knowledge exchange, Bizard aims to enhance biomedical researchers’ data analysis capabilities and facilitate the clinical translation of research findings.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#what-is-bizard",
    "href": "index.html#what-is-bizard",
    "title": "Bizard",
    "section": "What is Bizard?",
    "text": "What is Bizard?\nBizard brings together powerful visualization tools, curated code, and collaborative features, enabling researchers to streamline data analysis and present their findings in a clear and impactful way.\n\nComprehensive Visualization Repository: Bizard consolidates visualization codes from diverse sources, including conventional graphgallery charts and innovative contributions from global experts, providing a state-of-the-art toolkit for biomedical research.\nVersatile Chart Options: The repository features R code implementations for a wide range of visualizations—variable distributions, correlation analyses, ranking plots, and interactive charts—meeting diverse data analysis needs.\nReal-World Applications: Leveraging both native R datasets and authentic biomedical data examples, Bizard enables intuitive understanding and application of visualization techniques in real-world research contexts, accelerating clinical translation.\nTailored for Biomedical Data: Includes preprocessing algorithms, annotated plotting codes, and specialized methodologies to accommodate the complexities of biomedical datasets, making advanced visualization accessible even to users with limited programming expertise.\nIntegrated Statistical Analysis: Combines statistical analysis functions with visualization modules, ensuring rigorous, visually compelling outputs that bolster research reliability and advance evidence-based medicine.\nCollaborative and Open Innovation: Actively invites contributions from biomedical experts to refine features and address evolving data visualization challenges through collective expertise.\nMulti-Platform Accessibility: Offers resources through an open-source GitHub repository with interactive forums and a WeChat official account for tutorials and updates, fostering knowledge sharing and collaboration.\nDriving Research Excellence: Empowers researchers to elevate their data visualization skills, improve methodological standards, and advance precision medicine and personalized therapies.\nFuture Vision: Committed to expanding international collaborations and delivering innovative, refined solutions to address the growing complexity of biomedical data visualization and analysis.\n\n\n\n\n\n\n\nNote\n\n\n\nIf you find this useful or have suggestions for improvement, please let us know by leaving your comments in the GitHub Discussions💬 at the bottom of any page.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "Distribution/BoxPlot.html",
    "href": "Distribution/BoxPlot.html",
    "title": "Box Plot",
    "section": "",
    "text": "Boxplots visualize the central tendency and dispersion of one or more sets of continuous quantitative data. They incorporate statistical measures that not only compare differences across categories but also reveal dispersion, outliers, and distribution patterns.\nA boxplot is defined by five key lines: the upper boundary, upper quartile, median, lower quartile, and lower boundary. Points beyond the upper or lower boundary are considered outliers.",
    "crumbs": [
      "Distribution",
      "Box Plot"
    ]
  },
  {
    "objectID": "Distribution/BoxPlot.html#example",
    "href": "Distribution/BoxPlot.html#example",
    "title": "Box Plot",
    "section": "Example",
    "text": "Example",
    "crumbs": [
      "Distribution",
      "Box Plot"
    ]
  },
  {
    "objectID": "Distribution/BoxPlot.html#setup",
    "href": "Distribution/BoxPlot.html#setup",
    "title": "Box Plot",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming Language: R\nPackages: ggplot2, dplyr, hrbrthemes, viridis, ggExtra, ggpubr, rstatix, ggtext, ggpmisc\n\n\n# Installing necessary packages\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"dplyr\", quietly = TRUE)) {\n  install.packages(\"dplyr\")\n}\nif (!requireNamespace(\"hrbrthemes\", quietly = TRUE)) {\n  install.packages(\"hrbrthemes\")\n}\nif (!requireNamespace(\"viridis\", quietly = TRUE)) {\n  install.packages(\"viridis\")\n}\nif (!requireNamespace(\"ggExtra\", quietly = TRUE)) {\n  install.packages(\"ggExtra\")\n}\nif (!requireNamespace(\"ggpubr\", quietly = TRUE)) {\n  install.packages(\"ggpubr\")\n}\nif (!requireNamespace(\"rstatix\", quietly = TRUE)) {\n  install.packages(\"rstatix\")\n}\nif (!requireNamespace(\"ggtext\", quietly = TRUE)) {\n  install.packages(\"ggtext\")\n}\nif (!requireNamespace(\"ggpmisc\", quietly = TRUE)) {\n  install.packages(\"ggpmisc\")\n}\n\n\n# Loading the libraries\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(hrbrthemes)\nlibrary(viridis)\nlibrary(ggpubr)\nlibrary(rstatix)\nlibrary(ggtext)\nlibrary(ggpmisc)\nlibrary(ggExtra)",
    "crumbs": [
      "Distribution",
      "Box Plot"
    ]
  },
  {
    "objectID": "Distribution/BoxPlot.html#data-preparation",
    "href": "Distribution/BoxPlot.html#data-preparation",
    "title": "Box Plot",
    "section": "Data Preparation",
    "text": "Data Preparation\nWe used the built-in R datasets (mtcars), data from ggplot2 package (mpg, diamonds) and the TCGA-BRCA.htseq_counts.tsv dataset from UCSC Xena DATASETS. Selected genes were chosen for demonstration purposes.\n\n# Load mtcars dataset\ndata(\"mtcars\")\ndata_mtcars &lt;- mtcars\n\n# Load mpg dataset from ggplot2 package\ndata_mpg &lt;- ggplot2::mpg\n\n# Load diamonds dataset from ggplot2 package\ndata_diamonds &lt;- ggplot2::diamonds\n\n# Load the TCGA-BRCA gene expression dataset from a processed CSV file  \ndata_TCGA &lt;- read.csv(\"files/TCGA-BRCA.htseq_counts_processed.csv\")\ndata_TCGA1 &lt;- data_TCGA[1:5,] %&gt;%\n  gather(key = \"sample\",value = \"gene_expression\",3:1219)",
    "crumbs": [
      "Distribution",
      "Box Plot"
    ]
  },
  {
    "objectID": "Distribution/BoxPlot.html#visualization",
    "href": "Distribution/BoxPlot.html#visualization",
    "title": "Box Plot",
    "section": "Visualization",
    "text": "Visualization\n\n1. Basic Plotting\n\nBasic Plotting\nThe ggplot2 package allows the use of geom_boxplot() to create a basic boxplot.\nTaking the TCGA-BRCA.htseq_counts.tsv dataset as an example:\n\nggplot(data_TCGA1, aes(x=as.factor(gene_name), y=gene_expression)) + \n  geom_boxplot(fill=\"slateblue\", alpha=0.2) + # color fill and font size\n  xlab(\"gene_name\") # x-axis label\n\n\n\n\n\n\n\n\n\n\nParameter Adjustment\nTaking the mtcars dataset as an example:\n\nggplot(data_mtcars, aes(x=as.factor(cyl), y=mpg)) + \n  geom_boxplot(\n    # box\n    color=\"blue\",\n    fill=\"blue\",\n    alpha=0.2,\n    # notch\n    notch=TRUE,\n    notchwidth = 0.8,\n    # outliers\n    outlier.colour=\"red\",\n    outlier.fill=\"red\",\n    outlier.size=3\n  ) + \n  xlab(\"cyl\")\n\n\n\n\n\n\n\n\n\n\nColor Settings\nTaking the mpg dataset as an example, several common color scales for boxplots are demonstrated:\n\nggplot(data_mpg, aes(x=class, y=hwy)) + \n  geom_boxplot(color=\"red\", fill=\"orange\", alpha=0.2)\n\n\n\n\n\n\n\n\n\n\nggplot(data_mpg, aes(x=class, y=hwy, fill=class)) + \n  geom_boxplot(alpha=0.3) +\n  theme(legend.position=\"none\")\n\n\n\n\n\n\n\n\n\n\nggplot(data_mpg, aes(x=class, y=hwy, fill=class)) + \n  geom_boxplot(alpha=0.3) +\n  theme(legend.position=\"none\") +\n  scale_fill_brewer(palette=\"Dark2\")\n\n\n\n\n\n\n\n\n\n\nGroup Highlighting\nTaking the mpg dataset as an example, different colors are set for groups that need to be highlighted:\n\ndata_mpg %&gt;% \n  # add highlighted group, create color vector\n  mutate(type=ifelse(class==\"subcompact\",\"Highlighted\",\"Normal\")) %&gt;%\n  # fill=type, map the color vector to the boxplot\n  ggplot(aes(x=class, y=hwy, fill=type, alpha=type)) + \n  geom_boxplot() +\n  scale_fill_manual(values=c(\"#69b3a2\", \"grey\")) +\n  scale_alpha_manual(values=c(1,0.1)) +\n  theme_ipsum() +\n  theme(legend.position = \"none\") +\n  xlab(\"\")\n\n\n\n\n\n\n\n\n\n\n\n2. Variable Width Boxplot\nThe basic boxplot does not display the sample size information of categories. We can draw a variable width boxplot where the box width is proportional to the sample size by using the varwidth parameter.\n\nnames &lt;- c(rep(\"A\", 20) , rep(\"B\", 5) , rep(\"C\", 30), rep(\"D\", 100))\nvalue &lt;- c(sample(2:5, 20 , replace=T) , sample(4:10, 5 , replace=T), sample(1:7, 30 , replace=T), sample(3:8, 100 , replace=T))\ndata &lt;- data.frame(names,value)\n# create corresponding x-axis labels\nmy_xlab &lt;- paste(levels(data$names),\"\\n(N=\",table(data$names),\")\",sep=\"\")\n\n# plotting\nggplot(data, aes(x=names, y=value, fill=names)) +\n  geom_boxplot(varwidth = TRUE, alpha=0.2) + # varwidth = TRUE achieves width proportional to sample size\n  theme(legend.position=\"none\") +\n  scale_x_discrete(labels=my_xlab)\n\n\n\n\n\n\n\n\nTaking the mpg dataset as an example again:\n\nggplot(data_mpg, aes(x=class, y=hwy, fill=class)) + \n  geom_boxplot(varwidth = TRUE,alpha=0.3) +\n  theme(legend.position=\"none\") +\n  scale_fill_brewer(palette=\"Dark2\")\n\n\n\n\n\n\n\n\n\n\n3. Boxplot for Continuous Variables\nFor continuous variables, we can use the cut_width() function to divide the continuous variable into intervals and then draw the boxplot.\nTaking the diamonds dataset as an example:\n\ndata_diamonds %&gt;%\n  # create a new variable, divide the continuous variable into intervals (0.5 as one interval)\n  mutate(bin=cut_width(carat, width=0.5, boundary=0)) %&gt;%\n  # plotting, use the divided intervals as x\n  ggplot(aes(x=bin, y=price)) +\n  geom_boxplot(fill=\"#69b3a2\") +\n  theme_ipsum() +\n  xlab(\"Carat\")\n\n\n\n\n\n\n\n\n\n\n4. Boxplot with Mean Values\nThe basic boxplot displays the median for each group. We can also use the stat_summary() function to add the mean value for each group to the boxplot.\n\nnames=c(rep(\"A\", 20) , rep(\"B\", 8) , rep(\"C\", 30), rep(\"D\", 80))\nvalue=c( sample(2:5, 20 , replace=T) , sample(4:10, 8 , replace=T), sample(1:7, 30 , replace=T), sample(3:8, 80 , replace=T) )\ndata=data.frame(names,value)\n# Plotting\np &lt;- ggplot(data, aes(x=names, y=value, fill=names)) +\n  geom_boxplot(alpha=0.7) +\n  stat_summary(fun.y=mean, geom=\"point\", shape=20, size=14, color=\"white\", fill=\"white\") +\n  theme(legend.position=\"none\") +\n  scale_fill_brewer(palette=\"Set1\")\np\n\n\n\n\n\n\n\n\nUsing the mpg dataset as an example again\n\nggplot(data_mpg, aes(x=class, y=hwy, fill=class)) + \n  geom_boxplot(varwidth = TRUE,alpha=0.3) +\n  stat_summary(fun.y=mean, geom=\"point\", shape=10, size=5, color=\"black\", fill=\"black\") +\n  # fun.y specifies the type of statistic to add, geom specifies the type of geometric object, shape specifies the shape of the point, and size specifies the size\n\n  theme(legend.position=\"none\") +\n  scale_fill_brewer(palette=\"Dark2\")\n\n\n\n\n\n\n\n\n\n\n5. Scatter Boxplot & Violin Plot\n\nScatter Boxplot\nBoxplots are often used to compare the distributions of multiple groups, but they do not show the specific distribution of the data (for example, it is impossible to determine whether the distribution is normal or bimodal from a boxplot). We can use the geom_jitter() function to add individual observations, allowing us to see the specific distribution of each group.\n\ndata &lt;- data.frame(\n  name=c( rep(\"A\",500), rep(\"B\",500), rep(\"B\",500), rep(\"C\",20), rep('D', 100)  ),\n  value=c( rnorm(500, 10, 5), rnorm(500, 13, 1), rnorm(500, 18, 1), rnorm(20, 25, 4), rnorm(100, 12, 1) )\n)\n\n\ndata %&gt;%\n  ggplot( aes(x=name, y=value, fill=name)) +\n  geom_boxplot() +\n  scale_fill_viridis(discrete = TRUE, alpha=0.6) +\n  geom_jitter(color=\"black\", size=0.4, alpha=0.9) + # Plotting scatter points\n  theme_ipsum() +\n  theme(\n    legend.position=\"none\",\n    plot.title = element_text(size=11)\n  ) +\n  ggtitle(\"A boxplot with jitter\") +\n  xlab(\"\")\n\n\n\n\n\n\n\n\n\n\n\nViolin Plot\nViolin plots combine the features of boxplots and density distribution plots, also showing the specific distribution of observations within groups.\n\ndata &lt;- data.frame(\n  name=c( rep(\"A\",500), rep(\"B\",500), rep(\"B\",500), rep(\"C\",20), rep('D', 100)  ),\n  value=c( rnorm(500, 10, 5), rnorm(500, 13, 1), rnorm(500, 18, 1), rnorm(20, 25, 4), rnorm(100, 12, 1) )\n)\n\ndata %&gt;%\n  ggplot( aes(x=name, y=value, fill=name)) +\n  geom_violin() +\n  scale_fill_viridis(discrete = TRUE, alpha=0.6, option=\"A\") +\n  theme_ipsum() +\n  theme(\n    legend.position=\"none\",\n    plot.title = element_text(size=11)\n  ) +\n  ggtitle(\"Violin chart\") +\n  xlab(\"\")\n\n\n\n\n\n\n\n\n\n\n\n6. Grouped Boxplot\nOn the basis of single-group comparison, we can use the fill parameter to draw grouped boxplots, which facilitates comparisons both between and within groups.\n\nvariety=rep(LETTERS[1:4], each=40)\ntreatment=rep(c(\"high\",\"low\"),each=20)\nnote=seq(1:160)+sample(1:150, 160, replace=T)\ndata=data.frame(variety, treatment ,  note)\n\n# Plotting\nggplot(data, aes(x=variety, y=note, fill=treatment)) + # The fill parameter adds grouping\n  geom_boxplot()\n\n\n\n\n\n\n\n\nAdding statistics analysis:\n\nvariety=rep(LETTERS[1:4], each=40)\ntreatment=rep(c(\"high\",\"low\"),each=20)\nnote=seq(1:160)+sample(1:150, 160, replace=T)\ndata=data.frame(variety, treatment ,  note)\n\n# Difference test\n# Within groups\ndf &lt;- data\ndf$variety &lt;- factor(df$variety)\ndf_p_val1 &lt;- df %&gt;% \n  group_by(variety) %&gt;% \n  wilcox_test(formula = note~treatment) %&gt;% \n  add_significance(p.col = 'p',cutpoints = c(0,0.001,0.01,0.05,1),symbols = c('***','**','*','ns')) %&gt;% \n  add_xy_position(x='variety')\n# Between groups\ndf_p_val2 &lt;- df %&gt;% \n  wilcox_test(formula = note~variety) %&gt;% \n  add_significance(p.col = 'p',cutpoints = c(0,0.001,0.01,0.05,1),symbols = c('***','**','*','ns')) %&gt;% \n  add_xy_position()\n\n\n# Plotting\nggplot()+\n  geom_boxplot(data = df,mapping = aes(x=variety, y=note, fill=treatment),width=0.5)+\n  stat_pvalue_manual(df_p_val1,label = '{p.signif}',\n                     tip.length = 0)+\n  stat_pvalue_manual(df_p_val2,label = '{p.signif}',\n                     tip.length = 0.01,\n                     y.position = df_p_val2$y.position+0.5)+\n  labs(x='variety',y='note')+\n  guides(fill=guide_legend(title = 'treatment'))+\n  theme_test()+\n  theme(axis.text = element_text(color = 'black'),\n        plot.caption = element_markdown(face = 'bold'),\n        legend.position = c(0.7,0.1),\n        legend.direction = 'horizontal')\n\n\n\n\n\n\n\n\n\nIn addition to grouped boxplots, we can also draw boxplots for each subgroup separately for comparison.\n\nvariety=rep(LETTERS[1:7], each=40)\ntreatment=rep(c(\"high\",\"low\"),each=20)\nnote=seq(1:280)+sample(1:150, 280, replace=T)\ndata1=data.frame(variety, treatment ,  note)\n# treatment as the basis\np1 &lt;- ggplot(data1, aes(x=variety, y=note, fill=treatment)) + \n  geom_boxplot() +\n    facet_wrap(~treatment, scale=\"free\")+\n  labs(x='variety',y='note')+\n  guides(fill=guide_legend(title = 'treatment'))+\n  theme_test()+\n  theme(axis.text = element_text(color = 'black'),\n        plot.caption = element_markdown(face = 'bold'),\n        legend.position = c(0.9,0.1),\n        legend.direction = 'horizontal')\np1\n\n\n\n\n\n\n\n\n\n# variety as the basis\np2 &lt;- ggplot(data1, aes(x=variety, y=note, fill=treatment)) + \n  geom_boxplot() +\n  facet_wrap(~variety, scale=\"free\")+\n  labs(x='variety',y='note')+\n  guides(fill=guide_legend(title = 'treatment'))+\n  theme_test()+\n  theme(axis.text = element_text(color = 'black'),\n        plot.caption = element_markdown(face = 'bold'),\n        legend.position = c(0.9,-0.05),\n        legend.direction = 'horizontal')\np2\n\n\n\n\n\n\n\n\n\n\n7. Adding Marginal Distributions to Boxplots\nAdding marginal distributions on the X and Y axes is a common visualization method. We can achieve this using the ggExtra package. Here, we mainly introduce the addition of marginal distributions to boxplots.\nTaking the mtcars dataset as an example:\n\n# Original scatter plot\np1&lt;-ggplot(data_mtcars, aes(x=wt, y=mpg, color=cyl, size=cyl))+\n  geom_point()+\n  theme_bw()+ \n  geom_smooth(method = 'lm', formula = y~x, se = TRUE, show.legend = FALSE) + \n  stat_poly_eq(aes(label = paste(..eq.label.., ..rr.label.., stat(p.value.label), sep = '~`,`~')),\n               formula = y~x, parse = TRUE, npcx= 'left', npcy= 'bottom', size = 4)\n\np1\n\n\n\n\n\n\n\n\n\n# Adding marginal boxplot distributions\np1 &lt;- ggMarginal(p1, type=\"boxplot\")\np1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nThe main customizable parameters of ggMarginal() are:\n\nsize to change the size of the marginal plot\nAll common appearance customization parameters\nmargins = 'x' or margins = 'y' to display only one marginal plot",
    "crumbs": [
      "Distribution",
      "Box Plot"
    ]
  },
  {
    "objectID": "Distribution/BoxPlot.html#application",
    "href": "Distribution/BoxPlot.html#application",
    "title": "Box Plot",
    "section": "Application",
    "text": "Application\n\n1. Basic Boxplot\n\n\n\n\n\n\nFigure 1: Applications of Basic Boxplot\n\n\n\nFigure E: Fab-PLA results quantified using BlobFinder software and presented in the form of a boxplot. The median is highlighted with a thick line, and the whiskers represent the minimum and maximum values. It shows the distribution of PLA signal quantification data for each group of cells.[1]\n\n\n2. Highlighted Boxplot\n\n\n\n\n\n\nFigure 2: Applications of Highlighted Boxplot\n\n\n\nFigure B: Boxplot of probe distance distribution.\nFigure D & Figure F: Boxplots of the maximum nuclear cross-sectional area distribution in H2A-overexpressing cells in MDA-MB-453 (D) or HEK293 (F). Groups with significant differences are highlighted.[2]\n\n\n3. Grouped Boxplot\n\n\n\n\n\n\nFigure 3: Applications of Grouped Boxplot\n\n\n\nFigure C: Boxplot of genome size for organisms with H2A that does or does not contain the shown residues.[2]",
    "crumbs": [
      "Distribution",
      "Box Plot"
    ]
  },
  {
    "objectID": "Distribution/BoxPlot.html#reference",
    "href": "Distribution/BoxPlot.html#reference",
    "title": "Box Plot",
    "section": "Reference",
    "text": "Reference\n[1] Volkmann C, Brings N, Becker M, Hobeika E, Yang J, Reth M. Molecular requirements of the B-cell antigen receptor for sensing monovalent antigens. EMBO J. 2016 Nov 2;35(21):2371-2381. doi: 10.15252/embj.201694177. Epub 2016 Sep 15. PMID: 27634959; PMCID: PMC5090217.\n[2] Macadangdang BR, Oberai A, Spektor T, Campos OA, Sheng F, Carey MF, Vogelauer M, Kurdistani SK. Evolution of histone 2A for chromatin compaction in eukaryotes. Elife. 2014 Jun 17;3:e02792. doi: 10.7554/eLife.02792. PMID: 24939988; PMCID: PMC4098067.\n[3] H. Wickham. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York, 2016.\n[4] Wickham H, François R, Henry L, Müller K, Vaughan D (2023). dplyr: A Grammar of Data Manipulation. R package version 1.1.4, https://CRAN.R-project.org/package=dplyr.\n[5] Rudis B (2024). hrbrthemes: Additional Themes, Theme Components and Utilities for ‘ggplot2’. R package version 0.8.7, https://CRAN.R-project.org/package=hrbrthemes.\n[6] Wickham H, Averick M, Bryan J, Chang W, McGowan LD, François R, Grolemund G, Hayes A, Henry L, Hester J, Kuhn M, Pedersen TL, Miller E, Bache SM, Müller K, Ooms J, Robinson D, Seidel DP, Spinu V, Takahashi K, Vaughan D, Wilke C, Woo K, Yutani H (2019). “Welcome to the tidyverse.” Journal of Open Source Software, 4(43), 1686. doi:10.21105/joss.01686 https://doi.org/10.21105/joss.01686.\n[7] Simon Garnier, Noam Ross, Robert Rudis, Antônio P. Camargo, Marco Sciaini, and Cédric Scherer (2024). viridis(Lite) - Colorblind-Friendly Color Maps for R. viridis package version 0.6.5.\n[8] Attali D, Baker C (2023). ggExtra: Add Marginal Histograms to ‘ggplot2’, and More ‘ggplot2’ Enhancements. R package version 0.10.1, https://CRAN.R-project.org/package=ggExtra.",
    "crumbs": [
      "Distribution",
      "Box Plot"
    ]
  },
  {
    "objectID": "Distribution/Histogram.html",
    "href": "Distribution/Histogram.html",
    "title": "Histogram",
    "section": "",
    "text": "A histogram uses rectangular bars to represent the frequency of data within specific intervals, where the total area of the bars corresponds to the total frequency. It is primarily used to visualize the distribution of continuous variables.",
    "crumbs": [
      "Distribution",
      "Histogram"
    ]
  },
  {
    "objectID": "Distribution/Histogram.html#example",
    "href": "Distribution/Histogram.html#example",
    "title": "Histogram",
    "section": "Example",
    "text": "Example\n\n\n\n\n\nThis basic histogram illustrates the expression levels of the TSPAN6 gene across different samples. The x-axis represents the data values, with each bar covering a specific range of values, while the y-axis shows how many data points fall within that range. In this histogram, the bars indicate the count of values within each specified range.\nThe histogram reveals that the data is centered around a value of 12, with values spanning roughly from 8 to 16. The shape of the histogram is approximately bell-shaped, suggesting that the data may follow a normal distribution.",
    "crumbs": [
      "Distribution",
      "Histogram"
    ]
  },
  {
    "objectID": "Distribution/Histogram.html#setup",
    "href": "Distribution/Histogram.html#setup",
    "title": "Histogram",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming Language: R\nDependencies: readr, ggplot2, ggExtra, tidyverse, cowplot, viridis, ggpmisc, ggpubr\n\n\n# Installing necessary packages\nif (!requireNamespace(\"readr\", quietly = TRUE)) {\n  install.packages(\"readr\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"ggExtra\", quietly = TRUE)) {\n  install.packages(\"ggExtra\")\n}\nif (!requireNamespace(\"tidyverse\", quietly = TRUE)) {\n  install.packages(\"tidyverse\")\n}\nif (!requireNamespace(\"cowplot\", quietly = TRUE)) {\n  install.packages(\"cowplot\")\n}\nif (!requireNamespace(\"viridis\", quietly = TRUE)) {\n  install.packages(\"viridis\")\n}\nif (!requireNamespace(\"ggpmisc\", quietly = TRUE)) {\n  install.packages(\"ggpmisc\")\n}\nif (!requireNamespace(\"ggpubr\", quietly = TRUE)) {\n  install.packages(\"ggpubr\")\n}\n\n# Loading the libraries\nlibrary(readr)      # Read tsv files\nlibrary(ggplot2)    # Load ggplot2 for creating plots\nlibrary(ggExtra)    # Load ggExtra for enhancing ggplot2 graphics\nlibrary(tidyverse)  # Load tidyverse for data manipulation functions\nlibrary(cowplot)  # Load cowplot for combining separate ggplots into the same graphic\nlibrary(viridis)    # Load viridis for color maps\nlibrary(ggpmisc)    # Load ggpmisc for extentions to ggplot2 with additional functions for statistical annotation\nlibrary(ggpubr)     # Load ggpubr for extentions to ggplot2 with adding publication-ready themes, arranging multiple plots, and statistical tests",
    "crumbs": [
      "Distribution",
      "Histogram"
    ]
  },
  {
    "objectID": "Distribution/Histogram.html#data-preparation",
    "href": "Distribution/Histogram.html#data-preparation",
    "title": "Histogram",
    "section": "Data Preparation",
    "text": "Data Preparation\nWe used the built-in R datasets (iris, mtcars) and the TCGA-LIHC.htseq_counts.tsv dataset from UCSC Xena DATASETS.\n\n# Read the TSV data\ndata &lt;- readr::read_tsv(\"https://bizard-1301043367.cos.ap-guangzhou.myqcloud.com/TCGA-LIHC.htseq_counts.tsv.gz\")\n\n# Filter and reshape data for the first gene TSPAN6 (Ensembl ID: ENSG00000000003.13)\ndata1 &lt;- data %&gt;%\n  filter(Ensembl_ID == \"ENSG00000000003.13\") %&gt;%\n  pivot_longer(\n    cols = -Ensembl_ID, \n    names_to = \"sample\", \n    values_to = \"expression\"\n  ) %&gt;%\n  mutate(var = \"var1\")  # Add a column to differentiate the variables\n\n# Filter and reshape data for the second gene SCYL3 (Ensembl ID: ENSG00000000457.12)\ndata2 &lt;- data %&gt;%\n  filter(Ensembl_ID == \"ENSG00000000457.12\") %&gt;%\n  pivot_longer(\n    cols = -Ensembl_ID, \n    names_to = \"sample\", \n    values_to = \"expression\"\n  ) %&gt;%\n  mutate(var = \"var2\")  # Add a column to differentiate the variables\n\n# Combine the two datasets\ndata12 &lt;- bind_rows(data1, data2)\n\n# View the final combined dataset\nhead(data12)\n\n# A tibble: 6 × 4\n  Ensembl_ID         sample           expression var  \n  &lt;chr&gt;              &lt;chr&gt;                 &lt;dbl&gt; &lt;chr&gt;\n1 ENSG00000000003.13 TCGA-DD-A4NG-01A      12.8  var1 \n2 ENSG00000000003.13 TCGA-G3-AAV4-01A       9.72 var1 \n3 ENSG00000000003.13 TCGA-2Y-A9H1-01A      11.3  var1 \n4 ENSG00000000003.13 TCGA-CC-A3M9-01A      11.6  var1 \n5 ENSG00000000003.13 TCGA-K7-AAU7-01A      11.5  var1 \n6 ENSG00000000003.13 TCGA-BC-A10W-01A      12.0  var1",
    "crumbs": [
      "Distribution",
      "Histogram"
    ]
  },
  {
    "objectID": "Distribution/Histogram.html#visualization",
    "href": "Distribution/Histogram.html#visualization",
    "title": "Histogram",
    "section": "Visualization",
    "text": "Visualization\n\n1. Basic Histograms\nFigure 1 illustrates the distribution of expression levels for the TSPAN6 gene across different samples.\n\n# Basic Histogram\np1 &lt;- ggplot(data1, aes(x = expression)) +\n  geom_histogram() + \n  labs(x = \"Gene Expression\", y = \"Count\")\n\np1\n\n\n\n\n\n\n\nFigure 1: Basic Histogram\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nKey Parameters: binwidth / bins\nThe binwidth or bins parameter determines how much data each bin will contain. Modifying these values can significantly affect the appearance of the histogram and the information conveyed.\n\n\n\np2_1 &lt;- ggplot(data1, aes(x = expression)) +\n  geom_histogram(bins = 30, fill = \"skyblue\", color = \"white\") +\n  ggtitle(\"Bins = 30\") + \n  labs(x = \"Gene Expression\", y = \"Count\")\n\np2_2 &lt;- ggplot(data1, aes(x = expression)) +\n  geom_histogram(bins = 50, fill = \"skyblue\", color = \"white\") +\n  ggtitle(\"Bins = 50\") + \n  labs(x = \"Gene Expression\", y = \"Count\")\n\ncowplot::plot_grid(p2_1, p2_2)\n\n\n\n\n\n\n\nFigure 2: Key Parameters: binwidth / bins\n\n\n\n\n\n\n\n2. Histogram with Density Curve\nThe density curve provides a smooth representation of the data distribution. Unlike the histogram, which depends on the number of bins, the density curve uses kernel density estimation (KDE) to smooth the distribution. This allows a clearer understanding of the overall trend and shape of the data.\n\np1 &lt;- ggplot(data1, aes(x = expression)) +\n  geom_histogram(aes(y = after_stat(density)), bins = 30, fill = \"skyblue\", color = \"white\") +\n  geom_density(alpha = 0.2, fill = \"#FF6666\") + \n  labs(x = \"Gene Expression\", y = \"Density\")\n\np1\n\n\n\n\n\n\n\nFigure 3: Histogram with Density Curve\n\n\n\n\n\n\n\n3. Mirrored Histogram\nA mirrored histogram provides an intuitive way to compare the distributions of two datasets. This visualization uses a mirrored structure, allowing you to quickly assess symmetry or differences between the datasets. By overlaying both histograms into a single plot, the mirrored histogram conserves visualization space while maintaining a clear representation of data distribution.\n\np &lt;- ggplot(data12, aes(x = expression, fill = var)) +\n  geom_histogram(data = subset(data12, var == \"var1\"), \n                 aes(y = after_stat(density)), \n                 binwidth = 0.5, \n                 alpha = 0.7, \n                 fill = \"#69b3a2\") +\n  geom_histogram(data = subset(data12, var == \"var2\"), \n                 aes(y = -after_stat(density)), \n                 binwidth = 0.5, \n                 alpha = 0.7, \n                 fill = \"#404080\") +\n  scale_fill_manual(values = c(\"var1\" = \"#69b3a2\", \"var2\" = \"#404080\")) +\n  labs(x = \"Gene Expression\", y = \"Density\")\n\np\n\n\n\n\n\n\n\nFigure 4: Mirrored Histogram\n\n\n\n\n\n\n\n4. Overlapping Histograms on the Same Axis\nOverlaying or placing multiple histograms side by side on the same axis enables a direct comparison of distributions for two or more datasets within the same coordinate system. By adjusting colors and transparency, you can clearly visualize overlapping regions and distinguish between datasets. This technique is ideal for comparing 2–3 groups; more groups may lead to visual clutter, making the plot difficult to interpret.\n\np &lt;- data12 %&gt;%\n  ggplot(aes(x = expression, fill = var)) +\n  geom_histogram(color = \"#e9ecef\", alpha = 0.6, position = 'identity') +\n  scale_fill_manual(values = c(\"#69b3a2\", \"#404080\")) +\n  labs(x = \"Expression Value\", y = \"Count\", fill = \"Type\") +\n  theme_minimal()\n\np\n\n\n\n\n\n\n\nFigure 5: Overlapping Histograms on the Same Axis\n\n\n\n\n\n\n\n5. Faceted Histograms for Multiple Variables\nFaceted histograms provide a structured way to compare and analyze data across multiple variables or categorical groups by displaying them in separate panels. Unlike traditional histograms, faceted layouts are particularly effective for avoiding overlap in visualizations, ensuring clarity in comparisons, and enabling multidimensional data exploration. This approach is ideal for grouped or classified data and enhances the interpretability of complex datasets.\n\n# Use built-in iris dataset\ndata &lt;- iris\n\n# Reshape the data from wide to long format\ndata &lt;- data %&gt;%\n  gather(key = \"variable\", value = \"value\", -Species)  # Exclude the Species column\n\n# Plot the faceted histograms\np &lt;- data %&gt;%\n  ggplot(aes(x = value, color = Species, fill = Species)) +\n  geom_histogram(alpha = 0.6, binwidth = 0.3, position = \"identity\") +\n  scale_fill_viridis(discrete = TRUE, option = \"D\") +\n  scale_color_viridis(discrete = TRUE, option = \"D\") +\n  theme(\n    legend.position = \"bottom\",\n    panel.spacing = unit(0.5, \"lines\"),\n    strip.text.x = element_text(size = 10)\n  ) +\n  xlab(\"Value\") +\n  ylab(\"Frequency\") +\n  facet_grid(Species ~ variable, scales = \"free_x\")  # Create a facet grid\n\np\n\n\n\n\n\n\n\nFigure 6: Faceted Histograms for Multiple Variables\n\n\n\n\n\n\n\n6. Adding Marginal Distributions Using ggMarginal()\n\n# Create a scatterplot with marginal histograms\np &lt;- ggplot(mtcars, aes(x = wt, y = mpg, color = factor(cyl), size = factor(cyl))) +\n  geom_point(aes(color = factor(cyl)), show.legend = TRUE) +  # Scatter points with color mapped to cylinder\n  geom_smooth(method = 'lm', formula = y ~ x, se = TRUE, linewidth = 1, aes(color = factor(cyl))) +  # Regression lines\n  scale_color_manual(values = c(\"#2e3b97\", \"#faad61\", \"#b76252\")) +  # Custom colors for regression lines\n  stat_regline_equation(\n    aes(label = paste(after_stat(eq.label), after_stat(rr.label), sep = \"~~~~\")),\n    formula = y ~ x, size = 3,\n    position = position_nudge(x = 2.7, y = 1)\n  ) +  # Add regression equations and R² values\n  theme(legend.position = \"none\")  # Hide legend for cleaner visualization\n\n# Add marginal histograms to the scatterplot\np1 &lt;- ggMarginal(p, type = \"histogram\")\n\n# Display the plot\np1\n\n\n\n\n\n\n\nFigure 7: Adding Marginal Distributions Using ggMarginal()\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nCustomizable Parameters for Plots with Marginal Distributions\n\nChange the size of the marginal plot using the size parameter.\nCustomize the appearance of the marginal plot with common parameters.\nDisplay only one marginal plot (either the x or y axis) using margins = 'x' or margins = 'y'.\n\n\n\n\n# Create a scatterplot with marginal histograms\np &lt;- ggplot(mtcars, aes(x = wt, y = mpg, color = factor(cyl), size = factor(cyl))) +\n  geom_point(aes(color = factor(cyl)), show.legend = TRUE) +  # Scatter points with color mapped to cylinder\n  geom_smooth(method = 'lm', formula = y ~ x, se = TRUE, linewidth = 1, aes(color = factor(cyl))) +  # Regression lines\n  scale_color_manual(values = c(\"#2e3b97\", \"#faad61\", \"#b76252\")) +  # Custom colors for regression lines\n  stat_regline_equation(\n    aes(label = paste(after_stat(eq.label), after_stat(rr.label), sep = \"~~~~\")),\n    formula = y ~ x, size = 1.5,\n    position = position_nudge(x = 2.2, y = 1)\n  ) +  # Add regression equations and R² values\n  theme(legend.position = \"none\")  # Hide legend for cleaner visualization\n\n# Change the size of the marginal plot\np1 &lt;- ggMarginal(p, type = \"histogram\", size = 10)\n\n# Customize the appearance of the marginal plot\np2 &lt;- ggMarginal(p, type = \"histogram\", fill = \"slateblue\", xparams = list(bins = 10))\n\n# Display only one marginal plot (x-axis marginal plot)\np3 &lt;- ggMarginal(p, type = \"histogram\", margins = 'x')\n\ncowplot::plot_grid(p1, p2, p3)\n\n\n\n\n\n\n\nFigure 8: Customizable Parameters for Plots with Marginal Distributions",
    "crumbs": [
      "Distribution",
      "Histogram"
    ]
  },
  {
    "objectID": "Distribution/Histogram.html#applications",
    "href": "Distribution/Histogram.html#applications",
    "title": "Histogram",
    "section": "Applications",
    "text": "Applications\n\n1. Applications of Basic Histogram\n\n\n\n\n\n\nFigure 9: Applications of Basic Histogram\n\n\n\nFigure 9 shows the differences between the relative frequencies of human X and human Y chromosome’s histograms for n = 6. [1]\n\n\n2. Applications of Faceted Histograms\n\n\n\n\n\n\n\n\n\n\n\n(a) Xiang, L. et al.(2023)\n\n\n\n\n\n\n\n\n\n\n\n(b) Gihr, G.A. et al.(2020)\n\n\n\n\n\n\n\nFigure 10: Applications of Faceted Histograms\n\n\n\nFig. 10a shows the imaging features and whole-lesion histogram analysis of typical SPLs. [2]\nFig. 10b demonstrates examples of cranial MRI from patients with WHO grade I (upper row) and WHO grade II astrocytoma (lower row) including the corresponding whole tumor ADC histogram, H&E staining and Ki-67 immunohistochemistry. [3]",
    "crumbs": [
      "Distribution",
      "Histogram"
    ]
  },
  {
    "objectID": "Distribution/Histogram.html#reference",
    "href": "Distribution/Histogram.html#reference",
    "title": "Histogram",
    "section": "Reference",
    "text": "Reference\n\nCosta, A. M., Machado, J. T., & Quelhas, M. D. (2011). Histogram-based DNA analysis for the visualization of chromosome, genome, and species information. Bioinformatics, 27(9), 1207–1214. https://doi.org/10.1093/bioinformatics/btr131\nXiang, L., Yang, H., Qin, Y., Wen, Y., Liu, X., & Zeng, W.-B. (2023). Differential value of diffusion kurtosis imaging and intravoxel incoherent motion in benign and malignant solitary pulmonary lesions. Frontiers in Oncology, 12, Article 1075072. https://doi.org/10.3389/fonc.2022.1075072\nGihr, G. A., Horvath-Rizea, D., Hekeler, E., Ganslandt, O., Henkes, H., Hoffmann, K.-T., Scherlach, C., & Schob, S. (2020). Histogram analysis of diffusion weighted imaging in low-grade gliomas: in vivo characterization of tumor architecture and corresponding neuropathology. Frontiers in Oncology, 10, 206. https://doi.org/10.3389/fonc.2020.00206\nWickham, H., Hester J, & Bryan J. (2024). readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr\nWickham, H. (2016). ggplot2: Elegant graphics for data analysis. Springer. https://ggplot2.tidyverse.org\nGao, Y. (2021). ggExtra: Add marginal plots to ggplot2. https://cran.r-project.org/package=ggExtra\nWickham, H., & RStudio Team. (2019). tidyverse: Easily install and load the ‘tidyverse’. https://cran.r-project.org/package=tidyverse\nClaus O. Wilke. (2024). cowplot: Streamlined Plot Theme and Plot Annotations for ‘ggplot2’. https://CRAN.R-project.org/package=cowplot\nGarcía, M. (2018). viridis: Default color maps from ‘matplotlib’. https://cran.r-project.org/package=viridis\nAubry, R., & Bouchard, C. (2020). ggpmisc: Miscellaneous extensions to ‘ggplot2’. https://cran.r-project.org/package=ggpmisc\nKassambara, A. (2021). ggpubr: ‘ggplot2’ based publication-ready plots. https://cran.r-project.org/package=ggpubr",
    "crumbs": [
      "Distribution",
      "Histogram"
    ]
  },
  {
    "objectID": "Distribution/Beeswarm.html",
    "href": "Distribution/Beeswarm.html",
    "title": "Beeswarm Plot",
    "section": "",
    "text": "A beeswarm plot disperses data points slightly to prevent overlap, making distribution density and trends clearer. It is especially useful for visualizing categorical data in small datasets. This section presents examples using R and the beeswarm and ggbeeswarm packages.",
    "crumbs": [
      "Distribution",
      "Beeswarm Plot"
    ]
  },
  {
    "objectID": "Distribution/Beeswarm.html#example",
    "href": "Distribution/Beeswarm.html#example",
    "title": "Beeswarm Plot",
    "section": "Example",
    "text": "Example",
    "crumbs": [
      "Distribution",
      "Beeswarm Plot"
    ]
  },
  {
    "objectID": "Distribution/Beeswarm.html#setup",
    "href": "Distribution/Beeswarm.html#setup",
    "title": "Beeswarm Plot",
    "section": "Setup",
    "text": "Setup\n\nSystem Requirements: Cross-platform (Linux/MacOS/Windows)\nProgramming Language: R\nDependencies: readr, beeswarm, ggbeeswarm, ggsignif, plyr ,tidyverse\n\n\n# Installing necessary packages\nif (!requireNamespace(\"readr\", quietly = TRUE)) {\n  install.packages(\"readr\")\n}\nif (!requireNamespace(\"beeswarm\", quietly = TRUE)) {\n  install.packages(\"beeswarm\")\n}\nif (!requireNamespace(\"ggbeeswarm\", quietly = TRUE)) {\n  install.packages(\"ggbeeswarm\")\n}\nif (!requireNamespace(\"ggsignif\", quietly = TRUE)) {\n  install.packages(\"ggsignif\")\n}\nif (!requireNamespace(\"plyr\", quietly = TRUE)) {\n  install.packages(\"plyr\")\n}\nif (!requireNamespace(\"tidyverse\", quietly = TRUE)) {\n  install.packages(\"tidyverse\")\n}\n\n\n# Loading the libraries\nlibrary(readr)\nlibrary(beeswarm) # This simple and easy-to-use package allows the construction of bee swarm plots in R with just one or two lines of code.\nlibrary(ggbeeswarm) # This package is an extension of ggplot2, allowing direct construction of bee swarm plots from the ggplot2 package, with more adjustable options and greater flexibility, facilitating statistical difference analysis.\nlibrary(ggsignif)\nlibrary(plyr)\nlibrary(tidyverse)",
    "crumbs": [
      "Distribution",
      "Beeswarm Plot"
    ]
  },
  {
    "objectID": "Distribution/Beeswarm.html#data-preparation",
    "href": "Distribution/Beeswarm.html#data-preparation",
    "title": "Beeswarm Plot",
    "section": "Data Preparation",
    "text": "Data Preparation\nWe used the built-in R dataset (iris), along with the TCGA.LIHC.clinicalMatrix and TCGA-LIHC.star_fpkm datasets from UCSC Xena DATASETS. Selected genes were chosen for demonstration purposes.\n\n# Load iris dataset\ndata(\"iris\")\n\n# Load the TCGA-LIHC gene expression dataset from a processed CSV file  \nTCGA_gene_expression &lt;- read.csv(\"files/TCGA-LIHC.star_fpkm_processed.csv\")\n\n# Load the TCGA-LIHC clinical info dataset\nTCGA_clinic &lt;- read.csv(\"files/TCGA.LIHC.clinicalMatrix.csv\") %&gt;%\n  mutate(T = as.factor(T))\n\n#Prepare Statistics data\ndata_summary &lt;- function(data, varname, groupnames) {\n  summary_func &lt;- function(x, col) {\n    c(mean = mean(x[[col]], na.rm = TRUE),\n      sd = sd(x[[col]], na.rm = TRUE))\n  }\n  data_sum &lt;- ddply(data, groupnames, .fun = summary_func, varname)\n  \n  data_sum &lt;- rename_with(data_sum, ~ varname, \"mean\")\n  \n  return(data_sum)\n}\niris_sum &lt;- data_summary(iris, varname=\"Sepal.Length\", groupnames=\"Species\")\nTCGA_gene_sum &lt;- data_summary(TCGA_gene_expression, varname=\"gene_expression\", groupnames=\"sample\")",
    "crumbs": [
      "Distribution",
      "Beeswarm Plot"
    ]
  },
  {
    "objectID": "Distribution/Beeswarm.html#visualization",
    "href": "Distribution/Beeswarm.html#visualization",
    "title": "Beeswarm Plot",
    "section": "Visualization",
    "text": "Visualization\n\n1. Basic Beeswarm Plot (beeswarm package)\nFigure 1 illustrates the distribution of the Sepal.Length variable in the iris dataset.\n\np1 &lt;- beeswarm(iris$Sepal.Length)\n\n\n\n\n\n\n\nFigure 1: Basic Beeswarm\n\n\n\n\n\nFigure 2 illustrates the distribution of the expression levels of the RAB4B gene in the LICH database.\n\nTCGA_gene_expression_RAB4B &lt;- subset(TCGA_gene_expression, sample == \"RAB4B\")\np1_2 &lt;- beeswarm(TCGA_gene_expression_RAB4B$gene_expression)\n\n\n\n\n\n\n\nFigure 2: Basic Beeswarm\n\n\n\n\n\n\n\n2. Flipping the Beeswarm Plot (beeswarm package)\nFigure 3 illustrates the distribution of the OS.time variable in TCGA dataset.\n\np2 &lt;- beeswarm(TCGA_clinic$OS.time, horizontal=TRUE)\n\n\n\n\n\n\n\nFigure 3: Flipping the Beeswarm\n\n\n\n\n\n\n\n3. Changing Basic Features of the Beeswarm Plot (beeswarm package)\n\n\n\n\n\n\nTip\n\n\n\nKey Parameters:\n(1) Color\nBy modifying the col parameter, we can change the color of the points.\n(2) the Symbol of Points\nThe pch parameter allows the symbol of the points to be changed.\n(3) the Size of Points\nThe cex parameter allows the size of the points to be changed.\n(4) the Position of Points\nThe method parameter allows the position of the points to be changed. The available options are:\n\nswarm (default): Points are randomly placed but do not overlap.\ncenter: Points are symmetrically distributed around the center of the chart.\nhex: Points are placed on a hexagonal grid.\nsquare: Points are located on a square grid.\n\n\n\nFigure 4 illustrates the distribution of the Sepal.Length variable in the iris dataset.\n\np3_1 &lt;- beeswarm(iris$Sepal.Length,col= \"blue\",pch=16,\n         cex=1.5,method=\"center\" )\n\n\n\n\n\n\n\nFigure 4: Basic Features\n\n\n\n\n\nFigure 5 illustrates the distribution of the OS.time variable in TCGA dataset.\n\np3_2 &lt;- beeswarm(TCGA_clinic$OS.time,col= \"blue\",pch=16,\n         cex=1.5,method=\"center\" )\n\n\n\n\n\n\n\nFigure 5: Basic Features\n\n\n\n\n\n\n\n4. Grouping (beeswarm package)\nUsing the ~ operator, we can easily create a grouped bee swarm plot.\nFigure 6 illustrates the distribution of the Sepal.Length variable across different Species.\n\np4_1 &lt;- beeswarm( Sepal.Length ~ Species, data=iris, \n         col=c(\"orange\", \"lightblue\", \"magenta\"), pch =19)\n\n\n\n\n\n\n\nFigure 6: grouping\n\n\n\n\n\nFigure 7 illustrates the distribution of the OS.time variable across different tumor stages.\n\np4_2 &lt;- beeswarm(OS.time ~ T, data=TCGA_clinic, \n         col=c(\"orange\", \"lightblue\", \"magenta\"), pch =19)\n\n\n\n\n\n\n\nFigure 7: grouping\n\n\n\n\n\n\n\n5. Custom Position Behavior (beeswarm package)\n\n\n\n\n\n\nTip\n\n\n\nWhen there are many data points, changing the position behavior of the points can prevent overlap between groups.\nThe available options are:\n\nnone (default): No correction is applied.\ngutter: Sets higher and lower limits for each group.\nwrap: Similar to gutter, but adds random noise to the position of the points.\nrandom: Randomly positions the points.\nomit: Omits overlapping points.\n\n\n\nFigure 8 illustrates the distribution of the Sepal.Length variable across different Species.\n\np5_1 &lt;- beeswarm( Sepal.Length ~ Species, data=iris,\n         col=c(\"orange\", \"lightblue\", \"magenta\"), pch =19,corral =\"gutter\")\n\n\n\n\n\n\n\nFigure 8: Custom Position Behavior\n\n\n\n\n\nFigure 9 illustrates the distribution of the OS.time variable across different tumor stages.\n\np5_2 &lt;- beeswarm( OS.time ~ T, data=TCGA_clinic, \n         col=c(\"orange\", \"lightblue\", \"magenta\"), pch =15,corral = \"gutter\")\n\n\n\n\n\n\n\nFigure 9: Custom Position Behavior\n\n\n\n\n\n\n\n6. Basic Beeswarm (ggbeeswarm package)\nFigure 10 illustrates the distribution of the Sepal.Length variable in the iris dataset.\n\np6_1 &lt;- ggplot(iris,aes(y=Sepal.Length,x='')) + \n  geom_beeswarm()\np6_1\n\n\n\n\n\n\n\nFigure 10: Basic Beeswarm\n\n\n\n\n\nFigure 11 illustrates the distribution of the OS.time variable in TCGA dataset.\n\np6_2 &lt;- ggplot(TCGA_clinic,aes(y=OS.time,x='')) + \n  geom_beeswarm()\np6_2\n\n\n\n\n\n\n\nFigure 11: Basic Beeswarm\n\n\n\n\n\n\n\n7. Flipping the Beeswarm Plot (ggbeeswarm package)\nFigure 12 illustrates the distribution of the Sepal.Length variable in the iris dataset.\n\np7_1 &lt;- ggplot(iris,aes(x=Sepal.Length,y='')) +\n  geom_beeswarm()\np7_1\n\n\n\n\n\n\n\nFigure 12: Flipping the Beeswarm\n\n\n\n\n\nFigure 13 illustrates the distribution of the OS.time variable in TCGA dataset.\n\np7_2 &lt;- ggplot(TCGA_clinic,aes(x=OS.time,y='')) + \n  geom_beeswarm()\np7_2\n\n\n\n\n\n\n\nFigure 13: Flipping the Beeswarm\n\n\n\n\n\n\n\n8. Customization of the Beeswarm Plot (ggbeeswarm package)\n\n\n\n\n\n\nTip\n\n\n\nKey Parameters:\nWe can use the theme() function to change the color of the points and the overall theme of the chart.\n\n\nFigure 14 illustrates the distribution of the Sepal.Length variable in the iris dataset.\n\np8_1 &lt;- ggplot(iris,aes(y=Sepal.Length,x='')) +  \n  geom_beeswarm(color='blue') +    \n  theme_minimal()\np8_1\n\n\n\n\n\n\n\nFigure 14: Changing Basic Features\n\n\n\n\n\nFigure 15 illustrates the distribution of the OS.time variable in TCGA dataset.\n\np8_2 &lt;- ggplot(TCGA_clinic,aes(y=OS.time,x='')) + \n  geom_beeswarm(color='blue') +    \n  theme_minimal()\np8_2\n\n\n\n\n\n\n\nFigure 15: Changing Basic Features\n\n\n\n\n\n\n\n9. Changing the Position of Points (ggbeeswarm package)\nBy default, the geom_beeswarm() function uses the swarm method to position the points. We can change this behavior using the method parameter. The available options are:\n\nswarm: The default method.\ncompactswarm: Similar to swarm, but the points are more compact.\ncenter: Points are centered on the x-axis.\nhex: Points are located within hexagons.\nsquare: Points are located within squares.\n\nFigure 16 illustrates the distribution of the Sepal.Length variable across different Species.\n\np9_1 &lt;- ggplot(iris,aes(y=Sepal.Length,x='')) +\n   geom_beeswarm(method='center')\np9_1\n\n\n\n\n\n\n\nFigure 16: Changing the Position of Points\n\n\n\n\n\n\n\n10. Customizing the Color of Points (ggbeeswarm package)\nWe can also use the scale_color_manual() function to customize the colors. Additionally, the theme_minimal() function can make the chart look more elegant.\nFigure 17 illustrates the distribution of the OS.time variable across different tumor stages.\n\np10_1 &lt;- ggplot(TCGA_clinic,aes(x=T, y=OS.time, colour=T)) +\n  geom_beeswarm() + \n  scale_color_manual(values=c(\"#999999\", \"#E69F00\", \"#56B4E9\",\"blue\")) +  \n  theme_minimal()\np10_1\n\n\n\n\n\n\n\nFigure 17: Customizing the Color of Points\n\n\n\n\n\n\n\n11. Grouping and Adding Statistical Analysis (ggbeeswarm package)\nFigure 18 illustrates the distribution of the Sepal.Length variable in the iris dataset.\n\np11_1 &lt;- ggplot()+\n  geom_bar(iris_sum,\n           mapping=aes(x=Species,y=Sepal.Length,fill=Species),\n           stat=\"identity\",width=.6,\n           alpha=0.5,position=position_dodge())+\n  geom_errorbar(iris_sum,\n                mapping=aes(x=Species,y=Sepal.Length,\n                            ymin=Sepal.Length-sd,\n                            ymax=Sepal.Length+sd),\n                width=.4,position=position_dodge(.8))+\n  geom_beeswarm(iris,\n                mapping=aes(x=Species,y=Sepal.Length,fill=Species),\n                shape=21,color='black',size=3.5,cex=1.2,stroke=0.6)+\n  geom_signif(iris,\n              mapping=aes(x=Species,y=Sepal.Length),\n              comparisons=list(c(\"setosa\",\"versicolor\"),c(\"setosa\",\"virginica\")),\n              test=\"t.test\",step_increase=0.2,tip_length=0,textsize=6,size=1,\n              map_signif_level=T)\np11_1\n\n\n\n\n\n\n\nFigure 18: Grouping\n\n\n\n\n\nFigure 19 illustrates the gene expression data of three genes in liver cancer.\n\np11_2 &lt;- ggplot()+\n  geom_bar(TCGA_gene_sum,\n           mapping=aes(x=sample,y=gene_expression,fill=sample),\n           stat=\"identity\",width=.6,alpha=0.5,position=position_dodge())+\n geom_errorbar(TCGA_gene_sum,\n               mapping=aes(x=sample,y=gene_expression,\n                           ymin=gene_expression-sd,ymax=gene_expression+sd),\n                          width=.4,position=position_dodge(.8))+\n geom_beeswarm(TCGA_gene_expression,\n               mapping=aes(x=sample,y=gene_expression,fill=sample),\n               shape=21,color='black',size=3.5,cex=1.2,stroke=0.6)+\n  geom_signif(TCGA_gene_expression,\n              mapping=aes(x=sample,y=gene_expression),\n              comparisons=list(c(\"RAB4B\",\"TIGAR\"),c(\"RAB4B\",\"RNF44\"),c(\"TIGAR\",\"RNF44\")),\n              test=\"t.test\",step_increase=0.2, tip_length=0,textsize=6,\n              size=1,map_signif_level=T)\np11_2\n\n\n\n\n\n\n\nFigure 19: Grouping",
    "crumbs": [
      "Distribution",
      "Beeswarm Plot"
    ]
  },
  {
    "objectID": "Distribution/Beeswarm.html#applications",
    "href": "Distribution/Beeswarm.html#applications",
    "title": "Beeswarm Plot",
    "section": "Applications",
    "text": "Applications\n\n1. Display Cell Density\n\n\n\n\n\n\nFigure 20: Applications of Beeswarm Plot\n\n\n\nThe beeswarm plot shows the density of CD8+T cells in tumors with high or low FOLR2+cell density.[1]\n\n\n2.Displaying Gene Expression Data Across Different Samples\n\n\n\n\n\n\nFigure 21: Applications of Beeswarm Plot\n\n\n\nThe beeswarm plot shows the distribution of gene expression levels at different structural variation (SV) sites.[2]",
    "crumbs": [
      "Distribution",
      "Beeswarm Plot"
    ]
  },
  {
    "objectID": "Distribution/Beeswarm.html#reference",
    "href": "Distribution/Beeswarm.html#reference",
    "title": "Beeswarm Plot",
    "section": "Reference",
    "text": "Reference\n1.Nalio Ramos R,Missolo-Koussou Y,Gerber-Ferder Y, et al. Tissue-resident FOLR2 + macrophages associate with CD8 + T cell infiltration in human breast cancer. Cell. 2022;185 (7):1189-1207.e25. doi:10.1016/j.cell.2022.02.021\n2.Zhou Y,Zhang Z,Bao Z, et al. Graph pangenome captures missing heritability and empowers tomato breeding. Nature. 2022;606 (7914):527-534. doi:10.1038/s41586-022-04808-9\n3.Wickham, H. (2009). ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. ISBN 978-0-387-98140-6 (Print) 978-0-387-98141-3 (E-Book). [DOI: 10.1007/978-0-387-98141-3] (https://doi.org/10.1007/978-0-387-98141-3)\n4.Erik Clarke, Scott Sherrill-Mix, Charlotte Dawson (2023). ggbeeswarm: Categorical Scatter (Violin Point) Plots. R package version 0.7.2. https://CRAN.R-project.org/package=ggbeeswarm\n5.Aron Eklund, James Trimble (2021). beeswarm: The Bee Swarm Plot, an Alternative to Stripchart. R package version 0.4.0. https://CRAN.R-project.org/package=beeswarm\n6.Wickham, H. (2017). dplyr: A Grammar of Data Manipulation (Version 0.7.4). Retrieved from https://CRAN.R-project.org/package=dplyr\n7.Huber, W., Carey, V. J., Gentleman, R., Anders, S., & Carlson, M. (2015). Bioconductor: Support for the analysis and comprehension of high-throughput genomic data. R package version 3.2. F1000Research, 4, 1-22. Retrieved from https://www.bioconductor.org/ 54^\n8.The R Graph Gallery – Help and inspiration for R charts (r-graph-gallery.com)",
    "crumbs": [
      "Distribution",
      "Beeswarm Plot"
    ]
  }
]